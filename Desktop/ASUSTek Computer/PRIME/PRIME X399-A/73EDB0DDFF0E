
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00002C23  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "AMD A "  "A M I   "  0x03242016  "MSFT"   0x00010013
 03)  APIC  0x0000046A  0x03  "AMD   "  "A M I   "  0x03242016  "AMI "   0x00010013
 04)  CRAT  0x00001DF8  0x01  "AMD   "  "AMD CRAT"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x000000F8  0x01  "AMD AM"  "AMD PT  "  0x00001000  "INTL"   0x20120913
 06)  VFCT  0x0000E884  0x01  "AMD   "  "A M I   "  0x00000001  "AMD "   0x31504F47
 07)  CDIT  0x00000029  0x01  "AMD   "  "AMD CDIT"  0x00000001  "AMD "   0x00000001
 08)  UEFI  0x00000042  0x01  "AMD   "  "A M I   "  0x00000002  "    "   0x01000013
 09)  IVRS  0x00000130  0x02  "AMD   "  "AMD IVRS"  0x00000001  "AMD "   0x00000000
 10)  DSDT  0x00011D67  0x02  "AMD   "  "A M I   "  0x03242016  "INTL"   0x20120913
 11)  SSDT  0x00001A41  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 12)  SSDT  0x00004604  0x01  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 13)  SSDT  0x00008C4C  0x02  "AMD   "  "AMD ALIB"  0x00000002  "MSFT"   0x04000000
 14)  FACP  0x00000114  0x06  "AMD   "  "A M I   "  0x03242016  "AMI "   0x00010013
 15)  FPDT  0x00000044  0x01  "AMD   "  "A M I   "  0x03242016  "AMI "   0x00010013
 16)  SSDT  0x000001CC  0x02  "AMD   "  "CPUSSDT "  0x03242016  "AMI "   0x03242016
 17)  HPET  0x00000038  0x01  "AMD A "  "A M I   "  0x03242016  "AMI "   0x00000005
 18)  SSDT  0x00000024  0x01  "AMDFCH"  "FCHZP   "  0x00001000  "INTL"   0x20120913
 19)  FIDT  0x0000009C  0x01  "AMD   "  "A M I   "  0x03242016  "AMI "   0x00010013
 20)  FACS  0x00000040  0x02
 21)  BGRT  0x00000038  0x01  "AMD   "  "A M I   "  0x03242016  "AMI "   0x00010013

Found 21 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000046A
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 10
[06Fh 0111   1]                Local Apic ID : 10
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 12
[077h 0119   1]                Local Apic ID : 12
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 14
[07Fh 0127   1]                Local Apic ID : 14
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 16
[087h 0135   1]                Local Apic ID : 16
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 18
[08Fh 0143   1]                Local Apic ID : 18
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 1A
[097h 0151   1]                Local Apic ID : 1A
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 1C
[09Fh 0159   1]                Local Apic ID : 1C
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 1E
[0A7h 0167   1]                Local Apic ID : 1E
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 01
[0AFh 0175   1]                Local Apic ID : 01
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 03
[0B7h 0183   1]                Local Apic ID : 03
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 05
[0BFh 0191   1]                Local Apic ID : 05
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 07
[0C7h 0199   1]                Local Apic ID : 07
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 09
[0CFh 0207   1]                Local Apic ID : 09
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 0B
[0D7h 0215   1]                Local Apic ID : 0B
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 0D
[0DFh 0223   1]                Local Apic ID : 0D
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 0F
[0E7h 0231   1]                Local Apic ID : 0F
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 11
[0EFh 0239   1]                Local Apic ID : 11
[0F0h 0240   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 13
[0F7h 0247   1]                Local Apic ID : 13
[0F8h 0248   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 15
[0FFh 0255   1]                Local Apic ID : 15
[100h 0256   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 17
[107h 0263   1]                Local Apic ID : 17
[108h 0264   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 19
[10Fh 0271   1]                Local Apic ID : 19
[110h 0272   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1B
[117h 0279   1]                Local Apic ID : 1B
[118h 0280   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1D
[11Fh 0287   1]                Local Apic ID : 1D
[120h 0288   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 1F
[128h 0296   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 00 [Processor Local APIC]
[12Dh 0301   1]                       Length : 08
[12Eh 0302   1]                 Processor ID : 20
[12Fh 0303   1]                Local Apic ID : 00
[130h 0304   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[134h 0308   1]                Subtable Type : 00 [Processor Local APIC]
[135h 0309   1]                       Length : 08
[136h 0310   1]                 Processor ID : 21
[137h 0311   1]                Local Apic ID : 00
[138h 0312   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[13Ch 0316   1]                Subtable Type : 00 [Processor Local APIC]
[13Dh 0317   1]                       Length : 08
[13Eh 0318   1]                 Processor ID : 22
[13Fh 0319   1]                Local Apic ID : 00
[140h 0320   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[144h 0324   1]                Subtable Type : 00 [Processor Local APIC]
[145h 0325   1]                       Length : 08
[146h 0326   1]                 Processor ID : 23
[147h 0327   1]                Local Apic ID : 00
[148h 0328   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[14Ch 0332   1]                Subtable Type : 00 [Processor Local APIC]
[14Dh 0333   1]                       Length : 08
[14Eh 0334   1]                 Processor ID : 24
[14Fh 0335   1]                Local Apic ID : 00
[150h 0336   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[154h 0340   1]                Subtable Type : 00 [Processor Local APIC]
[155h 0341   1]                       Length : 08
[156h 0342   1]                 Processor ID : 25
[157h 0343   1]                Local Apic ID : 00
[158h 0344   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[15Ch 0348   1]                Subtable Type : 00 [Processor Local APIC]
[15Dh 0349   1]                       Length : 08
[15Eh 0350   1]                 Processor ID : 26
[15Fh 0351   1]                Local Apic ID : 00
[160h 0352   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[164h 0356   1]                Subtable Type : 00 [Processor Local APIC]
[165h 0357   1]                       Length : 08
[166h 0358   1]                 Processor ID : 27
[167h 0359   1]                Local Apic ID : 00
[168h 0360   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[16Ch 0364   1]                Subtable Type : 00 [Processor Local APIC]
[16Dh 0365   1]                       Length : 08
[16Eh 0366   1]                 Processor ID : 28
[16Fh 0367   1]                Local Apic ID : 00
[170h 0368   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[174h 0372   1]                Subtable Type : 00 [Processor Local APIC]
[175h 0373   1]                       Length : 08
[176h 0374   1]                 Processor ID : 29
[177h 0375   1]                Local Apic ID : 00
[178h 0376   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[17Ch 0380   1]                Subtable Type : 00 [Processor Local APIC]
[17Dh 0381   1]                       Length : 08
[17Eh 0382   1]                 Processor ID : 2A
[17Fh 0383   1]                Local Apic ID : 00
[180h 0384   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[184h 0388   1]                Subtable Type : 00 [Processor Local APIC]
[185h 0389   1]                       Length : 08
[186h 0390   1]                 Processor ID : 2B
[187h 0391   1]                Local Apic ID : 00
[188h 0392   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[18Ch 0396   1]                Subtable Type : 00 [Processor Local APIC]
[18Dh 0397   1]                       Length : 08
[18Eh 0398   1]                 Processor ID : 2C
[18Fh 0399   1]                Local Apic ID : 00
[190h 0400   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[194h 0404   1]                Subtable Type : 00 [Processor Local APIC]
[195h 0405   1]                       Length : 08
[196h 0406   1]                 Processor ID : 2D
[197h 0407   1]                Local Apic ID : 00
[198h 0408   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[19Ch 0412   1]                Subtable Type : 00 [Processor Local APIC]
[19Dh 0413   1]                       Length : 08
[19Eh 0414   1]                 Processor ID : 2E
[19Fh 0415   1]                Local Apic ID : 00
[1A0h 0416   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1A4h 0420   1]                Subtable Type : 00 [Processor Local APIC]
[1A5h 0421   1]                       Length : 08
[1A6h 0422   1]                 Processor ID : 2F
[1A7h 0423   1]                Local Apic ID : 00
[1A8h 0424   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1ACh 0428   1]                Subtable Type : 00 [Processor Local APIC]
[1ADh 0429   1]                       Length : 08
[1AEh 0430   1]                 Processor ID : 30
[1AFh 0431   1]                Local Apic ID : 00
[1B0h 0432   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1B4h 0436   1]                Subtable Type : 00 [Processor Local APIC]
[1B5h 0437   1]                       Length : 08
[1B6h 0438   1]                 Processor ID : 31
[1B7h 0439   1]                Local Apic ID : 00
[1B8h 0440   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1BCh 0444   1]                Subtable Type : 00 [Processor Local APIC]
[1BDh 0445   1]                       Length : 08
[1BEh 0446   1]                 Processor ID : 32
[1BFh 0447   1]                Local Apic ID : 00
[1C0h 0448   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1C4h 0452   1]                Subtable Type : 00 [Processor Local APIC]
[1C5h 0453   1]                       Length : 08
[1C6h 0454   1]                 Processor ID : 33
[1C7h 0455   1]                Local Apic ID : 00
[1C8h 0456   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1CCh 0460   1]                Subtable Type : 00 [Processor Local APIC]
[1CDh 0461   1]                       Length : 08
[1CEh 0462   1]                 Processor ID : 34
[1CFh 0463   1]                Local Apic ID : 00
[1D0h 0464   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1D4h 0468   1]                Subtable Type : 00 [Processor Local APIC]
[1D5h 0469   1]                       Length : 08
[1D6h 0470   1]                 Processor ID : 35
[1D7h 0471   1]                Local Apic ID : 00
[1D8h 0472   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1DCh 0476   1]                Subtable Type : 00 [Processor Local APIC]
[1DDh 0477   1]                       Length : 08
[1DEh 0478   1]                 Processor ID : 36
[1DFh 0479   1]                Local Apic ID : 00
[1E0h 0480   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1E4h 0484   1]                Subtable Type : 00 [Processor Local APIC]
[1E5h 0485   1]                       Length : 08
[1E6h 0486   1]                 Processor ID : 37
[1E7h 0487   1]                Local Apic ID : 00
[1E8h 0488   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1ECh 0492   1]                Subtable Type : 00 [Processor Local APIC]
[1EDh 0493   1]                       Length : 08
[1EEh 0494   1]                 Processor ID : 38
[1EFh 0495   1]                Local Apic ID : 00
[1F0h 0496   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1F4h 0500   1]                Subtable Type : 00 [Processor Local APIC]
[1F5h 0501   1]                       Length : 08
[1F6h 0502   1]                 Processor ID : 39
[1F7h 0503   1]                Local Apic ID : 00
[1F8h 0504   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[1FCh 0508   1]                Subtable Type : 00 [Processor Local APIC]
[1FDh 0509   1]                       Length : 08
[1FEh 0510   1]                 Processor ID : 3A
[1FFh 0511   1]                Local Apic ID : 00
[200h 0512   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[204h 0516   1]                Subtable Type : 00 [Processor Local APIC]
[205h 0517   1]                       Length : 08
[206h 0518   1]                 Processor ID : 3B
[207h 0519   1]                Local Apic ID : 00
[208h 0520   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[20Ch 0524   1]                Subtable Type : 00 [Processor Local APIC]
[20Dh 0525   1]                       Length : 08
[20Eh 0526   1]                 Processor ID : 3C
[20Fh 0527   1]                Local Apic ID : 00
[210h 0528   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[214h 0532   1]                Subtable Type : 00 [Processor Local APIC]
[215h 0533   1]                       Length : 08
[216h 0534   1]                 Processor ID : 3D
[217h 0535   1]                Local Apic ID : 00
[218h 0536   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[21Ch 0540   1]                Subtable Type : 00 [Processor Local APIC]
[21Dh 0541   1]                       Length : 08
[21Eh 0542   1]                 Processor ID : 3E
[21Fh 0543   1]                Local Apic ID : 00
[220h 0544   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[224h 0548   1]                Subtable Type : 00 [Processor Local APIC]
[225h 0549   1]                       Length : 08
[226h 0550   1]                 Processor ID : 3F
[227h 0551   1]                Local Apic ID : 00
[228h 0552   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[22Ch 0556   1]                Subtable Type : 00 [Processor Local APIC]
[22Dh 0557   1]                       Length : 08
[22Eh 0558   1]                 Processor ID : 40
[22Fh 0559   1]                Local Apic ID : 00
[230h 0560   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[234h 0564   1]                Subtable Type : 00 [Processor Local APIC]
[235h 0565   1]                       Length : 08
[236h 0566   1]                 Processor ID : 41
[237h 0567   1]                Local Apic ID : 00
[238h 0568   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[23Ch 0572   1]                Subtable Type : 00 [Processor Local APIC]
[23Dh 0573   1]                       Length : 08
[23Eh 0574   1]                 Processor ID : 42
[23Fh 0575   1]                Local Apic ID : 00
[240h 0576   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[244h 0580   1]                Subtable Type : 00 [Processor Local APIC]
[245h 0581   1]                       Length : 08
[246h 0582   1]                 Processor ID : 43
[247h 0583   1]                Local Apic ID : 00
[248h 0584   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[24Ch 0588   1]                Subtable Type : 00 [Processor Local APIC]
[24Dh 0589   1]                       Length : 08
[24Eh 0590   1]                 Processor ID : 44
[24Fh 0591   1]                Local Apic ID : 00
[250h 0592   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[254h 0596   1]                Subtable Type : 00 [Processor Local APIC]
[255h 0597   1]                       Length : 08
[256h 0598   1]                 Processor ID : 45
[257h 0599   1]                Local Apic ID : 00
[258h 0600   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[25Ch 0604   1]                Subtable Type : 00 [Processor Local APIC]
[25Dh 0605   1]                       Length : 08
[25Eh 0606   1]                 Processor ID : 46
[25Fh 0607   1]                Local Apic ID : 00
[260h 0608   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[264h 0612   1]                Subtable Type : 00 [Processor Local APIC]
[265h 0613   1]                       Length : 08
[266h 0614   1]                 Processor ID : 47
[267h 0615   1]                Local Apic ID : 00
[268h 0616   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[26Ch 0620   1]                Subtable Type : 00 [Processor Local APIC]
[26Dh 0621   1]                       Length : 08
[26Eh 0622   1]                 Processor ID : 48
[26Fh 0623   1]                Local Apic ID : 00
[270h 0624   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[274h 0628   1]                Subtable Type : 00 [Processor Local APIC]
[275h 0629   1]                       Length : 08
[276h 0630   1]                 Processor ID : 49
[277h 0631   1]                Local Apic ID : 00
[278h 0632   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[27Ch 0636   1]                Subtable Type : 00 [Processor Local APIC]
[27Dh 0637   1]                       Length : 08
[27Eh 0638   1]                 Processor ID : 4A
[27Fh 0639   1]                Local Apic ID : 00
[280h 0640   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[284h 0644   1]                Subtable Type : 00 [Processor Local APIC]
[285h 0645   1]                       Length : 08
[286h 0646   1]                 Processor ID : 4B
[287h 0647   1]                Local Apic ID : 00
[288h 0648   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[28Ch 0652   1]                Subtable Type : 00 [Processor Local APIC]
[28Dh 0653   1]                       Length : 08
[28Eh 0654   1]                 Processor ID : 4C
[28Fh 0655   1]                Local Apic ID : 00
[290h 0656   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[294h 0660   1]                Subtable Type : 00 [Processor Local APIC]
[295h 0661   1]                       Length : 08
[296h 0662   1]                 Processor ID : 4D
[297h 0663   1]                Local Apic ID : 00
[298h 0664   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[29Ch 0668   1]                Subtable Type : 00 [Processor Local APIC]
[29Dh 0669   1]                       Length : 08
[29Eh 0670   1]                 Processor ID : 4E
[29Fh 0671   1]                Local Apic ID : 00
[2A0h 0672   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2A4h 0676   1]                Subtable Type : 00 [Processor Local APIC]
[2A5h 0677   1]                       Length : 08
[2A6h 0678   1]                 Processor ID : 4F
[2A7h 0679   1]                Local Apic ID : 00
[2A8h 0680   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2ACh 0684   1]                Subtable Type : 00 [Processor Local APIC]
[2ADh 0685   1]                       Length : 08
[2AEh 0686   1]                 Processor ID : 50
[2AFh 0687   1]                Local Apic ID : 00
[2B0h 0688   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2B4h 0692   1]                Subtable Type : 00 [Processor Local APIC]
[2B5h 0693   1]                       Length : 08
[2B6h 0694   1]                 Processor ID : 51
[2B7h 0695   1]                Local Apic ID : 00
[2B8h 0696   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2BCh 0700   1]                Subtable Type : 00 [Processor Local APIC]
[2BDh 0701   1]                       Length : 08
[2BEh 0702   1]                 Processor ID : 52
[2BFh 0703   1]                Local Apic ID : 00
[2C0h 0704   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2C4h 0708   1]                Subtable Type : 00 [Processor Local APIC]
[2C5h 0709   1]                       Length : 08
[2C6h 0710   1]                 Processor ID : 53
[2C7h 0711   1]                Local Apic ID : 00
[2C8h 0712   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2CCh 0716   1]                Subtable Type : 00 [Processor Local APIC]
[2CDh 0717   1]                       Length : 08
[2CEh 0718   1]                 Processor ID : 54
[2CFh 0719   1]                Local Apic ID : 00
[2D0h 0720   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2D4h 0724   1]                Subtable Type : 00 [Processor Local APIC]
[2D5h 0725   1]                       Length : 08
[2D6h 0726   1]                 Processor ID : 55
[2D7h 0727   1]                Local Apic ID : 00
[2D8h 0728   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2DCh 0732   1]                Subtable Type : 00 [Processor Local APIC]
[2DDh 0733   1]                       Length : 08
[2DEh 0734   1]                 Processor ID : 56
[2DFh 0735   1]                Local Apic ID : 00
[2E0h 0736   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2E4h 0740   1]                Subtable Type : 00 [Processor Local APIC]
[2E5h 0741   1]                       Length : 08
[2E6h 0742   1]                 Processor ID : 57
[2E7h 0743   1]                Local Apic ID : 00
[2E8h 0744   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2ECh 0748   1]                Subtable Type : 00 [Processor Local APIC]
[2EDh 0749   1]                       Length : 08
[2EEh 0750   1]                 Processor ID : 58
[2EFh 0751   1]                Local Apic ID : 00
[2F0h 0752   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2F4h 0756   1]                Subtable Type : 00 [Processor Local APIC]
[2F5h 0757   1]                       Length : 08
[2F6h 0758   1]                 Processor ID : 59
[2F7h 0759   1]                Local Apic ID : 00
[2F8h 0760   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2FCh 0764   1]                Subtable Type : 00 [Processor Local APIC]
[2FDh 0765   1]                       Length : 08
[2FEh 0766   1]                 Processor ID : 5A
[2FFh 0767   1]                Local Apic ID : 00
[300h 0768   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[304h 0772   1]                Subtable Type : 00 [Processor Local APIC]
[305h 0773   1]                       Length : 08
[306h 0774   1]                 Processor ID : 5B
[307h 0775   1]                Local Apic ID : 00
[308h 0776   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[30Ch 0780   1]                Subtable Type : 00 [Processor Local APIC]
[30Dh 0781   1]                       Length : 08
[30Eh 0782   1]                 Processor ID : 5C
[30Fh 0783   1]                Local Apic ID : 00
[310h 0784   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[314h 0788   1]                Subtable Type : 00 [Processor Local APIC]
[315h 0789   1]                       Length : 08
[316h 0790   1]                 Processor ID : 5D
[317h 0791   1]                Local Apic ID : 00
[318h 0792   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[31Ch 0796   1]                Subtable Type : 00 [Processor Local APIC]
[31Dh 0797   1]                       Length : 08
[31Eh 0798   1]                 Processor ID : 5E
[31Fh 0799   1]                Local Apic ID : 00
[320h 0800   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[324h 0804   1]                Subtable Type : 00 [Processor Local APIC]
[325h 0805   1]                       Length : 08
[326h 0806   1]                 Processor ID : 5F
[327h 0807   1]                Local Apic ID : 00
[328h 0808   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[32Ch 0812   1]                Subtable Type : 00 [Processor Local APIC]
[32Dh 0813   1]                       Length : 08
[32Eh 0814   1]                 Processor ID : 60
[32Fh 0815   1]                Local Apic ID : 00
[330h 0816   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[334h 0820   1]                Subtable Type : 00 [Processor Local APIC]
[335h 0821   1]                       Length : 08
[336h 0822   1]                 Processor ID : 61
[337h 0823   1]                Local Apic ID : 00
[338h 0824   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[33Ch 0828   1]                Subtable Type : 00 [Processor Local APIC]
[33Dh 0829   1]                       Length : 08
[33Eh 0830   1]                 Processor ID : 62
[33Fh 0831   1]                Local Apic ID : 00
[340h 0832   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[344h 0836   1]                Subtable Type : 00 [Processor Local APIC]
[345h 0837   1]                       Length : 08
[346h 0838   1]                 Processor ID : 63
[347h 0839   1]                Local Apic ID : 00
[348h 0840   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[34Ch 0844   1]                Subtable Type : 00 [Processor Local APIC]
[34Dh 0845   1]                       Length : 08
[34Eh 0846   1]                 Processor ID : 64
[34Fh 0847   1]                Local Apic ID : 00
[350h 0848   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[354h 0852   1]                Subtable Type : 00 [Processor Local APIC]
[355h 0853   1]                       Length : 08
[356h 0854   1]                 Processor ID : 65
[357h 0855   1]                Local Apic ID : 00
[358h 0856   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[35Ch 0860   1]                Subtable Type : 00 [Processor Local APIC]
[35Dh 0861   1]                       Length : 08
[35Eh 0862   1]                 Processor ID : 66
[35Fh 0863   1]                Local Apic ID : 00
[360h 0864   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[364h 0868   1]                Subtable Type : 00 [Processor Local APIC]
[365h 0869   1]                       Length : 08
[366h 0870   1]                 Processor ID : 67
[367h 0871   1]                Local Apic ID : 00
[368h 0872   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[36Ch 0876   1]                Subtable Type : 00 [Processor Local APIC]
[36Dh 0877   1]                       Length : 08
[36Eh 0878   1]                 Processor ID : 68
[36Fh 0879   1]                Local Apic ID : 00
[370h 0880   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[374h 0884   1]                Subtable Type : 00 [Processor Local APIC]
[375h 0885   1]                       Length : 08
[376h 0886   1]                 Processor ID : 69
[377h 0887   1]                Local Apic ID : 00
[378h 0888   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[37Ch 0892   1]                Subtable Type : 00 [Processor Local APIC]
[37Dh 0893   1]                       Length : 08
[37Eh 0894   1]                 Processor ID : 6A
[37Fh 0895   1]                Local Apic ID : 00
[380h 0896   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[384h 0900   1]                Subtable Type : 00 [Processor Local APIC]
[385h 0901   1]                       Length : 08
[386h 0902   1]                 Processor ID : 6B
[387h 0903   1]                Local Apic ID : 00
[388h 0904   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[38Ch 0908   1]                Subtable Type : 00 [Processor Local APIC]
[38Dh 0909   1]                       Length : 08
[38Eh 0910   1]                 Processor ID : 6C
[38Fh 0911   1]                Local Apic ID : 00
[390h 0912   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[394h 0916   1]                Subtable Type : 00 [Processor Local APIC]
[395h 0917   1]                       Length : 08
[396h 0918   1]                 Processor ID : 6D
[397h 0919   1]                Local Apic ID : 00
[398h 0920   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[39Ch 0924   1]                Subtable Type : 00 [Processor Local APIC]
[39Dh 0925   1]                       Length : 08
[39Eh 0926   1]                 Processor ID : 6E
[39Fh 0927   1]                Local Apic ID : 00
[3A0h 0928   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3A4h 0932   1]                Subtable Type : 00 [Processor Local APIC]
[3A5h 0933   1]                       Length : 08
[3A6h 0934   1]                 Processor ID : 6F
[3A7h 0935   1]                Local Apic ID : 00
[3A8h 0936   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3ACh 0940   1]                Subtable Type : 00 [Processor Local APIC]
[3ADh 0941   1]                       Length : 08
[3AEh 0942   1]                 Processor ID : 70
[3AFh 0943   1]                Local Apic ID : 00
[3B0h 0944   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3B4h 0948   1]                Subtable Type : 00 [Processor Local APIC]
[3B5h 0949   1]                       Length : 08
[3B6h 0950   1]                 Processor ID : 71
[3B7h 0951   1]                Local Apic ID : 00
[3B8h 0952   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3BCh 0956   1]                Subtable Type : 00 [Processor Local APIC]
[3BDh 0957   1]                       Length : 08
[3BEh 0958   1]                 Processor ID : 72
[3BFh 0959   1]                Local Apic ID : 00
[3C0h 0960   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3C4h 0964   1]                Subtable Type : 00 [Processor Local APIC]
[3C5h 0965   1]                       Length : 08
[3C6h 0966   1]                 Processor ID : 73
[3C7h 0967   1]                Local Apic ID : 00
[3C8h 0968   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3CCh 0972   1]                Subtable Type : 00 [Processor Local APIC]
[3CDh 0973   1]                       Length : 08
[3CEh 0974   1]                 Processor ID : 74
[3CFh 0975   1]                Local Apic ID : 00
[3D0h 0976   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3D4h 0980   1]                Subtable Type : 00 [Processor Local APIC]
[3D5h 0981   1]                       Length : 08
[3D6h 0982   1]                 Processor ID : 75
[3D7h 0983   1]                Local Apic ID : 00
[3D8h 0984   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3DCh 0988   1]                Subtable Type : 00 [Processor Local APIC]
[3DDh 0989   1]                       Length : 08
[3DEh 0990   1]                 Processor ID : 76
[3DFh 0991   1]                Local Apic ID : 00
[3E0h 0992   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3E4h 0996   1]                Subtable Type : 00 [Processor Local APIC]
[3E5h 0997   1]                       Length : 08
[3E6h 0998   1]                 Processor ID : 77
[3E7h 0999   1]                Local Apic ID : 00
[3E8h 1000   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3ECh 1004   1]                Subtable Type : 00 [Processor Local APIC]
[3EDh 1005   1]                       Length : 08
[3EEh 1006   1]                 Processor ID : 78
[3EFh 1007   1]                Local Apic ID : 00
[3F0h 1008   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3F4h 1012   1]                Subtable Type : 00 [Processor Local APIC]
[3F5h 1013   1]                       Length : 08
[3F6h 1014   1]                 Processor ID : 79
[3F7h 1015   1]                Local Apic ID : 00
[3F8h 1016   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[3FCh 1020   1]                Subtable Type : 00 [Processor Local APIC]
[3FDh 1021   1]                       Length : 08
[3FEh 1022   1]                 Processor ID : 7A
[3FFh 1023   1]                Local Apic ID : 00
[400h 1024   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[404h 1028   1]                Subtable Type : 00 [Processor Local APIC]
[405h 1029   1]                       Length : 08
[406h 1030   1]                 Processor ID : 7B
[407h 1031   1]                Local Apic ID : 00
[408h 1032   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[40Ch 1036   1]                Subtable Type : 00 [Processor Local APIC]
[40Dh 1037   1]                       Length : 08
[40Eh 1038   1]                 Processor ID : 7C
[40Fh 1039   1]                Local Apic ID : 00
[410h 1040   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[414h 1044   1]                Subtable Type : 00 [Processor Local APIC]
[415h 1045   1]                       Length : 08
[416h 1046   1]                 Processor ID : 7D
[417h 1047   1]                Local Apic ID : 00
[418h 1048   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[41Ch 1052   1]                Subtable Type : 00 [Processor Local APIC]
[41Dh 1053   1]                       Length : 08
[41Eh 1054   1]                 Processor ID : 7E
[41Fh 1055   1]                Local Apic ID : 00
[420h 1056   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[424h 1060   1]                Subtable Type : 00 [Processor Local APIC]
[425h 1061   1]                       Length : 08
[426h 1062   1]                 Processor ID : 7F
[427h 1063   1]                Local Apic ID : 00
[428h 1064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[42Ch 1068   1]                Subtable Type : 04 [Local APIC NMI]
[42Dh 1069   1]                       Length : 06
[42Eh 1070   1]                 Processor ID : FF
[42Fh 1071   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[431h 1073   1]         Interrupt Input LINT : 01

[432h 1074   1]                Subtable Type : 01 [I/O APIC]
[433h 1075   1]                       Length : 0C
[434h 1076   1]                  I/O Apic ID : 80
[435h 1077   1]                     Reserved : 00
[436h 1078   4]                      Address : FEC00000
[43Ah 1082   4]                    Interrupt : 00000000

[43Eh 1086   1]                Subtable Type : 01 [I/O APIC]
[43Fh 1087   1]                       Length : 0C
[440h 1088   1]                  I/O Apic ID : 81
[441h 1089   1]                     Reserved : 00
[442h 1090   4]                      Address : EFC00000
[446h 1094   4]                    Interrupt : 00000018

[44Ah 1098   1]                Subtable Type : 01 [I/O APIC]
[44Bh 1099   1]                       Length : 0C
[44Ch 1100   1]                  I/O Apic ID : 82
[44Dh 1101   1]                     Reserved : 00
[44Eh 1102   4]                      Address : B7A00000
[452h 1106   4]                    Interrupt : 00000038

[456h 1110   1]                Subtable Type : 02 [Interrupt Source Override]
[457h 1111   1]                       Length : 0A
[458h 1112   1]                          Bus : 00
[459h 1113   1]                       Source : 00
[45Ah 1114   4]                    Interrupt : 00000002
[45Eh 1118   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[460h 1120   1]                Subtable Type : 02 [Interrupt Source Override]
[461h 1121   1]                       Length : 0A
[462h 1122   1]                          Bus : 00
[463h 1123   1]                       Source : 09
[464h 1124   4]                    Interrupt : 00000009
[468h 1128   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 1130 (0x46A)

    0000: 41 50 49 43 6A 04 00 00 03 4A 41 4D 44 00 00 00  // APICj....JAMD...
    0010: 41 20 4D 20 49 20 00 00 16 20 24 03 41 4D 49 20  // A M I ... $.AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 10 10  // ................
    0070: 01 00 00 00 00 08 12 12 01 00 00 00 00 08 14 14  // ................
    0080: 01 00 00 00 00 08 16 16 01 00 00 00 00 08 18 18  // ................
    0090: 01 00 00 00 00 08 1A 1A 01 00 00 00 00 08 1C 1C  // ................
    00A0: 01 00 00 00 00 08 1E 1E 01 00 00 00 00 08 01 01  // ................
    00B0: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00C0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00D0: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00E0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 11 11  // ................
    00F0: 01 00 00 00 00 08 13 13 01 00 00 00 00 08 15 15  // ................
    0100: 01 00 00 00 00 08 17 17 01 00 00 00 00 08 19 19  // ................
    0110: 01 00 00 00 00 08 1B 1B 01 00 00 00 00 08 1D 1D  // ................
    0120: 01 00 00 00 00 08 1F 1F 01 00 00 00 00 08 20 00  // .............. .
    0130: 00 00 00 00 00 08 21 00 00 00 00 00 00 08 22 00  // ......!.......".
    0140: 00 00 00 00 00 08 23 00 00 00 00 00 00 08 24 00  // ......#.......$.
    0150: 00 00 00 00 00 08 25 00 00 00 00 00 00 08 26 00  // ......%.......&.
    0160: 00 00 00 00 00 08 27 00 00 00 00 00 00 08 28 00  // ......'.......(.
    0170: 00 00 00 00 00 08 29 00 00 00 00 00 00 08 2A 00  // ......).......*.
    0180: 00 00 00 00 00 08 2B 00 00 00 00 00 00 08 2C 00  // ......+.......,.
    0190: 00 00 00 00 00 08 2D 00 00 00 00 00 00 08 2E 00  // ......-.........
    01A0: 00 00 00 00 00 08 2F 00 00 00 00 00 00 08 30 00  // ....../.......0.
    01B0: 00 00 00 00 00 08 31 00 00 00 00 00 00 08 32 00  // ......1.......2.
    01C0: 00 00 00 00 00 08 33 00 00 00 00 00 00 08 34 00  // ......3.......4.
    01D0: 00 00 00 00 00 08 35 00 00 00 00 00 00 08 36 00  // ......5.......6.
    01E0: 00 00 00 00 00 08 37 00 00 00 00 00 00 08 38 00  // ......7.......8.
    01F0: 00 00 00 00 00 08 39 00 00 00 00 00 00 08 3A 00  // ......9.......:.
    0200: 00 00 00 00 00 08 3B 00 00 00 00 00 00 08 3C 00  // ......;.......<.
    0210: 00 00 00 00 00 08 3D 00 00 00 00 00 00 08 3E 00  // ......=.......>.
    0220: 00 00 00 00 00 08 3F 00 00 00 00 00 00 08 40 00  // ......?.......@.
    0230: 00 00 00 00 00 08 41 00 00 00 00 00 00 08 42 00  // ......A.......B.
    0240: 00 00 00 00 00 08 43 00 00 00 00 00 00 08 44 00  // ......C.......D.
    0250: 00 00 00 00 00 08 45 00 00 00 00 00 00 08 46 00  // ......E.......F.
    0260: 00 00 00 00 00 08 47 00 00 00 00 00 00 08 48 00  // ......G.......H.
    0270: 00 00 00 00 00 08 49 00 00 00 00 00 00 08 4A 00  // ......I.......J.
    0280: 00 00 00 00 00 08 4B 00 00 00 00 00 00 08 4C 00  // ......K.......L.
    0290: 00 00 00 00 00 08 4D 00 00 00 00 00 00 08 4E 00  // ......M.......N.
    02A0: 00 00 00 00 00 08 4F 00 00 00 00 00 00 08 50 00  // ......O.......P.
    02B0: 00 00 00 00 00 08 51 00 00 00 00 00 00 08 52 00  // ......Q.......R.
    02C0: 00 00 00 00 00 08 53 00 00 00 00 00 00 08 54 00  // ......S.......T.
    02D0: 00 00 00 00 00 08 55 00 00 00 00 00 00 08 56 00  // ......U.......V.
    02E0: 00 00 00 00 00 08 57 00 00 00 00 00 00 08 58 00  // ......W.......X.
    02F0: 00 00 00 00 00 08 59 00 00 00 00 00 00 08 5A 00  // ......Y.......Z.
    0300: 00 00 00 00 00 08 5B 00 00 00 00 00 00 08 5C 00  // ......[.......\.
    0310: 00 00 00 00 00 08 5D 00 00 00 00 00 00 08 5E 00  // ......].......^.
    0320: 00 00 00 00 00 08 5F 00 00 00 00 00 00 08 60 00  // ......_.......`.
    0330: 00 00 00 00 00 08 61 00 00 00 00 00 00 08 62 00  // ......a.......b.
    0340: 00 00 00 00 00 08 63 00 00 00 00 00 00 08 64 00  // ......c.......d.
    0350: 00 00 00 00 00 08 65 00 00 00 00 00 00 08 66 00  // ......e.......f.
    0360: 00 00 00 00 00 08 67 00 00 00 00 00 00 08 68 00  // ......g.......h.
    0370: 00 00 00 00 00 08 69 00 00 00 00 00 00 08 6A 00  // ......i.......j.
    0380: 00 00 00 00 00 08 6B 00 00 00 00 00 00 08 6C 00  // ......k.......l.
    0390: 00 00 00 00 00 08 6D 00 00 00 00 00 00 08 6E 00  // ......m.......n.
    03A0: 00 00 00 00 00 08 6F 00 00 00 00 00 00 08 70 00  // ......o.......p.
    03B0: 00 00 00 00 00 08 71 00 00 00 00 00 00 08 72 00  // ......q.......r.
    03C0: 00 00 00 00 00 08 73 00 00 00 00 00 00 08 74 00  // ......s.......t.
    03D0: 00 00 00 00 00 08 75 00 00 00 00 00 00 08 76 00  // ......u.......v.
    03E0: 00 00 00 00 00 08 77 00 00 00 00 00 00 08 78 00  // ......w.......x.
    03F0: 00 00 00 00 00 08 79 00 00 00 00 00 00 08 7A 00  // ......y.......z.
    0400: 00 00 00 00 00 08 7B 00 00 00 00 00 00 08 7C 00  // ......{.......|.
    0410: 00 00 00 00 00 08 7D 00 00 00 00 00 00 08 7E 00  // ......}.......~.
    0420: 00 00 00 00 00 08 7F 00 00 00 00 00 04 06 FF 05  // ................
    0430: 00 01 01 0C 80 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0440: 81 00 00 00 C0 EF 18 00 00 00 01 0C 82 00 00 00  // ................
    0450: A0 B7 38 00 00 00 02 0A 00 00 02 00 00 00 00 00  // ..8.............
    0460: 02 0A 00 09 09 00 00 00 0F 00                    // ..........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 66
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000007436F018
[030h 0048   4]                Image OffsetX : 00000480
[034h 0052   4]                Image OffsetY : 00000189

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 66 41 4D 44 00 00 00  // BGRT8....fAMD...
    0010: 41 20 4D 20 49 20 00 00 16 20 24 03 41 4D 49 20  // A M I ... $.AMI 
    0020: 13 00 01 00 01 00 00 00 18 F0 36 74 00 00 00 00  // ..........6t....
    0030: 80 04 00 00 89 01 00 00                          // ........


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CB
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CDIT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 CB 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 4D 44 20 43 44 49 54 01 00 00 00 41 4D 44 20  // AMD CDIT....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00001DF8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CRAT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 7672 (0x1DF8)

    0000: 43 52 41 54 F8 1D 00 00 01 82 41 4D 44 00 00 00  // CRAT......AMD...
    0010: 41 4D 44 20 43 52 41 54 01 00 00 00 41 4D 44 20  // AMD CRAT....AMD 
    0020: 01 00 00 00 79 00 00 00 02 00 00 00 00 00 00 00  // ....y...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 28 00 00 05 00 00 00  // .........(......
    0060: 00 00 00 00 10 00 00 00 10 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 00 00 00 00 00 00 0A 00 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 10 00 00 00 00 00 00 00 F0 7F  // ................
    00C0: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    00E0: 01 00 00 00 00 00 00 80 0F 00 00 00 40 00 00 00  // ............@...
    00F0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0100: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0130: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0140: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0170: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0180: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    01B0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    01C0: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 80 00 00 03 01 40 00 20 00 01 00  // ..........@. ...
    01F0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0200: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0230: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0240: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0270: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0280: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    02B0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    02C0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02F0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0300: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0330: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0340: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0370: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0380: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03B0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    03C0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    03F0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0400: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0430: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0440: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0470: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0480: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    04B0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04C0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04F0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0500: 08 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 80 00 00 03 01 40 00 20 00 01 00  // ..........@. ...
    0530: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0540: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0570: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0580: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    05B0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    05C0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    05F0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0600: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0630: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0640: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0660: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0670: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0680: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    06B0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    06C0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06F0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0700: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0730: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0740: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0770: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0780: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    07B0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    07C0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    07F0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0800: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0830: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0840: 10 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 80 00 00 03 01 40 00 20 00 01 00  // ..........@. ...
    0870: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0880: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    08B0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    08C0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    08F0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0900: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0930: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0940: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0970: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0980: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    09B0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    09C0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    09F0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0A00: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0A30: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0A40: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0A70: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0A80: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0AB0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0AC0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0AF0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0B00: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0B30: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0B40: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0B70: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0B80: 18 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 00 00 00 00 80 00 00 03 01 40 00 20 00 01 00  // ..........@. ...
    0BB0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0BC0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0BF0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0C00: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C20: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0C30: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0C40: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C60: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0C70: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0C80: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CB0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0CC0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CE0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0CF0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0D00: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0D30: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0D40: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0D70: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0D80: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 00 00 00 00 40 00 00 00 01 01 40 00 04 00 01 00  // ....@.....@.....
    0DB0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0DC0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0DF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E00: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0E30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0E40: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0E70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0E80: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    0EB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0EC0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0EF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0F00: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0F30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0F40: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0F70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0F80: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    0FB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0FC0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0FF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1000: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1020: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1030: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1040: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1060: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1070: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1080: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    10B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    10C0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    10D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    10F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1100: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1120: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1130: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1140: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1160: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1170: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1180: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    11B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    11C0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    11D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    11F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1200: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1220: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1230: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1240: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1260: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1270: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1280: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    12B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    12C0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    12D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    12F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1300: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1320: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1330: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1340: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1360: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1370: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1380: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    13B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    13C0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    13F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1400: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1420: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1430: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1440: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1460: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1470: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1480: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    14B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    14C0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    14D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    14F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1500: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1520: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1530: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1540: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1560: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1570: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1580: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    15B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    15C0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    15F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1600: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1620: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1630: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1640: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1660: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1670: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1680: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    16B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    16C0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    16D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    16F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1700: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1720: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1730: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1740: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1760: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1770: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1780: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    17B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    17C0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    17F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1800: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1820: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1830: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1840: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1870: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1880: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    18B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    18C0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    18D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    18F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1900: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1920: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1930: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1940: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1960: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1970: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1980: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19A0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    19B0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    19C0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19E0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    19F0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1A00: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1A30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1A40: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1A70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1A80: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    1AB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1AC0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1AF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1B00: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1B30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1B40: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1B70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1B80: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    1BB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1BC0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1BF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1C00: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1C30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1C40: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1C70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1C80: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    1CB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1CC0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1CF0: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1D00: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D20: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1D30: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    1D40: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D60: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1D70: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1D80: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 02 00 00 00 03 06 00 00 06 06 00 00  // ................
    1DB0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1DC0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1DF0: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "AMD", "A M I ", 0x03242016)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (IO1B, 0x02A0)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0230)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (NBTP, 0xFED40000)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SPIB, 0xFEC10000)
    Name (SPIL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (HPTL, 0x0400)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (SPMR, 0xFED80300)
    Name (CAFS, 0xBB)
    Name (RXST, Zero)
    Name (U3ST, Zero)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (HWMM, 0xFE000000)
    Name (SMIM, 0x80000009)
    Name (AMWV, 0x09)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }

            If (_OSI ("Windows 2015"))
            {
                OSVR = 0x11
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OXXX, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GXXX, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OXXX () == One) || (OXXX () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    Name (OSCF, Zero)
    Name (GGN2, One)
    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PEBS, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1800)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
            ,   9, 
        GESA,   1, 
        Offset (0x208), 
            ,   5, 
        E05C,   1, 
        Offset (0x209), 
        E08C,   1, 
        E09C,   1, 
        E10C,   1, 
        Offset (0x20B), 
            ,   5, 
        E1DC,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3F0), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F6), 
        GECD,   1, 
        Offset (0xD06), 
        G06M,   8, 
        G07M,   8, 
        Offset (0xD0B), 
        G0BM,   8, 
        Offset (0xD0E), 
        G0EM,   8, 
        Offset (0xD14), 
        G14M,   8, 
        Offset (0xD1C), 
        G1CM,   8, 
        Offset (0xD20), 
        G20M,   8, 
        Offset (0xD23), 
        G23M,   8, 
        Offset (0xD2D), 
        G2DM,   8, 
        Offset (0xD37), 
        G37M,   8, 
        Offset (0xD70), 
        G70M,   8, 
        Offset (0xD76), 
        G76M,   8, 
        Offset (0xDAF), 
        GAFM,   8, 
        GB0M,   8, 
        Offset (0xE80), 
            ,   2, 
        IMCS,   1, 
        Offset (0x1518), 
        Offset (0x151A), 
        GE10,   1, 
        Offset (0x1524), 
        Offset (0x1526), 
        GE22,   1, 
        Offset (0x1538), 
        Offset (0x153A), 
        G66I,   1, 
            ,   5, 
        G66O,   1, 
        G66E,   1, 
        Offset (0x1560), 
        Offset (0x1562), 
        G6FI,   1, 
            ,   5, 
        G6FO,   1, 
        G6FE,   1, 
        Offset (0x1604), 
        Offset (0x1606), 
        G50I,   1, 
            ,   5, 
        G50O,   1, 
        G50E,   1, 
        Offset (0x1608), 
        Offset (0x160A), 
        G51I,   1, 
            ,   5, 
        G51O,   1, 
        G51E,   1, 
        Offset (0x1610), 
        Offset (0x1612), 
        G57I,   1, 
            ,   5, 
        G57O,   1, 
        G57E,   1, 
        Offset (0x1618), 
        Offset (0x161A), 
        G59I,   1, 
            ,   5, 
        G59O,   1, 
        G59E,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        If (IMCS)
        {
            IBSE ()
        }

        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        CPMS ()
        CPMS ()
        PEWS = One
        If (IMCS)
        {
            IBWE ()
        }
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    OperationRegion (IMIO, SystemIO, 0x3E, 0x02)
    Field (IMIO, ByteAcc, NoLock, Preserve)
    {
        IMCX,   8, 
        IMCA,   8
    }

    IndexField (IMCX, IMCA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x80), 
        MSTI,   8, 
        MITS,   8, 
        MRG0,   8, 
        MRG1,   8, 
        MRG2,   8, 
        MRG3,   8
    }

    Method (WACK, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 != 0xFA))
        {
            Local0 = MRG0 /* \MRG0 */
            Sleep (0x0A)
        }
    }

    Method (IBSE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 &= 0xFE
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
        MRG0 = Zero
        MRG1 = One
        MRG2 = Zero
        MSTI = 0x98
        WACK ()
        MRG0 = Zero
        MRG1 = 0xB4
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
    }

    Method (IBWE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 |= One
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PR00, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x20
            }
        })
        Name (PG04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PG13, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }
        })
        Name (AG13, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x25
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x48
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x49
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x4A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x4B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x4B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x44
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x45
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x46
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x47
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x47
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x4C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x40
            }
        })
        Name (PG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x38
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x39
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x3A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x3B
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x3C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x3D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x3E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x3F
            }
        })
        Name (PG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x40
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x41
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x42
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x43
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x56
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x57
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x54
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x55
            }
        })
        Name (PG2E, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }
        })
        Name (AG2E, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x47
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x44
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x45
            }
        })
        Name (PG31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x4A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x4B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x48
            }
        })
        Name (PR02, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x68
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x69
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x6A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x6B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x6B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x64
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x65
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x66
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x67
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x6C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x60
            }
        })
        Name (PG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x58
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x59
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x5A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x5B
            }
        })
        Name (PG3B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG3B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x5C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x5D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x5E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x5F
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x60
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x62
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x63
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x76
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x77
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x74
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x75
            }
        })
        Name (PG4A, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }
        })
        Name (AG4A, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x67
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x64
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x65
            }
        })
        Name (PG4D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG4D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x69
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x6A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x6B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x68
            }
        })
        Name (PR03, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR03, Package (0x0C)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x88
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x89
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x8A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x8B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x8B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x84
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x85
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x86
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x87
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x87
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x8C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x80
            }
        })
        Name (PG66, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }
        })
        Name (AG66, Package (0x03)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x87
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x84
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x85
            }
        })
        Name (PG6A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG6A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x89
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x8A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x8B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x88
            }
        })
        Name (PG82, Package (0x00){})
        Name (AG82, Package (0x00){})
        Name (PG85, Package (0x00){})
        Name (AG85, Package (0x00){})
        Name (PG86, Package (0x00){})
        Name (AG86, Package (0x00){})
        Name (PG87, Package (0x00){})
        Name (AG87, Package (0x00){})
        Name (PG8B, Package (0x00){})
        Name (AG8B, Package (0x00){})
        Name (PG8F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG8F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0040)
            Name (IOB, 0x0000)
            Name (IOL, 0x3000)
            Name (MBB, 0xB8000000)
            Name (MBL, 0x22000000)
            Name (MABL, 0x0000001080000000)
            Name (MABH, 0x00010000)
            Name (MAML, 0x00010000)
            Name (MAMH, 0x00010000)
            Name (MALL, 0x00000037C0000000)
            Name (MALH, 0x00010000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y07)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y08, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    CreateQWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN8)  // _MIN: Minimum Base Address
                    CreateQWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX8)  // _MAX: Maximum Base Address
                    CreateQWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN8)  // _LEN: Length
                    MIN8 = MABL /* \_SB_.PCI0.MABL */
                    LEN8 = MALL /* \_SB_.PCI0.MALL */
                    Local0 = LEN8 /* \_SB_.PCI0._CRS.LEN8 */
                    MAX8 = (MIN8 + Local0--)
                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0A._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0A._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0A._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = MBL /* \_SB_.PCI0.MBL_ */
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateQWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN9)  // _MIN: Minimum Base Address
                    CreateQWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX9)  // _MAX: Maximum Base Address
                    CreateQWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN9)  // _LEN: Length
                    MIN9 = MABL /* \_SB_.PCI0.MABL */
                    LEN9 = MALL /* \_SB_.PCI0.MALL */
                    Local0 = LEN9 /* \_SB_.PCI0._CRS.LEN9 */
                    MAX9 = (MIN9 + Local0--)
                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB4, 0x0C)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAEX,   32, 
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAEX = Zero
                NAPX = 0x0001C604
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0x0F
                While ((Local0 >= One))
                {
                    Local1 = (Local0 - One)
                    NAEX = Local1
                    NAPX = 0x14300000
                    Local2 = NAPD /* \_SB_.PCI0.NAPD */
                    Local2 &= 0xFFFFFFEF
                    NAPD = Local2
                    Local0--
                }

                NAEX = Zero
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (D0A1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG04) /* \_SB_.AG04 */
                    }

                    Return (PG04) /* \_SB_.PG04 */
                }

                Device (D091)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D0A2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG05) /* \_SB_.AG05 */
                    }

                    Return (PG05) /* \_SB_.PG05 */
                }

                Device (D092)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D0A3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0A4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0A5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0A6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0A7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D093)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D0B1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B5)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B6)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0B7)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D0C0)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xEF800000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.D0C0.APSP._Y0D._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.D0C0.APSP._Y0D._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.D0C0.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.D0C0.APSP.CRS_ */
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x0,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x0,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }

            Device (BR15)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (D018)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (D019)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (D01A)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (D01B)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (D01C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (^UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0E)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.UMEM._Y0E._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.UMEM._Y0E._LEN, LEN3)  // _LEN: Length
                        If ((^^IOMA.DID != 0xFFFFFFFF))
                        {
                            LEN3 = 0x00080000
                            BAS3 = (^^IOMA.MBAS & 0xFFF80000)
                        }

                        Return (CRS) /* \_SB_.PCI0.UMEM.CRS_ */
                    }
                }
            }

            Device (D073)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((HPEN == One))
                        {
                            If ((OSVR >= 0x0C))
                            {
                                Return (0x0F)
                            }

                            HPEN = Zero
                            Return (One)
                        }

                        Return (One)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.D073.HPET._Y0F._BAS, HPTX)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.D073.HPET._Y0F._LEN, HPTY)  // _LEN: Length
                        HPTX = HPTB /* \HPTB */
                        HPTY = HPTL /* \HPTL */
                        Return (CRS) /* \_SB_.PCI0.D073.HPET.CRS_ */
                    }
                }
            }

            Device (D07E)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED61000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (GPBS)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, IGB)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, IGH)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, IGL)  // _LEN: Length
                                    IGB = GPBS /* \GPBS */
                                    IGH = GPBS /* \GPBS */
                                    IGL = GPLN /* \GPLN */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                If (SPIB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                    SPIB = \SPIB
                                    SPIL = \SPIL
                                }

                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x11)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (D0A0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG8F) /* \_SB_.AG8F */
                    }

                    Return (PG8F) /* \_SB_.PG8F */
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (USBV, Package (0x16)
                        {
                            One, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            Zero, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            Zero, 
                            One, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            Zero
                        })
                        Name (USBP, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E
                        })
                        Method (GPLD, 2, Serialized)
                        {
                            Name (PCKG, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                            VISI = Arg0
                            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                            GPOS = Arg1
                            Return (PCKG) /* \_SB_.PCI0.D0A0.PTXH.RHUB.GPLD.PCKG */
                        }

                        Method (GUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            PCKG [Zero] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.D0A0.PTXH.RHUB.GUPC.PCKG */
                        }

                        Method (TUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                One, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            PCKG [One] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.D0A0.PTXH.RHUB.TUPC.PCKG */
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [Zero]), DerefOf (USBP [Zero])))
                            }
                        }

                        Device (PO9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x08]), DerefOf (USBP [0x08])))
                            }
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [One]), DerefOf (USBP [One])))
                            }
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x09]), DerefOf (USBP [0x09])))
                            }
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x02]), DerefOf (USBP [0x02])))
                            }
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0A]), DerefOf (USBP [0x0A])))
                            }
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x03]), DerefOf (USBP [0x03])))
                            }
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x04]), DerefOf (USBP [0x04])))
                            }
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0C]), DerefOf (USBP [0x0C])))
                            }
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x05]), DerefOf (USBP [0x05])))
                            }
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0D]), DerefOf (USBP [0x0D])))
                            }
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x06]), DerefOf (USBP [0x06])))
                            }
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0E]), DerefOf (USBP [0x0E])))
                            }
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x07]), DerefOf (USBP [0x07])))
                            }
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0F]), DerefOf (USBP [0x0F])))
                            }
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x10]), DerefOf (USBP [0x10])))
                            }
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x11]), DerefOf (USBP [0x11])))
                            }
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x12]), DerefOf (USBP [0x12])))
                            }
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x13]), DerefOf (USBP [0x13])))
                            }
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x14]), DerefOf (USBP [0x14])))
                            }
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x15]), DerefOf (USBP [0x15])))
                            }
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (GPLD (DerefOf (USBV [0x0B]), DerefOf (USBP [0x0B])))
                            }
                        }
                    }
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (I211)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (X1_0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (X4_0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }

                    Device (PT29)
                    {
                        Name (_ADR, 0x00090000)  // _ADR: Address
                        Device (XHCI)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }

                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (POT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "LEFT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (POT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "LEFT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (POT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "LEFT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (POT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "LEFT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }
                    }
                }

                Device (PTCP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }
        }

        Device (S0D1)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN01, 0, NotSerialized)
            {
                Return (One)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN01 ())
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR01) /* \_SB_.AR01 */
                }

                Return (PR01) /* \_SB_.PR01 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x00)
            Name (STAV, 0x0F)
            Name (BRB, 0x0040)
            Name (BRL, 0x00C0)
            Name (IOB, 0x3000)
            Name (IOL, 0xD000)
            Name (MBB, 0x80000000)
            Name (MBL, 0x02400000)
            Name (MABL, 0x0000004840000000)
            Name (MABH, 0x00010000)
            Name (MAML, 0x00010000)
            Name (MAMH, 0x00010000)
            Name (MALL, 0x00000037C0000000)
            Name (MALH, 0x00010000)
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y23)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y25, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y24, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y26, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y27, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y28, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.S0D1.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRS2, \_SB.S0D1._Y23._MIN, MIN2)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D1._Y23._MAX, MAX2)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D1._Y23._LEN, LEN2)  // _LEN: Length
                MIN2 = BRB /* \_SB_.S0D1.BRB_ */
                LEN2 = BRL /* \_SB_.S0D1.BRL_ */
                Local1 = LEN2 /* \_SB_.S0D1._CRS.LEN2 */
                MAX2 = (MIN2 + Local1--)
                CreateWordField (CRS2, \_SB.S0D1._Y24._MIN, MIN4)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D1._Y24._MAX, MAX4)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D1._Y24._LEN, LEN4)  // _LEN: Length
                MIN4 = IOB /* \_SB_.S0D1.IOB_ */
                LEN4 = IOL /* \_SB_.S0D1.IOL_ */
                Local1 = LEN4 /* \_SB_.S0D1._CRS.LEN4 */
                MAX4 = (MIN4 + Local1--)
                If (LVGA)
                {
                    CreateWordField (CRS2, \_SB.S0D1._Y25._MIN, IMN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.S0D1._Y25._MAX, IMX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.S0D1._Y25._LEN, ILN2)  // _LEN: Length
                    IMN2 = 0x03B0
                    IMX2 = 0x03DF
                    ILN2 = 0x30
                    CreateDWordField (CRS2, \_SB.S0D1._Y26._MIN, VMN2)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.S0D1._Y26._MAX, VMX2)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.S0D1._Y26._LEN, VLN2)  // _LEN: Length
                    VMN2 = 0x000A0000
                    VMX2 = 0x000BFFFF
                    VLN2 = 0x00020000
                }

                CreateDWordField (CRS2, \_SB.S0D1._Y27._MIN, MIN5)  // _MIN: Minimum Base Address
                CreateDWordField (CRS2, \_SB.S0D1._Y27._MAX, MAX5)  // _MAX: Maximum Base Address
                CreateDWordField (CRS2, \_SB.S0D1._Y27._LEN, LEN5)  // _LEN: Length
                MIN5 = MBB /* \_SB_.S0D1.MBB_ */
                LEN5 = MBL /* \_SB_.S0D1.MBL_ */
                Local1 = LEN5 /* \_SB_.S0D1._CRS.LEN5 */
                MAX5 = (MIN5 + Local1--)
                CreateQWordField (CRS2, \_SB.S0D1._Y28._MIN, MIN9)  // _MIN: Minimum Base Address
                CreateQWordField (CRS2, \_SB.S0D1._Y28._MAX, MAX9)  // _MAX: Maximum Base Address
                CreateQWordField (CRS2, \_SB.S0D1._Y28._LEN, LEN9)  // _LEN: Length
                MIN9 = MABL /* \_SB_.S0D1.MABL */
                LEN9 = MALL /* \_SB_.S0D1.MALL */
                Local0 = LEN9 /* \_SB_.S0D1._CRS.LEN9 */
                MAX9 = (MIN9 + Local0--)
                Return (CRS2) /* \_SB_.S0D1.CRS2 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.S0D1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.S0D1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.S0D1._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (D1A0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1E) /* \_SB_.AG1E */
                    }

                    Return (PG1E) /* \_SB_.PG1E */
                }

                Device (D094)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D1A1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D095)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D1A2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG20) /* \_SB_.AG20 */
                    }

                    Return (PG20) /* \_SB_.PG20 */
                }

                Device (D096)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D1A3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1A4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1A5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1A6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1A7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26) /* \_SB_.AG26 */
                    }

                    Return (PG26) /* \_SB_.PG26 */
                }

                Device (D097)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D1B1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B5)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B6)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1B7)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D1C0)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x14, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2E) /* \_SB_.AG2E */
                    }

                    Return (PG2E) /* \_SB_.PG2E */
                }

                Device (D02F)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D030)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }

            Device (BR31)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG31) /* \_SB_.AG31 */
                    }

                    Return (PG31) /* \_SB_.PG31 */
                }

                Device (D032)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (D034)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (D035)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (D036)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (D037)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (D038)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (IOMB)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (^UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y29)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.S0D1.UMEM._Y29._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.S0D1.UMEM._Y29._LEN, LEN3)  // _LEN: Length
                        If ((^^IOMB.DID != 0xFFFFFFFF))
                        {
                            LEN3 = 0x00080000
                            BAS3 = (^^IOMB.MBAS & 0xFFF80000)
                        }

                        Return (CRS) /* \_SB_.S0D1.UMEM.CRS_ */
                    }
                }
            }

            Device (D075)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }
        }

        Device (S0D2)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN02, 0, NotSerialized)
            {
                Return (0x02)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN02 ())
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR02) /* \_SB_.AR02 */
                }

                Return (PR02) /* \_SB_.PR02 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x00)
            Name (STAV, 0x00)
            Name (BRB, 0x0000)
            Name (BRL, 0x0000)
            Name (IOB, 0x0000)
            Name (IOL, 0x0000)
            Name (MBB, 0x00000000)
            Name (MBL, 0x00000000)
            Name (MABL, 0x0000000000000000)
            Name (MABH, 0x00010000)
            Name (MAML, 0x00010000)
            Name (MAMH, 0x00010000)
            Name (MALL, 0x0000000000000000)
            Name (MALH, 0x00010000)
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y2A)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y2C, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y2B, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y2D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y2E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y2F, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.S0D2.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRS2, \_SB.S0D2._Y2A._MIN, MIN2)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D2._Y2A._MAX, MAX2)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D2._Y2A._LEN, LEN2)  // _LEN: Length
                MIN2 = BRB /* \_SB_.S0D2.BRB_ */
                LEN2 = BRL /* \_SB_.S0D2.BRL_ */
                Local1 = LEN2 /* \_SB_.S0D2._CRS.LEN2 */
                MAX2 = (MIN2 + Local1--)
                CreateWordField (CRS2, \_SB.S0D2._Y2B._MIN, MIN4)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D2._Y2B._MAX, MAX4)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D2._Y2B._LEN, LEN4)  // _LEN: Length
                MIN4 = IOB /* \_SB_.S0D2.IOB_ */
                LEN4 = IOL /* \_SB_.S0D2.IOL_ */
                Local1 = LEN4 /* \_SB_.S0D2._CRS.LEN4 */
                MAX4 = (MIN4 + Local1--)
                If (LVGA)
                {
                    CreateWordField (CRS2, \_SB.S0D2._Y2C._MIN, IMN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.S0D2._Y2C._MAX, IMX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.S0D2._Y2C._LEN, ILN2)  // _LEN: Length
                    IMN2 = 0x03B0
                    IMX2 = 0x03DF
                    ILN2 = 0x30
                    CreateDWordField (CRS2, \_SB.S0D2._Y2D._MIN, VMN2)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.S0D2._Y2D._MAX, VMX2)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.S0D2._Y2D._LEN, VLN2)  // _LEN: Length
                    VMN2 = 0x000A0000
                    VMX2 = 0x000BFFFF
                    VLN2 = 0x00020000
                }

                CreateDWordField (CRS2, \_SB.S0D2._Y2E._MIN, MIN5)  // _MIN: Minimum Base Address
                CreateDWordField (CRS2, \_SB.S0D2._Y2E._MAX, MAX5)  // _MAX: Maximum Base Address
                CreateDWordField (CRS2, \_SB.S0D2._Y2E._LEN, LEN5)  // _LEN: Length
                MIN5 = MBB /* \_SB_.S0D2.MBB_ */
                LEN5 = MBL /* \_SB_.S0D2.MBL_ */
                Local1 = LEN5 /* \_SB_.S0D2._CRS.LEN5 */
                MAX5 = (MIN5 + Local1--)
                CreateQWordField (CRS2, \_SB.S0D2._Y2F._MIN, MIN9)  // _MIN: Minimum Base Address
                CreateQWordField (CRS2, \_SB.S0D2._Y2F._MAX, MAX9)  // _MAX: Maximum Base Address
                CreateQWordField (CRS2, \_SB.S0D2._Y2F._LEN, LEN9)  // _LEN: Length
                MIN9 = MABL /* \_SB_.S0D2.MABL */
                LEN9 = MALL /* \_SB_.S0D2.MALL */
                Local0 = LEN9 /* \_SB_.S0D2._CRS.LEN9 */
                MAX9 = (MIN9 + Local0--)
                Return (CRS2) /* \_SB_.S0D2.CRS2 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.S0D2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.S0D2._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.S0D2._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (D2A0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3A) /* \_SB_.AG3A */
                    }

                    Return (PG3A) /* \_SB_.PG3A */
                }

                Device (D098)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D2A1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3B) /* \_SB_.AG3B */
                    }

                    Return (PG3B) /* \_SB_.PG3B */
                }

                Device (D099)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D2A2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D09A)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D2A3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2A4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2A5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2A6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2A7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D09B)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (D2B1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B5)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B6)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D2B7)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (S0D2)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x14, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG4A) /* \_SB_.AG4A */
                    }

                    Return (PG4A) /* \_SB_.PG4A */
                }

                Device (D04B)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D04C)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }

            Device (BR4D)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG4D) /* \_SB_.AG4D */
                    }

                    Return (PG4D) /* \_SB_.PG4D */
                }

                Device (D04E)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (B5EN, Zero)
                    Name (BA_5, Zero)
                    Name (SBAR, 0xF0B6F000)
                    Name (OSVR, Zero)
                    Name (SAD0, Zero)
                    Name (SAD3, Zero)
                    PowerResource (P0SA, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (SAD0) /* \_SB_.S0D2.BR4D.SATA.SAD0 */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            SAD0 = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            SAD0 = Zero
                        }
                    }

                    PowerResource (P3SA, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (SAD3) /* \_SB_.S0D2.BR4D.SATA.SAD3 */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            SAD3 = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            SAD3 = Zero
                        }
                    }

                    OperationRegion (SATX, PCI_Config, Zero, 0x44)
                    Field (SATX, AnyAcc, NoLock, Preserve)
                    {
                        VIDI,   32, 
                        Offset (0x0A), 
                        STCL,   16, 
                        Offset (0x24), 
                        BA05,   32, 
                        Offset (0x40), 
                        WTEN,   1, 
                        Offset (0x42), 
                        DIS0,   1, 
                        DIS1,   1, 
                        DIS2,   1, 
                        DIS3,   1, 
                        DIS4,   1, 
                        DIS5,   1
                    }

                    Field (SATX, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x42), 
                        DISP,   6
                    }

                    Method (GBAA, 0, Serialized)
                    {
                        BA_5 = BA05 /* \_SB_.S0D2.BR4D.SATA.BA05 */
                        If (((BA_5 == Ones) || (STCL != 0x0101)))
                        {
                            B5EN = Zero
                            Return (SBAR) /* \_SB_.S0D2.BR4D.SATA.SBAR */
                        }
                        Else
                        {
                            B5EN = One
                            Return (BA_5) /* \_SB_.S0D2.BR4D.SATA.BA_5 */
                        }
                    }

                    OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                    Field (BAR5, AnyAcc, NoLock, Preserve)
                    {
                        NOPT,   5, 
                        Offset (0x0C), 
                        PTI0,   1, 
                        PTI1,   1, 
                        PTI2,   1, 
                        PTI3,   1, 
                        PTI4,   1, 
                        PTI5,   1, 
                        PTI6,   1, 
                        PTI7,   1, 
                        Offset (0x118), 
                        CST0,   1, 
                        Offset (0x120), 
                            ,   7, 
                        BSY0,   1, 
                        Offset (0x128), 
                        DET0,   4, 
                        Offset (0x129), 
                        IPM0,   4, 
                        Offset (0x12C), 
                        DDI0,   4, 
                        Offset (0x198), 
                        CST1,   1, 
                        Offset (0x1A0), 
                            ,   7, 
                        BSY1,   1, 
                        Offset (0x1A8), 
                        DET1,   4, 
                        Offset (0x1A9), 
                        IPM1,   4, 
                        Offset (0x1AC), 
                        DDI1,   4, 
                        Offset (0x218), 
                        CST2,   1, 
                        Offset (0x220), 
                            ,   7, 
                        BSY2,   1, 
                        Offset (0x228), 
                        DET2,   4, 
                        Offset (0x229), 
                        IPM2,   4, 
                        Offset (0x22C), 
                        DDI2,   4, 
                        Offset (0x298), 
                        CST3,   1, 
                        Offset (0x2A0), 
                            ,   7, 
                        BSY3,   1, 
                        Offset (0x2A8), 
                        DET3,   4, 
                        Offset (0x2A9), 
                        IPM3,   4, 
                        Offset (0x2AC), 
                        DDI3,   4, 
                        Offset (0x318), 
                        CST4,   1, 
                        Offset (0x320), 
                            ,   7, 
                        BSY4,   1, 
                        Offset (0x328), 
                        DET4,   4, 
                        Offset (0x329), 
                        IPM4,   4, 
                        Offset (0x32C), 
                        DDI4,   4, 
                        Offset (0x398), 
                        CST5,   1, 
                        Offset (0x3A0), 
                            ,   7, 
                        BSY5,   1, 
                        Offset (0x3A8), 
                        DET5,   4, 
                        Offset (0x3A9), 
                        IPM5,   4, 
                        Offset (0x3AC), 
                        DDI5,   4
                    }

                    Field (BAR5, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                        PTI,    6
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        GBAA ()
                    }

                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (SPTM, Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.S0D2.BR4D.SATA.PRID.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                            SPTM = Arg0
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                            {
                                If (IPM2)
                                {
                                    Local0 = 0x32
                                    While (((BSY2 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET0 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY0 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET2 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY2 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (SPTM, Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.S0D2.BR4D.SATA.SECD.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                            SPTM = Arg0
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                            {
                                If (IPM1)
                                {
                                    Local0 = 0x32
                                    While (((BSY1 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (IPM3)
                                {
                                    Local0 = 0x32
                                    While (((BSY3 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET1 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY1 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET3 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY3 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }
                    }

                    Method (ENP, 2, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            DIS0 = ~Arg1
                        }
                        ElseIf ((Arg0 == One))
                        {
                            DIS1 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            DIS2 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            DIS3 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x04))
                        {
                            DIS4 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x05))
                        {
                            DIS5 = ~Arg1
                        }

                        WTEN = One
                        If ((Arg0 == Zero))
                        {
                            PTI0 = Arg1
                        }
                        ElseIf ((Arg0 == One))
                        {
                            PTI1 = Arg1
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            PTI2 = Arg1
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            PTI3 = Arg1
                        }
                        ElseIf ((Arg0 == 0x04))
                        {
                            PTI4 = Arg1
                        }
                        ElseIf ((Arg0 == 0x05))
                        {
                            PTI5 = Arg1
                        }

                        If ((DISP == 0x3F))
                        {
                            PTI0 = One
                        }
                        ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                        {
                            PTI0 = Zero
                        }

                        Local0 = PTI /* \_SB_.S0D2.BR4D.SATA.PTI_ */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((Local0 & One))
                            {
                                Local1++
                            }

                            Local0 >>= One
                        }

                        NOPT = Local1--
                        WTEN = Zero
                    }
                }

                Device (D050)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (D051)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (D052)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (D053)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (D054)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (IOMC)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (^UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y30)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.S0D2.UMEM._Y30._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.S0D2.UMEM._Y30._LEN, LEN3)  // _LEN: Length
                        If ((^^IOMC.DID != 0xFFFFFFFF))
                        {
                            LEN3 = 0x00080000
                            BAS3 = (^^IOMC.MBAS & 0xFFF80000)
                        }

                        Return (CRS) /* \_SB_.S0D2.UMEM.CRS_ */
                    }
                }
            }

            Device (D077)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }
        }

        Device (S0D3)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN03, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN03 ())
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR03) /* \_SB_.AR03 */
                }

                Return (PR03) /* \_SB_.PR03 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x00)
            Name (STAV, 0x00)
            Name (BRB, 0x0000)
            Name (BRL, 0x0000)
            Name (IOB, 0x0000)
            Name (IOL, 0x0000)
            Name (MBB, 0x00000000)
            Name (MBL, 0x00000000)
            Name (MABL, 0x0000000000000000)
            Name (MABH, 0x00010000)
            Name (MAML, 0x00010000)
            Name (MAMH, 0x00010000)
            Name (MALL, 0x0000000000000000)
            Name (MALH, 0x00010000)
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y31)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y33, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y32, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y34, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y35, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y36, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.S0D3.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRS2, \_SB.S0D3._Y31._MIN, MIN2)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D3._Y31._MAX, MAX2)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D3._Y31._LEN, LEN2)  // _LEN: Length
                MIN2 = BRB /* \_SB_.S0D3.BRB_ */
                LEN2 = BRL /* \_SB_.S0D3.BRL_ */
                Local1 = LEN2 /* \_SB_.S0D3._CRS.LEN2 */
                MAX2 = (MIN2 + Local1--)
                CreateWordField (CRS2, \_SB.S0D3._Y32._MIN, MIN4)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.S0D3._Y32._MAX, MAX4)  // _MAX: Maximum Base Address
                CreateWordField (CRS2, \_SB.S0D3._Y32._LEN, LEN4)  // _LEN: Length
                MIN4 = IOB /* \_SB_.S0D3.IOB_ */
                LEN4 = IOL /* \_SB_.S0D3.IOL_ */
                Local1 = LEN4 /* \_SB_.S0D3._CRS.LEN4 */
                MAX4 = (MIN4 + Local1--)
                If (LVGA)
                {
                    CreateWordField (CRS2, \_SB.S0D3._Y33._MIN, IMN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.S0D3._Y33._MAX, IMX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.S0D3._Y33._LEN, ILN2)  // _LEN: Length
                    IMN2 = 0x03B0
                    IMX2 = 0x03DF
                    ILN2 = 0x30
                    CreateDWordField (CRS2, \_SB.S0D3._Y34._MIN, VMN2)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.S0D3._Y34._MAX, VMX2)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.S0D3._Y34._LEN, VLN2)  // _LEN: Length
                    VMN2 = 0x000A0000
                    VMX2 = 0x000BFFFF
                    VLN2 = 0x00020000
                }

                CreateDWordField (CRS2, \_SB.S0D3._Y35._MIN, MIN5)  // _MIN: Minimum Base Address
                CreateDWordField (CRS2, \_SB.S0D3._Y35._MAX, MAX5)  // _MAX: Maximum Base Address
                CreateDWordField (CRS2, \_SB.S0D3._Y35._LEN, LEN5)  // _LEN: Length
                MIN5 = MBB /* \_SB_.S0D3.MBB_ */
                LEN5 = MBL /* \_SB_.S0D3.MBL_ */
                Local1 = LEN5 /* \_SB_.S0D3._CRS.LEN5 */
                MAX5 = (MIN5 + Local1--)
                CreateQWordField (CRS2, \_SB.S0D3._Y36._MIN, MIN9)  // _MIN: Minimum Base Address
                CreateQWordField (CRS2, \_SB.S0D3._Y36._MAX, MAX9)  // _MAX: Maximum Base Address
                CreateQWordField (CRS2, \_SB.S0D3._Y36._LEN, LEN9)  // _LEN: Length
                MIN9 = MABL /* \_SB_.S0D3.MABL */
                LEN9 = MALL /* \_SB_.S0D3.MALL */
                Local0 = LEN9 /* \_SB_.S0D3._CRS.LEN9 */
                MAX9 = (MIN9 + Local0--)
                Return (CRS2) /* \_SB_.S0D3.CRS2 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.S0D3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.S0D3._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.S0D3._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (D3A0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3A7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B5)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B6)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (D3B7)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (S0D3)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x14, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG66) /* \_SB_.AG66 */
                    }

                    Return (PG66) /* \_SB_.PG66 */
                }

                Device (D067)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D068)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }
            }

            Device (BR6A)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG6A) /* \_SB_.AG6A */
                    }

                    Return (PG6A) /* \_SB_.PG6A */
                }

                Device (D06B)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (B5EN, Zero)
                    Name (BA_5, Zero)
                    Name (SBAR, 0xF0B6F000)
                    Name (OSVR, Zero)
                    Name (SAD0, Zero)
                    Name (SAD3, Zero)
                    PowerResource (P0SA, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (SAD0) /* \_SB_.S0D3.BR6A.SATA.SAD0 */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            SAD0 = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            SAD0 = Zero
                        }
                    }

                    PowerResource (P3SA, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (SAD3) /* \_SB_.S0D3.BR6A.SATA.SAD3 */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            SAD3 = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            SAD3 = Zero
                        }
                    }

                    OperationRegion (SATX, PCI_Config, Zero, 0x44)
                    Field (SATX, AnyAcc, NoLock, Preserve)
                    {
                        VIDI,   32, 
                        Offset (0x0A), 
                        STCL,   16, 
                        Offset (0x24), 
                        BA05,   32, 
                        Offset (0x40), 
                        WTEN,   1, 
                        Offset (0x42), 
                        DIS0,   1, 
                        DIS1,   1, 
                        DIS2,   1, 
                        DIS3,   1, 
                        DIS4,   1, 
                        DIS5,   1
                    }

                    Field (SATX, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x42), 
                        DISP,   6
                    }

                    Method (GBAA, 0, Serialized)
                    {
                        BA_5 = BA05 /* \_SB_.S0D3.BR6A.SATA.BA05 */
                        If (((BA_5 == Ones) || (STCL != 0x0101)))
                        {
                            B5EN = Zero
                            Return (SBAR) /* \_SB_.S0D3.BR6A.SATA.SBAR */
                        }
                        Else
                        {
                            B5EN = One
                            Return (BA_5) /* \_SB_.S0D3.BR6A.SATA.BA_5 */
                        }
                    }

                    OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                    Field (BAR5, AnyAcc, NoLock, Preserve)
                    {
                        NOPT,   5, 
                        Offset (0x0C), 
                        PTI0,   1, 
                        PTI1,   1, 
                        PTI2,   1, 
                        PTI3,   1, 
                        PTI4,   1, 
                        PTI5,   1, 
                        PTI6,   1, 
                        PTI7,   1, 
                        Offset (0x118), 
                        CST0,   1, 
                        Offset (0x120), 
                            ,   7, 
                        BSY0,   1, 
                        Offset (0x128), 
                        DET0,   4, 
                        Offset (0x129), 
                        IPM0,   4, 
                        Offset (0x12C), 
                        DDI0,   4, 
                        Offset (0x198), 
                        CST1,   1, 
                        Offset (0x1A0), 
                            ,   7, 
                        BSY1,   1, 
                        Offset (0x1A8), 
                        DET1,   4, 
                        Offset (0x1A9), 
                        IPM1,   4, 
                        Offset (0x1AC), 
                        DDI1,   4, 
                        Offset (0x218), 
                        CST2,   1, 
                        Offset (0x220), 
                            ,   7, 
                        BSY2,   1, 
                        Offset (0x228), 
                        DET2,   4, 
                        Offset (0x229), 
                        IPM2,   4, 
                        Offset (0x22C), 
                        DDI2,   4, 
                        Offset (0x298), 
                        CST3,   1, 
                        Offset (0x2A0), 
                            ,   7, 
                        BSY3,   1, 
                        Offset (0x2A8), 
                        DET3,   4, 
                        Offset (0x2A9), 
                        IPM3,   4, 
                        Offset (0x2AC), 
                        DDI3,   4, 
                        Offset (0x318), 
                        CST4,   1, 
                        Offset (0x320), 
                            ,   7, 
                        BSY4,   1, 
                        Offset (0x328), 
                        DET4,   4, 
                        Offset (0x329), 
                        IPM4,   4, 
                        Offset (0x32C), 
                        DDI4,   4, 
                        Offset (0x398), 
                        CST5,   1, 
                        Offset (0x3A0), 
                            ,   7, 
                        BSY5,   1, 
                        Offset (0x3A8), 
                        DET5,   4, 
                        Offset (0x3A9), 
                        IPM5,   4, 
                        Offset (0x3AC), 
                        DDI5,   4
                    }

                    Field (BAR5, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                        PTI,    6
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        GBAA ()
                    }

                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (SPTM, Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.S0D3.BR6A.SATA.PRID.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                            SPTM = Arg0
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                            {
                                If (IPM2)
                                {
                                    Local0 = 0x32
                                    While (((BSY2 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET0 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY0 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET2 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY2 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (SPTM, Buffer (0x14)
                        {
                            /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                            /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                        })
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.S0D3.BR6A.SATA.SECD.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                            SPTM = Arg0
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                            {
                                If (IPM1)
                                {
                                    Local0 = 0x32
                                    While (((BSY1 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (IPM3)
                                {
                                    Local0 = 0x32
                                    While (((BSY3 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET1 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY1 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                GBAA ()
                                If ((B5EN == Zero))
                                {
                                    Return (Zero)
                                }

                                If ((DET3 == 0x03))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                GBAA ()
                                If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                                {
                                    Local0 = 0x32
                                    While (((BSY3 == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                            }

                            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                            {
                                Local0 = Buffer (0x07)
                                    {
                                         0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                    }
                                Return (Local0)
                            }
                        }
                    }

                    Method (ENP, 2, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            DIS0 = ~Arg1
                        }
                        ElseIf ((Arg0 == One))
                        {
                            DIS1 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            DIS2 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            DIS3 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x04))
                        {
                            DIS4 = ~Arg1
                        }
                        ElseIf ((Arg0 == 0x05))
                        {
                            DIS5 = ~Arg1
                        }

                        WTEN = One
                        If ((Arg0 == Zero))
                        {
                            PTI0 = Arg1
                        }
                        ElseIf ((Arg0 == One))
                        {
                            PTI1 = Arg1
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            PTI2 = Arg1
                        }
                        ElseIf ((Arg0 == 0x03))
                        {
                            PTI3 = Arg1
                        }
                        ElseIf ((Arg0 == 0x04))
                        {
                            PTI4 = Arg1
                        }
                        ElseIf ((Arg0 == 0x05))
                        {
                            PTI5 = Arg1
                        }

                        If ((DISP == 0x3F))
                        {
                            PTI0 = One
                        }
                        ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                        {
                            PTI0 = Zero
                        }

                        Local0 = PTI /* \_SB_.S0D3.BR6A.SATA.PTI_ */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((Local0 & One))
                            {
                                Local1++
                            }

                            Local0 >>= One
                        }

                        NOPT = Local1--
                        WTEN = Zero
                    }
                }

                Device (D06D)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (D06E)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (D06F)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (D070)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (D071)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (IOMD)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                OperationRegion (NBF2, PCI_Config, Zero, 0x0100)
                Field (NBF2, AnyAcc, NoLock, Preserve)
                {
                    DID,    32, 
                    Offset (0x44), 
                    MBAS,   32
                }

                Device (^UMEM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x15)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y37)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.S0D3.UMEM._Y37._BAS, BAS3)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.S0D3.UMEM._Y37._LEN, LEN3)  // _LEN: Length
                        If ((^^IOMD.DID != 0xFFFFFFFF))
                        {
                            LEN3 = 0x00080000
                            BAS3 = (^^IOMD.MBAS & 0xFFF80000)
                        }

                        Return (CRS) /* \_SB_.S0D3.UMEM.CRS_ */
                    }
                }
            }

            Device (D079)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.D0A1, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A2, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A3, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A4, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A5, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A6, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A7, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B0, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B1, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B2, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B3, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B4, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B5, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B6, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0B7, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A0, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A0.PT02.PT23.X1_0, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A0.PT02.PT24.X4_0, 0x02) // Device Wake
            Notify (\_SB.PCI0.D0A0.PT02.PT29.XHCI, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A0, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A1, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A2, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A3, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A4, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A5, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A6, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1A7, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B0, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B1, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B2, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B3, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B4, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B5, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B6, 0x02) // Device Wake
            Notify (\_SB.S0D1.D1B7, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A0, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A1, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A2, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A3, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A4, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A5, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A6, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2A7, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B0, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B1, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B2, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B3, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B4, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B5, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B6, 0x02) // Device Wake
            Notify (\_SB.S0D2.D2B7, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A0, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A1, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A2, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A3, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A4, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A5, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A6, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3A7, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B0, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B1, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B2, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B3, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B4, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B5, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B6, 0x02) // Device Wake
            Notify (\_SB.S0D3.D3B7, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.D0C0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L14, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.S0D1.D1C0, 0x02) // Device Wake
            Notify (\_SB.S0D2.S0D2, 0x02) // Device Wake
            Notify (\_SB.S0D3.S0D3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x02)  // _GPE: General Purpose Events
            Name (REGC, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    REGC = Arg1
                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040001)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040002)
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040003)
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA002000B)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0021000)
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040087)
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040088)
            }

            Method (ECAV, 0, NotSerialized)
            {
                If ((REGC == One))
                {
                    Return (One)
                }

                Return (REGC) /* \_SB_.PCI0.SBRG.EC0_.REGC */
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0x0100)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                EB00,   8, 
                EB01,   8, 
                EB02,   8, 
                EB03,   8, 
                EB04,   8, 
                EB05,   8, 
                EB06,   8, 
                EB07,   8, 
                EB08,   8, 
                EB09,   8, 
                EB0A,   8, 
                EB0B,   8, 
                EB0C,   8, 
                EB0D,   8, 
                EB0E,   8, 
                EB0F,   8, 
                EB10,   8, 
                EB11,   8, 
                EB12,   8, 
                EB13,   8, 
                EB14,   8, 
                EB15,   8, 
                EB16,   8, 
                EB17,   8, 
                EB18,   8, 
                EB19,   8, 
                EB1A,   8, 
                EB1B,   8, 
                EB1C,   8, 
                EB1D,   8, 
                EB1E,   8, 
                EB1F,   8, 
                EB20,   8, 
                EB21,   8, 
                EB22,   8, 
                EB23,   8, 
                EB24,   8, 
                EB25,   8, 
                EB26,   8, 
                EB27,   8, 
                EB28,   8, 
                EB29,   8, 
                EB2A,   8, 
                EB2B,   8, 
                EB2C,   8, 
                EB2D,   8, 
                EB2E,   8, 
                EB2F,   8, 
                EB30,   8, 
                EB31,   8, 
                EB32,   8, 
                EB33,   8, 
                EB34,   8, 
                EB35,   8, 
                EB36,   8, 
                EB37,   8, 
                EB38,   8, 
                EB39,   8, 
                EB3A,   8, 
                EB3B,   8, 
                EB3C,   8, 
                EB3D,   8, 
                EB3E,   8, 
                EB3F,   8, 
                EB40,   8, 
                EB41,   8, 
                EB42,   8, 
                EB43,   8, 
                EB44,   8, 
                EB45,   8, 
                EB46,   8, 
                EB47,   8, 
                EB48,   8, 
                EB49,   8, 
                EB4A,   8, 
                EB4B,   8, 
                EB4C,   8, 
                EB4D,   8, 
                EB4E,   8, 
                EB4F,   8, 
                EB50,   8, 
                EB51,   8, 
                EB52,   8, 
                EB53,   8, 
                EB54,   8, 
                EB55,   8, 
                EB56,   8, 
                EB57,   8, 
                EB58,   8, 
                EB59,   8, 
                EB5A,   8, 
                EB5B,   8, 
                EB5C,   8, 
                EB5D,   8, 
                EB5E,   8, 
                EB5F,   8, 
                EB60,   8, 
                EB61,   8, 
                EB62,   8, 
                EB63,   8, 
                EB64,   8, 
                EB65,   8, 
                EB66,   8, 
                EB67,   8, 
                EB68,   8, 
                EB69,   8, 
                EB6A,   8, 
                EB6B,   8, 
                EB6C,   8, 
                EB6D,   8, 
                EB6E,   8, 
                EB6F,   8, 
                EB70,   8, 
                EB71,   8, 
                EB72,   8, 
                EB73,   8, 
                EB74,   8, 
                EB75,   8, 
                EB76,   8, 
                EB77,   8, 
                EB78,   8, 
                EB79,   8, 
                EB7A,   8, 
                EB7B,   8, 
                EB7C,   8, 
                EB7D,   8, 
                EB7E,   8, 
                EB7F,   8, 
                EB80,   8, 
                EB81,   8, 
                EB82,   8, 
                EB83,   8, 
                EB84,   8, 
                EB85,   8, 
                EB86,   8, 
                EB87,   8, 
                EB88,   8, 
                EB89,   8, 
                EB8A,   8, 
                EB8B,   8, 
                EB8C,   8, 
                EB8D,   8, 
                EB8E,   8, 
                EB8F,   8, 
                EB90,   8, 
                EB91,   8, 
                EB92,   8, 
                EB93,   8, 
                EB94,   8, 
                EB95,   8, 
                EB96,   8, 
                EB97,   8, 
                EB98,   8, 
                EB99,   8, 
                EB9A,   8, 
                EB9B,   8, 
                EB9C,   8, 
                EB9D,   8, 
                EB9E,   8, 
                EB9F,   8, 
                EBA0,   8, 
                EBA1,   8, 
                EBA2,   8, 
                EBA3,   8, 
                EBA4,   8, 
                EBA5,   8, 
                EBA6,   8, 
                EBA7,   8, 
                EBA8,   8, 
                EBA9,   8, 
                EBAA,   8, 
                EBAB,   8, 
                EBAC,   8, 
                EBAD,   8, 
                EBAE,   8, 
                EBAF,   8, 
                EBB0,   8, 
                EBB1,   8, 
                EBB2,   8, 
                EBB3,   8, 
                EBB4,   8, 
                EBB5,   8, 
                EBB6,   8, 
                EBB7,   8, 
                EBB8,   8, 
                EBB9,   8, 
                EBBA,   8, 
                EBBB,   8, 
                EBBC,   8, 
                EBBD,   8, 
                EBBE,   8, 
                EBBF,   8, 
                EBC0,   8, 
                EBC1,   8, 
                EBC2,   8, 
                EBC3,   8, 
                EBC4,   8, 
                EBC5,   8, 
                EBC6,   8, 
                EBC7,   8, 
                EBC8,   8, 
                EBC9,   8, 
                EBCA,   8, 
                EBCB,   8, 
                EBCC,   8, 
                EBCD,   8, 
                EBCE,   8, 
                EBCF,   8, 
                EBD0,   8, 
                EBD1,   8, 
                EBD2,   8, 
                EBD3,   8, 
                EBD4,   8, 
                EBD5,   8, 
                EBD6,   8, 
                EBD7,   8, 
                EBD8,   8, 
                EBD9,   8, 
                EBDA,   8, 
                EBDB,   8, 
                EBDC,   8, 
                EBDD,   8, 
                EBDE,   8, 
                EBDF,   8, 
                EBE0,   8, 
                EBE1,   8, 
                EBE2,   8, 
                EBE3,   8, 
                EBE4,   8, 
                EBE5,   8, 
                EBE6,   8, 
                EBE7,   8, 
                EBE8,   8, 
                EBE9,   8, 
                EBEA,   8, 
                EBEB,   8, 
                EBEC,   8, 
                EBED,   8, 
                EBEE,   8, 
                EBEF,   8, 
                EBF0,   8, 
                EBF1,   8, 
                EBF2,   8, 
                EBF3,   8, 
                EBF4,   8, 
                EBF5,   8, 
                EBF6,   8, 
                EBF7,   8, 
                EBF8,   8, 
                EBF9,   8, 
                EBFA,   8, 
                EBFB,   8, 
                EBFC,   8, 
                EBFD,   8, 
                EBFE,   8, 
                EBFF,   8
            }

            Method (EC0X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (Arg1)
                        {
                            EB00 = Arg2
                        }
                        Else
                        {
                            Local0 = EB00 /* \_SB_.PCI0.SBRG.EC0_.EB00 */
                        }
                    }
                    Case (One)
                    {
                        If (Arg1)
                        {
                            EB01 = Arg2
                        }
                        Else
                        {
                            Local0 = EB01 /* \_SB_.PCI0.SBRG.EC0_.EB01 */
                        }
                    }
                    Case (0x02)
                    {
                        If (Arg1)
                        {
                            EB02 = Arg2
                        }
                        Else
                        {
                            Local0 = EB02 /* \_SB_.PCI0.SBRG.EC0_.EB02 */
                        }
                    }
                    Case (0x03)
                    {
                        If (Arg1)
                        {
                            EB03 = Arg2
                        }
                        Else
                        {
                            Local0 = EB03 /* \_SB_.PCI0.SBRG.EC0_.EB03 */
                        }
                    }
                    Case (0x04)
                    {
                        If (Arg1)
                        {
                            EB04 = Arg2
                        }
                        Else
                        {
                            Local0 = EB04 /* \_SB_.PCI0.SBRG.EC0_.EB04 */
                        }
                    }
                    Case (0x05)
                    {
                        If (Arg1)
                        {
                            EB05 = Arg2
                        }
                        Else
                        {
                            Local0 = EB05 /* \_SB_.PCI0.SBRG.EC0_.EB05 */
                        }
                    }
                    Case (0x06)
                    {
                        If (Arg1)
                        {
                            EB06 = Arg2
                        }
                        Else
                        {
                            Local0 = EB06 /* \_SB_.PCI0.SBRG.EC0_.EB06 */
                        }
                    }
                    Case (0x07)
                    {
                        If (Arg1)
                        {
                            EB07 = Arg2
                        }
                        Else
                        {
                            Local0 = EB07 /* \_SB_.PCI0.SBRG.EC0_.EB07 */
                        }
                    }
                    Case (0x08)
                    {
                        If (Arg1)
                        {
                            EB08 = Arg2
                        }
                        Else
                        {
                            Local0 = EB08 /* \_SB_.PCI0.SBRG.EC0_.EB08 */
                        }
                    }
                    Case (0x09)
                    {
                        If (Arg1)
                        {
                            EB09 = Arg2
                        }
                        Else
                        {
                            Local0 = EB09 /* \_SB_.PCI0.SBRG.EC0_.EB09 */
                        }
                    }
                    Case (0x0A)
                    {
                        If (Arg1)
                        {
                            EB0A = Arg2
                        }
                        Else
                        {
                            Local0 = EB0A /* \_SB_.PCI0.SBRG.EC0_.EB0A */
                        }
                    }
                    Case (0x0B)
                    {
                        If (Arg1)
                        {
                            EB0B = Arg2
                        }
                        Else
                        {
                            Local0 = EB0B /* \_SB_.PCI0.SBRG.EC0_.EB0B */
                        }
                    }
                    Case (0x0C)
                    {
                        If (Arg1)
                        {
                            EB0C = Arg2
                        }
                        Else
                        {
                            Local0 = EB0C /* \_SB_.PCI0.SBRG.EC0_.EB0C */
                        }
                    }
                    Case (0x0D)
                    {
                        If (Arg1)
                        {
                            EB0D = Arg2
                        }
                        Else
                        {
                            Local0 = EB0D /* \_SB_.PCI0.SBRG.EC0_.EB0D */
                        }
                    }
                    Case (0x0E)
                    {
                        If (Arg1)
                        {
                            EB0E = Arg2
                        }
                        Else
                        {
                            Local0 = EB0E /* \_SB_.PCI0.SBRG.EC0_.EB0E */
                        }
                    }
                    Case (0x0F)
                    {
                        If (Arg1)
                        {
                            EB0F = Arg2
                        }
                        Else
                        {
                            Local0 = EB0F /* \_SB_.PCI0.SBRG.EC0_.EB0F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC1X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x10)
                    {
                        If (Arg1)
                        {
                            EB10 = Arg2
                        }
                        Else
                        {
                            Local0 = EB10 /* \_SB_.PCI0.SBRG.EC0_.EB10 */
                        }
                    }
                    Case (0x11)
                    {
                        If (Arg1)
                        {
                            EB11 = Arg2
                        }
                        Else
                        {
                            Local0 = EB11 /* \_SB_.PCI0.SBRG.EC0_.EB11 */
                        }
                    }
                    Case (0x12)
                    {
                        If (Arg1)
                        {
                            EB12 = Arg2
                        }
                        Else
                        {
                            Local0 = EB12 /* \_SB_.PCI0.SBRG.EC0_.EB12 */
                        }
                    }
                    Case (0x13)
                    {
                        If (Arg1)
                        {
                            EB13 = Arg2
                        }
                        Else
                        {
                            Local0 = EB13 /* \_SB_.PCI0.SBRG.EC0_.EB13 */
                        }
                    }
                    Case (0x14)
                    {
                        If (Arg1)
                        {
                            EB14 = Arg2
                        }
                        Else
                        {
                            Local0 = EB14 /* \_SB_.PCI0.SBRG.EC0_.EB14 */
                        }
                    }
                    Case (0x15)
                    {
                        If (Arg1)
                        {
                            EB15 = Arg2
                        }
                        Else
                        {
                            Local0 = EB15 /* \_SB_.PCI0.SBRG.EC0_.EB15 */
                        }
                    }
                    Case (0x16)
                    {
                        If (Arg1)
                        {
                            EB16 = Arg2
                        }
                        Else
                        {
                            Local0 = EB16 /* \_SB_.PCI0.SBRG.EC0_.EB16 */
                        }
                    }
                    Case (0x17)
                    {
                        If (Arg1)
                        {
                            EB17 = Arg2
                        }
                        Else
                        {
                            Local0 = EB17 /* \_SB_.PCI0.SBRG.EC0_.EB17 */
                        }
                    }
                    Case (0x18)
                    {
                        If (Arg1)
                        {
                            EB18 = Arg2
                        }
                        Else
                        {
                            Local0 = EB18 /* \_SB_.PCI0.SBRG.EC0_.EB18 */
                        }
                    }
                    Case (0x19)
                    {
                        If (Arg1)
                        {
                            EB19 = Arg2
                        }
                        Else
                        {
                            Local0 = EB19 /* \_SB_.PCI0.SBRG.EC0_.EB19 */
                        }
                    }
                    Case (0x1A)
                    {
                        If (Arg1)
                        {
                            EB1A = Arg2
                        }
                        Else
                        {
                            Local0 = EB1A /* \_SB_.PCI0.SBRG.EC0_.EB1A */
                        }
                    }
                    Case (0x1B)
                    {
                        If (Arg1)
                        {
                            EB1B = Arg2
                        }
                        Else
                        {
                            Local0 = EB1B /* \_SB_.PCI0.SBRG.EC0_.EB1B */
                        }
                    }
                    Case (0x1C)
                    {
                        If (Arg1)
                        {
                            EB1C = Arg2
                        }
                        Else
                        {
                            Local0 = EB1C /* \_SB_.PCI0.SBRG.EC0_.EB1C */
                        }
                    }
                    Case (0x1D)
                    {
                        If (Arg1)
                        {
                            EB1D = Arg2
                        }
                        Else
                        {
                            Local0 = EB1D /* \_SB_.PCI0.SBRG.EC0_.EB1D */
                        }
                    }
                    Case (0x1E)
                    {
                        If (Arg1)
                        {
                            EB1E = Arg2
                        }
                        Else
                        {
                            Local0 = EB1E /* \_SB_.PCI0.SBRG.EC0_.EB1E */
                        }
                    }
                    Case (0x1F)
                    {
                        If (Arg1)
                        {
                            EB1F = Arg2
                        }
                        Else
                        {
                            Local0 = EB1F /* \_SB_.PCI0.SBRG.EC0_.EB1F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC2X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x20)
                    {
                        If (Arg1)
                        {
                            EB20 = Arg2
                        }
                        Else
                        {
                            Local0 = EB20 /* \_SB_.PCI0.SBRG.EC0_.EB20 */
                        }
                    }
                    Case (0x21)
                    {
                        If (Arg1)
                        {
                            EB21 = Arg2
                        }
                        Else
                        {
                            Local0 = EB21 /* \_SB_.PCI0.SBRG.EC0_.EB21 */
                        }
                    }
                    Case (0x22)
                    {
                        If (Arg1)
                        {
                            EB22 = Arg2
                        }
                        Else
                        {
                            Local0 = EB22 /* \_SB_.PCI0.SBRG.EC0_.EB22 */
                        }
                    }
                    Case (0x23)
                    {
                        If (Arg1)
                        {
                            EB23 = Arg2
                        }
                        Else
                        {
                            Local0 = EB23 /* \_SB_.PCI0.SBRG.EC0_.EB23 */
                        }
                    }
                    Case (0x24)
                    {
                        If (Arg1)
                        {
                            EB24 = Arg2
                        }
                        Else
                        {
                            Local0 = EB24 /* \_SB_.PCI0.SBRG.EC0_.EB24 */
                        }
                    }
                    Case (0x25)
                    {
                        If (Arg1)
                        {
                            EB25 = Arg2
                        }
                        Else
                        {
                            Local0 = EB25 /* \_SB_.PCI0.SBRG.EC0_.EB25 */
                        }
                    }
                    Case (0x26)
                    {
                        If (Arg1)
                        {
                            EB26 = Arg2
                        }
                        Else
                        {
                            Local0 = EB26 /* \_SB_.PCI0.SBRG.EC0_.EB26 */
                        }
                    }
                    Case (0x27)
                    {
                        If (Arg1)
                        {
                            EB27 = Arg2
                        }
                        Else
                        {
                            Local0 = EB27 /* \_SB_.PCI0.SBRG.EC0_.EB27 */
                        }
                    }
                    Case (0x28)
                    {
                        If (Arg1)
                        {
                            EB28 = Arg2
                        }
                        Else
                        {
                            Local0 = EB28 /* \_SB_.PCI0.SBRG.EC0_.EB28 */
                        }
                    }
                    Case (0x29)
                    {
                        If (Arg1)
                        {
                            EB29 = Arg2
                        }
                        Else
                        {
                            Local0 = EB29 /* \_SB_.PCI0.SBRG.EC0_.EB29 */
                        }
                    }
                    Case (0x2A)
                    {
                        If (Arg1)
                        {
                            EB2A = Arg2
                        }
                        Else
                        {
                            Local0 = EB2A /* \_SB_.PCI0.SBRG.EC0_.EB2A */
                        }
                    }
                    Case (0x2B)
                    {
                        If (Arg1)
                        {
                            EB2B = Arg2
                        }
                        Else
                        {
                            Local0 = EB2B /* \_SB_.PCI0.SBRG.EC0_.EB2B */
                        }
                    }
                    Case (0x2C)
                    {
                        If (Arg1)
                        {
                            EB2C = Arg2
                        }
                        Else
                        {
                            Local0 = EB2C /* \_SB_.PCI0.SBRG.EC0_.EB2C */
                        }
                    }
                    Case (0x2D)
                    {
                        If (Arg1)
                        {
                            EB2D = Arg2
                        }
                        Else
                        {
                            Local0 = EB2D /* \_SB_.PCI0.SBRG.EC0_.EB2D */
                        }
                    }
                    Case (0x2E)
                    {
                        If (Arg1)
                        {
                            EB2E = Arg2
                        }
                        Else
                        {
                            Local0 = EB2E /* \_SB_.PCI0.SBRG.EC0_.EB2E */
                        }
                    }
                    Case (0x2F)
                    {
                        If (Arg1)
                        {
                            EB2F = Arg2
                        }
                        Else
                        {
                            Local0 = EB2F /* \_SB_.PCI0.SBRG.EC0_.EB2F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC3X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x30)
                    {
                        If (Arg1)
                        {
                            EB30 = Arg2
                        }
                        Else
                        {
                            Local0 = EB30 /* \_SB_.PCI0.SBRG.EC0_.EB30 */
                        }
                    }
                    Case (0x31)
                    {
                        If (Arg1)
                        {
                            EB31 = Arg2
                        }
                        Else
                        {
                            Local0 = EB31 /* \_SB_.PCI0.SBRG.EC0_.EB31 */
                        }
                    }
                    Case (0x32)
                    {
                        If (Arg1)
                        {
                            EB32 = Arg2
                        }
                        Else
                        {
                            Local0 = EB32 /* \_SB_.PCI0.SBRG.EC0_.EB32 */
                        }
                    }
                    Case (0x33)
                    {
                        If (Arg1)
                        {
                            EB33 = Arg2
                        }
                        Else
                        {
                            Local0 = EB33 /* \_SB_.PCI0.SBRG.EC0_.EB33 */
                        }
                    }
                    Case (0x34)
                    {
                        If (Arg1)
                        {
                            EB34 = Arg2
                        }
                        Else
                        {
                            Local0 = EB34 /* \_SB_.PCI0.SBRG.EC0_.EB34 */
                        }
                    }
                    Case (0x35)
                    {
                        If (Arg1)
                        {
                            EB35 = Arg2
                        }
                        Else
                        {
                            Local0 = EB35 /* \_SB_.PCI0.SBRG.EC0_.EB35 */
                        }
                    }
                    Case (0x36)
                    {
                        If (Arg1)
                        {
                            EB36 = Arg2
                        }
                        Else
                        {
                            Local0 = EB36 /* \_SB_.PCI0.SBRG.EC0_.EB36 */
                        }
                    }
                    Case (0x37)
                    {
                        If (Arg1)
                        {
                            EB37 = Arg2
                        }
                        Else
                        {
                            Local0 = EB37 /* \_SB_.PCI0.SBRG.EC0_.EB37 */
                        }
                    }
                    Case (0x38)
                    {
                        If (Arg1)
                        {
                            EB38 = Arg2
                        }
                        Else
                        {
                            Local0 = EB38 /* \_SB_.PCI0.SBRG.EC0_.EB38 */
                        }
                    }
                    Case (0x39)
                    {
                        If (Arg1)
                        {
                            EB39 = Arg2
                        }
                        Else
                        {
                            Local0 = EB39 /* \_SB_.PCI0.SBRG.EC0_.EB39 */
                        }
                    }
                    Case (0x3A)
                    {
                        If (Arg1)
                        {
                            EB3A = Arg2
                        }
                        Else
                        {
                            Local0 = EB3A /* \_SB_.PCI0.SBRG.EC0_.EB3A */
                        }
                    }
                    Case (0x3B)
                    {
                        If (Arg1)
                        {
                            EB3B = Arg2
                        }
                        Else
                        {
                            Local0 = EB3B /* \_SB_.PCI0.SBRG.EC0_.EB3B */
                        }
                    }
                    Case (0x3C)
                    {
                        If (Arg1)
                        {
                            EB3C = Arg2
                        }
                        Else
                        {
                            Local0 = EB3C /* \_SB_.PCI0.SBRG.EC0_.EB3C */
                        }
                    }
                    Case (0x3D)
                    {
                        If (Arg1)
                        {
                            EB3D = Arg2
                        }
                        Else
                        {
                            Local0 = EB3D /* \_SB_.PCI0.SBRG.EC0_.EB3D */
                        }
                    }
                    Case (0x3E)
                    {
                        If (Arg1)
                        {
                            EB3E = Arg2
                        }
                        Else
                        {
                            Local0 = EB3E /* \_SB_.PCI0.SBRG.EC0_.EB3E */
                        }
                    }
                    Case (0x3F)
                    {
                        If (Arg1)
                        {
                            EB3F = Arg2
                        }
                        Else
                        {
                            Local0 = EB3F /* \_SB_.PCI0.SBRG.EC0_.EB3F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC4X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x40)
                    {
                        If (Arg1)
                        {
                            EB40 = Arg2
                        }
                        Else
                        {
                            Local0 = EB40 /* \_SB_.PCI0.SBRG.EC0_.EB40 */
                        }
                    }
                    Case (0x41)
                    {
                        If (Arg1)
                        {
                            EB41 = Arg2
                        }
                        Else
                        {
                            Local0 = EB41 /* \_SB_.PCI0.SBRG.EC0_.EB41 */
                        }
                    }
                    Case (0x42)
                    {
                        If (Arg1)
                        {
                            EB42 = Arg2
                        }
                        Else
                        {
                            Local0 = EB42 /* \_SB_.PCI0.SBRG.EC0_.EB42 */
                        }
                    }
                    Case (0x43)
                    {
                        If (Arg1)
                        {
                            EB43 = Arg2
                        }
                        Else
                        {
                            Local0 = EB43 /* \_SB_.PCI0.SBRG.EC0_.EB43 */
                        }
                    }
                    Case (0x44)
                    {
                        If (Arg1)
                        {
                            EB44 = Arg2
                        }
                        Else
                        {
                            Local0 = EB44 /* \_SB_.PCI0.SBRG.EC0_.EB44 */
                        }
                    }
                    Case (0x45)
                    {
                        If (Arg1)
                        {
                            EB45 = Arg2
                        }
                        Else
                        {
                            Local0 = EB45 /* \_SB_.PCI0.SBRG.EC0_.EB45 */
                        }
                    }
                    Case (0x46)
                    {
                        If (Arg1)
                        {
                            EB46 = Arg2
                        }
                        Else
                        {
                            Local0 = EB46 /* \_SB_.PCI0.SBRG.EC0_.EB46 */
                        }
                    }
                    Case (0x47)
                    {
                        If (Arg1)
                        {
                            EB47 = Arg2
                        }
                        Else
                        {
                            Local0 = EB47 /* \_SB_.PCI0.SBRG.EC0_.EB47 */
                        }
                    }
                    Case (0x48)
                    {
                        If (Arg1)
                        {
                            EB48 = Arg2
                        }
                        Else
                        {
                            Local0 = EB48 /* \_SB_.PCI0.SBRG.EC0_.EB48 */
                        }
                    }
                    Case (0x49)
                    {
                        If (Arg1)
                        {
                            EB49 = Arg2
                        }
                        Else
                        {
                            Local0 = EB49 /* \_SB_.PCI0.SBRG.EC0_.EB49 */
                        }
                    }
                    Case (0x4A)
                    {
                        If (Arg1)
                        {
                            EB4A = Arg2
                        }
                        Else
                        {
                            Local0 = EB4A /* \_SB_.PCI0.SBRG.EC0_.EB4A */
                        }
                    }
                    Case (0x4B)
                    {
                        If (Arg1)
                        {
                            EB4B = Arg2
                        }
                        Else
                        {
                            Local0 = EB4B /* \_SB_.PCI0.SBRG.EC0_.EB4B */
                        }
                    }
                    Case (0x4C)
                    {
                        If (Arg1)
                        {
                            EB4C = Arg2
                        }
                        Else
                        {
                            Local0 = EB4C /* \_SB_.PCI0.SBRG.EC0_.EB4C */
                        }
                    }
                    Case (0x4D)
                    {
                        If (Arg1)
                        {
                            EB4D = Arg2
                        }
                        Else
                        {
                            Local0 = EB4D /* \_SB_.PCI0.SBRG.EC0_.EB4D */
                        }
                    }
                    Case (0x4E)
                    {
                        If (Arg1)
                        {
                            EB4E = Arg2
                        }
                        Else
                        {
                            Local0 = EB4E /* \_SB_.PCI0.SBRG.EC0_.EB4E */
                        }
                    }
                    Case (0x4F)
                    {
                        If (Arg1)
                        {
                            EB4F = Arg2
                        }
                        Else
                        {
                            Local0 = EB4F /* \_SB_.PCI0.SBRG.EC0_.EB4F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC5X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x50)
                    {
                        If (Arg1)
                        {
                            EB50 = Arg2
                        }
                        Else
                        {
                            Local0 = EB50 /* \_SB_.PCI0.SBRG.EC0_.EB50 */
                        }
                    }
                    Case (0x51)
                    {
                        If (Arg1)
                        {
                            EB51 = Arg2
                        }
                        Else
                        {
                            Local0 = EB51 /* \_SB_.PCI0.SBRG.EC0_.EB51 */
                        }
                    }
                    Case (0x52)
                    {
                        If (Arg1)
                        {
                            EB52 = Arg2
                        }
                        Else
                        {
                            Local0 = EB52 /* \_SB_.PCI0.SBRG.EC0_.EB52 */
                        }
                    }
                    Case (0x53)
                    {
                        If (Arg1)
                        {
                            EB53 = Arg2
                        }
                        Else
                        {
                            Local0 = EB53 /* \_SB_.PCI0.SBRG.EC0_.EB53 */
                        }
                    }
                    Case (0x54)
                    {
                        If (Arg1)
                        {
                            EB54 = Arg2
                        }
                        Else
                        {
                            Local0 = EB54 /* \_SB_.PCI0.SBRG.EC0_.EB54 */
                        }
                    }
                    Case (0x55)
                    {
                        If (Arg1)
                        {
                            EB55 = Arg2
                        }
                        Else
                        {
                            Local0 = EB55 /* \_SB_.PCI0.SBRG.EC0_.EB55 */
                        }
                    }
                    Case (0x56)
                    {
                        If (Arg1)
                        {
                            EB56 = Arg2
                        }
                        Else
                        {
                            Local0 = EB56 /* \_SB_.PCI0.SBRG.EC0_.EB56 */
                        }
                    }
                    Case (0x57)
                    {
                        If (Arg1)
                        {
                            EB57 = Arg2
                        }
                        Else
                        {
                            Local0 = EB57 /* \_SB_.PCI0.SBRG.EC0_.EB57 */
                        }
                    }
                    Case (0x58)
                    {
                        If (Arg1)
                        {
                            EB58 = Arg2
                        }
                        Else
                        {
                            Local0 = EB58 /* \_SB_.PCI0.SBRG.EC0_.EB58 */
                        }
                    }
                    Case (0x59)
                    {
                        If (Arg1)
                        {
                            EB59 = Arg2
                        }
                        Else
                        {
                            Local0 = EB59 /* \_SB_.PCI0.SBRG.EC0_.EB59 */
                        }
                    }
                    Case (0x5A)
                    {
                        If (Arg1)
                        {
                            EB5A = Arg2
                        }
                        Else
                        {
                            Local0 = EB5A /* \_SB_.PCI0.SBRG.EC0_.EB5A */
                        }
                    }
                    Case (0x5B)
                    {
                        If (Arg1)
                        {
                            EB5B = Arg2
                        }
                        Else
                        {
                            Local0 = EB5B /* \_SB_.PCI0.SBRG.EC0_.EB5B */
                        }
                    }
                    Case (0x5C)
                    {
                        If (Arg1)
                        {
                            EB5C = Arg2
                        }
                        Else
                        {
                            Local0 = EB5C /* \_SB_.PCI0.SBRG.EC0_.EB5C */
                        }
                    }
                    Case (0x5D)
                    {
                        If (Arg1)
                        {
                            EB5D = Arg2
                        }
                        Else
                        {
                            Local0 = EB5D /* \_SB_.PCI0.SBRG.EC0_.EB5D */
                        }
                    }
                    Case (0x5E)
                    {
                        If (Arg1)
                        {
                            EB5E = Arg2
                        }
                        Else
                        {
                            Local0 = EB5E /* \_SB_.PCI0.SBRG.EC0_.EB5E */
                        }
                    }
                    Case (0x5F)
                    {
                        If (Arg1)
                        {
                            EB5F = Arg2
                        }
                        Else
                        {
                            Local0 = EB5F /* \_SB_.PCI0.SBRG.EC0_.EB5F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC6X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x60)
                    {
                        If (Arg1)
                        {
                            EB60 = Arg2
                        }
                        Else
                        {
                            Local0 = EB60 /* \_SB_.PCI0.SBRG.EC0_.EB60 */
                        }
                    }
                    Case (0x61)
                    {
                        If (Arg1)
                        {
                            EB61 = Arg2
                        }
                        Else
                        {
                            Local0 = EB61 /* \_SB_.PCI0.SBRG.EC0_.EB61 */
                        }
                    }
                    Case (0x62)
                    {
                        If (Arg1)
                        {
                            EB62 = Arg2
                        }
                        Else
                        {
                            Local0 = EB62 /* \_SB_.PCI0.SBRG.EC0_.EB62 */
                        }
                    }
                    Case (0x63)
                    {
                        If (Arg1)
                        {
                            EB63 = Arg2
                        }
                        Else
                        {
                            Local0 = EB63 /* \_SB_.PCI0.SBRG.EC0_.EB63 */
                        }
                    }
                    Case (0x64)
                    {
                        If (Arg1)
                        {
                            EB64 = Arg2
                        }
                        Else
                        {
                            Local0 = EB64 /* \_SB_.PCI0.SBRG.EC0_.EB64 */
                        }
                    }
                    Case (0x65)
                    {
                        If (Arg1)
                        {
                            EB65 = Arg2
                        }
                        Else
                        {
                            Local0 = EB65 /* \_SB_.PCI0.SBRG.EC0_.EB65 */
                        }
                    }
                    Case (0x66)
                    {
                        If (Arg1)
                        {
                            EB66 = Arg2
                        }
                        Else
                        {
                            Local0 = EB66 /* \_SB_.PCI0.SBRG.EC0_.EB66 */
                        }
                    }
                    Case (0x67)
                    {
                        If (Arg1)
                        {
                            EB67 = Arg2
                        }
                        Else
                        {
                            Local0 = EB67 /* \_SB_.PCI0.SBRG.EC0_.EB67 */
                        }
                    }
                    Case (0x68)
                    {
                        If (Arg1)
                        {
                            EB68 = Arg2
                        }
                        Else
                        {
                            Local0 = EB68 /* \_SB_.PCI0.SBRG.EC0_.EB68 */
                        }
                    }
                    Case (0x69)
                    {
                        If (Arg1)
                        {
                            EB69 = Arg2
                        }
                        Else
                        {
                            Local0 = EB69 /* \_SB_.PCI0.SBRG.EC0_.EB69 */
                        }
                    }
                    Case (0x6A)
                    {
                        If (Arg1)
                        {
                            EB6A = Arg2
                        }
                        Else
                        {
                            Local0 = EB6A /* \_SB_.PCI0.SBRG.EC0_.EB6A */
                        }
                    }
                    Case (0x6B)
                    {
                        If (Arg1)
                        {
                            EB6B = Arg2
                        }
                        Else
                        {
                            Local0 = EB6B /* \_SB_.PCI0.SBRG.EC0_.EB6B */
                        }
                    }
                    Case (0x6C)
                    {
                        If (Arg1)
                        {
                            EB6C = Arg2
                        }
                        Else
                        {
                            Local0 = EB6C /* \_SB_.PCI0.SBRG.EC0_.EB6C */
                        }
                    }
                    Case (0x6D)
                    {
                        If (Arg1)
                        {
                            EB6D = Arg2
                        }
                        Else
                        {
                            Local0 = EB6D /* \_SB_.PCI0.SBRG.EC0_.EB6D */
                        }
                    }
                    Case (0x6E)
                    {
                        If (Arg1)
                        {
                            EB6E = Arg2
                        }
                        Else
                        {
                            Local0 = EB6E /* \_SB_.PCI0.SBRG.EC0_.EB6E */
                        }
                    }
                    Case (0x6F)
                    {
                        If (Arg1)
                        {
                            EB6F = Arg2
                        }
                        Else
                        {
                            Local0 = EB6F /* \_SB_.PCI0.SBRG.EC0_.EB6F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC7X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x70)
                    {
                        If (Arg1)
                        {
                            EB70 = Arg2
                        }
                        Else
                        {
                            Local0 = EB70 /* \_SB_.PCI0.SBRG.EC0_.EB70 */
                        }
                    }
                    Case (0x71)
                    {
                        If (Arg1)
                        {
                            EB71 = Arg2
                        }
                        Else
                        {
                            Local0 = EB71 /* \_SB_.PCI0.SBRG.EC0_.EB71 */
                        }
                    }
                    Case (0x72)
                    {
                        If (Arg1)
                        {
                            EB72 = Arg2
                        }
                        Else
                        {
                            Local0 = EB72 /* \_SB_.PCI0.SBRG.EC0_.EB72 */
                        }
                    }
                    Case (0x73)
                    {
                        If (Arg1)
                        {
                            EB73 = Arg2
                        }
                        Else
                        {
                            Local0 = EB73 /* \_SB_.PCI0.SBRG.EC0_.EB73 */
                        }
                    }
                    Case (0x74)
                    {
                        If (Arg1)
                        {
                            EB74 = Arg2
                        }
                        Else
                        {
                            Local0 = EB74 /* \_SB_.PCI0.SBRG.EC0_.EB74 */
                        }
                    }
                    Case (0x75)
                    {
                        If (Arg1)
                        {
                            EB75 = Arg2
                        }
                        Else
                        {
                            Local0 = EB75 /* \_SB_.PCI0.SBRG.EC0_.EB75 */
                        }
                    }
                    Case (0x76)
                    {
                        If (Arg1)
                        {
                            EB76 = Arg2
                        }
                        Else
                        {
                            Local0 = EB76 /* \_SB_.PCI0.SBRG.EC0_.EB76 */
                        }
                    }
                    Case (0x77)
                    {
                        If (Arg1)
                        {
                            EB77 = Arg2
                        }
                        Else
                        {
                            Local0 = EB77 /* \_SB_.PCI0.SBRG.EC0_.EB77 */
                        }
                    }
                    Case (0x78)
                    {
                        If (Arg1)
                        {
                            EB78 = Arg2
                        }
                        Else
                        {
                            Local0 = EB78 /* \_SB_.PCI0.SBRG.EC0_.EB78 */
                        }
                    }
                    Case (0x79)
                    {
                        If (Arg1)
                        {
                            EB79 = Arg2
                        }
                        Else
                        {
                            Local0 = EB79 /* \_SB_.PCI0.SBRG.EC0_.EB79 */
                        }
                    }
                    Case (0x7A)
                    {
                        If (Arg1)
                        {
                            EB7A = Arg2
                        }
                        Else
                        {
                            Local0 = EB7A /* \_SB_.PCI0.SBRG.EC0_.EB7A */
                        }
                    }
                    Case (0x7B)
                    {
                        If (Arg1)
                        {
                            EB7B = Arg2
                        }
                        Else
                        {
                            Local0 = EB7B /* \_SB_.PCI0.SBRG.EC0_.EB7B */
                        }
                    }
                    Case (0x7C)
                    {
                        If (Arg1)
                        {
                            EB7C = Arg2
                        }
                        Else
                        {
                            Local0 = EB7C /* \_SB_.PCI0.SBRG.EC0_.EB7C */
                        }
                    }
                    Case (0x7D)
                    {
                        If (Arg1)
                        {
                            EB7D = Arg2
                        }
                        Else
                        {
                            Local0 = EB7D /* \_SB_.PCI0.SBRG.EC0_.EB7D */
                        }
                    }
                    Case (0x7E)
                    {
                        If (Arg1)
                        {
                            EB7E = Arg2
                        }
                        Else
                        {
                            Local0 = EB7E /* \_SB_.PCI0.SBRG.EC0_.EB7E */
                        }
                    }
                    Case (0x7F)
                    {
                        If (Arg1)
                        {
                            EB7F = Arg2
                        }
                        Else
                        {
                            Local0 = EB7F /* \_SB_.PCI0.SBRG.EC0_.EB7F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC8X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x80)
                    {
                        If (Arg1)
                        {
                            EB80 = Arg2
                        }
                        Else
                        {
                            Local0 = EB80 /* \_SB_.PCI0.SBRG.EC0_.EB80 */
                        }
                    }
                    Case (0x81)
                    {
                        If (Arg1)
                        {
                            EB81 = Arg2
                        }
                        Else
                        {
                            Local0 = EB81 /* \_SB_.PCI0.SBRG.EC0_.EB81 */
                        }
                    }
                    Case (0x82)
                    {
                        If (Arg1)
                        {
                            EB82 = Arg2
                        }
                        Else
                        {
                            Local0 = EB82 /* \_SB_.PCI0.SBRG.EC0_.EB82 */
                        }
                    }
                    Case (0x83)
                    {
                        If (Arg1)
                        {
                            EB83 = Arg2
                        }
                        Else
                        {
                            Local0 = EB83 /* \_SB_.PCI0.SBRG.EC0_.EB83 */
                        }
                    }
                    Case (0x84)
                    {
                        If (Arg1)
                        {
                            EB84 = Arg2
                        }
                        Else
                        {
                            Local0 = EB84 /* \_SB_.PCI0.SBRG.EC0_.EB84 */
                        }
                    }
                    Case (0x85)
                    {
                        If (Arg1)
                        {
                            EB85 = Arg2
                        }
                        Else
                        {
                            Local0 = EB85 /* \_SB_.PCI0.SBRG.EC0_.EB85 */
                        }
                    }
                    Case (0x86)
                    {
                        If (Arg1)
                        {
                            EB86 = Arg2
                        }
                        Else
                        {
                            Local0 = EB86 /* \_SB_.PCI0.SBRG.EC0_.EB86 */
                        }
                    }
                    Case (0x87)
                    {
                        If (Arg1)
                        {
                            EB87 = Arg2
                        }
                        Else
                        {
                            Local0 = EB87 /* \_SB_.PCI0.SBRG.EC0_.EB87 */
                        }
                    }
                    Case (0x88)
                    {
                        If (Arg1)
                        {
                            EB88 = Arg2
                        }
                        Else
                        {
                            Local0 = EB88 /* \_SB_.PCI0.SBRG.EC0_.EB88 */
                        }
                    }
                    Case (0x89)
                    {
                        If (Arg1)
                        {
                            EB89 = Arg2
                        }
                        Else
                        {
                            Local0 = EB89 /* \_SB_.PCI0.SBRG.EC0_.EB89 */
                        }
                    }
                    Case (0x8A)
                    {
                        If (Arg1)
                        {
                            EB8A = Arg2
                        }
                        Else
                        {
                            Local0 = EB8A /* \_SB_.PCI0.SBRG.EC0_.EB8A */
                        }
                    }
                    Case (0x8B)
                    {
                        If (Arg1)
                        {
                            EB8B = Arg2
                        }
                        Else
                        {
                            Local0 = EB8B /* \_SB_.PCI0.SBRG.EC0_.EB8B */
                        }
                    }
                    Case (0x8C)
                    {
                        If (Arg1)
                        {
                            EB8C = Arg2
                        }
                        Else
                        {
                            Local0 = EB8C /* \_SB_.PCI0.SBRG.EC0_.EB8C */
                        }
                    }
                    Case (0x8D)
                    {
                        If (Arg1)
                        {
                            EB8D = Arg2
                        }
                        Else
                        {
                            Local0 = EB8D /* \_SB_.PCI0.SBRG.EC0_.EB8D */
                        }
                    }
                    Case (0x8E)
                    {
                        If (Arg1)
                        {
                            EB8E = Arg2
                        }
                        Else
                        {
                            Local0 = EB8E /* \_SB_.PCI0.SBRG.EC0_.EB8E */
                        }
                    }
                    Case (0x8F)
                    {
                        If (Arg1)
                        {
                            EB8F = Arg2
                        }
                        Else
                        {
                            Local0 = EB8F /* \_SB_.PCI0.SBRG.EC0_.EB8F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC9X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x90)
                    {
                        If (Arg1)
                        {
                            EB90 = Arg2
                        }
                        Else
                        {
                            Local0 = EB90 /* \_SB_.PCI0.SBRG.EC0_.EB90 */
                        }
                    }
                    Case (0x91)
                    {
                        If (Arg1)
                        {
                            EB91 = Arg2
                        }
                        Else
                        {
                            Local0 = EB91 /* \_SB_.PCI0.SBRG.EC0_.EB91 */
                        }
                    }
                    Case (0x92)
                    {
                        If (Arg1)
                        {
                            EB92 = Arg2
                        }
                        Else
                        {
                            Local0 = EB92 /* \_SB_.PCI0.SBRG.EC0_.EB92 */
                        }
                    }
                    Case (0x93)
                    {
                        If (Arg1)
                        {
                            EB93 = Arg2
                        }
                        Else
                        {
                            Local0 = EB93 /* \_SB_.PCI0.SBRG.EC0_.EB93 */
                        }
                    }
                    Case (0x94)
                    {
                        If (Arg1)
                        {
                            EB94 = Arg2
                        }
                        Else
                        {
                            Local0 = EB94 /* \_SB_.PCI0.SBRG.EC0_.EB94 */
                        }
                    }
                    Case (0x95)
                    {
                        If (Arg1)
                        {
                            EB95 = Arg2
                        }
                        Else
                        {
                            Local0 = EB95 /* \_SB_.PCI0.SBRG.EC0_.EB95 */
                        }
                    }
                    Case (0x96)
                    {
                        If (Arg1)
                        {
                            EB96 = Arg2
                        }
                        Else
                        {
                            Local0 = EB96 /* \_SB_.PCI0.SBRG.EC0_.EB96 */
                        }
                    }
                    Case (0x97)
                    {
                        If (Arg1)
                        {
                            EB97 = Arg2
                        }
                        Else
                        {
                            Local0 = EB97 /* \_SB_.PCI0.SBRG.EC0_.EB97 */
                        }
                    }
                    Case (0x98)
                    {
                        If (Arg1)
                        {
                            EB98 = Arg2
                        }
                        Else
                        {
                            Local0 = EB98 /* \_SB_.PCI0.SBRG.EC0_.EB98 */
                        }
                    }
                    Case (0x99)
                    {
                        If (Arg1)
                        {
                            EB99 = Arg2
                        }
                        Else
                        {
                            Local0 = EB99 /* \_SB_.PCI0.SBRG.EC0_.EB99 */
                        }
                    }
                    Case (0x9A)
                    {
                        If (Arg1)
                        {
                            EB9A = Arg2
                        }
                        Else
                        {
                            Local0 = EB9A /* \_SB_.PCI0.SBRG.EC0_.EB9A */
                        }
                    }
                    Case (0x9B)
                    {
                        If (Arg1)
                        {
                            EB9B = Arg2
                        }
                        Else
                        {
                            Local0 = EB9B /* \_SB_.PCI0.SBRG.EC0_.EB9B */
                        }
                    }
                    Case (0x9C)
                    {
                        If (Arg1)
                        {
                            EB9C = Arg2
                        }
                        Else
                        {
                            Local0 = EB9C /* \_SB_.PCI0.SBRG.EC0_.EB9C */
                        }
                    }
                    Case (0x9D)
                    {
                        If (Arg1)
                        {
                            EB9D = Arg2
                        }
                        Else
                        {
                            Local0 = EB9D /* \_SB_.PCI0.SBRG.EC0_.EB9D */
                        }
                    }
                    Case (0x9E)
                    {
                        If (Arg1)
                        {
                            EB9E = Arg2
                        }
                        Else
                        {
                            Local0 = EB9E /* \_SB_.PCI0.SBRG.EC0_.EB9E */
                        }
                    }
                    Case (0x9F)
                    {
                        If (Arg1)
                        {
                            EB9F = Arg2
                        }
                        Else
                        {
                            Local0 = EB9F /* \_SB_.PCI0.SBRG.EC0_.EB9F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECAX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xA0)
                    {
                        If (Arg1)
                        {
                            EBA0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA0 /* \_SB_.PCI0.SBRG.EC0_.EBA0 */
                        }
                    }
                    Case (0xA1)
                    {
                        If (Arg1)
                        {
                            EBA1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA1 /* \_SB_.PCI0.SBRG.EC0_.EBA1 */
                        }
                    }
                    Case (0xA2)
                    {
                        If (Arg1)
                        {
                            EBA2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA2 /* \_SB_.PCI0.SBRG.EC0_.EBA2 */
                        }
                    }
                    Case (0xA3)
                    {
                        If (Arg1)
                        {
                            EBA3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA3 /* \_SB_.PCI0.SBRG.EC0_.EBA3 */
                        }
                    }
                    Case (0xA4)
                    {
                        If (Arg1)
                        {
                            EBA4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA4 /* \_SB_.PCI0.SBRG.EC0_.EBA4 */
                        }
                    }
                    Case (0xA5)
                    {
                        If (Arg1)
                        {
                            EBA5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA5 /* \_SB_.PCI0.SBRG.EC0_.EBA5 */
                        }
                    }
                    Case (0xA6)
                    {
                        If (Arg1)
                        {
                            EBA6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA6 /* \_SB_.PCI0.SBRG.EC0_.EBA6 */
                        }
                    }
                    Case (0xA7)
                    {
                        If (Arg1)
                        {
                            EBA7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA7 /* \_SB_.PCI0.SBRG.EC0_.EBA7 */
                        }
                    }
                    Case (0xA8)
                    {
                        If (Arg1)
                        {
                            EBA8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA8 /* \_SB_.PCI0.SBRG.EC0_.EBA8 */
                        }
                    }
                    Case (0xA9)
                    {
                        If (Arg1)
                        {
                            EBA9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA9 /* \_SB_.PCI0.SBRG.EC0_.EBA9 */
                        }
                    }
                    Case (0xAA)
                    {
                        If (Arg1)
                        {
                            EBAA = Arg2
                        }
                        Else
                        {
                            Local0 = EBAA /* \_SB_.PCI0.SBRG.EC0_.EBAA */
                        }
                    }
                    Case (0xAB)
                    {
                        If (Arg1)
                        {
                            EBAB = Arg2
                        }
                        Else
                        {
                            Local0 = EBAB /* \_SB_.PCI0.SBRG.EC0_.EBAB */
                        }
                    }
                    Case (0xAC)
                    {
                        If (Arg1)
                        {
                            EBAC = Arg2
                        }
                        Else
                        {
                            Local0 = EBAC /* \_SB_.PCI0.SBRG.EC0_.EBAC */
                        }
                    }
                    Case (0xAD)
                    {
                        If (Arg1)
                        {
                            EBAD = Arg2
                        }
                        Else
                        {
                            Local0 = EBAD /* \_SB_.PCI0.SBRG.EC0_.EBAD */
                        }
                    }
                    Case (0xAE)
                    {
                        If (Arg1)
                        {
                            EBAE = Arg2
                        }
                        Else
                        {
                            Local0 = EBAE /* \_SB_.PCI0.SBRG.EC0_.EBAE */
                        }
                    }
                    Case (0xAF)
                    {
                        If (Arg1)
                        {
                            EBAF = Arg2
                        }
                        Else
                        {
                            Local0 = EBAF /* \_SB_.PCI0.SBRG.EC0_.EBAF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECBX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xB0)
                    {
                        If (Arg1)
                        {
                            EBB0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB0 /* \_SB_.PCI0.SBRG.EC0_.EBB0 */
                        }
                    }
                    Case (0xB1)
                    {
                        If (Arg1)
                        {
                            EBB1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB1 /* \_SB_.PCI0.SBRG.EC0_.EBB1 */
                        }
                    }
                    Case (0xB2)
                    {
                        If (Arg1)
                        {
                            EBB2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB2 /* \_SB_.PCI0.SBRG.EC0_.EBB2 */
                        }
                    }
                    Case (0xB3)
                    {
                        If (Arg1)
                        {
                            EBB3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB3 /* \_SB_.PCI0.SBRG.EC0_.EBB3 */
                        }
                    }
                    Case (0xB4)
                    {
                        If (Arg1)
                        {
                            EBB4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB4 /* \_SB_.PCI0.SBRG.EC0_.EBB4 */
                        }
                    }
                    Case (0xB5)
                    {
                        If (Arg1)
                        {
                            EBB5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB5 /* \_SB_.PCI0.SBRG.EC0_.EBB5 */
                        }
                    }
                    Case (0xB6)
                    {
                        If (Arg1)
                        {
                            EBB6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB6 /* \_SB_.PCI0.SBRG.EC0_.EBB6 */
                        }
                    }
                    Case (0xB7)
                    {
                        If (Arg1)
                        {
                            EBB7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB7 /* \_SB_.PCI0.SBRG.EC0_.EBB7 */
                        }
                    }
                    Case (0xB8)
                    {
                        If (Arg1)
                        {
                            EBB8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB8 /* \_SB_.PCI0.SBRG.EC0_.EBB8 */
                        }
                    }
                    Case (0xB9)
                    {
                        If (Arg1)
                        {
                            EBB9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB9 /* \_SB_.PCI0.SBRG.EC0_.EBB9 */
                        }
                    }
                    Case (0xBA)
                    {
                        If (Arg1)
                        {
                            EBBA = Arg2
                        }
                        Else
                        {
                            Local0 = EBBA /* \_SB_.PCI0.SBRG.EC0_.EBBA */
                        }
                    }
                    Case (0xBB)
                    {
                        If (Arg1)
                        {
                            EBBB = Arg2
                        }
                        Else
                        {
                            Local0 = EBBB /* \_SB_.PCI0.SBRG.EC0_.EBBB */
                        }
                    }
                    Case (0xBC)
                    {
                        If (Arg1)
                        {
                            EBBC = Arg2
                        }
                        Else
                        {
                            Local0 = EBBC /* \_SB_.PCI0.SBRG.EC0_.EBBC */
                        }
                    }
                    Case (0xBD)
                    {
                        If (Arg1)
                        {
                            EBBD = Arg2
                        }
                        Else
                        {
                            Local0 = EBBD /* \_SB_.PCI0.SBRG.EC0_.EBBD */
                        }
                    }
                    Case (0xBE)
                    {
                        If (Arg1)
                        {
                            EBBE = Arg2
                        }
                        Else
                        {
                            Local0 = EBBE /* \_SB_.PCI0.SBRG.EC0_.EBBE */
                        }
                    }
                    Case (0xBF)
                    {
                        If (Arg1)
                        {
                            EBBF = Arg2
                        }
                        Else
                        {
                            Local0 = EBBF /* \_SB_.PCI0.SBRG.EC0_.EBBF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECCX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xC0)
                    {
                        If (Arg1)
                        {
                            EBC0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC0 /* \_SB_.PCI0.SBRG.EC0_.EBC0 */
                        }
                    }
                    Case (0xC1)
                    {
                        If (Arg1)
                        {
                            EBC1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC1 /* \_SB_.PCI0.SBRG.EC0_.EBC1 */
                        }
                    }
                    Case (0xC2)
                    {
                        If (Arg1)
                        {
                            EBC2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC2 /* \_SB_.PCI0.SBRG.EC0_.EBC2 */
                        }
                    }
                    Case (0xC3)
                    {
                        If (Arg1)
                        {
                            EBC3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC3 /* \_SB_.PCI0.SBRG.EC0_.EBC3 */
                        }
                    }
                    Case (0xC4)
                    {
                        If (Arg1)
                        {
                            EBC4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC4 /* \_SB_.PCI0.SBRG.EC0_.EBC4 */
                        }
                    }
                    Case (0xC5)
                    {
                        If (Arg1)
                        {
                            EBC5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC5 /* \_SB_.PCI0.SBRG.EC0_.EBC5 */
                        }
                    }
                    Case (0xC6)
                    {
                        If (Arg1)
                        {
                            EBC6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC6 /* \_SB_.PCI0.SBRG.EC0_.EBC6 */
                        }
                    }
                    Case (0xC7)
                    {
                        If (Arg1)
                        {
                            EBC7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC7 /* \_SB_.PCI0.SBRG.EC0_.EBC7 */
                        }
                    }
                    Case (0xC8)
                    {
                        If (Arg1)
                        {
                            EBC8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC8 /* \_SB_.PCI0.SBRG.EC0_.EBC8 */
                        }
                    }
                    Case (0xC9)
                    {
                        If (Arg1)
                        {
                            EBC9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC9 /* \_SB_.PCI0.SBRG.EC0_.EBC9 */
                        }
                    }
                    Case (0xCA)
                    {
                        If (Arg1)
                        {
                            EBCA = Arg2
                        }
                        Else
                        {
                            Local0 = EBCA /* \_SB_.PCI0.SBRG.EC0_.EBCA */
                        }
                    }
                    Case (0xCB)
                    {
                        If (Arg1)
                        {
                            EBCB = Arg2
                        }
                        Else
                        {
                            Local0 = EBCB /* \_SB_.PCI0.SBRG.EC0_.EBCB */
                        }
                    }
                    Case (0xCC)
                    {
                        If (Arg1)
                        {
                            EBCC = Arg2
                        }
                        Else
                        {
                            Local0 = EBCC /* \_SB_.PCI0.SBRG.EC0_.EBCC */
                        }
                    }
                    Case (0xCD)
                    {
                        If (Arg1)
                        {
                            EBCD = Arg2
                        }
                        Else
                        {
                            Local0 = EBCD /* \_SB_.PCI0.SBRG.EC0_.EBCD */
                        }
                    }
                    Case (0xCE)
                    {
                        If (Arg1)
                        {
                            EBCE = Arg2
                        }
                        Else
                        {
                            Local0 = EBCE /* \_SB_.PCI0.SBRG.EC0_.EBCE */
                        }
                    }
                    Case (0xCF)
                    {
                        If (Arg1)
                        {
                            EBCF = Arg2
                        }
                        Else
                        {
                            Local0 = EBCF /* \_SB_.PCI0.SBRG.EC0_.EBCF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECDX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xD0)
                    {
                        If (Arg1)
                        {
                            EBD0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD0 /* \_SB_.PCI0.SBRG.EC0_.EBD0 */
                        }
                    }
                    Case (0xD1)
                    {
                        If (Arg1)
                        {
                            EBD1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD1 /* \_SB_.PCI0.SBRG.EC0_.EBD1 */
                        }
                    }
                    Case (0xD2)
                    {
                        If (Arg1)
                        {
                            EBD2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD2 /* \_SB_.PCI0.SBRG.EC0_.EBD2 */
                        }
                    }
                    Case (0xD3)
                    {
                        If (Arg1)
                        {
                            EBD3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD3 /* \_SB_.PCI0.SBRG.EC0_.EBD3 */
                        }
                    }
                    Case (0xD4)
                    {
                        If (Arg1)
                        {
                            EBD4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD4 /* \_SB_.PCI0.SBRG.EC0_.EBD4 */
                        }
                    }
                    Case (0xD5)
                    {
                        If (Arg1)
                        {
                            EBD5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD5 /* \_SB_.PCI0.SBRG.EC0_.EBD5 */
                        }
                    }
                    Case (0xD6)
                    {
                        If (Arg1)
                        {
                            EBD6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD6 /* \_SB_.PCI0.SBRG.EC0_.EBD6 */
                        }
                    }
                    Case (0xD7)
                    {
                        If (Arg1)
                        {
                            EBD7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD7 /* \_SB_.PCI0.SBRG.EC0_.EBD7 */
                        }
                    }
                    Case (0xD8)
                    {
                        If (Arg1)
                        {
                            EBD8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD8 /* \_SB_.PCI0.SBRG.EC0_.EBD8 */
                        }
                    }
                    Case (0xD9)
                    {
                        If (Arg1)
                        {
                            EBD9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD9 /* \_SB_.PCI0.SBRG.EC0_.EBD9 */
                        }
                    }
                    Case (0xDA)
                    {
                        If (Arg1)
                        {
                            EBDA = Arg2
                        }
                        Else
                        {
                            Local0 = EBDA /* \_SB_.PCI0.SBRG.EC0_.EBDA */
                        }
                    }
                    Case (0xDB)
                    {
                        If (Arg1)
                        {
                            EBDB = Arg2
                        }
                        Else
                        {
                            Local0 = EBDB /* \_SB_.PCI0.SBRG.EC0_.EBDB */
                        }
                    }
                    Case (0xDC)
                    {
                        If (Arg1)
                        {
                            EBDC = Arg2
                        }
                        Else
                        {
                            Local0 = EBDC /* \_SB_.PCI0.SBRG.EC0_.EBDC */
                        }
                    }
                    Case (0xDD)
                    {
                        If (Arg1)
                        {
                            EBDD = Arg2
                        }
                        Else
                        {
                            Local0 = EBDD /* \_SB_.PCI0.SBRG.EC0_.EBDD */
                        }
                    }
                    Case (0xDE)
                    {
                        If (Arg1)
                        {
                            EBDE = Arg2
                        }
                        Else
                        {
                            Local0 = EBDE /* \_SB_.PCI0.SBRG.EC0_.EBDE */
                        }
                    }
                    Case (0xDF)
                    {
                        If (Arg1)
                        {
                            EBDF = Arg2
                        }
                        Else
                        {
                            Local0 = EBDF /* \_SB_.PCI0.SBRG.EC0_.EBDF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECEX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xE0)
                    {
                        If (Arg1)
                        {
                            EBE0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE0 /* \_SB_.PCI0.SBRG.EC0_.EBE0 */
                        }
                    }
                    Case (0xE1)
                    {
                        If (Arg1)
                        {
                            EBE1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE1 /* \_SB_.PCI0.SBRG.EC0_.EBE1 */
                        }
                    }
                    Case (0xE2)
                    {
                        If (Arg1)
                        {
                            EBE2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE2 /* \_SB_.PCI0.SBRG.EC0_.EBE2 */
                        }
                    }
                    Case (0xE3)
                    {
                        If (Arg1)
                        {
                            EBE3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE3 /* \_SB_.PCI0.SBRG.EC0_.EBE3 */
                        }
                    }
                    Case (0xE4)
                    {
                        If (Arg1)
                        {
                            EBE4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE4 /* \_SB_.PCI0.SBRG.EC0_.EBE4 */
                        }
                    }
                    Case (0xE5)
                    {
                        If (Arg1)
                        {
                            EBE5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE5 /* \_SB_.PCI0.SBRG.EC0_.EBE5 */
                        }
                    }
                    Case (0xE6)
                    {
                        If (Arg1)
                        {
                            EBE6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE6 /* \_SB_.PCI0.SBRG.EC0_.EBE6 */
                        }
                    }
                    Case (0xE7)
                    {
                        If (Arg1)
                        {
                            EBE7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE7 /* \_SB_.PCI0.SBRG.EC0_.EBE7 */
                        }
                    }
                    Case (0xE8)
                    {
                        If (Arg1)
                        {
                            EBE8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE8 /* \_SB_.PCI0.SBRG.EC0_.EBE8 */
                        }
                    }
                    Case (0xE9)
                    {
                        If (Arg1)
                        {
                            EBE9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE9 /* \_SB_.PCI0.SBRG.EC0_.EBE9 */
                        }
                    }
                    Case (0xEA)
                    {
                        If (Arg1)
                        {
                            EBEA = Arg2
                        }
                        Else
                        {
                            Local0 = EBEA /* \_SB_.PCI0.SBRG.EC0_.EBEA */
                        }
                    }
                    Case (0xEB)
                    {
                        If (Arg1)
                        {
                            EBEB = Arg2
                        }
                        Else
                        {
                            Local0 = EBEB /* \_SB_.PCI0.SBRG.EC0_.EBEB */
                        }
                    }
                    Case (0xEC)
                    {
                        If (Arg1)
                        {
                            EBEC = Arg2
                        }
                        Else
                        {
                            Local0 = EBEC /* \_SB_.PCI0.SBRG.EC0_.EBEC */
                        }
                    }
                    Case (0xED)
                    {
                        If (Arg1)
                        {
                            EBED = Arg2
                        }
                        Else
                        {
                            Local0 = EBED /* \_SB_.PCI0.SBRG.EC0_.EBED */
                        }
                    }
                    Case (0xEE)
                    {
                        If (Arg1)
                        {
                            EBEE = Arg2
                        }
                        Else
                        {
                            Local0 = EBEE /* \_SB_.PCI0.SBRG.EC0_.EBEE */
                        }
                    }
                    Case (0xEF)
                    {
                        If (Arg1)
                        {
                            EBEF = Arg2
                        }
                        Else
                        {
                            Local0 = EBEF /* \_SB_.PCI0.SBRG.EC0_.EBEF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECFX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xF0)
                    {
                        If (Arg1)
                        {
                            EBF0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF0 /* \_SB_.PCI0.SBRG.EC0_.EBF0 */
                        }
                    }
                    Case (0xF1)
                    {
                        If (Arg1)
                        {
                            EBF1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF1 /* \_SB_.PCI0.SBRG.EC0_.EBF1 */
                        }
                    }
                    Case (0xF2)
                    {
                        If (Arg1)
                        {
                            EBF2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF2 /* \_SB_.PCI0.SBRG.EC0_.EBF2 */
                        }
                    }
                    Case (0xF3)
                    {
                        If (Arg1)
                        {
                            EBF3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF3 /* \_SB_.PCI0.SBRG.EC0_.EBF3 */
                        }
                    }
                    Case (0xF4)
                    {
                        If (Arg1)
                        {
                            EBF4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF4 /* \_SB_.PCI0.SBRG.EC0_.EBF4 */
                        }
                    }
                    Case (0xF5)
                    {
                        If (Arg1)
                        {
                            EBF5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF5 /* \_SB_.PCI0.SBRG.EC0_.EBF5 */
                        }
                    }
                    Case (0xF6)
                    {
                        If (Arg1)
                        {
                            EBF6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF6 /* \_SB_.PCI0.SBRG.EC0_.EBF6 */
                        }
                    }
                    Case (0xF7)
                    {
                        If (Arg1)
                        {
                            EBF7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF7 /* \_SB_.PCI0.SBRG.EC0_.EBF7 */
                        }
                    }
                    Case (0xF8)
                    {
                        If (Arg1)
                        {
                            EBF8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF8 /* \_SB_.PCI0.SBRG.EC0_.EBF8 */
                        }
                    }
                    Case (0xF9)
                    {
                        If (Arg1)
                        {
                            EBF9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF9 /* \_SB_.PCI0.SBRG.EC0_.EBF9 */
                        }
                    }
                    Case (0xFA)
                    {
                        If (Arg1)
                        {
                            EBFA = Arg2
                        }
                        Else
                        {
                            Local0 = EBFA /* \_SB_.PCI0.SBRG.EC0_.EBFA */
                        }
                    }
                    Case (0xFB)
                    {
                        If (Arg1)
                        {
                            EBFB = Arg2
                        }
                        Else
                        {
                            Local0 = EBFB /* \_SB_.PCI0.SBRG.EC0_.EBFB */
                        }
                    }
                    Case (0xFC)
                    {
                        If (Arg1)
                        {
                            EBFC = Arg2
                        }
                        Else
                        {
                            Local0 = EBFC /* \_SB_.PCI0.SBRG.EC0_.EBFC */
                        }
                    }
                    Case (0xFD)
                    {
                        If (Arg1)
                        {
                            EBFD = Arg2
                        }
                        Else
                        {
                            Local0 = EBFD /* \_SB_.PCI0.SBRG.EC0_.EBFD */
                        }
                    }
                    Case (0xFE)
                    {
                        If (Arg1)
                        {
                            EBFE = Arg2
                        }
                        Else
                        {
                            Local0 = EBFE /* \_SB_.PCI0.SBRG.EC0_.EBFE */
                        }
                    }
                    Case (0xFF)
                    {
                        If (Arg1)
                        {
                            EBFF = Arg2
                        }
                        Else
                        {
                            Local0 = EBFF /* \_SB_.PCI0.SBRG.EC0_.EBFF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECCM, 3, Serialized)
            {
                If (!ECAV ())
                {
                    Return (Ones)
                }

                Local0 = Zero
                Local1 = (Arg0 & 0xF0)
                Switch (Local1)
                {
                    Case (Zero)
                    {
                        Local0 = EC0X (Arg0, Arg1, Arg2)
                    }
                    Case (0x10)
                    {
                        Local0 = EC1X (Arg0, Arg1, Arg2)
                    }
                    Case (0x20)
                    {
                        Local0 = EC2X (Arg0, Arg1, Arg2)
                    }
                    Case (0x30)
                    {
                        Local0 = EC3X (Arg0, Arg1, Arg2)
                    }
                    Case (0x40)
                    {
                        Local0 = EC4X (Arg0, Arg1, Arg2)
                    }
                    Case (0x50)
                    {
                        Local0 = EC5X (Arg0, Arg1, Arg2)
                    }
                    Case (0x60)
                    {
                        Local0 = EC6X (Arg0, Arg1, Arg2)
                    }
                    Case (0x70)
                    {
                        Local0 = EC7X (Arg0, Arg1, Arg2)
                    }
                    Case (0x80)
                    {
                        Local0 = EC8X (Arg0, Arg1, Arg2)
                    }
                    Case (0x90)
                    {
                        Local0 = EC9X (Arg0, Arg1, Arg2)
                    }
                    Case (0xA0)
                    {
                        Local0 = ECAX (Arg0, Arg1, Arg2)
                    }
                    Case (0xB0)
                    {
                        Local0 = ECBX (Arg0, Arg1, Arg2)
                    }
                    Case (0xC0)
                    {
                        Local0 = ECCX (Arg0, Arg1, Arg2)
                    }
                    Case (0xD0)
                    {
                        Local0 = ECDX (Arg0, Arg1, Arg2)
                    }
                    Case (0xE0)
                    {
                        Local0 = ECEX (Arg0, Arg1, Arg2)
                    }
                    Case (0xF0)
                    {
                        Local0 = ECFX (Arg0, Arg1, Arg2)
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (BN00, 0, NotSerialized)
        {
            Return (BRB) /* \_SB_.PCI0.BRB_ */
        }

        Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
        {
            Return (Zero)
        }
    }

    Scope (_SB.S0D1)
    {
        Method (BN01, 0, NotSerialized)
        {
            Return (BRB) /* \_SB_.S0D1.BRB_ */
        }

        Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
        {
            Return (One)
        }
    }

    Scope (_SB.S0D2)
    {
        Method (BN02, 0, NotSerialized)
        {
            Return (BRB) /* \_SB_.S0D2.BRB_ */
        }

        Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
        {
            Return (0x02)
        }
    }

    Scope (_SB.S0D3)
    {
        Method (BN03, 0, NotSerialized)
        {
            Return (BRB) /* \_SB_.S0D3.BRB_ */
        }

        Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
        {
            Return (0x03)
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            IO64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = IO64 /* \_SB_.IO64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = IO64 /* \_SB_.IO64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSFL ()
            DSPI ()
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y38)
                    IRQNoFlags (_Y39)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y38._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y38._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y39._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3A)
                    IRQNoFlags (_Y3B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y3A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y3A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y3B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3C)
                    IRQNoFlags (_Y3D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y3C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y3C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y3D._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y3E)
                    IRQNoFlags (_Y3F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y3E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y3E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y3F._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y40)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y41)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y42)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y43)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y40._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y40._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y41._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y41._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y42._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y42._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y43._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y43._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y43._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (MWTT, 0x02)
        Scope (FUR0)
        {
            Device (UART)
            {
                Name (_HID, "UTK0001A")  // _HID: Hardware ID
                Name (_CID, "UARTTest")  // _CID: Compatible ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.FUR0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.FUR0.UART._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (FUR1)
        {
            Device (UART)
            {
                Name (_HID, "UTK0001B")  // _HID: Hardware ID
                Name (_CID, "UARTTest")  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                            0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                            0x0020, 0x0020, "\\_SB.FUR1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.FUR1.UART._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CA)
        {
            Device (WT1A)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001A")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1A)
            {
                Name (_HID, "STK0001A")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2A)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002A")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2A)
            {
                Name (_HID, "STK0002A")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3A)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003A")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3A)
            {
                Name (_HID, "STK0003A")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4A)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004A")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4A)
            {
                Name (_HID, "STK0004A")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5A)
            {
                Name (_HID, "STK0005A")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CB)
        {
            Device (WT1B)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001B")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1B)
            {
                Name (_HID, "STK0001B")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2B)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002B")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2B)
            {
                Name (_HID, "STK0002B")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3B)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003B")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3B)
            {
                Name (_HID, "STK0003B")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4B)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004B")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4B)
            {
                Name (_HID, "STK0004B")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5B)
            {
                Name (_HID, "STK0005B")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CB",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CC)
        {
            Device (WT1C)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001C")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1C)
            {
                Name (_HID, "STK0001C")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2C)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002C")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2C)
            {
                Name (_HID, "STK0002C")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3C)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003C")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3C)
            {
                Name (_HID, "STK0003C")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4C)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004C")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4C)
            {
                Name (_HID, "STK0004C")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5C)
            {
                Name (_HID, "STK0005C")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CC",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CD)
        {
            Device (WT1D)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001D")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1D)
            {
                Name (_HID, "STK0001D")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2D)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002D")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2D)
            {
                Name (_HID, "STK0002D")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3D)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003D")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3D)
            {
                Name (_HID, "STK0003D")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4D)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004D")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4D)
            {
                Name (_HID, "STK0004D")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5D)
            {
                Name (_HID, "STK0005D")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CE)
        {
            Device (WT1E)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001E")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFE")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.WT1E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1E)
            {
                Name (_HID, "STK0001E")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.MT1E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2E)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002E")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFE")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.WT2E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2E)
            {
                Name (_HID, "STK0002E")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.MT2E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3E)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003E")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFE")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.WT3E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3E)
            {
                Name (_HID, "STK0003E")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.MT3E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4E)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004E")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFE")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.WT4E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4E)
            {
                Name (_HID, "STK0004E")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.MT4E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5E)
            {
                Name (_HID, "STK0005E")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CE",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CE.MT5E._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (I2CF)
        {
            Device (WT1F)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0001F")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFF")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.WT1F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT1F)
            {
                Name (_HID, "STK0001F")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB_.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.MT1F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT2F)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0002F")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFF")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                            AddressingMode7Bit, "\\_SB.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.WT2F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT2F)
            {
                Name (_HID, "STK0002F")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB_.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.MT2F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT3F)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0003F")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFF")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.WT3F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT3F)
            {
                Name (_HID, "STK0003F")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB_.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.MT3F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (WT4F)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, "STK0004F")  // _HID: Hardware ID
                Name (_CID, "SPBTestKMDFF")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                            AddressingMode7Bit, "\\_SB.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.WT4F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT4F)
            {
                Name (_HID, "STK0004F")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                            AddressingMode7Bit, "\\_SB_.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.MT4F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (MT5F)
            {
                Name (_HID, "STK0005F")  // _HID: Hardware ID
                Name (_CID, "WITTTest")  // _CID: Compatible ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                            AddressingMode7Bit, "\\_SB_.I2CF",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (RBUF) /* \_SB_.I2CF.MT5F._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((MWTT == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Method (SDRT, 0, NotSerialized)
        {
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0x78144018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048, 
            DSAF,   32
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        OperationRegion (IOB2, SystemIO, SMIO, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMPT,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMPT = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,  // BC...GgF
                /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,  // .p...9..
                /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,  //  ..fBD..
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // r.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Name (CCAC, Zero)
            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (WMBC, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x43455053)
                    {
                        Return (SPEC (Arg2))
                    }
                    Case (0x50564544)
                    {
                        Return (DEVP (Arg2))
                    }
                    Case (0x50534453)
                    {
                        Return (SDSP (Arg2))
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (Arg2))
                    }
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x5446424B)
                    {
                        Return (KBFT (Arg2))
                    }
                    Case (0x59454B48)
                    {
                        Return (HKEY ())
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Mutex (ASMX, 0x00)
            Name (IOHW, 0x0290)
            Name (LCKS, Zero)
            OperationRegion (HWM, SystemIO, IOHW, 0x0A)
            Field (HWM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x05), 
                HIDX,   8, 
                HDAT,   8
            }

            IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
            {
                Offset (0x4E), 
                BANK,   4
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                    ,   4, 
                HMLK,   1
            }

            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \AMW0.RHWM.W_BK */
                    HIDX = W_ID /* \AMW0.RHWM.W_ID */
                    Local0 = HDAT /* \AMW0.HDAT */
                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (_GL)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \AMW0.WHWM.W_BK */
                    HIDX = W_ID /* \AMW0.WHWM.W_ID */
                    HDAT = W_DT /* \AMW0.WHWM.W_DT */
                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (_GL)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (_GL, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (_GL)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \AMW0.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (_GL)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = \_SB.PCI0.SBRG.EC0.ECCM (0xFF, One, W_BK)
                    Local0 = \_SB.PCI0.SBRG.EC0.ECCM (W_ID, Zero, Zero)
                    Release (_GL)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_ID)
                    CreateByteField (Arg0, One, W_DT)
                    Local0 = \_SB.PCI0.SBRG.EC0.ECCM (W_ID, One, W_DT)
                    Release (_GL)
                    Return (Local0)
                }

                Return (Ones)
            }

            OperationRegion (MHWM, SystemMemory, HWMM, 0x0300)
            Field (MHWM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x03), 
                R003,   8, 
                Offset (0x0D), 
                R00D,   8, 
                R00E,   8, 
                R00F,   8, 
                Offset (0x15), 
                R015,   8, 
                R016,   8, 
                R017,   8, 
                R018,   8, 
                R019,   8, 
                R01A,   8, 
                Offset (0x1E), 
                R01E,   8, 
                R01F,   8, 
                R020,   8, 
                R021,   8, 
                R022,   8, 
                R023,   8, 
                R024,   8, 
                R025,   8, 
                R026,   8, 
                R027,   8, 
                R028,   8, 
                R029,   8, 
                R02A,   8, 
                R02B,   8, 
                R02C,   8, 
                R02D,   8, 
                R02E,   8, 
                R02F,   8, 
                Offset (0x61), 
                R061,   8, 
                R062,   8, 
                R063,   8, 
                R064,   8, 
                Offset (0x69), 
                R069,   8, 
                R06A,   8, 
                R06B,   8, 
                R06C,   8, 
                Offset (0x71), 
                R071,   8, 
                R072,   8, 
                R073,   8, 
                R074,   8, 
                Offset (0x79), 
                R079,   8, 
                R07A,   8, 
                R07B,   8, 
                R07C,   8, 
                Offset (0x80), 
                R080,   8, 
                R081,   8, 
                Offset (0x93), 
                R093,   8, 
                R094,   8, 
                Offset (0x210), 
                R210,   8, 
                R211,   8, 
                Offset (0x215), 
                R215,   8, 
                Offset (0x219), 
                R219,   8, 
                Offset (0x220), 
                R220,   8, 
                R221,   8, 
                Offset (0x225), 
                R225,   8, 
                Offset (0x229), 
                R229,   8, 
                Offset (0x230), 
                R230,   8, 
                R231,   8, 
                Offset (0x235), 
                R235,   8, 
                Offset (0x239), 
                R239,   8, 
                Offset (0x240), 
                R240,   8, 
                R241,   8, 
                Offset (0x245), 
                R245,   8, 
                Offset (0x249), 
                R249,   8
            }

            Name (SOTR, Package (0x04)
            {
                "CPU VRM Output Current", 
                "Water Flow", 
                "Waterblock Flow", 
                "Fan Extension Card Present"
            })
            Name (RETN, Package (0x05)
            {
                "NULL", 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF
            })
            Name (INFO, Package (0x24)
            {
                Package (0x06)
                {
                    "CPU Core Voltage", 
                    Zero, 
                    Zero, 
                    One, 
                    0x03, 
                    Zero
                }, 

                Package (0x06)
                {
                    "CPU SOC Voltage", 
                    Zero, 
                    One, 
                    One, 
                    0x03, 
                    One
                }, 

                Package (0x06)
                {
                    "DRAM AB Voltage", 
                    Zero, 
                    0x02, 
                    One, 
                    0x03, 
                    0x02
                }, 

                Package (0x06)
                {
                    "DRAM CD Voltage", 
                    Zero, 
                    0x02, 
                    One, 
                    0x03, 
                    0x03
                }, 

                Package (0x06)
                {
                    "1.8V PLL Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x04
                }, 

                Package (0x06)
                {
                    "+12V Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x05
                }, 

                Package (0x06)
                {
                    "+5V Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x06
                }, 

                Package (0x06)
                {
                    "3VSB Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x07
                }, 

                Package (0x06)
                {
                    "VBAT Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x08
                }, 

                Package (0x06)
                {
                    "AVCC3 Voltage", 
                    Zero, 
                    0x03, 
                    One, 
                    0x03, 
                    0x09
                }, 

                Package (0x06)
                {
                    "CPU Temperature", 
                    One, 
                    Zero, 
                    One, 
                    Zero, 
                    0x0A
                }, 

                Package (0x06)
                {
                    "CPU Socket Temperature", 
                    One, 
                    Zero, 
                    One, 
                    Zero, 
                    0x0B
                }, 

                Package (0x06)
                {
                    "Motherboard Temperature", 
                    One, 
                    0x03, 
                    One, 
                    Zero, 
                    0x0C
                }, 

                Package (0x06)
                {
                    "CPU Fan", 
                    0x02, 
                    0x03, 
                    One, 
                    One, 
                    0x0D
                }, 

                Package (0x06)
                {
                    "Chassis Fan 1", 
                    0x02, 
                    0x03, 
                    One, 
                    One, 
                    0x0E
                }, 

                Package (0x06)
                {
                    "Chassis Fan 2", 
                    0x02, 
                    0x03, 
                    One, 
                    One, 
                    0x0F
                }, 

                Package (0x06)
                {
                    "Chassis Fan 3", 
                    0x02, 
                    0x03, 
                    One, 
                    One, 
                    0x10
                }, 

                Package (0x06)
                {
                    "Water Pump 1", 
                    0x02, 
                    0x03, 
                    One, 
                    One, 
                    0x11
                }, 

                Package (0x06)
                {
                    "SB 1.05V Voltage", 
                    Zero, 
                    0x03, 
                    0x02, 
                    0x03, 
                    0x12
                }, 

                Package (0x06)
                {
                    "Chipset Temperature", 
                    One, 
                    0x04, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x06)
                {
                    "Tsensor Temperature", 
                    One, 
                    0x05, 
                    0x02, 
                    Zero, 
                    0x14
                }, 

                Package (0x06)
                {
                    "CPU VRM Temperature", 
                    One, 
                    0x06, 
                    0x02, 
                    Zero, 
                    0x15
                }, 

                Package (0x06)
                {
                    "CPU VRM Output Current", 
                    0x03, 
                    0x06, 
                    0x02, 
                    One, 
                    0x16
                }, 

                Package (0x06)
                {
                    "CPU OPT", 
                    0x02, 
                    0x03, 
                    0x02, 
                    One, 
                    0x17
                }, 

                Package (0x06)
                {
                    "CPU Core Voltage", 
                    Zero, 
                    Zero, 
                    0x02, 
                    0x03, 
                    0x18
                }, 

                Package (0x06)
                {
                    "CPU SOC Voltage", 
                    Zero, 
                    One, 
                    0x02, 
                    0x03, 
                    0x19
                }, 

                Package (0x06)
                {
                    "DRAM AB Voltage", 
                    Zero, 
                    0x02, 
                    0x02, 
                    0x03, 
                    0x1A
                }, 

                Package (0x06)
                {
                    "DRAM CD Voltage", 
                    Zero, 
                    0x02, 
                    0x02, 
                    0x03, 
                    0x1B
                }, 

                Package (0x06)
                {
                    "Fan Extension Card Present", 
                    0x05, 
                    0x03, 
                    0x02, 
                    0x02, 
                    0x22
                }, 

                Package (0x06)
                {
                    "EXT Tsensor 1", 
                    One, 
                    0x05, 
                    0x02, 
                    Zero, 
                    0x23
                }, 

                Package (0x06)
                {
                    "EXT Tsensor 2", 
                    One, 
                    0x05, 
                    0x02, 
                    Zero, 
                    0x24
                }, 

                Package (0x06)
                {
                    "EXT Tsensor 3", 
                    One, 
                    0x05, 
                    0x02, 
                    Zero, 
                    0x25
                }, 

                Package (0x06)
                {
                    "EXT Fan 1", 
                    0x02, 
                    0x05, 
                    0x02, 
                    One, 
                    0x26
                }, 

                Package (0x06)
                {
                    "EXT Fan 2", 
                    0x02, 
                    0x05, 
                    0x02, 
                    One, 
                    0x27
                }, 

                Package (0x06)
                {
                    "EXT Fan 3", 
                    0x02, 
                    0x05, 
                    0x02, 
                    One, 
                    0x28
                }, 

                Package (0x06)
                {
                    "Cover Fan", 
                    0x02, 
                    0x03, 
                    0x02, 
                    One, 
                    0x2C
                }
            })
            Method (GNAM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, _NUM)
                Local0 = DerefOf (DerefOf (INFO [Arg0]) [Zero])
                RETN [Zero] = Local0
                Local0 = DerefOf (DerefOf (INFO [Arg0]) [One])
                RETN [One] = Local0
                Local0 = DerefOf (DerefOf (INFO [Arg0]) [0x02])
                RETN [0x02] = Local0
                Local0 = DerefOf (DerefOf (INFO [Arg0]) [0x03])
                RETN [0x03] = Local0
                Local0 = DerefOf (DerefOf (INFO [Arg0]) [0x04])
                RETN [0x04] = Local0
                Return (RETN) /* \AMW0.RETN */
            }

            Name (SENX, 0x78144018)
            OperationRegion (SENB, SystemMemory, SENX, 0x0100)
            Field (SENB, DWordAcc, NoLock, Preserve)
            {
                STR1,   32, 
                STR2,   32, 
                STR3,   32, 
                NU00,   32, 
                NU01,   32, 
                NU02,   32, 
                NU03,   32, 
                NU04,   32, 
                NU05,   32, 
                NU06,   32, 
                NU07,   32, 
                NU08,   32, 
                NU09,   32, 
                NU10,   32, 
                NU11,   32, 
                NU12,   32, 
                NU13,   32, 
                NU14,   32, 
                NU15,   32, 
                NU16,   32, 
                NU17,   32, 
                NU18,   32, 
                NU19,   32, 
                NU20,   32, 
                NU21,   32, 
                NU22,   32, 
                NU23,   32, 
                NU24,   32, 
                NU25,   32, 
                NU26,   32, 
                NU27,   32, 
                NU28,   32, 
                NU29,   32, 
                NU30,   32, 
                NU31,   32, 
                NU32,   32, 
                NU33,   32, 
                NU34,   32, 
                NU35,   32, 
                NU36,   32, 
                NU37,   32, 
                NU38,   32, 
                NU39,   32, 
                NU40,   32, 
                NU41,   32, 
                NU42,   32, 
                NU43,   32, 
                NU44,   32
            }

            Method (GNUM, 1, Serialized)
            {
                Local0 = SizeOf (INFO)
                Return (Local0)
            }

            Method (RSEN, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, INDX)
                If ((INDX == Zero))
                {
                    Local0 = NU00 /* \AMW0.NU00 */
                }
                ElseIf ((INDX == One))
                {
                    Local0 = NU01 /* \AMW0.NU01 */
                }
                ElseIf ((INDX == 0x02))
                {
                    Local0 = NU02 /* \AMW0.NU02 */
                }
                ElseIf ((INDX == 0x03))
                {
                    Local0 = NU03 /* \AMW0.NU03 */
                }
                ElseIf ((INDX == 0x04))
                {
                    Local0 = NU04 /* \AMW0.NU04 */
                }
                ElseIf ((INDX == 0x05))
                {
                    Local0 = NU05 /* \AMW0.NU05 */
                }
                ElseIf ((INDX == 0x06))
                {
                    Local0 = NU06 /* \AMW0.NU06 */
                }
                ElseIf ((INDX == 0x07))
                {
                    Local0 = NU07 /* \AMW0.NU07 */
                }
                ElseIf ((INDX == 0x08))
                {
                    Local0 = NU08 /* \AMW0.NU08 */
                }
                ElseIf ((INDX == 0x09))
                {
                    Local0 = NU09 /* \AMW0.NU09 */
                }
                ElseIf ((INDX == 0x0A))
                {
                    Local0 = NU10 /* \AMW0.NU10 */
                }
                ElseIf ((INDX == 0x0B))
                {
                    Local0 = NU11 /* \AMW0.NU11 */
                }
                ElseIf ((INDX == 0x0C))
                {
                    Local0 = NU12 /* \AMW0.NU12 */
                }
                ElseIf ((INDX == 0x0D))
                {
                    Local0 = NU13 /* \AMW0.NU13 */
                }
                ElseIf ((INDX == 0x0E))
                {
                    Local0 = NU14 /* \AMW0.NU14 */
                }
                ElseIf ((INDX == 0x0F))
                {
                    Local0 = NU15 /* \AMW0.NU15 */
                }
                ElseIf ((INDX == 0x10))
                {
                    Local0 = NU16 /* \AMW0.NU16 */
                }
                ElseIf ((INDX == 0x11))
                {
                    Local0 = NU17 /* \AMW0.NU17 */
                }
                ElseIf ((INDX == 0x12))
                {
                    Local0 = NU18 /* \AMW0.NU18 */
                }
                ElseIf ((INDX == 0x13))
                {
                    Local0 = NU19 /* \AMW0.NU19 */
                }
                ElseIf ((INDX == 0x14))
                {
                    Local0 = NU20 /* \AMW0.NU20 */
                }
                ElseIf ((INDX == 0x15))
                {
                    Local0 = NU21 /* \AMW0.NU21 */
                }
                ElseIf ((INDX == 0x16))
                {
                    Local0 = NU22 /* \AMW0.NU22 */
                }
                ElseIf ((INDX == 0x17))
                {
                    Local0 = NU23 /* \AMW0.NU23 */
                }
                ElseIf ((INDX == 0x18))
                {
                    Local0 = NU24 /* \AMW0.NU24 */
                }
                ElseIf ((INDX == 0x19))
                {
                    Local0 = NU25 /* \AMW0.NU25 */
                }
                ElseIf ((INDX == 0x1A))
                {
                    Local0 = NU26 /* \AMW0.NU26 */
                }
                ElseIf ((INDX == 0x1B))
                {
                    Local0 = NU27 /* \AMW0.NU27 */
                }
                ElseIf ((INDX == 0x1C))
                {
                    Local0 = NU28 /* \AMW0.NU28 */
                }
                ElseIf ((INDX == 0x1D))
                {
                    Local0 = NU29 /* \AMW0.NU29 */
                }
                ElseIf ((INDX == 0x1E))
                {
                    Local0 = NU30 /* \AMW0.NU30 */
                }
                ElseIf ((INDX == 0x1F))
                {
                    Local0 = NU31 /* \AMW0.NU31 */
                }
                ElseIf ((INDX == 0x20))
                {
                    Local0 = NU32 /* \AMW0.NU32 */
                }
                ElseIf ((INDX == 0x21))
                {
                    Local0 = NU33 /* \AMW0.NU33 */
                }
                ElseIf ((INDX == 0x22))
                {
                    Local0 = NU34 /* \AMW0.NU34 */
                }
                ElseIf ((INDX == 0x23))
                {
                    Local0 = NU35 /* \AMW0.NU35 */
                }
                ElseIf ((INDX == 0x24))
                {
                    Local0 = NU36 /* \AMW0.NU36 */
                }
                ElseIf ((INDX == 0x25))
                {
                    Local0 = NU37 /* \AMW0.NU37 */
                }
                ElseIf ((INDX == 0x26))
                {
                    Local0 = NU38 /* \AMW0.NU38 */
                }
                ElseIf ((INDX == 0x27))
                {
                    Local0 = NU39 /* \AMW0.NU39 */
                }
                ElseIf ((INDX == 0x28))
                {
                    Local0 = NU40 /* \AMW0.NU40 */
                }
                ElseIf ((INDX == 0x29))
                {
                    Local0 = NU41 /* \AMW0.NU41 */
                }
                ElseIf ((INDX == 0x2A))
                {
                    Local0 = NU42 /* \AMW0.NU42 */
                }
                ElseIf ((INDX == 0x2B))
                {
                    Local0 = NU43 /* \AMW0.NU43 */
                }
                ElseIf ((INDX == 0x2C))
                {
                    Local0 = NU44 /* \AMW0.NU44 */
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (GADD, 1, Serialized)
            {
                STR1 = "ASUS"
                STR2 = "SENS"
                STR3 = "OR01"
                Return (SENX) /* \AMW0.SENX */
            }

            OperationRegion (SGP, SystemIO, 0x2E, 0x02)
            Field (SGP, ByteAcc, NoLock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            Name (BKUP, Zero)
            Method (SMBD, 0, Serialized)
            {
                INDX = 0x07
                DATA = 0x04
                INDX = 0xF3
                BKUP = DATA /* \AMW0.DATA */
                INDX = 0xF3
                DATA = Zero
                Return (Zero)
            }

            Method (SMBE, 0, Serialized)
            {
                INDX = 0x07
                DATA = 0x04
                INDX = 0xF3
                DATA = BKUP /* \AMW0.BKUP */
                Return (Zero)
            }

            OperationRegion (ECR0, SystemIO, 0x60, 0x10)
            Field (ECR0, ByteAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                EC62,   8, 
                Offset (0x06), 
                EC66,   8, 
                Offset (0x08), 
                EC68,   8, 
                Offset (0x0C), 
                EC6C,   8
            }

            Method (IBFZ, 0, Serialized)
            {
                Local0 = 0x1000
                While ((Local0-- && (EC66 & 0x02)))
                {
                    Sleep (One)
                }
            }

            Method (OBFZ, 0, Serialized)
            {
                Local0 = 0x1000
                While (Local0--)
                {
                    If ((EC66 & One))
                    {
                        Break
                    }

                    Sleep (One)
                }
            }

            Method (UPHM, 0, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    IBFZ ()
                    EC66 = 0xD1
                    OBFZ ()
                    Local0 = EC62 /* \AMW0.EC62 */
                    If (((Local0 && One) != Zero))
                    {
                        Release (_GL)
                        Return (Ones)
                    }

                    Sleep (One)
                    Local0 = R020 /* \AMW0.R020 */
                    Local0 *= 0x5528
                    NU00 = Local0
                    Local0 = R024 /* \AMW0.R024 */
                    Local0 *= 0x5528
                    NU01 = Local0
                    Local0 = R021 /* \AMW0.R021 */
                    Local0 *= 0x5528
                    NU02 = Local0
                    Local0 = R025 /* \AMW0.R025 */
                    Local0 *= 0x5528
                    NU03 = Local0
                    Local0 = R026 /* \AMW0.R026 */
                    Local0 *= 0x5528
                    NU04 = Local0
                    Local0 = R022 /* \AMW0.R022 */
                    Local0 *= 0xFF78
                    NU05 = Local0
                    Local0 = R023 /* \AMW0.R023 */
                    Local0 *= 0x6A72
                    NU06 = Local0
                    Local0 = R027 /* \AMW0.R027 */
                    Local0 *= 0x5528
                    NU07 = Local0
                    Local0 = R028 /* \AMW0.R028 */
                    Local0 *= 0x5528
                    NU08 = Local0
                    Local0 = R02F /* \AMW0.R02F */
                    Local0 *= 0x5528
                    NU09 = Local0
                    Local0 = R029 /* \AMW0.R029 */
                    NU10 = Local0
                    Local0 = R02B /* \AMW0.R02B */
                    NU11 = Local0
                    Local0 = R02A /* \AMW0.R02A */
                    NU12 = Local0
                    Local0 = R018 /* \AMW0.R018 */
                    Local1 = R00D /* \AMW0.R00D */
                    Local0 = ((Local0 << 0x08) | Local1)
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }

                    NU13 = Local0
                    Local0 = R019 /* \AMW0.R019 */
                    Local1 = R00E /* \AMW0.R00E */
                    Local0 = ((Local0 << 0x08) | Local1)
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }

                    NU14 = Local0
                    Local0 = R01A /* \AMW0.R01A */
                    Local1 = R00F /* \AMW0.R00F */
                    Local0 = ((Local0 << 0x08) | Local1)
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }

                    NU15 = Local0
                    Local0 = R081 /* \AMW0.R081 */
                    Local1 = R080 /* \AMW0.R080 */
                    Local0 = ((Local0 << 0x08) | Local1)
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }

                    NU16 = Local0
                    Local0 = R094 /* \AMW0.R094 */
                    Local1 = R093 /* \AMW0.R093 */
                    Local0 = ((Local0 << 0x08) | Local1)
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }

                    NU17 = Local0
                    Sleep (One)
                    EC66 = 0xD0
                    IBFZ ()
                    EC62 = One
                    IBFZ ()
                    Release (_GL)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (WECB, 1, Serialized)
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECCM (0xFF, One, Arg0)
                Return (Local0)
            }

            Method (REC1, 1, Serialized)
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECCM (Arg0, Zero, Zero)
                Return (Local0)
            }

            Method (REXT, 1, Serialized)
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ECCM (0xFF, One, Zero)
                Local0 = \_SB.PCI0.SBRG.EC0.ECCM (0x43, One, Arg0)
                Local0 = \_SB.PCI0.SBRG.EC0.ECCM (0x57, Zero, Zero)
                Local1 = \_SB.PCI0.SBRG.EC0.ECCM (0x58, Zero, Zero)
                Local0 = ((Local0 << 0x08) | Local1)
                Return (Local0)
            }

            Method (IBFY, 0, Serialized)
            {
                Local0 = 0x1000
                While ((Local0-- && (EC6C & 0x02)))
                {
                    Sleep (One)
                }
            }

            Method (OBFY, 0, Serialized)
            {
                Local0 = 0x1000
                While (Local0--)
                {
                    If ((EC6C & One))
                    {
                        Break
                    }

                    Sleep (One)
                }
            }

            Method (REC2, 2, Serialized)
            {
                IBFY ()
                EC6C = 0x91
                IBFY ()
                EC68 = 0xFF
                IBFY ()
                EC68 = Arg0
                IBFY ()
                EC6C = 0x90
                IBFY ()
                EC68 = Arg1
                OBFY ()
                Local0 = EC68 /* \AMW0.EC68 */
                Return (Local0)
            }

            Method (UPEC, 0, Serialized)
            {
                If ((Acquire (_GL, 0x03E8) == Zero))
                {
                    WECB (Zero)
                    Local0 = REC1 (0x90)
                    Local1 = REC1 (0x91)
                    Local0 = ((Local0 << 0x08) | Local1)
                    Local0 *= 0x0C35
                    NU18 = Local0
                    Local0 = REC1 (0x3A)
                    NU19 = Local0
                    Local0 = REC1 (0x3D)
                    NU20 = Local0
                    Local0 = REC1 (0x3E)
                    NU21 = Local0
                    Local0 = REC1 (0xF4)
                    NU22 = Local0
                    Local0 = REC1 (0xBC)
                    Local1 = REC1 (0xBD)
                    Local0 = ((Local0 << 0x08) | Local1)
                    NU23 = Local0
                    Local0 = REC1 (0xA2)
                    Local1 = REC1 (0xA3)
                    Local0 = ((Local0 << 0x08) | Local1)
                    Local0 *= 0x03E8
                    NU24 = Local0
                    Local0 = REC1 (0xA4)
                    Local1 = REC1 (0xA5)
                    Local0 = ((Local0 << 0x08) | Local1)
                    Local0 *= 0x03E8
                    NU25 = Local0
                    Local0 = REC1 (0xA6)
                    Local1 = REC1 (0xA7)
                    Local0 = ((Local0 << 0x08) | Local1)
                    Local0 *= 0x03E8
                    NU26 = Local0
                    Local0 = REC1 (0xA8)
                    Local1 = REC1 (0xA9)
                    Local0 = ((Local0 << 0x08) | Local1)
                    Local0 *= 0x03E8
                    NU27 = Local0
                    Local0 = REC2 (Zero, 0x73)
                    NU34 = Local0
                    Local0 = REC1 (0x60)
                    NU35 = Local0
                    Local0 = REC1 (0x61)
                    NU36 = Local0
                    Local0 = REC1 (0x62)
                    NU37 = Local0
                    Local0 = REXT (0x0A)
                    NU38 = Local0
                    Local0 = REXT (0x0B)
                    NU39 = Local0
                    Local0 = REXT (0x0C)
                    NU40 = Local0
                    Local0 = REC2 (Zero, 0xBA)
                    Local1 = REC2 (Zero, 0xBB)
                    Local0 = ((Local0 << 0x08) | Local1)
                    NU44 = Local0
                    Release (_GL)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (UPSB, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, UPDS)
                If ((UPDS == Zero))
                {
                    Local0 = UPEC ()
                    Local0 = UPHM ()
                }
                ElseIf ((UPDS == One))
                {
                    Local0 = UPHM ()
                }
                ElseIf ((UPDS == 0x02))
                {
                    Local0 = UPEC ()
                }
                Else
                {
                    Return (Ones)
                }

                Return (Local0)
            }

            Name (VERN, 0x02)
            Method (GVER, 1, Serialized)
            {
                Return (VERN) /* \AMW0.VERN */
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x324D5352)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x324D5347)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x474D5352)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x474D5347)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x52574543)
                    {
                        Return (RSEN (Arg2))
                    }
                    Case (0x51574543)
                    {
                        Return (UPSB (Arg2))
                    }
                    Case (0x50574543)
                    {
                        Return (GNAM (Arg2))
                    }
                    Case (0x50574572)
                    {
                        Return (GNUM (Arg2))
                    }
                    Case (0x50574573)
                    {
                        Return (GADD (Arg2))
                    }
                    Case (0x50574574)
                    {
                        Return (GVER (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \AMW0.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (AMW0, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x0DD8)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xC8, 0x0D, 0x00, 0x00, 0x56, 0x59, 0x00, 0x00,  // ....VY..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5E, 0xAA, 0x00, 0x01, 0x06, 0x18, 0x42,  // .^.....B
                /* 0020 */  0x10, 0x07, 0x10, 0x4A, 0x29, 0x86, 0x42, 0x04,  // ...J).B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  // ...8.`0.
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  // <..F..eC
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  // .d@.....
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,  // .......M
                /* 0088 */  0x80, 0xB8, 0x61, 0xC8, 0xDA, 0x00, 0x04, 0x55,  // ..a....U
                /* 0090 */  0x98, 0x00, 0x5B, 0x30, 0x42, 0xA9, 0x0D, 0x46,  // ..[0B..F
                /* 0098 */  0x28, 0x8D, 0x21, 0x68, 0x18, 0x46, 0x89, 0x78,  // (.!h.F.x
                /* 00A0 */  0x48, 0x9D, 0xC1, 0x0A, 0x25, 0x62, 0x98, 0x10,  // H...%b..
                /* 00A8 */  0x11, 0x2A, 0xC3, 0x20, 0xC3, 0x0A, 0x15, 0x2D,  // .*. ...-
                /* 00B0 */  0x6E, 0x84, 0xF6, 0x07, 0x41, 0xA2, 0xAD, 0x58,  // n...A..X
                /* 00B8 */  0x43, 0x75, 0xA4, 0xD1, 0xA0, 0x86, 0x97, 0xE0,  // Cu......
                /* 00C0 */  0x70, 0x3D, 0xD4, 0x73, 0xEC, 0x5C, 0x80, 0x74,  // p=.s.\.t
                /* 00C8 */  0x60, 0x81, 0x04, 0x3F, 0x8B, 0x3A, 0xC7, 0x49,  // `..?.:.I
                /* 00D0 */  0x40, 0x12, 0x18, 0xEB, 0xF8, 0xD9, 0xC0, 0xF1,  // @.......
                /* 00D8 */  0xAE, 0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0,  // ..5..e..
                /* 00E0 */  0x50, 0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21,  // PC.@...!
                /* 00E8 */  0x32, 0x40, 0xCF, 0xE9, 0x68, 0x30, 0x07, 0x00,  // 2@..h0..
                /* 00F0 */  0x3B, 0x9C, 0x8C, 0xEE, 0x01, 0xDF, 0x05, 0xCD,  // ;.......
                /* 00F8 */  0x8E, 0x59, 0x16, 0x81, 0x34, 0x1E, 0x43, 0x9F,  // .Y..4.C.
                /* 0100 */  0xEE, 0xF9, 0x9C, 0x70, 0x02, 0xCB, 0x1F, 0x04,  // ...p....
                /* 0108 */  0x6A, 0x64, 0x86, 0xB6, 0xC1, 0x69, 0x09, 0x33,  // jd...i.3
                /* 0110 */  0xE4, 0xE1, 0x1F, 0x16, 0x13, 0x0B, 0xA1, 0x0F,  // ........
                /* 0118 */  0x82, 0xC7, 0x03, 0xEF, 0xFF, 0x3F, 0x1E, 0xF0,  // .....?..
                /* 0120 */  0x28, 0x3E, 0x13, 0x08, 0xE1, 0x95, 0x20, 0xB6,  // (>.... .
                /* 0128 */  0x07, 0xF4, 0x9C, 0x60, 0x60, 0xEC, 0x80, 0xEC,  // ...``...
                /* 0130 */  0x57, 0x00, 0x42, 0xF0, 0x32, 0x47, 0x24, 0xA7,  // W.B.2G$.
                /* 0138 */  0x08, 0x1A, 0x93, 0x31, 0x5A, 0x85, 0xD0, 0x10,  // ...1Z...
                /* 0140 */  0x42, 0x1B, 0xE2, 0xEC, 0xE2, 0x1F, 0xBC, 0x61,  // B......a
                /* 0148 */  0xCE, 0xDD, 0x04, 0x45, 0x8E, 0x00, 0xF5, 0x99,  // ...E....
                /* 0150 */  0xF0, 0x08, 0xF8, 0x31, 0x20, 0x7A, 0xE8, 0xB3,  // ...1 z..
                /* 0158 */  0x89, 0x7E, 0x3C, 0x51, 0x4E, 0xE2, 0x80, 0x7C,  // .~<QN..|
                /* 0160 */  0x66, 0x30, 0x42, 0xF0, 0x72, 0x0F, 0x09, 0x44,  // f0B.r..D
                /* 0168 */  0xF3, 0x1C, 0x74, 0x62, 0x38, 0xA7, 0x43, 0x60,  // ..tb8.C`
                /* 0170 */  0x6A, 0xB4, 0x40, 0x34, 0x01, 0xA2, 0x28, 0x4B,  // j.@4..(K
                /* 0178 */  0x95, 0x8D, 0xA5, 0x7A, 0x10, 0x54, 0x10, 0x90,  // ...z.T..
                /* 0180 */  0xE6, 0x6E, 0x88, 0x93, 0x36, 0x72, 0xE0, 0x18,  // .n..6r..
                /* 0188 */  0xD5, 0x0F, 0x9B, 0x8A, 0x80, 0xD3, 0x61, 0xC3,  // ......a.
                /* 0190 */  0xE3, 0x76, 0x7C, 0x12, 0x45, 0x1F, 0x10, 0x85,  // .v|.E...
                /* 0198 */  0x73, 0xD8, 0x33, 0x07, 0x05, 0x31, 0xA0, 0x93,  // s.3..1..
                /* 01A0 */  0x40, 0xC8, 0xC9, 0x51, 0x00, 0xB5, 0x17, 0x0D,  // @..Q....
                /* 01A8 */  0x4B, 0xE3, 0x3A, 0xB5, 0x37, 0x01, 0x4F, 0xEB,  // K.:.7.O.
                /* 01B0 */  0xB1, 0xE0, 0x30, 0x8E, 0xEB, 0xAC, 0x2D, 0xFA,  // ..0...-.
                /* 01B8 */  0xC6, 0x40, 0xE7, 0xE3, 0xBB, 0x00, 0xD7, 0x00,  // .@......
                /* 01C0 */  0xA1, 0x19, 0x19, 0xDE, 0x6A, 0x00, 0x29, 0x18,  // ....j.).
                /* 01C8 */  0x3F, 0x09, 0x3C, 0x02, 0x98, 0xC0, 0xBA, 0x0E,  // ?.<.....
                /* 01D0 */  0x04, 0xD0, 0x2F, 0x1B, 0x1E, 0xBE, 0x4F, 0x18,  // ../...O.
                /* 01D8 */  0x8F, 0x17, 0x09, 0xEA, 0xBB, 0x0F, 0x80, 0x02,  // ........
                /* 01E0 */  0xC8, 0x07, 0x00, 0x2B, 0xBD, 0x03, 0xD0, 0x31,  // ...+...1
                /* 01E8 */  0x84, 0x08, 0x13, 0xCD, 0xE8, 0x5C, 0xC2, 0x4A,  // .....\.J
                /* 01F0 */  0xF5, 0xFF, 0x1F, 0x2D, 0x3F, 0xA8, 0x78, 0xB4,  // ...-?.x.
                /* 01F8 */  0x06, 0xF1, 0x68, 0x1D, 0x68, 0xB4, 0xE8, 0x63,  // ..h.h..c
                /* 0200 */  0x86, 0x15, 0x8E, 0x4A, 0x3E, 0x27, 0xA0, 0xE1,  // ...J>'..
                /* 0208 */  0xC2, 0x20, 0x28, 0xFC, 0xC0, 0x01, 0x0D, 0xF0,  // . (.....
                /* 0210 */  0xF4, 0xDE, 0x0C, 0x3C, 0x13, 0xC3, 0x79, 0xBE,  // ...<..y.
                /* 0218 */  0x1C, 0xCE, 0xF3, 0xE5, 0xC3, 0xF1, 0x81, 0x02,  // ........
                /* 0220 */  0xFE, 0x80, 0xB1, 0x04, 0x05, 0x4E, 0x18, 0xE4,  // .....N..
                /* 0228 */  0xF0, 0x18, 0xC1, 0x83, 0xA5, 0xB2, 0xC6, 0x85,  // ........
                /* 0230 */  0xBA, 0x1F, 0xF8, 0x44, 0xC3, 0xB0, 0x0F, 0xF5,  // ...D....
                /* 0238 */  0x68, 0xDE, 0x12, 0xCE, 0xF0, 0x6D, 0xE2, 0xA0,  // h....m..
                /* 0240 */  0xDE, 0x3D, 0xEC, 0x54, 0xA8, 0x45, 0x87, 0xB0,  // .=.T.E..
                /* 0248 */  0x1E, 0x29, 0x87, 0x35, 0x5A, 0xD8, 0x03, 0x7E,  // .).5Z..~
                /* 0250 */  0xEE, 0xF0, 0x3D, 0x83, 0x5F, 0x69, 0x7C, 0x0C,  // ..=._i|.
                /* 0258 */  0xA1, 0xAB, 0xD0, 0xA9, 0x82, 0x8B, 0x82, 0x50,  // .......P
                /* 0260 */  0xBC, 0xB5, 0x68, 0xF8, 0x67, 0xE1, 0x71, 0xBD,  // ..h.g.q.
                /* 0268 */  0x62, 0xF8, 0x0A, 0xF0, 0x70, 0xE2, 0x33, 0x40,  // b...p.3@
                /* 0270 */  0xFC, 0x40, 0x47, 0xF0, 0x22, 0xE2, 0xB3, 0x8F,  // .@G."...
                /* 0278 */  0x2F, 0x2F, 0x3E, 0x64, 0xB0, 0x93, 0x05, 0x0F,  // //>d....
                /* 0280 */  0x41, 0xA1, 0x18, 0x87, 0x03, 0x94, 0x70, 0x18,  // A.....p.
                /* 0288 */  0xC1, 0x19, 0xC4, 0xC3, 0x73, 0x90, 0xC3, 0x01,  // ....s...
                /* 0290 */  0xFA, 0x1C, 0xE4, 0x81, 0xB0, 0x41, 0x18, 0xE4,  // .....A..
                /* 0298 */  0x3C, 0x5E, 0x7E, 0xD8, 0xC5, 0x02, 0xFF, 0xFF,  // <^~.....
                /* 02A0 */  0xBF, 0x58, 0x00, 0xAF, 0x34, 0x83, 0x42, 0xEB,  // .X..4.B.
                /* 02A8 */  0x19, 0x14, 0x04, 0x8C, 0xE7, 0x07, 0x8F, 0xD7,  // ........
                /* 02B0 */  0xB3, 0xF5, 0xB4, 0xC0, 0x3B, 0x62, 0x9F, 0x3F,  // ....;b.?
                /* 02B8 */  0x80, 0x73, 0xF8, 0xC3, 0x0B, 0x2A, 0xEE, 0x90,  // .s...*..
                /* 02C0 */  0x28, 0x88, 0xCF, 0x06, 0x8E, 0x32, 0x5E, 0xF4,  // (....2^.
                /* 02C8 */  0x4C, 0x7C, 0x18, 0xF2, 0x71, 0xE1, 0xE9, 0x06,  // L|..q...
                /* 02D0 */  0x73, 0xF8, 0x00, 0xF7, 0x48, 0x7C, 0xF8, 0x00,  // s...H|..
                /* 02D8 */  0x1E, 0xFF, 0xFF, 0xC3, 0x07, 0xF0, 0x93, 0x68,  // .......h
                /* 02E0 */  0x51, 0xAB, 0xD0, 0xC3, 0x07, 0xB8, 0x82, 0x9C,  // Q.......
                /* 02E8 */  0x90, 0xD0, 0x72, 0x0E, 0x1F, 0xC8, 0x89, 0x84,  // ..r.....
                /* 02F0 */  0x89, 0xEE, 0x33, 0xD2, 0x8B, 0x87, 0x25, 0x1C,  // ..3...%.
                /* 02F8 */  0x3C, 0x50, 0xE1, 0x49, 0x14, 0xFF, 0x54, 0x80,  // <P.I..T.
                /* 0300 */  0x0A, 0x7C, 0x2A, 0xA0, 0x20, 0x06, 0xF4, 0xA1,  // .|*. ...
                /* 0308 */  0x02, 0xCE, 0x0C, 0x9E, 0xBD, 0x30, 0xF3, 0x80,  // .....0..
                /* 0310 */  0x71, 0x46, 0x02, 0x6C, 0x1D, 0x2A, 0xC0, 0xFB,  // qF.l.*..
                /* 0318 */  0xFF, 0x3F, 0x54, 0x00, 0x87, 0x03, 0x12, 0x20,  // .?T.... 
                /* 0320 */  0x4B, 0xE2, 0x05, 0xE9, 0xA1, 0x02, 0x5C, 0x07,  // K.....\.
                /* 0328 */  0x4E, 0x1F, 0x2A, 0xF8, 0x41, 0xD3, 0xA2, 0x80,  // N.*.A...
                /* 0330 */  0x74, 0xC4, 0xF3, 0xA1, 0x02, 0xC6, 0x45, 0xC8,  // t.....E.
                /* 0338 */  0xF0, 0xAF, 0x75, 0xC7, 0xF2, 0x1C, 0x46, 0xCE,  // ..u...F.
                /* 0340 */  0x15, 0xE8, 0xD8, 0x07, 0x03, 0x54, 0xD0, 0xD1,  // .....T..
                /* 0348 */  0x53, 0x10, 0x03, 0x3A, 0xC5, 0xC1, 0x00, 0xAD,  // S..:....
                /* 0350 */  0xE3, 0x5C, 0x81, 0x3A, 0xC6, 0x01, 0xBF, 0xFF,  // .\.:....
                /* 0358 */  0xFF, 0x99, 0x02, 0x38, 0x89, 0x38, 0x5A, 0xA1,  // ...8.8Z.
                /* 0360 */  0x86, 0xEB, 0xB1, 0x1A, 0xC4, 0x63, 0xF5, 0x31,  // .....c.1
                /* 0368 */  0xD4, 0x63, 0xC5, 0x7D, 0x03, 0x7C, 0x04, 0xC0,  // .c.}.|..
                /* 0370 */  0x1F, 0x9D, 0x70, 0x60, 0xCF, 0x15, 0x80, 0x69,  // ..p`...i
                /* 0378 */  0x8F, 0xE7, 0x0A, 0xD0, 0x49, 0x3B, 0xFB, 0xA0,  // ....I;..
                /* 0380 */  0x03, 0xAE, 0x55, 0x27, 0x31, 0xFC, 0x39, 0x8E,  // ..U'1.9.
                /* 0388 */  0x11, 0x0C, 0x75, 0x78, 0xA3, 0x10, 0x8E, 0x43,  // ..ux...C
                /* 0390 */  0xA1, 0x30, 0x27, 0x03, 0xFA, 0xFF, 0x3F, 0xC2,  // .0'...?.
                /* 0398 */  0x12, 0x38, 0x0A, 0xE2, 0xA1, 0x39, 0xCC, 0x19,  // .8...9..
                /* 03A0 */  0x0E, 0x34, 0xC7, 0x02, 0x78, 0xB7, 0x0A, 0x76,  // .4..x..v
                /* 03A8 */  0x2C, 0x80, 0x4D, 0xE0, 0x63, 0x01, 0xF8, 0xE2,  // ,.M.c...
                /* 03B0 */  0x0C, 0x0B, 0x3D, 0x5A, 0xDF, 0xFF, 0x70, 0xF7,  // ..=Z..p.
                /* 03B8 */  0x87, 0x28, 0x2F, 0xC5, 0x3E, 0xE4, 0xC0, 0x1D,  // .(/.>...
                /* 03C0 */  0x17, 0x38, 0x4E, 0x0F, 0x80, 0xAB, 0x83, 0x98,  // .8N.....
                /* 03C8 */  0x9C, 0x9E, 0x1E, 0xC0, 0x95, 0xE4, 0xF4, 0x80,  // ........
                /* 03D0 */  0x1A, 0xB0, 0xFF, 0xFF, 0x7A, 0x80, 0x74, 0x4E,  // ....z.tN
                /* 03D8 */  0xC0, 0x5E, 0xB4, 0x19, 0xC4, 0x89, 0x3E, 0x8F,  // .^....>.
                /* 03E0 */  0x58, 0xC1, 0x11, 0x07, 0x95, 0x9D, 0x44, 0xC9,  // X.....D.
                /* 03E8 */  0x8F, 0x38, 0xA8, 0xAC, 0x63, 0xA7, 0x20, 0x06,  // .8..c. .
                /* 03F0 */  0xF4, 0x89, 0x12, 0xF0, 0x71, 0xC7, 0x01, 0x16,  // ....q...
                /* 03F8 */  0x1B, 0xF5, 0x64, 0x79, 0xE4, 0xC9, 0x52, 0x10,  // ..dy..R.
                /* 0400 */  0x4F, 0xD6, 0x97, 0x0A, 0xE0, 0x70, 0xC3, 0x01,  // O....p..
                /* 0408 */  0xF6, 0xFF, 0xFF, 0x4B, 0x05, 0x50, 0x72, 0x28,  // ...K.Pr(
                /* 0410 */  0xF5, 0x52, 0x01, 0x32, 0x79, 0x37, 0x1C, 0x74,  // .R.2y7.t
                /* 0418 */  0xC8, 0xB5, 0xEA, 0x5E, 0xC7, 0x8E, 0xAD, 0x1E,  // ...^....
                /* 0420 */  0xB7, 0x6F, 0xD2, 0x98, 0x60, 0x37, 0x1C, 0x54,  // .o..`7.T
                /* 0428 */  0x24, 0x0A, 0x05, 0x3A, 0x17, 0xA0, 0x22, 0xC0,  // $..:..".
                /* 0430 */  0x51, 0x10, 0x0F, 0xCD, 0xE7, 0x02, 0x2B, 0x39,  // Q.....+9
                /* 0438 */  0x17, 0xA0, 0xBD, 0x5F, 0x28, 0xC8, 0xE0, 0x7C,  // ..._(..|
                /* 0440 */  0x2F, 0x30, 0x4C, 0xF1, 0x43, 0xD1, 0xBD, 0xC7,  // /0L.C...
                /* 0448 */  0xE7, 0x02, 0x70, 0x5F, 0x71, 0xC0, 0x65, 0x4C,  // ..p_q.eL
                /* 0450 */  0x80, 0x36, 0x48, 0x72, 0x0F, 0xF7, 0xB8, 0x70,  // .6Hr...p
                /* 0458 */  0xE3, 0xF0, 0xA8, 0x8E, 0x29, 0xE6, 0x73, 0x5C,  // ....).s\
                /* 0460 */  0x90, 0xE7, 0x38, 0xCF, 0x0B, 0x77, 0x7E, 0x00,  // ..8..w~.
                /* 0468 */  0x6E, 0xFF, 0xFF, 0x81, 0xC1, 0xBA, 0x70, 0x01,  // n.....p.
                /* 0470 */  0x71, 0xA1, 0x26, 0x25, 0x9E, 0x1F, 0xC0, 0x75,  // q.&%...u
                /* 0478 */  0xEB, 0xF6, 0xBD, 0x10, 0x27, 0xE5, 0xEE, 0x8A,  // ....'...
                /* 0480 */  0xC2, 0x78, 0x25, 0x89, 0xE1, 0x7B, 0xAA, 0xB1,  // .x%..{..
                /* 0488 */  0x0D, 0x73, 0x00, 0xA7, 0x62, 0x9C, 0x04, 0x83,  // .s..b...
                /* 0490 */  0x9F, 0x1D, 0xE8, 0xB8, 0x1C, 0x99, 0x44, 0xB7,  // ......D.
                /* 0498 */  0x7D, 0x1F, 0x21, 0x78, 0xCC, 0xD1, 0x53, 0x10,  // }.!x..S.
                /* 04A0 */  0x03, 0x3A, 0xC3, 0x49, 0x05, 0xAD, 0x02, 0x44,  // .:.I...D
                /* 04A8 */  0x53, 0xC0, 0xDC, 0x5C, 0x01, 0x7F, 0xFF, 0xFF,  // S..\....
                /* 04B0 */  0x9B, 0x2B, 0xC0, 0x0A, 0x97, 0x0A, 0x35, 0x4A,  // .+....5J
                /* 04B8 */  0x3D, 0x52, 0x80, 0xEB, 0x0E, 0xE8, 0x5B, 0x18,  // =R....[.
                /* 04C0 */  0x4E, 0x12, 0x90, 0xAE, 0xAC, 0xA7, 0xF1, 0x00,  // N.......
                /* 04C8 */  0xE0, 0x2B, 0x05, 0x8C, 0x8B, 0x27, 0x3B, 0xE2,  // .+...';.
                /* 04D0 */  0xF0, 0xDB, 0xB5, 0x8F, 0x05, 0xC0, 0xFC, 0xFF,  // ........
                /* 04D8 */  0x7F, 0x25, 0x04, 0xEB, 0xB1, 0x00, 0x78, 0x8B,  // .%....x.
                /* 04E0 */  0x74, 0x69, 0xD1, 0xEC, 0xB1, 0x00, 0x5C, 0xE2,  // ti....\.
                /* 04E8 */  0x57, 0x41, 0x0F, 0x2A, 0x96, 0x0B, 0x83, 0x92,  // WA.*....
                /* 04F0 */  0x30, 0x76, 0x28, 0xA3, 0x39, 0x98, 0x63, 0x08,  // 0v(.9.c.
                /* 04F8 */  0xCE, 0xCE, 0x30, 0x86, 0xE3, 0x03, 0xF5, 0xD4,  // ..0.....
                /* 0500 */  0x1F, 0x6B, 0x4F, 0xE3, 0x15, 0xCD, 0x57, 0x3C,  // .kO...W<
                /* 0508 */  0xDF, 0x47, 0xE9, 0x10, 0x51, 0x57, 0x3D, 0x8F,  // .G..QW=.
                /* 0510 */  0xF5, 0xAD, 0xE0, 0xD4, 0x9E, 0xF5, 0x7C, 0x6D,  // ......|m
                /* 0518 */  0x31, 0x4C, 0x02, 0x0F, 0x91, 0xA1, 0x71, 0x82,  // 1L....q.
                /* 0520 */  0x77, 0x24, 0x43, 0x73, 0x19, 0x10, 0xBA, 0x2B,  // w$Cs...+
                /* 0528 */  0xBD, 0x06, 0x78, 0x6E, 0x26, 0xE8, 0x7E, 0xE8,  // ..xn&.~.
                /* 0530 */  0x52, 0x88, 0xA0, 0x13, 0xC0, 0x3B, 0x41, 0x8D,  // R....;A.
                /* 0538 */  0x02, 0xBC, 0x5D, 0x05, 0x64, 0x4B, 0x80, 0xB8,  // ..].dK..
                /* 0540 */  0xD1, 0x0B, 0xEB, 0xAD, 0x28, 0x4A, 0x88, 0x08,  // ....(J..
                /* 0548 */  0x41, 0xA3, 0x18, 0x2F, 0x42, 0xA8, 0x10, 0x51,  // A../B..Q
                /* 0550 */  0xA2, 0x36, 0x07, 0xA2, 0xCB, 0x51, 0xD4, 0x20,  // .6...Q. 
                /* 0558 */  0xD1, 0x82, 0x19, 0x81, 0xD9, 0x1F, 0x04, 0x91,  // ........
                /* 0560 */  0xFE, 0x0C, 0xD0, 0x65, 0xC6, 0x97, 0x61, 0x8F,  // ...e..a.
                /* 0568 */  0x86, 0x9F, 0xA5, 0xF8, 0x50, 0xCF, 0xF1, 0x51,  // ....P..Q
                /* 0570 */  0x91, 0xFD, 0xFF, 0x41, 0x5E, 0x0B, 0xAD, 0x73,  // ...A^..s
                /* 0578 */  0x9C, 0xE4, 0x90, 0x63, 0x70, 0x9D, 0x21, 0xA0,  // ...cp.!.
                /* 0580 */  0xB9, 0x06, 0xD4, 0xB1, 0xDF, 0xE3, 0xF5, 0x57,  // .......W
                /* 0588 */  0xC3, 0x70, 0x7C, 0x88, 0x3E, 0x54, 0x78, 0x02,  // .p|.>Tx.
                /* 0590 */  0x87, 0xC8, 0x00, 0x7D, 0x88, 0x80, 0x3F, 0x1E,  // ...}..?.
                /* 0598 */  0x43, 0x3F, 0x45, 0x78, 0xC2, 0x2F, 0xB4, 0x64,  // C?Ex./.d
                /* 05A0 */  0x10, 0xA8, 0x93, 0x06, 0x1F, 0xE9, 0x0B, 0x37,  // .......7
                /* 05A8 */  0xBB, 0x7D, 0x98, 0xC0, 0x62, 0xCF, 0x0E, 0x74,  // .}..b..t
                /* 05B0 */  0x3C, 0xE0, 0x57, 0x7C, 0x26, 0xD0, 0x35, 0xCE,  // <.W|&.5.
                /* 05B8 */  0xD8, 0x3E, 0x19, 0x39, 0xC2, 0x41, 0x04, 0x0A,  // .>.9.A..
                /* 05C0 */  0xE8, 0xB3, 0x09, 0xBF, 0x79, 0xB0, 0xA3, 0x05,  // ....y...
                /* 05C8 */  0x17, 0x75, 0xB4, 0x40, 0x9D, 0x16, 0x7C, 0x50,  // .u.@..|P
                /* 05D0 */  0x60, 0x88, 0x0F, 0x9F, 0x86, 0x78, 0xB2, 0x60,  // `....x.`
                /* 05D8 */  0x47, 0x1D, 0x70, 0xCA, 0x3B, 0x84, 0x80, 0x02,  // G.p.;...
                /* 05E0 */  0xC4, 0x27, 0x0B, 0x36, 0x2F, 0x0C, 0x81, 0x45,  // .'.6/..E
                /* 05E8 */  0xC2, 0xA3, 0x0E, 0x1D, 0x86, 0xE7, 0xA7, 0x84,  // ........
                /* 05F0 */  0xC7, 0x11, 0x86, 0xFD, 0x46, 0xE2, 0x29, 0x1C,  // ....F.).
                /* 05F8 */  0x8E, 0x8F, 0x14, 0x46, 0x08, 0x5E, 0xEE, 0xC9,  // ...F.^..
                /* 0600 */  0x82, 0x5C, 0x6C, 0x8E, 0xEE, 0xFF, 0xFF, 0x04,  // .\l.....
                /* 0608 */  0x83, 0x19, 0xAA, 0x87, 0xC0, 0xCF, 0x0B, 0x1E,  // ........
                /* 0610 */  0x02, 0x1F, 0x40, 0xAB, 0xB3, 0x23, 0xE7, 0x93,  // ..@..#..
                /* 0618 */  0x73, 0xC2, 0x8D, 0x97, 0x8F, 0x09, 0x3B, 0x00,  // s.....;.
                /* 0620 */  0x2E, 0xE9, 0x79, 0xF1, 0x2C, 0x82, 0x88, 0xB1,  // ..y.,...
                /* 0628 */  0x7C, 0x1F, 0x47, 0x00, 0x39, 0x93, 0x78, 0x02,  // |.G.9.x.
                /* 0630 */  0x89, 0xF0, 0x32, 0x12, 0x24, 0xC4, 0xB1, 0xBC,  // ..2.$...
                /* 0638 */  0x86, 0x18, 0x24, 0xC6, 0xDB, 0x91, 0x8F, 0x23,  // ..$....#
                /* 0640 */  0x1C, 0xE6, 0x99, 0xC4, 0x70, 0x0F, 0x07, 0xAF,  // ....p...
                /* 0648 */  0x22, 0x2F, 0x24, 0x86, 0x79, 0x14, 0xF1, 0xF9,  // "/$.y...
                /* 0650 */  0x20, 0x86, 0x31, 0x43, 0x45, 0x3B, 0x01, 0x1F,  //  .1CE;..
                /* 0658 */  0x47, 0xD8, 0xB1, 0xD2, 0x43, 0xF5, 0x71, 0x04,  // G...C.q.
                /* 0660 */  0xB0, 0xF4, 0xFF, 0x3F, 0x8E, 0x00, 0xF3, 0x23,  // ...?...#
                /* 0668 */  0x02, 0xEE, 0xB4, 0x01, 0xF7, 0x3E, 0x11, 0xE2,  // .....>..
                /* 0670 */  0x49, 0xE3, 0x25, 0xE1, 0x59, 0x03, 0xB8, 0x44,  // I.%.Y..D
                /* 0678 */  0xB0, 0x76, 0x20, 0x65, 0x69, 0x1E, 0x03, 0x3A,  // .v ei..:
                /* 0680 */  0x9E, 0x71, 0x0E, 0x6B, 0x02, 0xD2, 0x30, 0xF9,  // .q.k..0.
                /* 0688 */  0x95, 0xDB, 0xE7, 0x82, 0xB3, 0x7B, 0xE4, 0x36,  // .....{.6
                /* 0690 */  0x4C, 0x90, 0x27, 0x82, 0xD7, 0x28, 0x9F, 0x82,  // L.'..(..
                /* 0698 */  0x04, 0xA9, 0xF3, 0x23, 0x4F, 0x4F, 0x21, 0xDD,  // ...#OO!.
                /* 06A0 */  0x27, 0x5A, 0x94, 0xD2, 0x63, 0x1A, 0x05, 0xF1,  // 'Z..c...
                /* 06A8 */  0x19, 0xC1, 0x21, 0xCE, 0x31, 0xE8, 0xE1, 0x7B,  // ..!.1..{
                /* 06B0 */  0x0E, 0x67, 0x74, 0x20, 0xEF, 0x01, 0xEC, 0xFE,  // .gt ....
                /* 06B8 */  0x08, 0x3C, 0x4F, 0x3A, 0x78, 0x74, 0xDF, 0x14,  // .<O:xt..
                /* 06C0 */  0xCE, 0xF3, 0x4C, 0xFF, 0xFF, 0x47, 0x04, 0xDE,  // ..L..G..
                /* 06C8 */  0x99, 0xFA, 0x82, 0x09, 0x9C, 0x43, 0xDC, 0x05,  // .....C..
                /* 06D0 */  0x50, 0xB2, 0xEF, 0x02, 0x14, 0xC4, 0x13, 0xF3,  // P.......
                /* 06D8 */  0xD5, 0x0F, 0x0E, 0xFE, 0xAB, 0x1F, 0x30, 0xB9,  // ......0.
                /* 06E0 */  0x2C, 0xF8, 0x9A, 0x04, 0xBE, 0x53, 0x3F, 0xFE,  // ,....S?.
                /* 06E8 */  0xC2, 0xE0, 0xDB, 0xC0, 0xC3, 0x13, 0x1B, 0x14,  // ........
                /* 06F0 */  0xF8, 0xA1, 0x7C, 0x3D, 0x04, 0xFF, 0xFF, 0xFF,  // ..|=....
                /* 06F8 */  0x7A, 0x08, 0x3C, 0x95, 0x3A, 0xB5, 0xA9, 0xF0,  // z.<.:...
                /* 0700 */  0x7A, 0x08, 0xAE, 0x28, 0xD7, 0x12, 0xD4, 0xAD,  // z..(....
                /* 0708 */  0xC9, 0x82, 0x80, 0x74, 0x3F, 0x7F, 0xBE, 0x31,  // ...t?..1
                /* 0710 */  0xA6, 0xCF, 0x25, 0xF0, 0xEE, 0xA0, 0x5A, 0x95,  // ..%...Z.
                /* 0718 */  0xEE, 0x25, 0x3C, 0x38, 0x85, 0xA2, 0x1F, 0x1E,  // .%<8....
                /* 0720 */  0x50, 0x61, 0x0F, 0x0F, 0x14, 0xC4, 0x17, 0x23,  // Pa.....#
                /* 0728 */  0xDF, 0x4B, 0x00, 0x0E, 0xFC, 0xFF, 0x47, 0xC4,  // .K....G.
                /* 0730 */  0x6F, 0xDA, 0x70, 0x8E, 0x16, 0x98, 0x19, 0x81,  // o.p.....
                /* 0738 */  0xF5, 0x44, 0xE0, 0x9B, 0x36, 0xE0, 0xE8, 0xE4,  // .D..6...
                /* 0740 */  0x02, 0x5C, 0x4E, 0x25, 0x80, 0x2B, 0xAF, 0xA7,  // .\N%.+..
                /* 0748 */  0x12, 0xFD, 0xFF, 0x4F, 0x25, 0xE0, 0xBA, 0x7B,  // ...O%..{
                /* 0750 */  0x81, 0xE9, 0x6A, 0x72, 0x26, 0xD1, 0x82, 0xFB,  // ..jr&...
                /* 0758 */  0xEE, 0x05, 0xF0, 0xF3, 0xFF, 0x7F, 0xF7, 0x02,  // ........
                /* 0760 */  0x88, 0xE9, 0xF5, 0xEE, 0x05, 0xBC, 0xCE, 0x25,  // .......%
                /* 0768 */  0x98, 0xBB, 0x97, 0xFF, 0xFF, 0x77, 0x2F, 0x80,  // .....w/.
                /* 0770 */  0xFF, 0xFF, 0xFF, 0xBB, 0x17, 0x40, 0x96, 0x53,  // .....@.S
                /* 0778 */  0x09, 0xC8, 0xB2, 0x9D, 0x4A, 0xD0, 0x0A, 0xCF,  // ....J...
                /* 0780 */  0xD1, 0x50, 0x27, 0x70, 0x28, 0x4F, 0x18, 0xAF,  // .P'p(O..
                /* 0788 */  0xEA, 0x09, 0xAC, 0xE7, 0xF2, 0x85, 0x52, 0x02,  // ......R.
                /* 0790 */  0xA3, 0xCB, 0x17, 0xB0, 0xFB, 0xFF, 0x5F, 0xBE,  // ......_.
                /* 0798 */  0x00, 0x3E, 0x04, 0xBA, 0x0B, 0xA0, 0x22, 0xDC,  // .>....".
                /* 07A0 */  0x05, 0x28, 0x88, 0x2F, 0x5F, 0x80, 0x97, 0x50,  // .(./_..P
                /* 07A8 */  0x10, 0x32, 0x72, 0x93, 0xA0, 0x97, 0x2F, 0x38,  // .2r.../8
                /* 07B0 */  0x17, 0x07, 0xDF, 0x8F, 0x3C, 0x28, 0x78, 0xFF,  // ....<(x.
                /* 07B8 */  0xFF, 0x41, 0xC1, 0x19, 0xCC, 0x79, 0x17, 0x7B,  // .A...y.{
                /* 07C0 */  0x52, 0xA4, 0xD7, 0x13, 0xB8, 0x77, 0x0E, 0x8F,  // R....w..
                /* 07C8 */  0x0D, 0x1C, 0xE2, 0xAE, 0x60, 0xC0, 0xDE, 0xE5,  // ....`...
                /* 07D0 */  0xED, 0x04, 0x5C, 0xDA, 0xD6, 0xAE, 0xDB, 0x09,  // ..\.....
                /* 07D8 */  0x2E, 0xE1, 0x71, 0x1A, 0xF2, 0xF1, 0x04, 0x93,  // ..q.....
                /* 07E0 */  0xE7, 0x76, 0x82, 0x4A, 0x02, 0xA3, 0x2C, 0x24,  // .v.J..,$
                /* 07E8 */  0x3A, 0x42, 0x70, 0xF5, 0x37, 0x31, 0x0A, 0x62,  // :Bp.71.b
                /* 07F0 */  0x0B, 0xB7, 0x13, 0x40, 0xC7, 0xFF, 0xFF, 0x76,  // ...@...v
                /* 07F8 */  0x02, 0xFC, 0xC7, 0x0C, 0x67, 0x44, 0xEF, 0x15,  // ....gD..
                /* 0800 */  0x86, 0xF4, 0x19, 0x0C, 0x98, 0x06, 0x3A, 0x82,  // ......:.
                /* 0808 */  0xA0, 0x2F, 0x69, 0xD8, 0x04, 0x37, 0x10, 0x3A,  // ./i..7.:
                /* 0810 */  0x23, 0x78, 0x17, 0x10, 0xB8, 0x13, 0x83, 0x75,  // #x.....u
                /* 0818 */  0x00, 0x01, 0xDF, 0x59, 0x0D, 0x78, 0xFD, 0xFF,  // ...Y.x..
                /* 0820 */  0xCF, 0x6A, 0xC0, 0xF4, 0x00, 0xE0, 0xB3, 0x1A,  // .j......
                /* 0828 */  0xA0, 0xEA, 0xF6, 0x02, 0xB2, 0x23, 0xA8, 0x6F,  // .....#.o
                /* 0830 */  0x2F, 0x7C, 0xC0, 0x0E, 0x01, 0xA4, 0xB3, 0x1A,  // /|......
                /* 0838 */  0x66, 0x1A, 0x2F, 0x30, 0xA1, 0x1F, 0x5E, 0x6C,  // f./0..^l
                /* 0840 */  0x1E, 0x9B, 0x9C, 0x88, 0x75, 0x1C, 0x45, 0x09,  // ....u.E.
                /* 0848 */  0xA6, 0xD0, 0xA9, 0xD8, 0xC7, 0x02, 0x2E, 0xF4,  // ........
                /* 0850 */  0x36, 0x45, 0x41, 0x3C, 0x36, 0xDF, 0x4C, 0x6C,  // 6EA<6.Ll
                /* 0858 */  0xE4, 0x2C, 0x89, 0x56, 0x38, 0x0D, 0x4D, 0xE8,  // .,.V8.M.
                /* 0860 */  0x71, 0xC6, 0x9A, 0xCF, 0x2E, 0x20, 0xBE, 0x4F,  // q.... .O
                /* 0868 */  0xB0, 0xFF, 0xFF, 0x7D, 0x02, 0x2C, 0x87, 0x4D,  // ...}.,.M
                /* 0870 */  0x8F, 0x08, 0x77, 0x33, 0x31, 0x6E, 0xBC, 0xF3,  // ..w31n..
                /* 0878 */  0x3C, 0xC7, 0xE2, 0x67, 0x04, 0xE2, 0x99, 0xFA,  // <..g....
                /* 0880 */  0xC4, 0x01, 0x8C, 0x83, 0x9F, 0x38, 0x50, 0x51,  // .....8PQ
                /* 0888 */  0x67, 0x44, 0x41, 0x7C, 0x26, 0x70, 0x8C, 0xA1,  // gDA|&p..
                /* 0890 */  0x42, 0x99, 0xDA, 0x3B, 0x18, 0xE6, 0xBE, 0xF0,  // B..;....
                /* 0898 */  0x9E, 0x06, 0xF6, 0xCB, 0x17, 0x60, 0xE4, 0xFF,  // .....`..
                /* 08A0 */  0x7F, 0xF9, 0x82, 0xA4, 0xEC, 0xBC, 0x01, 0xAE,  // ........
                /* 08A8 */  0x58, 0xE7, 0x0D, 0x14, 0x87, 0xC5, 0x01, 0xE9,  // X.......
                /* 08B0 */  0xF2, 0x85, 0xBB, 0x6F, 0xC0, 0x18, 0x85, 0x0E,  // ...o....
                /* 08B8 */  0x1C, 0x14, 0xC2, 0x32, 0x60, 0x24, 0xE2, 0xEE,  // ...2`$..
                /* 08C0 */  0x85, 0x8A, 0x7D, 0xE0, 0xA0, 0x20, 0x3E, 0xBD,  // ..}.. >.
                /* 08C8 */  0xF8, 0x54, 0x00, 0xE7, 0xC0, 0x81, 0x39, 0x15,  // .T....9.
                /* 08D0 */  0xC0, 0x3C, 0x4F, 0xB0, 0x53, 0x01, 0xEC, 0x23,  // .<O.S..#
                /* 08D8 */  0x07, 0xF8, 0xC6, 0x04, 0xE7, 0xC8, 0x81, 0x1B,  // ........
                /* 08E0 */  0x13, 0xB8, 0xEF, 0x1C, 0xE0, 0x3B, 0x5B, 0x80,  // .....;[.
                /* 08E8 */  0x77, 0x4C, 0xD8, 0xFF, 0xFF, 0xD9, 0x02, 0xB0,  // wL......
                /* 08F0 */  0xE7, 0xF1, 0x6C, 0x01, 0xBA, 0xF4, 0x47, 0x23,  // ..l...G#
                /* 08F8 */  0x74, 0x86, 0xA3, 0x11, 0xF2, 0xAA, 0x75, 0x24,  // t.....u$
                /* 0900 */  0xC7, 0xF1, 0x6A, 0x81, 0x53, 0x7D, 0x34, 0x42,  // ..j.S}4B
                /* 0908 */  0xE9, 0xA5, 0x90, 0xEA, 0xA3, 0x11, 0x4A, 0xE7,  // ......J.
                /* 0910 */  0xD1, 0x82, 0x82, 0x78, 0x6C, 0x3E, 0xB9, 0xF9,  // ...xl>..
                /* 0918 */  0x50, 0x80, 0x1B, 0xA5, 0xE7, 0xFB, 0x10, 0x50,  // P......P
                /* 0920 */  0xE7, 0xCD, 0x08, 0x90, 0xF3, 0xFF, 0xBF, 0x19,  // ........
                /* 0928 */  0x01, 0xD4, 0xF5, 0x78, 0xDD, 0x00, 0x57, 0xA8,  // ...x..W.
                /* 0930 */  0x9B, 0x11, 0x5A, 0xDA, 0xCD, 0x88, 0xFE, 0xFF,  // ..Z.....
                /* 0938 */  0x8F, 0xB9, 0x98, 0xF3, 0x06, 0x9E, 0xA0, 0x94,  // ........
                /* 0940 */  0x9B, 0x11, 0xEA, 0x62, 0x64, 0x09, 0x37, 0x23,  // ...bd.7#
                /* 0948 */  0x54, 0xE8, 0xFB, 0x06, 0x05, 0xF1, 0xCD, 0xC8,  // T.......
                /* 0950 */  0x47, 0x54, 0xDF, 0x37, 0xE0, 0x5D, 0x8C, 0x00,  // GT.7.]..
                /* 0958 */  0x6E, 0xFE, 0xFF, 0x2F, 0x46, 0x40, 0xF1, 0x68,  // n../F@.h
                /* 0960 */  0x01, 0xB2, 0x2B, 0x28, 0x6C, 0x90, 0xE7, 0xE6,  // ..+(l...
                /* 0968 */  0x27, 0x0B, 0xEC, 0x15, 0x14, 0xE0, 0xCF, 0xFF,  // '.......
                /* 0970 */  0xFF, 0x64, 0x04, 0x70, 0xCB, 0xA1, 0x45, 0x89,  // .d.p..E.
                /* 0978 */  0x4A, 0xCF, 0x1B, 0xE0, 0x92, 0x73, 0xDE, 0x40,  // J....s.@
                /* 0980 */  0x87, 0x7A, 0x04, 0xE8, 0x64, 0x84, 0xBB, 0x6F,  // .z..d..o
                /* 0988 */  0xE0, 0x63, 0x1C, 0x34, 0x28, 0x84, 0x03, 0x50,  // .c.4(..P
                /* 0990 */  0x48, 0xFE, 0x79, 0x03, 0x25, 0x18, 0x8E, 0x82,  // H.y.%...
                /* 0998 */  0x78, 0x6C, 0x3E, 0xF6, 0xC0, 0xFB, 0xFF, 0x1F,  // xl>.....
                /* 09A0 */  0x7B, 0x80, 0xC3, 0xC9, 0x08, 0x38, 0x1C, 0x7B,  // {....8.{
                /* 09A8 */  0x80, 0xC7, 0x95, 0x03, 0x7C, 0xE7, 0x06, 0x60,  // ....|..`
                /* 09B0 */  0xAE, 0xD4, 0xEB, 0xB9, 0x01, 0x5C, 0x11, 0xCE,  // .....\..
                /* 09B8 */  0x0D, 0x28, 0x49, 0x63, 0x33, 0x90, 0x4E, 0x67,  // .(Ic3.Ng
                /* 09C0 */  0x31, 0x8D, 0x71, 0x16, 0x4F, 0x0E, 0x27, 0xD6,  // 1.q.O.'.
                /* 09C8 */  0xF3, 0x48, 0x08, 0x48, 0xED, 0x37, 0x00, 0x8D,  // .H.H.7..
                /* 09D0 */  0xE0, 0x48, 0x1F, 0x7C, 0xD8, 0x1D, 0x98, 0x8F,  // .H.|....
                /* 09D8 */  0xCB, 0x81, 0x49, 0x14, 0xFA, 0x74, 0x82, 0x8A,  // ..I..t..
                /* 09E0 */  0x09, 0xA1, 0xFF, 0x3F, 0x9C, 0x41, 0x0C, 0xE8,  // ...?.A..
                /* 09E8 */  0x73, 0x0D, 0xB0, 0xBA, 0x37, 0x80, 0xEF, 0x5C,  // s...7..\
                /* 09F0 */  0x03, 0x2C, 0xA2, 0x0F, 0x15, 0x15, 0x76, 0xA8,  // .,....v.
                /* 09F8 */  0x14, 0xC4, 0x43, 0x75, 0x10, 0x08, 0x39, 0x39,  // ..Cu..99
                /* 0A00 */  0x50, 0x40, 0x3D, 0x11, 0x3C, 0xD7, 0x80, 0x79,  // P@=.<..y
                /* 0A08 */  0x28, 0x16, 0x36, 0x57, 0xD0, 0x38, 0x13, 0xA0,  // (.6W.8..
                /* 0A10 */  0x0C, 0x92, 0x9C, 0x28, 0x80, 0xB9, 0x57, 0xA5,  // ...(..W.
                /* 0A18 */  0xFF, 0xFF, 0x13, 0x05, 0xB8, 0x72, 0x9C, 0x28,  // .....r.(
                /* 0A20 */  0x50, 0xE0, 0x56, 0x73, 0xA2, 0x80, 0x30, 0xCD,  // P.Vs..0.
                /* 0A28 */  0xF0, 0x71, 0x5F, 0x01, 0x7C, 0xB8, 0xF1, 0xD5,  // .q_.|...
                /* 0A30 */  0x26, 0xD0, 0xD3, 0x43, 0x84, 0x30, 0xE1, 0x12,  // &..C.0..
                /* 0A38 */  0x38, 0xF7, 0x99, 0x02, 0x95, 0x98, 0x44, 0xA9,  // 8.....D.
                /* 0A40 */  0x4F, 0x06, 0xA8, 0x9C, 0xE3, 0xA7, 0x20, 0x06,  // O..... .
                /* 0A48 */  0xF4, 0x21, 0x12, 0xAF, 0x03, 0x44, 0x73, 0x7D,  // .!...Ds}
                /* 0A50 */  0x21, 0xF0, 0x18, 0xDE, 0x78, 0x9E, 0x33, 0x7C,  // !...x.3|
                /* 0A58 */  0xA7, 0x00, 0x58, 0xF4, 0xFF, 0xBF, 0x53, 0x00,  // ..X...S.
                /* 0A60 */  0x32, 0x8C, 0xDE, 0x29, 0xC0, 0x15, 0xF5, 0x37,  // 2..)...7
                /* 0A68 */  0xAB, 0x4B, 0x2E, 0x4E, 0x30, 0x90, 0x2E, 0x3D,  // .K.N0..=
                /* 0A70 */  0xB0, 0x06, 0xEA, 0xBB, 0x43, 0xA8, 0xE3, 0x14,  // ....C...
                /* 0A78 */  0xA4, 0x2E, 0x14, 0x5C, 0x1A, 0x8C, 0xEE, 0x3C,  // ...\...<
                /* 0A80 */  0x80, 0x67, 0x91, 0x4B, 0xD2, 0x50, 0xB9, 0x2C,  // .g.K.P.,
                /* 0A88 */  0x18, 0xDD, 0xBC, 0x08, 0x88, 0x86, 0xF5, 0xFF,  // ........
                /* 0A90 */  0x7F, 0xA0, 0x60, 0xA0, 0x7C, 0xA8, 0xFC, 0x76,  // ..`.|..v
                /* 0A98 */  0xFC, 0x3C, 0xF1, 0x32, 0xE0, 0x03, 0x05, 0x70,  // .<.2...p
                /* 0AA0 */  0xBC, 0x1B, 0x9C, 0xC1, 0x93, 0x9E, 0x27, 0xFB,  // ......'.
                /* 0AA8 */  0x70, 0x90, 0xC0, 0x87, 0x0E, 0x38, 0xB8, 0x4F,  // p....8.O
                /* 0AB0 */  0x7B, 0x87, 0x74, 0x50, 0xC0, 0xE0, 0x98, 0xE0,  // {.tP....
                /* 0AB8 */  0x43, 0x07, 0xF8, 0xC2, 0x0C, 0x0A, 0x2D, 0xE5,  // C.....-.
                /* 0AC0 */  0x9A, 0x4D, 0xE6, 0xF2, 0x46, 0xF3, 0x64, 0xE2,  // .M..F.d.
                /* 0AC8 */  0xDB, 0xB7, 0x6F, 0x75, 0x6C, 0x58, 0xE0, 0x86,  // ..oulX..
                /* 0AD0 */  0xF2, 0xB0, 0xC0, 0x17, 0x65, 0x58, 0x68, 0x68,  // ....eXhh
                /* 0AD8 */  0x5F, 0x7C, 0xB0, 0xA3, 0x02, 0xC7, 0xFF, 0x7F,  // _|......
                /* 0AE0 */  0x54, 0x30, 0x6F, 0xE9, 0x1E, 0x3B, 0x70, 0x38,  // T0o..;p8
                /* 0AE8 */  0xE3, 0xF0, 0x93, 0xC5, 0x1B, 0x02, 0x66, 0x58,  // ......fX
                /* 0AF0 */  0xE0, 0xB6, 0x70, 0xCA, 0x01, 0x6C, 0x09, 0x3D,  // ..p..l.=
                /* 0AF8 */  0xE5, 0x80, 0x2B, 0xCE, 0xE3, 0x43, 0x37, 0x45,  // ..+..C7E
                /* 0B00 */  0x9C, 0x28, 0x20, 0x9D, 0x72, 0x60, 0x21, 0x1D,  // .( .r`!.
                /* 0B08 */  0xE9, 0x01, 0xBC, 0x88, 0x3D, 0x87, 0x31, 0x09,  // ....=.1.
                /* 0B10 */  0x57, 0x56, 0x54, 0xF8, 0xC3, 0x14, 0xC8, 0xFE,  // WVT.....
                /* 0B18 */  0xFF, 0x87, 0x29, 0x60, 0x43, 0xE0, 0x73, 0x01,  // ..)`C.s.
                /* 0B20 */  0xE0, 0x49, 0xF9, 0xB9, 0x00, 0x74, 0xC1, 0xCE,  // .I...t..
                /* 0B28 */  0x05, 0x28, 0x69, 0x10, 0x92, 0x77, 0x2E, 0x80,  // .(i..w..
                /* 0B30 */  0x78, 0xDC, 0xC3, 0xE1, 0xBC, 0xDE, 0x1B, 0xE1,  // x.......
                /* 0B38 */  0x09, 0xDF, 0xA0, 0x11, 0x0E, 0x4E, 0x67, 0x03,  // .....Ng.
                /* 0B40 */  0x54, 0xFC, 0xC3, 0x01, 0x3D, 0x1B, 0xF0, 0xB8,  // T...=...
                /* 0B48 */  0x60, 0x14, 0xC4, 0x63, 0xF4, 0x49, 0x05, 0xCE,  // `..c.I..
                /* 0B50 */  0x84, 0x0F, 0x02, 0x7B, 0x38, 0x00, 0xFB, 0xFF,  // ...{8...
                /* 0B58 */  0xFF, 0x70, 0x00, 0x98, 0x72, 0x7E, 0x38, 0x00,  // .p..r~8.
                /* 0B60 */  0x5D, 0xA0, 0xC3, 0x01, 0x4A, 0xD4, 0x50, 0x7C,  // ]...J.P|
                /* 0B68 */  0x38, 0x80, 0x78, 0xF9, 0x7D, 0x35, 0x30, 0xD6,  // 8.x.}50.
                /* 0B70 */  0x33, 0x12, 0xE6, 0x10, 0x02, 0x98, 0xFE, 0xFF,  // 3.......
                /* 0B78 */  0x1F, 0x0C, 0x80, 0x89, 0xF4, 0x83, 0x01, 0xE8,  // ........
                /* 0B80 */  0x14, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  // ......U.
                /* 0B88 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  // 25.4...R
                /* 0B90 */  0x63, 0xC6, 0xCA, 0x5C, 0xF2, 0xE9, 0x58, 0x2C,  // c..\..X,
                /* 0B98 */  0x62, 0x39, 0x02, 0xB1, 0x6E, 0x0A, 0x9D, 0x08,  // b9..n...
                /* 0BA0 */  0x1D, 0x02, 0x44, 0x40, 0x96, 0xFD, 0xAA, 0x12,  // ..D@....
                /* 0BA8 */  0x10, 0x01, 0x11, 0x90, 0x85, 0x3C, 0xF0, 0x04,  // .....<..
                /* 0BB0 */  0x64, 0x55, 0x20, 0x02, 0x72, 0x2A, 0x20, 0x1A,  // dU .r* .
                /* 0BB8 */  0x11, 0x88, 0xC6, 0xF1, 0x00, 0xC4, 0xC2, 0x81,  // ........
                /* 0BC0 */  0x08, 0xC8, 0xEA, 0x4C, 0x00, 0x31, 0xA9, 0x20,  // ...L.1. 
                /* 0BC8 */  0x02, 0xB2, 0x2C, 0x15, 0x40, 0x4C, 0x24, 0x88,  // ..,.@L$.
                /* 0BD0 */  0x80, 0x9C, 0x71, 0x7D, 0x02, 0x72, 0x60, 0x10,  // ..q}.r`.
                /* 0BD8 */  0x01, 0x39, 0xE4, 0x1B, 0x41, 0x40, 0x8E, 0x0C,  // .9..A@..
                /* 0BE0 */  0x22, 0x20, 0x0B, 0xFE, 0xD1, 0x0A, 0xC8, 0xF2,  // " ......
                /* 0BE8 */  0x41, 0x04, 0xE4, 0xF8, 0x40, 0x54, 0x8C, 0x0F,  // A...@T..
                /* 0BF0 */  0x20, 0x16, 0xE5, 0x31, 0x20, 0x20, 0xE7, 0x02,  //  ..1  ..
                /* 0BF8 */  0x11, 0x90, 0x73, 0xD0, 0x08, 0xC8, 0xA9, 0x28,  // ..s....(
                /* 0C00 */  0x04, 0x64, 0x55, 0x4F, 0x07, 0x01, 0x59, 0x23,  // .dUO..Y#
                /* 0C08 */  0x88, 0x80, 0x9C, 0x12, 0x88, 0x66, 0x06, 0xA2,  // .....f..
                /* 0C10 */  0x82, 0xAD, 0x00, 0x31, 0xF5, 0x20, 0x02, 0xB2,  // ...1. ..
                /* 0C18 */  0x52, 0x2D, 0x40, 0x4C, 0x37, 0x88, 0x80, 0x9C,  // R-@L7...
                /* 0C20 */  0xDA, 0x0B, 0x10, 0xD3, 0xF0, 0x0E, 0x10, 0x90,  // ........
                /* 0C28 */  0xB5, 0xBE, 0x24, 0x05, 0xE2, 0xA4, 0x20, 0x54,  // ..$... T
                /* 0C30 */  0xAB, 0x1B, 0x10, 0x96, 0xD3, 0x0E, 0x08, 0x53,  // .......S
                /* 0C38 */  0xA9, 0x07, 0x84, 0xE5, 0xF1, 0x33, 0x64, 0x0A,  // .....3d.
                /* 0C40 */  0x22, 0x20, 0x2B, 0x3A, 0x76, 0x08, 0xC8, 0xF2,  // " +:v...
                /* 0C48 */  0x04, 0xFD, 0xFF, 0x81, 0x98, 0x14, 0x43, 0x40,  // ......C@
                /* 0C50 */  0x4C, 0x18, 0x88, 0x80, 0x1C, 0x09, 0x88, 0x06,  // L.......
                /* 0C58 */  0x04, 0xA2, 0xF2, 0x1C, 0x01, 0x31, 0xAD, 0x20,  // .....1. 
                /* 0C60 */  0x02, 0x72, 0x40, 0x20, 0x9A, 0x16, 0x88, 0x6A,  // .r@ ...j
                /* 0C68 */  0x7C, 0x5B, 0x09, 0xC8, 0x82, 0x41, 0x04, 0x64,  // |[...A.d
                /* 0C70 */  0x71, 0x96, 0x8E, 0x02, 0x14, 0x44, 0x40, 0x8E,  // q....D@.
                /* 0C78 */  0xA9, 0x69, 0xA8, 0x14, 0x44, 0x40, 0x16, 0xEA,  // .i..D@..
                /* 0C80 */  0x09, 0x88, 0xA9, 0x06, 0x11, 0x90, 0x15, 0x3E,  // .......>
                /* 0C88 */  0x4C, 0x04, 0x64, 0xBD, 0x20, 0x1A, 0x24, 0x01,  // L.d. .$.
                /* 0C90 */  0xA2, 0xB9, 0x81, 0xA8, 0x6A, 0x55, 0x40, 0x2C,  // ....jU@,
                /* 0C98 */  0x02, 0x88, 0x80, 0x9C, 0x1B, 0x88, 0x8A, 0x70,  // .......p
                /* 0CA0 */  0x05, 0xC4, 0xA4, 0x83, 0x08, 0xC8, 0x39, 0x80,  // ......9.
                /* 0CA8 */  0xA8, 0xE6, 0x27, 0x85, 0x80, 0x9C, 0x00, 0x44,  // ..'....D
                /* 0CB0 */  0x40, 0xCE, 0x6F, 0xEB, 0x68, 0x40, 0x75, 0x01,  // @.o.h@u.
                /* 0CB8 */  0xB1, 0x04, 0x20, 0x02, 0x72, 0x1C, 0x20, 0x2A,  // .. .r. *
                /* 0CC0 */  0xDD, 0x17, 0x10, 0x0B, 0x02, 0x22, 0x20, 0x0B,  // ....." .
                /* 0CC8 */  0x7A, 0x8D, 0x68, 0xE0, 0x04, 0x44, 0x40, 0x8E,  // z.h..D@.
                /* 0CD0 */  0x66, 0x0C, 0x88, 0xE5, 0x04, 0xD1, 0x40, 0xC9,  // f.....@.
                /* 0CD8 */  0x57, 0x44, 0x40, 0x56, 0x0A, 0xA2, 0x41, 0x13,  // WD@V..A.
                /* 0CE0 */  0x20, 0x9A, 0x16, 0x88, 0x2A, 0x7E, 0x93, 0x3C,  //  ...*~.<
                /* 0CE8 */  0x3A, 0x30, 0x10, 0x1D, 0x11, 0xC8, 0xE3, 0x49,  // :0.....I
                /* 0CF0 */  0x47, 0x04, 0x02, 0x22, 0x20, 0x07, 0xB6, 0x06,  // G.." ...
                /* 0CF8 */  0xC4, 0xD2, 0x83, 0x68, 0x70, 0x44, 0x1B, 0x10,  // ...hpD..
                /* 0D00 */  0x0B, 0x00, 0x22, 0x60, 0xE2, 0x0D, 0x98, 0x82,  // .."`....
                /* 0D08 */  0x08, 0xC8, 0x99, 0xBF, 0xAC, 0x02, 0xB2, 0x02,  // ........
                /* 0D10 */  0x73, 0x40, 0x4C, 0x39, 0x88, 0x06, 0x4B, 0x80,  // s@L9..K.
                /* 0D18 */  0x68, 0x7E, 0x20, 0xAA, 0x46, 0x1D, 0x10, 0xCB,  // h~ .F...
                /* 0D20 */  0xE0, 0x0E, 0x88, 0x05, 0x02, 0x11, 0x90, 0x65,  // .......e
                /* 0D28 */  0xC8, 0x03, 0x62, 0x9A, 0x40, 0x04, 0xE4, 0xF0,  // ..b.@...
                /* 0D30 */  0x40, 0x54, 0x8A, 0xBD, 0xFF, 0x3F, 0x10, 0x0B,  // @T...?..
                /* 0D38 */  0xF1, 0x93, 0x15, 0x90, 0x23, 0x81, 0xE8, 0xD0,  // ....#...
                /* 0D40 */  0x40, 0xFC, 0x1D, 0x1A, 0x28, 0x88, 0x80, 0x1C,  // @...(...
                /* 0D48 */  0x08, 0x88, 0xC6, 0x03, 0xA2, 0xAA, 0x7E, 0x2F,  // ......~/
                /* 0D50 */  0x81, 0x88, 0x44, 0x10, 0x01, 0x39, 0x18, 0x10,  // ..D..9..
                /* 0D58 */  0x4D, 0x09, 0x44, 0xE3, 0x28, 0x3C, 0x4C, 0x50,  // M.D.(<LP
                /* 0D60 */  0x10, 0x1D, 0x45, 0xC8, 0x1F, 0x47, 0x47, 0x11,  // ..E..GG.
                /* 0D68 */  0x02, 0x22, 0x20, 0x87, 0x03, 0xA2, 0x51, 0x81,  // ." ...Q.
                /* 0D70 */  0xE8, 0x8B, 0x25, 0x10, 0xD3, 0x0C, 0xA2, 0x83,  // ..%.....
                /* 0D78 */  0x00, 0xF1, 0x78, 0x80, 0xA0, 0x20, 0x02, 0x72,  // ..x.. .r
                /* 0D80 */  0x5A, 0x91, 0x40, 0x2C, 0x3A, 0x88, 0x8E, 0x26,  // Z.@,:..&
                /* 0D88 */  0xE4, 0x19, 0x13, 0x88, 0x24, 0x06, 0x11, 0x90,  // ....$...
                /* 0D90 */  0xD5, 0xBA, 0x04, 0x62, 0xD2, 0x41, 0x74, 0xA8,  // ...b.At.
                /* 0D98 */  0x20, 0x5F, 0x9D, 0x40, 0x44, 0x31, 0x88, 0x80,  //  _.@D1..
                /* 0DA0 */  0x9C, 0x15, 0x88, 0x26, 0x07, 0xA2, 0xBA, 0xFF,  // ...&....
                /* 0DA8 */  0x37, 0x81, 0x48, 0x0A, 0x10, 0x01, 0x59, 0xC1,  // 7.H...Y.
                /* 0DB0 */  0x63, 0x37, 0x10, 0xD1, 0x03, 0x22, 0x20, 0xA7,  // c7..." .
                /* 0DB8 */  0x01, 0xA2, 0xD9, 0x80, 0xA8, 0xB6, 0xB7, 0xCF,  // ........
                /* 0DC0 */  0xC3, 0x02, 0x03, 0xD1, 0xA1, 0x80, 0x18, 0x3D,  // .......=
                /* 0DC8 */  0x14, 0xD0, 0xD7, 0xCF, 0xC3, 0x00, 0xFB, 0xFE,  // ........
                /* 0DD0 */  0x08, 0xC8, 0x89, 0x40, 0x04, 0xE4, 0xFF, 0x3F   // ...@...?
            })
            Method (SPEC, 1, Serialized)
            {
                Return (AMWV) /* \AMWV */
            }

            Method (DEVP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If ((PARA == One))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF |= One
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF |= 0x02
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF |= 0x04
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF |= 0x08
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF |= 0x10
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF |= 0x20
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF |= 0x40
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF |= 0x80
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF |= 0x0100
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF |= 0x0200
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF |= 0x0400
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF |= 0x0800
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF |= 0x1000
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF |= 0x2000
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF |= 0x4000
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF |= 0x8000
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF |= 0x00010000
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF |= 0x00020000
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF |= 0x00040000
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF |= 0x00080000
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF |= 0x00100000
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((PARA == Zero))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFE
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFD
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFB
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFF7
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFEF
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFDF
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFBF
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFF7F
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFEFF
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFDFF
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFBFF
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFF7FF
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFEFFF
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFDFFF
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFBFFF
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFF7FFF
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFEFFFF
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFDFFFF
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFBFFFF
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFF7FFFF
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFEFFFFF
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Return (One)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (0xE0000000)
                    {
                        Return (WLDF (CPAR))
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = 0x03
                    }
                    Case (0xE0000000)
                    {
                        Local0 = One
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (Zero)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }

            Method (IBFX, 0, Serialized)
            {
                OperationRegion (ECR1, SystemIO, 0x6C, One)
                Field (ECR1, ByteAcc, NoLock, Preserve)
                {
                    ECOF,   1, 
                    ECIE,   1, 
                    Offset (0x01)
                }

                Local0 = 0x1000
                While ((Local0-- && ECIE))
                {
                    Sleep (One)
                }
            }

            Method (OBFX, 0, Serialized)
            {
                OperationRegion (ECR2, SystemIO, 0x6C, One)
                Field (ECR2, ByteAcc, NoLock, Preserve)
                {
                    ECOF,   1, 
                    ECIE,   1, 
                    Offset (0x01)
                }

                Local0 = 0x1000
                While (Local0--)
                {
                    If (ECOF)
                    {
                        Break
                    }

                    Sleep (One)
                }
            }

            Method (WLDF, 1, Serialized)
            {
                OperationRegion (ECR3, SystemIO, 0x6C, One)
                Field (ECR3, ByteAcc, NoLock, Preserve)
                {
                    EC6C,   8
                }

                OperationRegion (ECR4, SystemIO, 0x68, One)
                Field (ECR4, ByteAcc, NoLock, Preserve)
                {
                    EC68,   8
                }

                IBFX ()
                EC6C = 0x91
                IBFX ()
                EC68 = 0xFF
                IBFX ()
                EC68 = Zero
                If ((Arg0 == One))
                {
                    IBFX ()
                    EC6C = 0x91
                    IBFX ()
                    EC68 = 0x72
                    IBFX ()
                    EC68 = 0x04
                }
                ElseIf ((Arg0 == 0xFF))
                {
                    IBFX ()
                    EC6C = 0x91
                    IBFX ()
                    EC68 = 0x72
                    IBFX ()
                    EC68 = Zero
                }

                Return (One)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMS, 0x78156D18)
        OperationRegion (RAMX, SystemMemory, RAMS, 0x0100)
        Field (RAMX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            A1T0,   8, 
            A1T2,   8, 
            A1P0,   8, 
            A1S1,   8, 
            A1T1,   8, 
            A1S2,   8, 
            A2T0,   8, 
            A2T2,   8, 
            A2P0,   8, 
            A2S1,   8, 
            A2T1,   8, 
            A2S2,   8, 
            Offset (0x10), 
            B1T0,   8, 
            B1T2,   8, 
            B1P0,   8, 
            B1S1,   8, 
            B1T1,   8, 
            B1S2,   8, 
            B2T0,   8, 
            B2T2,   8, 
            B2P0,   8, 
            B2S1,   8, 
            B2T1,   8, 
            B2S2,   8, 
            Offset (0x1E), 
            C1T0,   8, 
            C1T2,   8, 
            C1P0,   8, 
            C1S1,   8, 
            C1T1,   8, 
            C1S2,   8, 
            C2T0,   8, 
            C2T2,   8, 
            C2P0,   8, 
            C2S1,   8, 
            C2T1,   8, 
            C2S2,   8, 
            Offset (0x2C), 
            D1T0,   8, 
            D1T2,   8, 
            D1P0,   8, 
            D1S1,   8, 
            D1T1,   8, 
            D1S2,   8, 
            D2T0,   8, 
            D2T2,   8, 
            D2P0,   8, 
            D2S1,   8, 
            D2T1,   8, 
            D2S2,   8, 
            Offset (0x3A), 
            E1T0,   8, 
            E1T2,   8, 
            E1P0,   8, 
            E1S1,   8, 
            E1T1,   8, 
            E1S2,   8, 
            E2T0,   8, 
            E2T2,   8, 
            E2P0,   8, 
            E2S1,   8, 
            E2T1,   8, 
            E2S2,   8
        }
    }

    Scope (_GPE)
    {
        Name (TEST, Zero)
        OperationRegion (DBGP, SystemIO, 0x80, One)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        OperationRegion (ECR3, SystemIO, 0x62, One)
        Field (ECR3, ByteAcc, NoLock, Preserve)
        {
            EC62,   8
        }

        OperationRegion (ECR2, SystemIO, 0x66, One)
        Field (ECR2, ByteAcc, NoLock, Preserve)
        {
            EC66,   8
        }

        OperationRegion (SGP, SystemIO, 0x2E, 0x02)
        Field (SGP, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        OperationRegion (SGB, SystemIO, 0x02A0, 0x03)
        Field (SGB, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            SGBA,   8
        }

        OperationRegion (PGP, SystemMemory, 0xFEC30000, 0x10)
        Field (PGP, DWordAcc, NoLock, Preserve)
        {
            PTGP,   32, 
            Offset (0x08), 
            PTHL,   32
        }

        OperationRegion (AGP, SystemMemory, 0xFED8171C, 0x10)
        Field (AGP, DWordAcc, NoLock, Preserve)
        {
            G135,   32, 
            G136,   32, 
            G137,   32, 
            G138,   32
        }

        Name (IMUX, 0xF40000B8)
        OperationRegion (AGP2, SystemMemory, IMUX, 0x08)
        Field (AGP2, DWordAcc, NoLock, Preserve)
        {
            SMNI,   32, 
            SMNM,   32
        }

        OperationRegion (HWM, SystemMemory, HWMM, 0x0300)
        Field (HWM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x03), 
            R003,   8, 
            Offset (0x15), 
            R015,   8, 
            R016,   8, 
            R017,   8, 
            Offset (0x1E), 
            R01E,   8, 
            Offset (0x29), 
            R029,   8, 
            R02A,   8, 
            R02B,   8, 
            R02C,   8, 
            R02D,   8, 
            Offset (0x61), 
            R061,   8, 
            R062,   8, 
            R063,   8, 
            R064,   8, 
            Offset (0x69), 
            R069,   8, 
            R06A,   8, 
            R06B,   8, 
            R06C,   8, 
            Offset (0x71), 
            R071,   8, 
            R072,   8, 
            R073,   8, 
            R074,   8, 
            Offset (0x79), 
            R079,   8, 
            R07A,   8, 
            R07B,   8, 
            R07C,   8, 
            Offset (0x210), 
            R210,   8, 
            R211,   8, 
            Offset (0x215), 
            R215,   8, 
            Offset (0x219), 
            R219,   8, 
            Offset (0x220), 
            R220,   8, 
            R221,   8, 
            Offset (0x225), 
            R225,   8, 
            Offset (0x229), 
            R229,   8, 
            Offset (0x230), 
            R230,   8, 
            R231,   8, 
            Offset (0x235), 
            R235,   8, 
            Offset (0x239), 
            R239,   8, 
            Offset (0x240), 
            R240,   8, 
            R241,   8, 
            Offset (0x245), 
            R245,   8, 
            Offset (0x249), 
            R249,   8
        }

        Name (P1T0, Zero)
        Name (P1T2, Zero)
        Name (P1P0, Zero)
        Name (P1S1, Zero)
        Name (P1T1, Zero)
        Name (P1S2, Zero)
        Name (P2T0, Zero)
        Name (P2T2, Zero)
        Name (P2P0, Zero)
        Name (P2S1, Zero)
        Name (P2T1, Zero)
        Name (P2S2, Zero)
        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x2000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Method (LOMA, 1, NotSerialized)
        {
            Name (ECST, Zero)
            ECST = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0x5A
            OBFX ()
            ECST = EC62 /* \_GPE.EC62 */
            If (((ECST == One) || (ECST == 0x02)))
            {
                If ((ECST == 0x02))
                {
                    If ((Arg0 == Zero))
                    {
                        G135 |= 0x00800000
                        G135 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SMNI = 0x02D02670
                        Local0 = SMNM /* \_GPE.SMNM */
                        Local0 |= 0x00800000
                        Local0 &= 0xFFFFFFFFFFBFFFFF
                        SMNM = Local0
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        G138 |= 0x00800000
                        G138 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        G136 |= 0x00800000
                        G136 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        G137 |= 0x00800000
                        G137 &= 0xFFBFFFFF
                    }

                    IBFX ()
                    EC66 = 0x91
                    IBFX ()
                    EC62 = 0x5A
                    IBFX ()
                    EC62 = One
                    If ((Arg0 == Zero))
                    {
                        R063 = 0xFF
                        R211 = Zero
                        R215 = Zero
                        R219 = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R069 = 0xFF
                        R221 = Zero
                        R225 = Zero
                        R229 = Zero
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R071 = 0xFF
                        R231 = Zero
                        R235 = Zero
                        R239 = Zero
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R079 = 0xFF
                        R241 = Zero
                        R245 = Zero
                        R249 = Zero
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0xFF
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x43
                        IBFX ()
                        EC62 = 0x0D
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4B
                        IBFX ()
                        EC62 = 0xFF
                    }

                    If ((Arg0 == Zero))
                    {
                        PTGP |= 0x02
                        PTHL &= 0xFFFFFFFD
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTGP |= 0x08
                        PTHL &= 0xFFFFFFF7
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTGP |= 0x10
                        PTHL &= 0xFFFFFFEF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTGP |= 0x20
                        PTHL &= 0xFFFFFFDF
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        INDX = 0x55
                        INDX = 0x07
                        DATA = 0x07
                        INDX = 0x27
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0x27
                        DATA = Local1
                        INDX = 0xC2
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0xC2
                        DATA = Local1
                        INDX = 0xCA
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0xCA
                        DATA = Local1
                        Local1 = SGBA /* \_GPE.SGBA */
                        Local1 &= 0xFB
                        SGBA = Local1
                    }

                    If ((Arg0 == Zero))
                    {
                        R061 = P2T0 /* \_GPE.P2T0 */
                        R062 = P2T2 /* \_GPE.P2T2 */
                        R063 = P2P0 /* \_GPE.P2P0 */
                        R064 &= 0x80
                        R064 |= P2S1 /* \_GPE.P2S1 */
                        R210 = P2T1 /* \_GPE.P2T1 */
                        R211 &= 0x80
                        R211 |= P2S2 /* \_GPE.P2S2 */
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R069 = P2T0 /* \_GPE.P2T0 */
                        R06A = P2T2 /* \_GPE.P2T2 */
                        R06B = P2P0 /* \_GPE.P2P0 */
                        R06C &= 0x80
                        R06C |= P2S1 /* \_GPE.P2S1 */
                        R220 = P2T1 /* \_GPE.P2T1 */
                        R221 &= 0x80
                        R221 |= P2S2 /* \_GPE.P2S2 */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R071 = P2T0 /* \_GPE.P2T0 */
                        R072 = P2T2 /* \_GPE.P2T2 */
                        R073 = P2P0 /* \_GPE.P2P0 */
                        R074 &= 0x80
                        R074 |= P2S1 /* \_GPE.P2S1 */
                        R230 = P2T1 /* \_GPE.P2T1 */
                        R231 &= 0x80
                        R231 |= P2S2 /* \_GPE.P2S2 */
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R079 = P2T0 /* \_GPE.P2T0 */
                        R07A = P2T2 /* \_GPE.P2T2 */
                        R07B = P2P0 /* \_GPE.P2P0 */
                        R07C &= 0x80
                        R07C |= P2S1 /* \_GPE.P2S1 */
                        R240 = P2T1 /* \_GPE.P2T1 */
                        R241 &= 0x80
                        R241 |= P2S2 /* \_GPE.P2S2 */
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0xFF
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x43
                        IBFX ()
                        EC62 = 0x0D
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4A
                        IBFX ()
                        EC62 = P2T0 /* \_GPE.P2T0 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4B
                        IBFX ()
                        EC62 = P2P0 /* \_GPE.P2P0 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4C
                        IBFX ()
                        EC62 = P2T1 /* \_GPE.P2T1 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4D
                        IBFX ()
                        EC62 = P2S1 /* \_GPE.P2S1 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4E
                        IBFX ()
                        EC62 = P2T2 /* \_GPE.P2T2 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4F
                        IBFX ()
                        EC62 = P2S2 /* \_GPE.P2S2 */
                    }
                }
                ElseIf ((ECST == One))
                {
                    If ((Arg0 == Zero))
                    {
                        PTGP |= 0x02
                        PTHL |= 0x02
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTGP |= 0x08
                        PTHL |= 0x08
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTGP |= 0x10
                        PTHL |= 0x10
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTGP |= 0x20
                        PTHL |= 0x20
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        INDX = 0x55
                        INDX = 0x07
                        DATA = 0x07
                        INDX = 0x27
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0x27
                        DATA = Local1
                        INDX = 0xC2
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0xC2
                        DATA = Local1
                        INDX = 0xCA
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0xCA
                        DATA = Local1
                        INDX = 0xBA
                        Local1 = DATA /* \_GPE.DATA */
                        Local1 |= 0x04
                        INDX = 0xBA
                        DATA = Local1
                        Local1 = SGBA /* \_GPE.SGBA */
                        Local1 |= 0x04
                        SGBA = Local1
                    }

                    If ((Arg0 == Zero))
                    {
                        R064 &= 0x7F
                        R015 &= 0x7F
                        R063 = Zero
                        R064 = Zero
                        R211 = Zero
                        R215 = Zero
                        R219 = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R06C &= 0x7F
                        R016 &= 0x7F
                        R069 = Zero
                        R06A = Zero
                        R221 = Zero
                        R225 = Zero
                        R229 = Zero
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R074 &= 0x7F
                        R017 &= 0x7F
                        R071 = Zero
                        R072 = Zero
                        R231 = Zero
                        R235 = Zero
                        R239 = Zero
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R07C &= 0x7F
                        R01E &= 0x7F
                        R079 = Zero
                        R07A = Zero
                        R241 = Zero
                        R245 = Zero
                        R249 = Zero
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0xFF
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x43
                        IBFX ()
                        EC62 = 0x0D
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4B
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4D
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4F
                        IBFX ()
                        EC62 = Zero
                    }

                    If ((Arg0 == Zero))
                    {
                        G135 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SMNI = 0x02D02670
                        Local0 = SMNM /* \_GPE.SMNM */
                        Local0 &= 0xFFFFFFFFFF7FFFFF
                        SMNM = Local0
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        G138 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        G136 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        G137 &= 0xFF7FFFFF
                    }

                    IBFX ()
                    EC66 = 0x91
                    IBFX ()
                    EC62 = 0x5A
                    IBFX ()
                    EC62 = 0x02
                    If ((Arg0 == Zero))
                    {
                        R064 |= 0x80
                        R061 = P1T0 /* \_GPE.P1T0 */
                        R062 = P1T2 /* \_GPE.P1T2 */
                        R063 = P1P0 /* \_GPE.P1P0 */
                        R064 &= 0x80
                        R064 |= P1S1 /* \_GPE.P1S1 */
                        R210 = P1T1 /* \_GPE.P1T1 */
                        R211 &= 0x80
                        R211 |= P1S2 /* \_GPE.P1S2 */
                        R015 |= 0x80
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R06C |= 0x80
                        R069 = P1T0 /* \_GPE.P1T0 */
                        R06A = P1T2 /* \_GPE.P1T2 */
                        R06B = P1P0 /* \_GPE.P1P0 */
                        R06C &= 0x80
                        R06C |= P1S1 /* \_GPE.P1S1 */
                        R220 = P1T1 /* \_GPE.P1T1 */
                        R221 &= 0x80
                        R221 |= P1S2 /* \_GPE.P1S2 */
                        R016 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R074 |= 0x80
                        R071 = P1T0 /* \_GPE.P1T0 */
                        R072 = P1T2 /* \_GPE.P1T2 */
                        R073 = P1P0 /* \_GPE.P1P0 */
                        R074 &= 0x80
                        R074 |= P1S1 /* \_GPE.P1S1 */
                        R230 = P1T1 /* \_GPE.P1T1 */
                        R231 &= 0x80
                        R231 |= P1S2 /* \_GPE.P1S2 */
                        R017 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R07C |= 0x80
                        R079 = P1T0 /* \_GPE.P1T0 */
                        R07A = P1T2 /* \_GPE.P1T2 */
                        R07B = P1P0 /* \_GPE.P1P0 */
                        R07C &= 0x80
                        R07C |= P1S1 /* \_GPE.P1S1 */
                        R240 = P1T1 /* \_GPE.P1T1 */
                        R241 &= 0x80
                        R241 |= P1S2 /* \_GPE.P1S2 */
                        R01E |= 0x80
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0xFF
                        IBFX ()
                        EC62 = Zero
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x43
                        IBFX ()
                        EC62 = 0x0D
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4A
                        IBFX ()
                        EC62 = P1T0 /* \_GPE.P1T0 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4B
                        IBFX ()
                        EC62 = P1P0 /* \_GPE.P1P0 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4C
                        IBFX ()
                        EC62 = P1T1 /* \_GPE.P1T1 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4D
                        IBFX ()
                        EC62 = P1S1 /* \_GPE.P1S1 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4E
                        IBFX ()
                        EC62 = P1T2 /* \_GPE.P1T2 */
                        IBFX ()
                        EC66 = 0x91
                        IBFX ()
                        EC62 = 0x4F
                        IBFX ()
                        EC62 = P1S2 /* \_GPE.P1S2 */
                    }
                }
            }
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Mutex (MUT0, 0x00)
            Acquire (MUT0, 0xFFFF)
            Name (TIDX, Zero)
            Name (MNTP, Zero)
            Name (TEM2, Zero)
            Name (ECID, Zero)
            INDX = 0x87
            INDX = One
            INDX = 0x55
            INDX = 0x55
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0x81
            OBFX ()
            ECID = EC62 /* \_GPE.EC62 */
            INDX = 0x07
            DATA = 0x04
            INDX = 0xF3
            Local1 = DATA /* \_GPE.DATA */
            INDX = 0xF3
            DATA = Zero
            TEM2 = (ECID & One)
            If (TEM2)
            {
                P1T0 = \_SB.A1T0
                P1T2 = \_SB.A1T2
                P1P0 = \_SB.A1P0
                P1S1 = \_SB.A1S1
                P1T1 = \_SB.A1T1
                P1S2 = \_SB.A1S2
                P2T0 = \_SB.A2T0
                P2T2 = \_SB.A2T2
                P2P0 = \_SB.A2P0
                P2S1 = \_SB.A2S1
                P2T1 = \_SB.A2T1
                P2S2 = \_SB.A2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = Zero
                LOMA (Zero)
            }

            TEM2 = (ECID & 0x04)
            If (TEM2)
            {
                P1T0 = \_SB.B1T0
                P1T2 = \_SB.B1T2
                P1P0 = \_SB.B1P0
                P1S1 = \_SB.B1S1
                P1T1 = \_SB.B1T1
                P1S2 = \_SB.B1S2
                P2T0 = \_SB.B2T0
                P2T2 = \_SB.B2T2
                P2P0 = \_SB.B2P0
                P2S1 = \_SB.B2S1
                P2T1 = \_SB.B2T1
                P2S2 = \_SB.B2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = One
                LOMA (One)
            }

            TEM2 = (ECID & 0x08)
            If (TEM2)
            {
                P1T0 = \_SB.C1T0
                P1T2 = \_SB.C1T2
                P1P0 = \_SB.C1P0
                P1S1 = \_SB.C1S1
                P1T1 = \_SB.C1T1
                P1S2 = \_SB.C1S2
                P2T0 = \_SB.C2T0
                P2T2 = \_SB.C2T2
                P2P0 = \_SB.C2P0
                P2S1 = \_SB.C2S1
                P2T1 = \_SB.C2T1
                P2S2 = \_SB.C2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = 0x02
                LOMA (0x02)
            }

            TEM2 = (ECID & 0x10)
            If (TEM2)
            {
                P1T0 = \_SB.D1T0
                P1T2 = \_SB.D1T2
                P1P0 = \_SB.D1P0
                P1S1 = \_SB.D1S1
                P1T1 = \_SB.D1T1
                P1S2 = \_SB.D1S2
                P2T0 = \_SB.D2T0
                P2T2 = \_SB.D2T2
                P2P0 = \_SB.D2P0
                P2S1 = \_SB.D2S1
                P2T1 = \_SB.D2T1
                P2S2 = \_SB.D2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = 0x03
                LOMA (0x03)
            }

            TEM2 = (ECID & 0x80)
            If (TEM2)
            {
                P1T0 = \_SB.E1T0
                P1T2 = \_SB.E1T2
                P1P0 = \_SB.E1P0
                P1S1 = \_SB.E1S1
                P1T1 = \_SB.E1T1
                P1S2 = \_SB.E1S2
                P2T0 = \_SB.E2T0
                P2T2 = \_SB.E2T2
                P2P0 = \_SB.E2P0
                P2S1 = \_SB.E2S1
                P2T1 = \_SB.E2T1
                P2S2 = \_SB.E2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = 0x0D
                LOMA (0x04)
            }

            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0x81
            IBFX ()
            EC62 = Zero
            Local0 = R003 /* \_GPE.R003 */
            INDX = 0x07
            DATA = 0x04
            INDX = 0xF3
            DATA = Local1
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            Release (MUT0)
            Return (Zero)
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "648655725788Genuine NVIDIA Certified SLI Ready Motherboard for ASUS ROCKWORK       106a-Copyright 2017 NVIDIA Corporation All Rights Reserved-933399180831(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PCI0.SLIC */
                }

                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : FF
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 78213700
[028h 0040   4]                 DSDT Address : 780DB1F8
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000B05AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 1
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000780DB1F8
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 FF 41 4D 44 00 00 00  // FACP......AMD...
    0010: 41 20 4D 20 49 20 00 00 16 20 24 03 41 4D 49 20  // A M I ... $.AMI 
    0020: 13 00 01 00 00 37 21 78 F8 B1 0D 78 00 01 09 00  // .....7!x...x....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 04 10 00 01 00 0D 00 32 00 00 00  // d...........2...
    0070: AD 05 0B 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 F8 B1 0D 78  // ...............x
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 430FACA5
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 A5 AC 0F 43 00 00 00 00  // FACS@......C....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A0
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 A0 41 4D 44 00 00 00  // FIDT......AMD...
    0010: 41 20 4D 20 49 00 00 00 16 20 24 03 41 4D 49 20  // A M I.... $.AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 34 34 33 33  // ....$FID.x.A4433
    0030: 00 00 00 00 F8 70 FA 9E F5 88 0E 48 B6 E8 43 3C  // .....p.....H..C<
    0040: 8C 87 0F FD 30 35 00 31 33 00 30 30 00 30 36 00  // ....05.13.00.06.
    0050: E5 07 07 0F 12 12 1E FF FF 41 4D 44 00 00 00 41  // .........AMD...A
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000794309B0

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000794309D0

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 EF 41 4D 44 00 00 00  // FPDTD.....AMD...
    0010: 41 20 4D 20 49 20 00 00 16 20 24 03 41 4D 49 20  // A M I ... $.AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 B0 09 43 79  // ..............Cy
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 D0 09 43 79  // ..............Cy
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0B
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 0B 41 4D 44 00 41 20  // HPET8.....AMD.A 
    0010: 41 20 4D 20 49 00 00 00 16 20 24 03 41 4D 49 20  // A M I.... $.AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 00000130
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : CF
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD IVRS"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000EFD00000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : 3FFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 80
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 81
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000EFD00000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 400F77EF22294ADA
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : 3FFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A4
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 80
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 81
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[0D1h 0209   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210   2]                       Length : 0028
[0D4h 0212   2]                     DeviceId : 4002
[0D6h 0214   2]            Capability Offset : 0040
[0D8h 0216   8]                 Base Address : 00000000B7B00000
[0E0h 0224   2]            PCI Segment Group : 0000
[0E2h 0226   2]          Virtualization Info : 0000
[0E4h 0228   4]            Feature Reporting : 80048F6E

[0E8h 0232   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0E9h 0233   2]                    Device ID : 4008
[0EBh 0235   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0ECh 0236   1]                Subtable Type : 04 [Device Entry: End of Range]
[0EDh 0237   2]                    Device ID : FFFE
[0EFh 0239   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0F0h 0240   1]                Subtable Type : 48 [Device Entry: Special Device]
[0F1h 0241   2]                    Device ID : 0000
[0F3h 0243   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0F4h 0244   1]                       Handle : 82
[0F5h 0245   2]        Source Used Device ID : 4001
[0F7h 0247   1]                      Variety : 01

[0F8h 0248   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[0F9h 0249   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0FAh 0250   2]                       Length : 0038
[0FCh 0252   2]                     DeviceId : 4002
[0FEh 0254   2]            Capability Offset : 0040
[100h 0256   8]                 Base Address : 00000000B7B00000
[108h 0264   2]            PCI Segment Group : 0000
[10Ah 0266   2]          Virtualization Info : 0000
[10Ch 0268   4]                   Attributes : 00040200
[110h 0272   8]                    EFR Image : 400F77EF22294ADA
[118h 0280   8]                     Reserved : 0000000000000000

[120h 0288   1]                Subtable Type : 03 [Device Entry: Start of Range]
[121h 0289   2]                    Device ID : 4008
[123h 0291   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[124h 0292   1]                Subtable Type : 04 [Device Entry: End of Range]
[125h 0293   2]                    Device ID : FFFE
[127h 0295   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[128h 0296   1]                Subtable Type : 48 [Device Entry: Special Device]
[129h 0297   2]                    Device ID : 0000
[12Bh 0299   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[12Ch 0300   1]                       Handle : 82
[12Dh 0301   2]        Source Used Device ID : 4001
[12Fh 0303   1]                      Variety : 01

Raw Table Data: Length 304 (0x130)

    0000: 49 56 52 53 30 01 00 00 02 CF 41 4D 44 00 00 00  // IVRS0.....AMD...
    0010: 41 4D 44 20 49 56 52 53 01 00 00 00 41 4D 44 20  // AMD IVRS....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 D0 EF 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE 3F 00  // ....n.........?.
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 80 A0 00 01  // H.......H.......
    0070: 48 00 00 00 81 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 D0 EF 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 0F 40 00 00 00 00 00 00 00 00  // .J)".w.@........
    00A0: 03 08 00 00 04 FE 3F 00 43 00 FF 00 00 A4 00 00  // ......?.C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 80 A0 00 01 48 00 00 00 81 01 00 01  // H.......H.......
    00D0: 10 B0 28 00 02 40 40 00 00 00 B0 B7 00 00 00 00  // ..(..@@.........
    00E0: 00 00 00 00 6E 8F 04 80 03 08 40 00 04 FE FF 00  // ....n.....@.....
    00F0: 48 00 00 00 82 01 40 01 11 B0 38 00 02 40 40 00  // H.....@...8..@@.
    0100: 00 00 B0 B7 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0110: DA 4A 29 22 EF 77 0F 40 00 00 00 00 00 00 00 00  // .J)".w.@........
    0120: 03 08 40 00 04 FE FF 00 48 00 00 00 82 01 40 01  // ..@.....H.....@.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 42
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 03242016
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 42 41 4D 44 00 41 20  // MCFG<....BAMD.A 
    0010: 41 20 4D 20 49 00 00 00 16 20 24 03 4D 53 46 54  // A M I.... $.MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020034, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set SOC VID", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xCD)
            {
                0x00020001, 
                0x014D, 
                0x0898, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xEA)
            {
                0x00020001, 
                0x23, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x01)
            {
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Name (CMDV, 0x04)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0x78213B98, 0xC8)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                MRSD,   560, 
                RSD2,   64
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x04
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x04
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x04
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x04
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x04
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x04
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x04
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x04
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MPOT)
                MBVS = 0x04
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRPG)
                MBVS = 0x04
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x04
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x04
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x04
            }

            Name (WQBA, Buffer (0x08CB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBB, 0x08, 0x00, 0x00, 0x44, 0x2D, 0x00, 0x00,  // ....D-..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x4C, 0x96, 0x00, 0x01, 0x06, 0x18, 0x42,  // (L.....B
                /* 0020 */  0x10, 0x0D, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x2B, 0x26,  // x\.A.P+&
                /* 00A8 */  0x04, 0xE5, 0x0F, 0x59, 0x31, 0x60, 0x50, 0x12,  // ...Y1`P.
                /* 00B0 */  0xC6, 0x42, 0x5D, 0x8C, 0x1A, 0x35, 0x52, 0x36,  // .B]..5R6
                /* 00B8 */  0x20, 0x43, 0x94, 0x36, 0x6A, 0xF4, 0x80, 0xCE,  //  C.6j...
                /* 00C0 */  0xEF, 0x48, 0xCE, 0xEE, 0xE8, 0x8E, 0x24, 0x81,  // .H....$.
                /* 00C8 */  0x51, 0x8F, 0xE9, 0x18, 0x0B, 0x9B, 0x91, 0x50,  // Q......P
                /* 00D0 */  0x63, 0x34, 0x07, 0x45, 0xC2, 0x0D, 0x1A, 0x2D,  // c4.E...-
                /* 00D8 */  0x11, 0x56, 0xE3, 0x8A, 0x7D, 0x66, 0x16, 0x3E,  // .V..}f.>
                /* 00E0 */  0x2C, 0x61, 0x1C, 0xC1, 0x81, 0x1D, 0xAC, 0x45,  // ,a.....E
                /* 00E8 */  0xC3, 0x08, 0xAD, 0x20, 0x38, 0x0D, 0xE2, 0x28,  // ... 8..(
                /* 00F0 */  0xA2, 0x84, 0x61, 0x78, 0xC6, 0x0C, 0x74, 0x94,  // ..ax..t.
                /* 00F8 */  0x0C, 0x29, 0x4C, 0xD0, 0x13, 0x08, 0x72, 0xF2,  // .)L...r.
                /* 0100 */  0x0C, 0xCB, 0x10, 0x67, 0xC0, 0xB1, 0x62, 0x84,  // ...g..b.
                /* 0108 */  0x0A, 0x89, 0x19, 0x48, 0xF0, 0xFF, 0xFF, 0x09,  // ...H....
                /* 0110 */  0x74, 0x8D, 0x21, 0xCF, 0x40, 0xE4, 0x1E, 0x70,  // t.!.@..p
                /* 0118 */  0x02, 0x41, 0xA2, 0x47, 0x09, 0x6E, 0x5C, 0xA3,  // .A.G.n\.
                /* 0120 */  0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26, 0x88,  // .1..n`&.
                /* 0128 */  0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40, 0xFC,  // sx....@.
                /* 0130 */  0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x71, 0x40, 0x0A,  // .....q@.
                /* 0138 */  0x11, 0x74, 0x21, 0x38, 0xD3, 0x1A, 0x05, 0x58,  // .t!8...X
                /* 0140 */  0x3B, 0x3B, 0xC8, 0x16, 0x84, 0xCE, 0x02, 0xB1,  // ;;......
                /* 0148 */  0x1A, 0x43, 0x11, 0x44, 0x84, 0xA0, 0x51, 0x8C,  // .C.D..Q.
                /* 0150 */  0x17, 0x21, 0x54, 0x88, 0x28, 0x51, 0xCF, 0x39,  // .!T.(Q.9
                /* 0158 */  0x48, 0x6D, 0x02, 0x94, 0x81, 0x08, 0x2D, 0x98,  // Hm....-.
                /* 0160 */  0x11, 0x98, 0xFD, 0x33, 0x00, 0xB3, 0x70, 0xAC,  // ...3..p.
                /* 0168 */  0x60, 0x12, 0x4E, 0x04, 0x32, 0x32, 0x1A, 0x7A,  // `.N.22.z
                /* 0170 */  0x58, 0xF0, 0x49, 0x80, 0x1D, 0x10, 0x3C, 0x9F,  // X.I...<.
                /* 0178 */  0x53, 0x33, 0x81, 0x03, 0x43, 0x88, 0x57, 0x02,  // S3..C.W.
                /* 0180 */  0x44, 0x1D, 0x2D, 0x28, 0x81, 0xA5, 0x1C, 0x0D,  // D.-(....
                /* 0188 */  0x88, 0xED, 0x81, 0xE9, 0x1E, 0x70, 0x84, 0xE7,  // .....p..
                /* 0190 */  0xEE, 0xCB, 0xC1, 0xA9, 0xF9, 0xA7, 0xE1, 0x69,  // .......i
                /* 0198 */  0x3E, 0x24, 0x60, 0x86, 0xE8, 0xB1, 0x1E, 0x44,  // >$`....D
                /* 01A0 */  0xC0, 0x43, 0x64, 0xA7, 0x04, 0x03, 0xE2, 0xBD,  // .Cd.....
                /* 01A8 */  0x5F, 0x0B, 0xC8, 0x08, 0x5E, 0x12, 0x0C, 0xE8,  // _...^...
                /* 01B0 */  0x49, 0x3C, 0x20, 0x80, 0xE5, 0xA0, 0x71, 0xE0,  // I< ...q.
                /* 01B8 */  0x27, 0x54, 0xF1, 0x1D, 0x80, 0x1E, 0x09, 0xD8,  // 'T......
                /* 01C0 */  0x8C, 0xE2, 0x9B, 0xE0, 0x7F, 0x44, 0xC7, 0x07,  // .....D..
                /* 01C8 */  0xE4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x47, 0x27, 0x3A, 0x7A, 0x70, 0x9C, 0x7E,  // .G':zp.~
                /* 0258 */  0x3C, 0x7A, 0xF0, 0x8F, 0xD1, 0xA3, 0x07, 0xCF,  // <z......
                /* 0260 */  0x18, 0xCE, 0x0D, 0x77, 0xB5, 0xF1, 0xC8, 0xC1,  // ...w....
                /* 0268 */  0x3E, 0x5E, 0xBC, 0xBC, 0xE3, 0x16, 0x28, 0x7C,  // >^....(|
                /* 0270 */  0xCE, 0x9E, 0x0C, 0xE0, 0x3D, 0x08, 0x77, 0xDE,  // ....=.w.
                /* 0278 */  0x02, 0x2E, 0x23, 0xE0, 0x82, 0x9F, 0x3A, 0x3E,  // ..#...:>
                /* 0280 */  0x57, 0x51, 0x89, 0x30, 0xA8, 0xA3, 0x15, 0xB8,  // WQ.0....
                /* 0288 */  0xFE, 0xFF, 0x47, 0x2B, 0x80, 0x09, 0xF7, 0x87,  // ..G+....
                /* 0290 */  0x57, 0xAB, 0x47, 0x2B, 0xB0, 0x87, 0x7C, 0x49,  // W.G+..|I
                /* 0298 */  0xE8, 0x47, 0xE0, 0xD8, 0x10, 0x72, 0x72, 0xB4,  // .G...rr.
                /* 02A0 */  0x42, 0x9D, 0x8C, 0x70, 0x41, 0x0F, 0x56, 0x40,  // B..pA.V@
                /* 02A8 */  0xF7, 0xA0, 0x81, 0x3B, 0x1E, 0xC0, 0xF9, 0xFF,  // ...;....
                /* 02B0 */  0x1F, 0x0F, 0xF8, 0xC0, 0xF8, 0xE9, 0x05, 0x7C,  // .......|
                /* 02B8 */  0x22, 0x8E, 0x42, 0x3E, 0x95, 0x41, 0x3F, 0x41,  // ".B>.A?A
                /* 02C0 */  0x7A, 0xB4, 0xE0, 0x39, 0x56, 0x01, 0x87, 0x53,  // z..9V..S
                /* 02C8 */  0x19, 0x70, 0x18, 0x32, 0xF8, 0xE4, 0x1D, 0xA6,  // .p.2....
                /* 02D0 */  0xD0, 0x07, 0x12, 0x4F, 0xA1, 0xD6, 0x5B, 0x08,  // ...O..[.
                /* 02D8 */  0x81, 0x3D, 0x20, 0x1F, 0x25, 0x82, 0x9C, 0x48,  // .= .%..H
                /* 02E0 */  0x84, 0x73, 0xF1, 0x71, 0x0A, 0x30, 0xF1, 0xFF,  // .s.q.0..
                /* 02E8 */  0x1F, 0x35, 0xFE, 0x96, 0xC1, 0xAE, 0x53, 0x60,  // .5....S`
                /* 02F0 */  0x38, 0x05, 0xC1, 0x9B, 0x94, 0xC7, 0x0F, 0xBE,  // 8.......
                /* 02F8 */  0x63, 0x0F, 0xEE, 0x14, 0x04, 0xCF, 0xE3, 0x90,  // c.......
                /* 0300 */  0x84, 0x7C, 0x1E, 0x2F, 0x01, 0xB8, 0x8B, 0x10,  // .|./....
                /* 0308 */  0xFE, 0x20, 0x04, 0x7C, 0x64, 0x2D, 0x94, 0x9E,  // . .|d-..
                /* 0310 */  0x82, 0x2C, 0x04, 0x06, 0x75, 0x10, 0x02, 0x5C,  // .,..u..\
                /* 0318 */  0xFE, 0xFF, 0x0F, 0x42, 0xC0, 0xCE, 0xDB, 0x6D,  // ...B...m
                /* 0320 */  0x43, 0xD7, 0x20, 0xDF, 0x06, 0x9E, 0x06, 0x5E,  // C. ....^
                /* 0328 */  0x23, 0xA2, 0x3C, 0x08, 0xF9, 0x26, 0xF4, 0x42,  // #.<..&.B
                /* 0330 */  0x10, 0x21, 0xCA, 0xF1, 0x9E, 0x40, 0x84, 0xA7,  // .!...@..
                /* 0338 */  0x21, 0x4F, 0x38, 0x4C, 0xB8, 0x93, 0x8D, 0xF2,  // !O8L....
                /* 0340 */  0xD2, 0x10, 0xC6, 0xD0, 0xB1, 0x02, 0x45, 0x8E,  // ......E.
                /* 0348 */  0x1F, 0xC2, 0x97, 0x0A, 0x1F, 0x84, 0x58, 0x94,  // ......X.
                /* 0350 */  0xF3, 0x80, 0x7E, 0x04, 0x3E, 0x7F, 0xD8, 0xC8,  // ..~.>...
                /* 0358 */  0x59, 0x04, 0x75, 0x12, 0xF0, 0xA1, 0xC3, 0x83,  // Y.u.....
                /* 0360 */  0x7A, 0x42, 0xC0, 0x84, 0x3E, 0xD9, 0x81, 0xEA,  // zB..>...
                /* 0368 */  0x28, 0x04, 0x9C, 0x0F, 0x20, 0xF0, 0x42, 0x1E,  // (... .B.
                /* 0370 */  0x5A, 0x41, 0x77, 0x24, 0x07, 0xC7, 0xA1, 0x2E,  // ZAw$....
                /* 0378 */  0x72, 0xDC, 0x07, 0x1A, 0xEC, 0xD9, 0x83, 0xFF,  // r.......
                /* 0380 */  0xFF, 0xCF, 0x1E, 0xC0, 0x43, 0xC6, 0xD1, 0x1B,  // ....C...
                /* 0388 */  0x15, 0xFC, 0x4C, 0x07, 0x50, 0xE8, 0xCA, 0xF1,  // ..L.P...
                /* 0390 */  0x4C, 0x07, 0x76, 0xE9, 0xCF, 0x01, 0x7D, 0x0A,  // L.v...}.
                /* 0398 */  0x1C, 0xFC, 0x4C, 0x87, 0x1E, 0x8E, 0x4F, 0x40,  // ..L...O@
                /* 03A0 */  0x18, 0x82, 0xFF, 0xFF, 0x43, 0x1D, 0xE0, 0xF3,  // ....C...
                /* 03A8 */  0x3C, 0x08, 0x07, 0x38, 0xA4, 0xC7, 0x0A, 0xB6,  // <..8....
                /* 03B0 */  0x23, 0x1D, 0x70, 0x18, 0x2B, 0x78, 0x06, 0xC6,  // #.p.+x..
                /* 03B8 */  0xC7, 0x0A, 0x2C, 0x26, 0xF6, 0xEC, 0x71, 0xAC,  // ..,&..q.
                /* 03C0 */  0x60, 0xFA, 0xFF, 0x1F, 0xE4, 0x80, 0xC7, 0x58,  // `......X
                /* 03C8 */  0xC1, 0x34, 0x30, 0x36, 0x56, 0xF0, 0x49, 0x38,  // .406V.I8
                /* 03D0 */  0x4A, 0xA2, 0xC7, 0xE8, 0x6B, 0xCB, 0x01, 0x79,  // J...k..y
                /* 03D8 */  0x1E, 0x11, 0x1E, 0x8C, 0x31, 0x71, 0x87, 0x0B,  // ....1q..
                /* 03E0 */  0xAA, 0x73, 0x35, 0x70, 0x38, 0x34, 0xE3, 0x86,  // .s5p84..
                /* 03E8 */  0x0B, 0x77, 0x6C, 0x70, 0x46, 0x0C, 0xBE, 0x83,  // .wlpF...
                /* 03F0 */  0x93, 0x8F, 0x7E, 0x60, 0xB9, 0x44, 0xB0, 0xB3,  // ..~`.D..
                /* 03F8 */  0x00, 0x9B, 0x0E, 0xFE, 0xF6, 0x87, 0xFD, 0xFF,  // ........
                /* 0400 */  0x1F, 0xAB, 0x81, 0x53, 0x5C, 0x2B, 0x20, 0x2C,  // ...S\+ ,
                /* 0408 */  0xC0, 0xE9, 0x40, 0xA2, 0x5E, 0x04, 0x14, 0xC6,  // ..@.^...
                /* 0410 */  0x87, 0x1A, 0x9F, 0x99, 0xE0, 0x4A, 0x82, 0x43,  // .....J.C
                /* 0418 */  0x0D, 0xD4, 0x67, 0x80, 0x07, 0xCA, 0x93, 0x3B,  // ..g....;
                /* 0420 */  0x91, 0xD7, 0x03, 0x4F, 0xEE, 0xE1, 0x09, 0xC6,  // ...O....
                /* 0428 */  0x31, 0xC1, 0xD3, 0x3A, 0x29, 0x6B, 0x3F, 0x02,  // 1..:)k?.
                /* 0430 */  0x91, 0x6B, 0x16, 0x3B, 0x2B, 0x70, 0x34, 0x7E,  // .k.;+p4~
                /* 0438 */  0x92, 0x02, 0xEB, 0x85, 0xC1, 0xC7, 0x04, 0x70,  // .......p
                /* 0440 */  0xCC, 0xFA, 0x35, 0x0A, 0x83, 0x15, 0x2A, 0x46,  // ..5...*F
                /* 0448 */  0xA3, 0xD7, 0x20, 0x02, 0x7A, 0x7C, 0x7D, 0x0D,  // .. .z|}.
                /* 0450 */  0x43, 0x77, 0x02, 0x43, 0x45, 0x0C, 0xF1, 0x66,  // Cw.CE..f
                /* 0458 */  0x60, 0x97, 0xE7, 0x21, 0xE4, 0xA1, 0x09, 0x5C,  // `..!...\
                /* 0460 */  0xD8, 0x0F, 0x4D, 0x60, 0x0F, 0x75, 0x26, 0xA3,  // ..M`.u&.
                /* 0468 */  0x91, 0x46, 0x83, 0x3A, 0x2A, 0xF8, 0xFF, 0x7F,  // .F.:*...
                /* 0470 */  0x28, 0xF0, 0x81, 0xE0, 0x91, 0xCB, 0xC7, 0x0E,  // (.......
                /* 0478 */  0x83, 0x9C, 0xE8, 0x69, 0x3D, 0x2E, 0x3C, 0x0D,  // ...i=.<.
                /* 0480 */  0x78, 0xDC, 0xEC, 0x9A, 0xE0, 0x0F, 0x82, 0x8F,  // x.......
                /* 0488 */  0x07, 0xF8, 0x03, 0x44, 0xC0, 0x13, 0x7D, 0xF2,  // ...D..}.
                /* 0490 */  0x80, 0x75, 0x02, 0xC1, 0x1F, 0x35, 0xE0, 0x8F,  // .u...5..
                /* 0498 */  0xC7, 0xC7, 0x00, 0x1F, 0x3B, 0xB8, 0xFC, 0x41,  // ....;..A
                /* 04A0 */  0xA0, 0x0E, 0x8A, 0x7C, 0xA4, 0xA7, 0xF5, 0x36,  // ...|...6
                /* 04A8 */  0xE0, 0x43, 0xC2, 0x61, 0xB1, 0x33, 0x87, 0x4F,  // .C.a.3.O
                /* 04B0 */  0x46, 0xE0, 0x18, 0x0F, 0xFC, 0x93, 0xEE, 0x43,  // F......C
                /* 04B8 */  0x86, 0xAF, 0x0C, 0x9E, 0xAF, 0x0F, 0x81, 0x60,  // .......`
                /* 04C0 */  0xB9, 0x75, 0xF8, 0xD0, 0x10, 0xEA, 0xA9, 0xC3,  // .u......
                /* 04C8 */  0x33, 0x78, 0xBF, 0xF0, 0x09, 0x04, 0x98, 0x04,  // 3x......
                /* 04D0 */  0x52, 0x72, 0xF4, 0x60, 0x42, 0xD7, 0x29, 0x1B,  // Rr.`B.).
                /* 04D8 */  0x27, 0x4D, 0x7A, 0x1E, 0xB0, 0xDC, 0x03, 0x82,  // 'Mz.....
                /* 04E0 */  0xAE, 0x11, 0x98, 0x1B, 0x44, 0x10, 0x0F, 0xFF,  // ....D...
                /* 04E8 */  0x8D, 0x82, 0x13, 0x14, 0x08, 0xA8, 0x83, 0x99,  // ........
                /* 04F0 */  0x21, 0x2C, 0x8D, 0x42, 0xC2, 0x20, 0x34, 0x22,  // !,.B. 4"
                /* 04F8 */  0x1F, 0x3D, 0x08, 0x1C, 0x05, 0xF1, 0xE8, 0x1D,  // .=......
                /* 0500 */  0xF3, 0xF8, 0x84, 0xFA, 0xFF, 0x1F, 0x04, 0xF8,  // ........
                /* 0508 */  0x31, 0xC0, 0x93, 0xC0, 0x85, 0x3A, 0xF8, 0xD0,  // 1....:..
                /* 0510 */  0xE3, 0x02, 0x1E, 0xEF, 0x19, 0xD2, 0xE7, 0x00,  // ........
                /* 0518 */  0x36, 0x76, 0xDC, 0xC9, 0x03, 0xEE, 0x38, 0xF0,  // 6v....8.
                /* 0520 */  0xE7, 0x4D, 0xFC, 0x59, 0x8D, 0x9F, 0x7A, 0xC0,  // .M.Y..z.
                /* 0528 */  0x29, 0xF0, 0x70, 0x00, 0x0A, 0x20, 0xDF, 0x07,  // ).p.. ..
                /* 0530 */  0xAC, 0xF4, 0x4C, 0x40, 0xE7, 0x10, 0x22, 0x4C,  // ..L@.."L
                /* 0538 */  0x34, 0xC3, 0x63, 0x02, 0x1F, 0x9F, 0xE8, 0x79,  // 4.c....y
                /* 0540 */  0xD4, 0xE3, 0xE2, 0xA3, 0xF4, 0x19, 0x86, 0x61,  // .......a
                /* 0548 */  0x3F, 0xA2, 0xF8, 0x98, 0x78, 0x80, 0x2F, 0x07,  // ?...x./.
                /* 0550 */  0xCF, 0x7C, 0x18, 0x58, 0x8F, 0x9B, 0xC3, 0x1A,  // .|.X....
                /* 0558 */  0x2D, 0xEC, 0xE1, 0x3E, 0x43, 0xF8, 0xFE, 0xE1,  // -..>C...
                /* 0560 */  0x99, 0xF9, 0xDA, 0xE8, 0x93, 0x07, 0x58, 0x8E,  // ......X.
                /* 0568 */  0x52, 0xF0, 0x87, 0x8A, 0x3B, 0x0B, 0xC0, 0x3D,  // R...;..=
                /* 0570 */  0x30, 0xB1, 0x39, 0x3C, 0x0D, 0xE0, 0x65, 0x1E,  // 0.9<..e.
                /* 0578 */  0x22, 0x50, 0x03, 0xB1, 0xC8, 0x05, 0xEA, 0xB8,  // "P......
                /* 0580 */  0xE2, 0xFF, 0xFF, 0x48, 0x7C, 0xC0, 0xE7, 0x07,  // ...H|...
                /* 0588 */  0x08, 0x7E, 0x7E, 0xB0, 0xAC, 0x03, 0x04, 0x4A,  // .~~....J
                /* 0590 */  0x08, 0x1C, 0x05, 0xF1, 0x01, 0xC2, 0x27, 0x5B,  // ......'[
                /* 0598 */  0x1B, 0x39, 0x40, 0xA0, 0x0F, 0x30, 0x0C, 0xE2,  // .9@..0..
                /* 05A0 */  0xA1, 0xD3, 0x04, 0x3E, 0xCA, 0xF8, 0x00, 0x01,  // ...>....
                /* 05A8 */  0x3C, 0xC6, 0x81, 0x3F, 0x40, 0xC0, 0x3D, 0xFF,  // <..?@.=.
                /* 05B0 */  0x82, 0xEB, 0xFC, 0x00, 0x3C, 0x4E, 0xA2, 0x3E,  // ....<N.>
                /* 05B8 */  0x3F, 0x80, 0xEB, 0x04, 0xE0, 0xF3, 0x03, 0x70,  // ?......p
                /* 05C0 */  0x1D, 0xE0, 0xA3, 0x00, 0xCC, 0xFF, 0xFF, 0x51,  // .......Q
                /* 05C8 */  0x00, 0x77, 0x26, 0x63, 0x73, 0x78, 0xA9, 0x39,  // .w&csx.9
                /* 05D0 */  0xF3, 0x57, 0x26, 0x9F, 0x78, 0x31, 0xA7, 0x5E,  // .W&.x1.^
                /* 05D8 */  0xAE, 0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35,  // .k.$...5
                /* 05E0 */  0x08, 0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0xAE,  // ..96.8..
                /* 05E8 */  0xD2, 0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7,  // ..AU....
                /* 05F0 */  0x02, 0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21,  // ......O!
                /* 05F8 */  0xE9, 0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2,  // ....X8..
                /* 0600 */  0x51, 0xFB, 0x20, 0x61, 0x1B, 0x67, 0x5B, 0xF4,  // Q. a.g[.
                /* 0608 */  0x61, 0x98, 0x1F, 0x05, 0xF8, 0x29, 0x02, 0xFE,  // a....)..
                /* 0610 */  0x29, 0x0C, 0x77, 0xF4, 0x00, 0xC7, 0x45, 0xEC,  // ).w...E.
                /* 0618 */  0xD0, 0xCE, 0xEE, 0x21, 0x21, 0xCA, 0xFB, 0xBB,  // ...!!...
                /* 0620 */  0x6F, 0x7E, 0x06, 0x0C, 0x1B, 0xCD, 0x63, 0xC4,  // o~....c.
                /* 0628 */  0xE1, 0x9C, 0xA3, 0x2F, 0x6A, 0x9E, 0x53, 0xAC,  // .../j.S.
                /* 0630 */  0xC7, 0x37, 0x7E, 0xA4, 0x80, 0x8B, 0xE2, 0x23,  // .7~....#
                /* 0638 */  0x05, 0xDC, 0x99, 0x9C, 0x07, 0x46, 0xDD, 0x58,  // .....F.X
                /* 0640 */  0x04, 0xEF, 0x6B, 0x21, 0xFE, 0x60, 0x01, 0x3C,  // ..k!.`.<
                /* 0648 */  0x8E, 0x4B, 0x3E, 0x58, 0xC0, 0xFB, 0xFF, 0x1F,  // .K>X....
                /* 0650 */  0x2C, 0xE0, 0x40, 0xFA, 0x60, 0x01, 0x5C, 0xCF,  // ,.@.`.\.
                /* 0658 */  0x07, 0x3E, 0x1D, 0x80, 0xF5, 0x42, 0xC6, 0xEF,  // .>...B..
                /* 0660 */  0x07, 0x30, 0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98,  // .0N.0...
                /* 0668 */  0x1B, 0x86, 0x63, 0xAD, 0x54, 0x27, 0x0C, 0x5C,  // ..c.T'.\
                /* 0670 */  0xAC, 0x07, 0x85, 0x06, 0xC2, 0x86, 0xF7, 0xFC,  // ........
                /* 0678 */  0xF3, 0x64, 0xC8, 0x0F, 0x33, 0x2C, 0x0A, 0x9C,  // .d..3,..
                /* 0680 */  0x8E, 0x16, 0x3E, 0x59, 0x38, 0x04, 0x85, 0x0E,  // ..>Y8...
                /* 0688 */  0x62, 0x3E, 0x61, 0x70, 0x31, 0x27, 0x0C, 0x0A,  // b>ap1'..
                /* 0690 */  0x62, 0x40, 0x27, 0x3D, 0x87, 0xA1, 0xCF, 0x68,  // b@'=...h
                /* 0698 */  0x3E, 0x36, 0xB0, 0xDB, 0xBD, 0xEF, 0x17, 0x9E,  // >6......
                /* 06A0 */  0x8B, 0xE7, 0xCC, 0xF1, 0x7C, 0x5E, 0x66, 0xA8,  // ....|^f.
                /* 06A8 */  0x6F, 0x26, 0xE0, 0xB9, 0x52, 0xB0, 0xE3, 0x3C,  // o&..R..<
                /* 06B0 */  0xE6, 0x36, 0xC9, 0x0E, 0x9C, 0xEC, 0x58, 0x60,  // .6....X`
                /* 06B8 */  0x94, 0xE3, 0x7D, 0x2D, 0xB4, 0x9A, 0xBB, 0x02,  // ..}-....
                /* 06C0 */  0x6A, 0x46, 0x18, 0x02, 0x0F, 0xD8, 0x53, 0xE1,  // jF....S.
                /* 06C8 */  0xFF, 0xFF, 0x93, 0x18, 0x18, 0xF4, 0xDD, 0x28,  // .......(
                /* 06D0 */  0x40, 0x8E, 0xCE, 0x85, 0x8E, 0x1E, 0x75, 0x00,  // @.....u.
                /* 06D8 */  0xF0, 0xD1, 0x8E, 0x8F, 0xDE, 0x47, 0x6C, 0x1F,  // .....Gl.
                /* 06E0 */  0x57, 0xE0, 0x1E, 0xEE, 0x7C, 0x86, 0x02, 0xBE,  // W...|...
                /* 06E8 */  0x03, 0xF3, 0x0C, 0x9F, 0x50, 0xC0, 0x75, 0x7F,  // ....P.u.
                /* 06F0 */  0xE0, 0x17, 0x55, 0xCC, 0x44, 0x9E, 0x85, 0x61,  // ..U.D..a
                /* 06F8 */  0x9C, 0x52, 0x80, 0xC7, 0xE8, 0x7D, 0x4A, 0x01,  // .R...}J.
                /* 0700 */  0xD7, 0x01, 0xC0, 0xA7, 0x14, 0x38, 0xFF, 0xFF,  // .....8..
                /* 0708 */  0x53, 0x0A, 0xF0, 0x9A, 0xE3, 0x43, 0x01, 0x58,  // S....C.X
                /* 0710 */  0xCE, 0x28, 0x51, 0x7C, 0xFF, 0xF5, 0x44, 0x6C,  // .(Q|..Dl
                /* 0718 */  0x7C, 0xF8, 0xF4, 0x82, 0xE2, 0xB1, 0x3C, 0x9B,  // |.....<.
                /* 0720 */  0xB3, 0x33, 0xA5, 0xCE, 0x26, 0xE8, 0x68, 0xAF,  // .3..&.h.
                /* 0728 */  0x07, 0x0D, 0xFA, 0x41, 0xC5, 0xB3, 0x0F, 0x7F,  // ...A....
                /* 0730 */  0x7C, 0x11, 0x9E, 0x4F, 0x3D, 0x2E, 0x16, 0xE7,  // |..O=...
                /* 0738 */  0x6C, 0x82, 0x0A, 0x42, 0xA1, 0x63, 0xA7, 0x8F,  // l..B.c..
                /* 0740 */  0x13, 0x5C, 0xD2, 0x71, 0x82, 0x82, 0x18, 0xD0,  // .\.q....
                /* 0748 */  0x79, 0x8F, 0x78, 0x1E, 0x06, 0x3D, 0x4E, 0xF0,  // y.x..=N.
                /* 0750 */  0x53, 0x9F, 0x6F, 0x09, 0xC7, 0xF1, 0x04, 0x92,  // S.o.....
                /* 0758 */  0x60, 0xBE, 0x93, 0x00, 0xBD, 0x9C, 0xC0, 0x3B,  // `......;
                /* 0760 */  0xAF, 0x83, 0x67, 0x14, 0xDE, 0xC9, 0x59, 0x30,  // ..g...Y0
                /* 0768 */  0x84, 0x37, 0x6B, 0x76, 0x9C, 0xC0, 0x5F, 0x0E,  // .7kv.._.
                /* 0770 */  0x9E, 0x15, 0x1E, 0xD4, 0xF9, 0xF5, 0x04, 0xE6,  // ........
                /* 0778 */  0x3D, 0x0F, 0x5C, 0xC7, 0x13, 0xB0, 0xFC, 0xFF,  // =.\.....
                /* 0780 */  0x8F, 0x27, 0xF0, 0x65, 0x1E, 0x00, 0x50, 0xC7,  // .'.e..P.
                /* 0788 */  0x46, 0x1F, 0x1C, 0xF9, 0x01, 0xC0, 0xA1, 0x8F,  // F.......
                /* 0790 */  0x27, 0xE8, 0x99, 0xF8, 0x58, 0xF4, 0x54, 0xE2,  // '...X.T.
                /* 0798 */  0x0B, 0x00, 0x3F, 0xBB, 0xE9, 0x7C, 0x02, 0x8A,  // ..?..|..
                /* 07A0 */  0x73, 0x26, 0x78, 0xC6, 0xC1, 0xAE, 0x00, 0xF8,  // s&x.....
                /* 07A8 */  0x13, 0x0A, 0xEC, 0x23, 0x19, 0xF8, 0x26, 0xE2,  // ...#..&.
                /* 07B0 */  0x53, 0xC5, 0x81, 0x60, 0x4F, 0xB2, 0xC0, 0x1B,  // S..`O...
                /* 07B8 */  0x96, 0x9F, 0x4E, 0x80, 0xDB, 0xFF, 0xFF, 0x24,  // ..N....$
                /* 07C0 */  0x0B, 0xCE, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 07C8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 07D0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 07D8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 07E0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0xB8, 0x03, 0xB7,  // ....?...
                /* 07E8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x00,  // .(....b.
                /* 07F0 */  0x67, 0xCE, 0xEE, 0x1E, 0x3D, 0x3F, 0xB6, 0x73,  // g...=?.s
                /* 07F8 */  0x10, 0x8F, 0xDE, 0xE1, 0x4F, 0x27, 0xE8, 0xFF,  // ....O'..
                /* 0800 */  0xFF, 0x59, 0x0C, 0x1F, 0xF6, 0x2C, 0x06, 0xB4,  // .Y...,..
                /* 0808 */  0x05, 0x9F, 0xC5, 0x40, 0x79, 0x8B, 0x80, 0x7B,  // ...@y..{
                /* 0810 */  0x06, 0x05, 0x5E, 0x6B, 0xF3, 0x09, 0x05, 0x5C,  // ..^k...\
                /* 0818 */  0x77, 0x06, 0x9F, 0x50, 0x80, 0xEB, 0x11, 0x00,  // w..P....
                /* 0820 */  0x77, 0x06, 0x05, 0xC7, 0xFF, 0xFF, 0x04, 0xC0,  // w.......
                /* 0828 */  0x7C, 0xDD, 0x00, 0x28, 0xC8, 0x23, 0x00, 0xFE,  // |..(.#..
                /* 0830 */  0x0A, 0xEF, 0x83, 0x09, 0x4E, 0xA1, 0x4D, 0x9F,  // ....N.M.
                /* 0838 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
                /* 0840 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0x6C, 0x50,  // .Z}*5flP
                /* 0848 */  0x8E, 0xB0, 0x64, 0x8D, 0xD9, 0xA1, 0x9E, 0x0F,  // ..d.....
                /* 0850 */  0x02, 0x71, 0xDC, 0x85, 0x6B, 0xDC, 0xC4, 0x03,  // .q..k...
                /* 0858 */  0x08, 0x13, 0xA2, 0x02, 0x84, 0x89, 0x59, 0x9E,  // ......Y.
                /* 0860 */  0x40, 0x2C, 0x75, 0x79, 0x02, 0x71, 0x14, 0x1F,  // @,uy.q..
                /* 0868 */  0x20, 0x2C, 0x90, 0x12, 0x10, 0x16, 0xE3, 0x8D,  //  ,......
                /* 0870 */  0x22, 0x10, 0x8B, 0x97, 0x02, 0xC2, 0xE4, 0x5B,  // "......[
                /* 0878 */  0x01, 0x61, 0x92, 0x97, 0x28, 0x10, 0x07, 0x06,  // .a..(...
                /* 0880 */  0xA1, 0xD2, 0xFF, 0x22, 0x3A, 0xD0, 0x3B, 0x08,  // ...":.;.
                /* 0888 */  0x88, 0x80, 0x1C, 0xED, 0x19, 0x21, 0x20, 0x07,  // .....! .
                /* 0890 */  0x05, 0x11, 0x90, 0xE5, 0xF9, 0x01, 0x62, 0x62,  // ......bb
                /* 0898 */  0x41, 0x04, 0xE4, 0xB4, 0x86, 0x80, 0x58, 0x74,  // A.....Xt
                /* 08A0 */  0x10, 0x0D, 0x8B, 0x38, 0x02, 0x62, 0x72, 0x40,  // ...8.br@
                /* 08A8 */  0x34, 0x24, 0x62, 0x09, 0x88, 0xE5, 0x02, 0x11,  // 4$b.....
                /* 08B0 */  0x90, 0x23, 0x6A, 0x02, 0x62, 0x81, 0x41, 0x04,  // .#j.b.A.
                /* 08B8 */  0x64, 0x8D, 0xA6, 0x80, 0x98, 0x60, 0x10, 0x01,  // d....`..
                /* 08C0 */  0x59, 0xB6, 0x2A, 0x20, 0x16, 0x02, 0x44, 0x40,  // Y.* ..D@
                /* 08C8 */  0xFE, 0xFF, 0x03                                 // ...
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD PT", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80360, One)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            SMIB,   8
        }

        OperationRegion (SMIP, SystemIO, SMIB, 0x02)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            SMPC,   8, 
            SMPD,   8
        }

        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0x78202018, 0x000100C1)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   522240, 
        Offset (0x1005E), 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   16, 
        M327,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32
    }

    Method (M000, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000C00)
        OperationRegion (VARM, SystemIO, 0x80, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = Local0
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 3, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 4, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg3
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                    One)
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == One))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                    0x02 | Arg1))
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == One))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M328, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M328 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 2, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Return (Local4)
                    }

                    Local1 += 0x03
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (Arg0)
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (Local0)
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD CPU", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)
    External (_PR_.C00C, DeviceObj)
    External (_PR_.C00D, DeviceObj)
    External (_PR_.C00E, DeviceObj)
    External (_PR_.C00F, DeviceObj)
    External (_PR_.C010, DeviceObj)
    External (_PR_.C011, DeviceObj)
    External (_PR_.C012, DeviceObj)
    External (_PR_.C013, DeviceObj)
    External (_PR_.C014, DeviceObj)
    External (_PR_.C015, DeviceObj)
    External (_PR_.C016, DeviceObj)
    External (_PR_.C017, DeviceObj)
    External (_PR_.C018, DeviceObj)
    External (_PR_.C019, DeviceObj)
    External (_PR_.C01A, DeviceObj)
    External (_PR_.C01B, DeviceObj)
    External (_PR_.C01C, DeviceObj)
    External (_PR_.C01D, DeviceObj)
    External (_PR_.C01E, DeviceObj)
    External (_PR_.C01F, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C010.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C011.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C012.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C013.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C014.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C015.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C016.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C017.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C018)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C018.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C019)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C019.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C01F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000D48, 
                0x00000EF1, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000ACD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007A0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C01F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000814, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD ALIB", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 00C8 */  0x1F, 0x00, 0x03, 0x08, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0150 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0178 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 01A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 01C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 01F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0218 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0240 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0268 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10528, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B10564, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B10598, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B1059C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B105A0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B105A4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B105A8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B105AC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x31, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPUSSDT", 0x03242016)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
        Processor (C008, 0x08, 0x00000810, 0x06){}
        Processor (C009, 0x09, 0x00000810, 0x06){}
        Processor (C00A, 0x0A, 0x00000810, 0x06){}
        Processor (C00B, 0x0B, 0x00000810, 0x06){}
        Processor (C00C, 0x0C, 0x00000810, 0x06){}
        Processor (C00D, 0x0D, 0x00000810, 0x06){}
        Processor (C00E, 0x0E, 0x00000810, 0x06){}
        Processor (C00F, 0x0F, 0x00000810, 0x06){}
        Processor (C010, 0x10, 0x00000810, 0x06){}
        Processor (C011, 0x11, 0x00000810, 0x06){}
        Processor (C012, 0x12, 0x00000810, 0x06){}
        Processor (C013, 0x13, 0x00000810, 0x06){}
        Processor (C014, 0x14, 0x00000810, 0x06){}
        Processor (C015, 0x15, 0x00000810, 0x06){}
        Processor (C016, 0x16, 0x00000810, 0x06){}
        Processor (C017, 0x17, 0x00000810, 0x06){}
        Processor (C018, 0x18, 0x00000810, 0x06){}
        Processor (C019, 0x19, 0x00000810, 0x06){}
        Processor (C01A, 0x1A, 0x00000810, 0x06){}
        Processor (C01B, 0x1B, 0x00000810, 0x06){}
        Processor (C01C, 0x1C, 0x00000810, 0x06){}
        Processor (C01D, 0x1D, 0x00000810, 0x06){}
        Processor (C01E, 0x1E, 0x00000810, 0x06){}
        Processor (C01F, 0x1F, 0x00000810, 0x06){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMDFCH", "FCHZP", 0x00001000)
{


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 90
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 90 41 4D 44 00 00 00  // UEFIB.....AMD...
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 20 20 20 20  // A M I ......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 50 15 78 00 00  // ...26......P.x..
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000E884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4D
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 59524 (0xE884)

    0000: 56 46 43 54 84 E8 00 00 01 4D 41 4D 44 00 00 00  // VFCT.....MAMD...
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 E8 00 00 55 AA 74 E9 B5 02 00 00  // ........U.t.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 58 02 00 00 00 00 49 42 4D 50 8C 92 00 00 00 00  // X.....IBMP......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 AD 02 00 00 00 00 00 00  // 20..............
    00B0: 32 02 00 00 00 00 00 00 30 31 2F 31 39 2F 31 38  // 2.......01/19/18
    00C0: 20 30 31 3A 30 39 00 00 39 00 00 00 E9 C0 03 00  //  01:09..9.......
    00D0: E9 CF 03 00 00 00 F4 00 00 13 00 00 00 D0 01 00  // ................
    00E0: CC C6 21 E1 02 80 7E 00 A2 68 47 02 12 00 00 00  // ..!...~..hG.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 0C 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D E6 07  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 31 31 33 2D  // ............113-
    0160: 31 45 33 36 36 55 55 2D 4F 35 58 00 50 4F 4C 41  // 1E366UU-O5X.POLA
    0170: 52 49 53 32 30 00 50 43 49 5F 45 58 50 52 45 53  // RIS20.PCI_EXPRES
    0180: 53 00 47 44 44 52 35 00 0D 0A 45 33 36 36 20 50  // S.GDDR5...E366 P
    0190: 6F 6C 61 72 69 73 32 30 20 58 54 58 20 41 31 20  // olaris20 XTX A1 
    01A0: 47 44 44 52 35 20 31 32 38 4D 78 33 32 20 34 47  // GDDR5 128Mx32 4G
    01B0: 42 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // B               
    01C0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01D0: 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28  //       ..... ...(
    01E0: 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41 64  // C) 1988-2010, Ad
    01F0: 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65 76  // vanced Micro Dev
    0200: 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D 42  // ices, Inc..ATOMB
    0210: 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31 35  // IOSBK-AMD VER015
    0220: 2E 30 35 30 2E 30 30 32 2E 30 30 31 2E 30 30 30  // .050.002.001.000
    0230: 30 30 30 00 33 36 36 59 35 53 46 45 2E 4F 35 58  // 000.366Y5SFE.O5X
    0240: 00 31 35 30 35 34 36 37 20 00 34 30 36 36 30 34  // .1505467 .406604
    0250: 20 20 00 20 20 20 20 20 20 20 20 00 53 41 50 50  //   .        .SAPP
    0260: 48 49 52 45 5F 50 4F 4C 41 52 49 53 32 30 5F 45  // HIRE_POLARIS20_E
    0270: 33 36 36 5F 58 54 58 4F 43 5F 41 31 5F 53 46 45  // 366_XTXOC_A1_SFE
    0280: 5F 34 47 5F 45 31 34 31 31 4D 32 30 30 30 5C 63  // _4G_E1411M2000\c
    0290: 6F 6E 66 69 67 2E 68 00 00 00 24 00 01 01 41 54  // onfig.h...$...AT
    02A0: 4F 4D 00 C0 D9 03 CC 01 7D 02 20 01 FE 03 00 00  // OM......}. .....
    02B0: 00 00 A2 1D 66 E3 58 02 64 97 0A 98 A0 00 00 00  // ....f.X.d.......
    02C0: 50 43 49 52 02 10 DF 67 00 00 18 00 00 00 00 03  // PCIR...g........
    02D0: 74 00 32 0F 00 00 00 00 41 4D 44 20 41 54 4F 4D  // t.2.....AMD ATOM
    02E0: 42 49 4F 53 00 6B 08 D7 DD 00 00 00 00 00 00 00  // BIOS.k..........
    02F0: 00 B9 DA 26 84 AA 98 C3 5F F0 53 42 3B 2A D9 6D  // ...&...._.SB;*.m
    0300: 27 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // '...............
    0310: 00 00 00 00 00 56 1E 0E 1F E8 3E 2A 81 4D 50 00  // .....V....>*.MP.
    0320: 20 1F 5E 1E 06 66 50 66 51 66 52 66 53 66 55 66  //  .^..fPfQfRfSfUf
    0330: 56 66 57 0E 1F A3 46 02 8C 0E 3A 02 B2 20 E8 F6  // VfW...F...:.. ..
    0340: 2D 0B C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B  // -..u....f_f^f]f[
    0350: 66 5A 66 59 66 58 07 1F CB E8 0C 2F E8 D7 2C 32  // fZfYfX...../..,2
    0360: D2 89 16 48 02 A1 46 02 66 C1 C0 10 A1 3A 02 E8  // ...H..F.f....:..
    0370: 0B 04 E8 1E 04 E8 E6 03 E8 54 05 E8 4B 03 E8 D9  // .........T..K...
    0380: 29 F7 45 50 00 20 75 13 E8 AF 29 0B C0 74 0C E8  // ).EP. u...)..t..
    0390: 49 00 E8 F7 57 E8 DB 03 E8 3E 58 E8 B9 00 B4 80  // I...W....>X.....
    03A0: E8 C8 2C 8A C7 66 C1 E0 10 8A E3 B0 14 66 50 BB  // ..,..f.......fP.
    03B0: 08 00 E8 13 28 A8 01 66 58 74 02 B0 20 66 A3 8C  // ....(..fXt.. f..
    03C0: 92 E8 68 03 E8 D6 03 E8 C3 2E 66 5F 66 5E 66 5D  // ..h.......f_f^f]
    03D0: 66 5B 66 5A 66 59 66 58 07 1F CB 2E 8B 1E 3A 02  // f[fZfYfX......:.
    03E0: 83 3E EB 03 00 75 04 89 1E E9 03 1E 2E 8E 1E E1  // .>...u..........
    03F0: 03 9C FA 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00  // ...f....e.....@.
    0400: FE 03 89 1E 42 00 C7 06 B4 01 FE 03 89 1E B6 01  // ....B...........
    0410: C7 06 7C 00 AA 60 89 1E 7E 00 C7 06 0C 01 BD 64  // ..|..`..~......d
    0420: 89 1E 0E 01 C7 06 A8 04 EA 5A 89 1E AA 04 2E 8E  // .........Z......
    0430: 1E E9 03 8B C3 A3 EC 5A A3 FC 5A A3 0E 5B 9D 1F  // .......Z..Z..[..
    0440: C3 50 4D 49 44 FE 03 12 48 00 00 00 A0 00 B0 00  // .PMID...H.......
    0450: B8 00 C0 00 00 00 00 BB 00 00 E8 6B 27 66 C1 E8  // ...........k'f..
    0460: 10 A3 5E 02 C3 00 E8 FF 2D E8 48 02 75 1B 2E 3A  // ..^.....-.H.u..:
    0470: 26 54 02 75 05 E8 47 00 EB 11 80 FC 4F 75 05 E8  // &T.u..G.....Ou..
    0480: EE 42 EB 07 E8 3B 4A EB 02 B4 01 E8 FF 2D CF E8  // .B...;J......-..
    0490: D6 2D E8 1F 02 75 05 E8 25 00 EB 02 B4 01 E8 EC  // .-...u..%.......
    04A0: 2D CB E8 C3 2D E8 0C 02 75 0F 80 FC 4F 75 05 E8  // -...-...u...Ou..
    04B0: BE 42 EB 07 E8 0B 4A EB 02 B4 01 E8 CF 2D CB 1E  // .B....J......-..
    04C0: 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E  // .fPfQfRfSfUfVfW.
    04D0: 1F 3C 04 75 23 BB 0B 00 E8 ED 26 8D 36 1D 01 8A  // .<.u#.....&.6...
    04E0: 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1  // <..0.....^..F.f.
    04F0: E8 10 89 46 00 E9 9A 01 3C 05 75 18 E8 77 02 E8  // ...F....<.u..w..
    0500: 34 2B 8B EC 89 56 10 89 46 00 66 C1 E8 10 89 46  // 4+...V..F.f....F
    0510: 04 E9 7E 01 3C 06 75 39 E8 69 02 66 D1 E0 8B EC  // ..~.<.u9.i.f....
    0520: 89 46 14 BB 02 00 E8 9F 26 88 46 18 E8 59 02 66  // .F......&.F..Y.f
    0530: 0B C0 0F 84 54 01 66 89 46 0C BB 06 00 E8 88 26  // ....T.f.F......&
    0540: 33 C0 66 89 46 00 2E 8B 16 5E 02 89 56 10 E9 41  // 3.f.F....^..V..A
    0550: 01 3C 0B 75 24 0A DB 75 11 B9 80 00 BB 02 00 8B  // .<.u$..u........
    0560: EC 89 5E 0C 89 4E 14 E9 28 01 8A C7 E8 3B 01 E8  // ..^..N..(....;..
    0570: D8 0E 0F 84 14 01 E9 19 01 3C 17 75 21 E8 6A 06  // .........<.u!.j.
    0580: 74 06 E8 5E 0D E8 A7 18 E8 8B 07 E8 AF 0E 33 C9  // t..^..........3.
    0590: 66 C1 E8 10 0A E8 8B EC 89 4E 14 E9 F4 00 3C 18  // f........N....<.
    05A0: 75 6A 0A FF 75 18 E8 9B 05 8B EC 89 46 0C 66 C1  // uj..u.......F.f.
    05B0: E8 10 89 46 14 E8 3C 08 89 4E 10 E9 D4 00 80 FF  // ...F..<..N......
    05C0: 0F 74 0E 23 C9 0F 84 C1 00 E8 C5 05 E8 1B 06 75  // .t.#...........u
    05D0: 2D BB 00 1C E8 51 2C 66 0B C0 0F 84 AC 00 E8 35  // -....Q,f.......5
    05E0: 07 0B C9 0F 84 A3 00 BE 00 1C E8 C6 01 0F 84 99  // ................
    05F0: 00 BE 00 1C B0 40 E8 23 02 E8 48 05 EB 06 E8 3E  // .....@.#..H....>
    0600: 06 E8 2D 06 8B EC 89 46 0C E9 86 00 3C 19 75 05  // ..-....F....<.u.
    0610: E8 00 06 EB 7D 3C 82 75 2C 80 FB 01 75 0D 8B EC  // ....}<.u,...u...
    0620: BE 7C 06 89 76 00 8C 4E 10 EB 67 80 FB 05 75 15  // .|..v..N..g...u.
    0630: 0A FF 75 0A E8 86 03 8B EC 89 46 14 EB 54 E8 45  // ..u.......F..T.E
    0640: 03 74 3F EB 4D 3C 8E 75 12 80 FF 01 74 08 80 FF  // .t?.M<.u....t...
    0650: 02 75 2F 80 C1 02 E8 CA 03 EB 37 3C 8F 75 23 80  // .u/.......7<.u#.
    0660: FF 05 75 05 E8 1C 06 EB 29 80 FF 07 75 0A E8 20  // ..u.....)...u.. 
    0670: 06 8B EC 88 5E 0C EB 1A 80 FF 85 75 05 E8 03 06  // ....^......u....
    0680: EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01  // .....F.......F..
    0690: EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66  // ..2....f.f_f^f]f
    06A0: 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00  // [fZfYfX...Q.....
    06B0: D3 E0 59 C3 50 32 C0 53 BB 15 00 E8 0A 25 5B 3C  // ..Y.P2.S.....%[<
    06C0: FF 74 04 24 03 0A C0 58 C3 E8 E7 2B E8 A8 06 F7  // .t.$...X...+....
    06D0: C1 02 00 74 0E 06 0E 07 8D 3E 7C 06 B8 02 00 E8  // ...t.....>|.....
    06E0: C1 05 07 C3 00 00 00 00 07 00 08 08 08 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 0C 01 C3 00 50 51 B0 B6 E6 43 B0 33  // ........PQ...C.3
    0710: E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4  // .B...B.a.....a..
    0720: B9 C8 00 E8 98 27 E6 61 59 58 C3 00 1E 56 0E 1F  // .....'.aYX...V..
    0730: 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00  // .>...v..........
    0740: C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0  // ......!..3.2....
    0750: E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00 E8 76  // .......&!.^....v
    0760: 26 75 03 E8 20 28 E8 B9 26 E8 83 26 E8 DD 25 E8  // &u.. (..&..&..%.
    0770: 71 0B C3 B0 01 C3 BB 01 00 E8 38 24 C3 BB 01 00  // q.........8$....
    0780: E8 3B 24 C3 E8 C5 27 C3 53 BB 04 00 E8 39 24 33  // .;$...'.S....9$3
    0790: C0 5B C3 E8 8E 27 BB 0A 00 E8 22 24 C3 BB 0A 00  // .[...'...."$....
    07A0: E8 11 24 66 8B C8 E8 7B 27 BB 0A 00 66 2B C1 E8  // ..$f...{'...f+..
    07B0: 0C 24 C3 E8 29 00 0B C9 74 22 E8 66 06 E8 FB 15  // .$..)...t".f....
    07C0: 66 51 66 8B C8 BB 07 00 E8 E9 23 66 25 00 FE 00  // fQf.......#f%...
    07D0: 00 66 0B C1 E8 E7 23 66 59 0C 01 C3 32 C0 C3 E8  // .f....#fY...2...
    07E0: 9D 03 0B C9 75 0A 33 D2 E8 4F 25 8B C8 E8 A1 03  // ....u.3..O%.....
    07F0: 0B D1 E8 FF 05 23 CA 66 C1 E6 10 33 F6 E8 8A 0A  // .....#.f...3....
    0800: 74 15 E8 97 0B 85 C1 74 F4 51 E8 A2 11 59 75 ED  // t......t.Q...Yu.
    0810: E8 89 0B 33 C8 EB E6 66 C1 EE 10 C3 A8 10 75 5A  // ...3...f......uZ
    0820: E8 AA 15 66 C1 E6 10 33 F6 E8 5E 0A 74 24 E8 2E  // ...f...3..^.t$..
    0830: 0A 74 0B E8 AB 0B 24 03 3C 03 75 ED EB 0A E8 A0  // .t....$.<.u.....
    0840: 0B A8 01 74 E4 E8 15 07 E8 A3 16 B5 00 E8 98 0B  // ...t............
    0850: EB D7 E8 7C 01 32 C9 33 F6 E8 72 0A E8 19 16 E8  // ...|.2.3..r.....
    0860: F9 25 FE C1 38 C1 72 F1 66 C1 EE 10 E8 57 15 A8  // .%..8.r.f....W..
    0870: 20 75 57 A8 40 75 03 E8 36 1C E8 3E 15 0A C0 75  //  uW.@u..6..>...u
    0880: 19 32 C9 33 F6 E8 46 0A 0B F6 74 05 B5 01 E8 D6  // .2.3..F...t.....
    0890: 1C E8 C7 25 FE C1 38 C1 72 EB 33 F6 E8 E0 09 74  // ...%..8.r.3....t
    08A0: 26 E8 1D 0B E8 8F 22 75 14 E8 E5 03 0A DB 74 0D  // &....."u......t.
    08B0: E8 AA 06 E8 38 16 B5 00 E8 2D 0B EB DF E8 10 16  // ....8....-......
    08C0: B5 01 E8 23 0B EB D5 E8 14 01 C3 E8 6C 24 C3 E8  // ...#........l$..
    08D0: 5D 15 33 C9 33 D2 E8 B8 02 66 33 D2 66 33 C0 E8  // ].3.3....f3.f3..
    08E0: 3E 0B E8 58 00 B1 FF E8 9C 00 33 F6 E8 9B 09 74  // >..X......3....t
    08F0: 10 E8 CD 0A E8 3B 22 74 03 E8 6F 16 E8 9C 16 EB  // .....;"t..o.....
    0900: EB B3 01 E8 6A 02 32 C9 E8 08 03 E8 D2 24 E8 29  // ....j.2......$.)
    0910: 24 0B C0 C3 E8 CC 09 E8 15 15 66 33 C0 66 BA 00  // $.........f3.f..
    0920: F0 00 F0 E8 2D 02 51 B1 01 E8 D8 02 59 33 F6 E8  // ....-.Q.....Y3..
    0930: 58 09 74 05 E8 34 16 EB F6 E8 84 1B C3 B8 02 00  // X.t..4..........
    0940: E8 29 09 74 40 B1 07 E8 27 20 E8 31 0B A8 04 75  // .).t@...' .1...u
    0950: 12 E8 A0 26 83 3D 00 75 0A E8 DE 23 83 E0 FD E8  // ...&.=.u...#....
    0960: E1 23 C3 66 BA FF FF FB FF 66 B8 00 00 04 00 E8  // .#.f.....f......
    0970: AE 0A E8 D1 0C E8 0F 26 8A C8 BB 04 00 E8 34 22  // .......&......4"
    0980: 8A E1 E8 39 22 C3 E8 4B 22 74 31 38 E1 76 04 8A  // ...9"..K"t18.v..
    0990: CC EB 06 38 C1 73 02 8A C8 BB 02 00 E8 15 22 8A  // ...8.s........".
    09A0: E1 E8 1A 22 BB 02 00 E8 0A 22 66 C1 E8 18 A8 20  // ..."....."f.... 
    09B0: 75 08 B1 04 E8 BA 1F 0C 01 C3 0C 01 C3 51 E8 13  // u............Q..
    09C0: 22 74 0C 8A CC BB 02 00 E8 E9 21 8A C4 8A E1 59  // "t........!....Y
    09D0: C3 33 F6 E8 A9 08 74 05 E8 7F 14 EB F6 C3 33 F6  // .3....t.......3.
    09E0: E8 9C 08 74 05 E8 81 14 EB F6 C3 E8 49 25 75 1B  // ...t........I%u.
    09F0: 80 F9 01 75 17 33 F6 E8 85 08 74 0C 51 E8 D0 14  // ...u.3....t.Q...
    0A00: B5 01 E8 E3 09 59 EB EF E8 D3 FF C3 E8 C2 FF 33  // .....Y.........3
    0A10: F6 E8 6B 08 74 0C 51 E8 51 15 B5 00 E8 C9 09 59  // ..k.t.Q.Q......Y
    0A20: EB EF C3 B8 02 00 E8 43 08 74 03 E8 43 1F C3 E8  // .......C.t..C...
    0A30: 0D 1B 8B C8 66 C1 E8 10 8B D0 C3 8A C3 24 80 E8  // ....f........$..
    0A40: 8B 13 32 C9 B5 10 E8 AF 1A E8 0F 24 FE C1 38 C1  // ..2........$..8.
    0A50: 72 F2 C3 E8 04 13 3B C1 7C 3A 8B C1 E8 44 13 E8  // r.....;.|:...D..
    0A60: D5 1C 8B C8 51 E8 74 13 E8 38 13 59 E8 C8 1C 3B  // ....Q.t..8.Y...;
    0A70: C8 72 02 8B C1 8D 5C 04 E8 25 27 32 C9 B5 0F E8  // .r....\..%'2....
    0A80: 76 1A E8 D6 23 FE C1 38 C1 72 F2 8D 5C 04 E8 97  // v...#..8.r..\...
    0A90: 27 0B C0 C3 33 C0 C3 52 E8 9C 00 8A C2 8B D1 66  // '...3..R.......f
    0AA0: C1 E2 10 8A D0 32 C0 B9 00 02 E8 69 1C 66 C1 EA  // .....2.....i.f..
    0AB0: 10 8B CA 5A E8 80 00 E8 6E 27 66 C1 E8 02 0A F6  // ...Z....n'f.....
    0AC0: 75 04 66 C1 E8 02 67 26 88 07 66 C1 E8 0A 67 26  // u.f...g&..f...g&
    0AD0: 88 47 01 66 C1 E8 0A 67 26 88 47 02 66 83 C7 04  // .G.f...g&.G.f...
    0AE0: 83 C3 04 E2 D2 C3 51 E8 4D 00 53 67 26 8A 47 02  // ......Q.M.Sg&.G.
    0AF0: 66 C1 E0 0A 67 26 8A 47 01 66 C1 E0 0A 67 26 8A  // f...g&.G.f...g&.
    0B00: 07 66 C1 E0 02 0A F6 75 04 66 C1 E0 02 E8 78 26  // .f.....u.f....x&
    0B10: 66 83 C7 04 83 C3 04 E2 D2 5B 59 8A C2 8B D1 66  // f........[Y....f
    0B20: C1 E2 10 8A D0 B9 00 03 53 E8 EA 1B 5B E8 2B 23  // ........S...[.+#
    0B30: FE C1 38 C1 72 F2 C3 BB 00 18 33 C0 8A C2 C1 E0  // ..8.r.....3.....
    0B40: 02 03 D8 C3 53 BB 03 00 E8 69 20 66 25 FF 0F FF  // ....S....i f%...
    0B50: 0F 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 53  // .[.SfPfQf......S
    0B60: 20 66 23 C2 66 0B C1 E8 54 20 66 59 66 58 5B C3  //  f#.f...T fYfX[.
    0B70: B8 2C 06 F6 C3 01 75 03 B8 0C 06 E8 37 00 C3 BB  // .,....u.....7...
    0B80: 05 00 E8 2F 20 25 FF 0F 8B C8 66 C1 E0 10 8B D0  // .../ %....f.....
    0B90: C3 E8 A6 21 23 C8 81 E2 15 01 23 D1 66 C1 E2 10  // ...!#.....#.f...
    0BA0: 8B D1 BB 05 00 E8 0C 20 66 25 00 F0 EA FE 66 0B  // ....... f%....f.
    0BB0: C2 E8 0A 20 C3 66 50 53 51 66 52 66 33 D2 33 DB  // ... .fPSQfRf3.3.
    0BC0: 8A DC 8A E8 8A C8 80 E1 1F 66 BA 01 00 00 00 66  // .........f.....f
    0BD0: D3 E2 E8 DF 1F 66 0B C2 F6 C5 20 75 03 66 33 C2  // .....f.... u.f3.
    0BE0: E8 DB 1F 66 5A 59 5B 66 58 C3 66 50 53 BB 06 00  // ...fZY[fX.fPS...
    0BF0: E8 C1 1F A8 10 75 09 BB F0 16 E8 2B 26 3D 5A A5  // .....u.....+&=Z.
    0C00: 5B 66 58 C3 B8 04 06 80 F1 01 C0 E1 05 0A C1 E8  // [fX.............
    0C10: A3 FF C3 53 66 50 BB F8 16 E8 0C 26 8A C1 E8 67  // ...SfP.....&...g
    0C20: 25 66 58 5B C3 53 BB F8 16 E8 FC 25 83 E0 01 5B  // %fX[.S.....%...[
    0C30: C3 BB 06 00 E8 7D 1F 66 C1 E8 10 25 FF 0F C3 BB  // .....}.f...%....
    0C40: 06 00 E8 6F 1F 66 25 FF FF 00 F0 66 C1 E2 10 66  // ...o.f%....f...f
    0C50: 0B C2 E8 69 1F C3 53 66 50 BB 07 00 E8 55 1F F6  // ...i..SfP....U..
    0C60: C4 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB 07 00  // ..fX..t...[.S...
    0C70: E8 41 1F 80 E4 FE 80 FD 06 74 03 80 CC 01 E8 3D  // .A.......t.....=
    0C80: 1F 5B C3 53 B8 06 06 C0 E3 05 0A C3 E8 26 FF 5B  // .[.S.........&.[
    0C90: C3 66 50 BB 06 00 E8 1B 1F 24 40 C0 E8 06 8A D8  // .fP......$@.....
    0CA0: 66 58 C3 57 66 50 66 33 C0 B9 08 00 FC F3 66 AB  // fX.WfPf3......f.
    0CB0: 66 58 5F E8 3E 01 0B C0 75 09 E8 E3 05 74 3C 85  // fX_.>...u....t<.
    0CC0: C1 74 F7 E8 A6 05 8D 9C 6A 01 E8 5B 25 26 89 05  // .t......j..[%&..
    0CD0: 8D 9C 6E 01 E8 51 25 26 89 45 02 8D 9C B5 02 E8  // ..n..Q%&.E......
    0CE0: 46 25 02 C0 04 04 26 88 45 06 26 88 45 07 26 88  // F%....&.E.&.E.&.
    0CF0: 45 08 B0 07 26 88 45 04 0A C0 C3 32 C0 C3 C3 66  // E...&.E....2...f
    0D00: 50 53 51 52 56 57 E8 E1 FE 74 03 E8 D5 05 5F 5E  // PSQRVW...t...._^
    0D10: 5A 59 5B 66 58 C3 33 C9 E8 1C 22 75 48 66 BA FF  // ZY[fX.3..."uHf..
    0D20: FF 0C FF 66 33 C0 E8 F7 06 33 F6 E8 5C 05 74 18  // ...f3....3..\.t.
    0D30: E8 69 06 A9 C8 0E 74 F3 E8 43 07 A8 04 75 04 A8  // .i....t..C...u..
    0D40: 18 74 E8 E8 7B 00 EB E3 E8 2C 00 75 03 E8 A4 00  // .t..{....,.u....
    0D50: 33 F6 E8 35 05 74 0E E8 42 06 85 C1 74 F4 51 E8  // 3..5.t..B...t.Q.
    0D60: F9 07 59 EB ED C3 8D 5D 28 66 C1 E3 10 8D 5C 28  // ..Y....](f....\(
    0D70: B9 49 00 E8 0C 21 C3 66 50 53 52 56 33 C9 33 D2  // .I...!.fPSRV3.3.
    0D80: 8D 36 50 0D E8 B6 06 A8 03 74 03 83 CA 01 66 C1  // .6P......t....f.
    0D90: E8 10 8A 0C 80 F9 FF 74 15 66 A9 01 00 00 00 74  // .......t.f.....t
    0DA0: 07 BB 01 00 D3 E3 0B D3 66 D1 E8 46 EB E4 8B CA  // ........f..F....
    0DB0: 0B C9 5E 5A 5B 66 58 C3 03 07 01 05 06 09 0A 0B  // ..^Z[fX.........
    0DC0: FF 66 50 53 51 E8 D4 05 0F BC D8 81 C3 80 0D 8A  // .fPSQ...........
    0DD0: 0F 66 B8 01 00 00 00 66 D3 E0 66 BA FF FF FF FF  // .f.....f..f.....
    0DE0: E8 3D 06 59 5B 66 58 C3 01 12 0B 10 09 13 14 11  // .=.Y[fX.........
    0DF0: 0C 15 16 17 50 53 52 E8 7D FF 75 13 B9 01 00 E8  // ....PSR.}.u.....
    0E00: 38 1F 23 C8 75 19 33 C0 E8 95 04 8B C8 EB 10 83  // 8.#.u.3.........
    0E10: F9 02 74 0B E8 7A FE 80 FB 01 75 03 83 E1 FD 5A  // ..t..z....u....Z
    0E20: 5B 58 C3 56 83 EC 04 8B EC 66 33 C0 66 89 46 00  // [X.V.....f3.f.F.
    0E30: 66 BA 00 F0 00 F0 E8 1A FD 66 C1 E6 10 E8 60 04  // f........f....`.
    0E40: 0B C0 74 1E 85 C1 74 F5 55 E8 56 00 5D 74 04 33  // ..t...t.U.V.]t.3
    0E50: C8 EB EA E8 BB 05 66 3B 56 00 76 E1 66 89 56 00  // ......f;V.v.f.V.
    0E60: EB DB E8 DF FC 74 07 66 8B 46 00 E8 05 00 83 C4  // .....t.f.F......
    0E70: 04 5E C3 33 F6 66 50 E8 05 04 66 58 8D 9C D8 02  // .^.3.fP...fX....
    0E80: E8 05 23 66 8B D0 E8 BB FC E8 DD 18 8D 9C 1C 03  // ..#f............
    0E90: E8 95 23 38 D0 74 0A 8A C2 E8 EC 22 B0 02 E8 5F  // ..#8.t....."..._
    0EA0: 05 C3 50 51 E8 C5 03 32 C0 E8 54 05 E8 3A 03 E8  // ..PQ...2..T..:..
    0EB0: AB 00 8D 9C 40 03 E8 6F 23 38 E8 74 0A 8A C5 E8  // ....@..o#8.t....
    0EC0: C6 22 B0 02 E8 39 05 E8 BD 00 E8 D8 00 75 73 E8  // ."...9.......us.
    0ED0: 9E 00 8D 9C 4C 01 E8 4F 23 8B C8 8B D3 8D 9C 00  // ....L..O#.......
    0EE0: 03 E8 44 23 3B C1 74 05 B0 02 E8 13 05 E8 65 0A  // ..D#;.t.......e.
    0EF0: 8D 9C 00 03 E8 4F 18 8D 9C D8 02 E8 8A 22 66 C1  // .....O......."f.
    0F00: CE 10 8B FE 66 C1 CE 10 E8 C9 00 E8 FF 00 E8 94  // ....f...........
    0F10: 04 8A E9 8D 9C DC 02 32 C9 E8 B0 22 E8 7D 04 66  // .......2...".}.f
    0F20: 25 FF 0F 00 00 E8 F9 03 80 F9 01 75 04 66 C1 E0  // %..........u.f..
    0F30: 10 59 58 66 BA FF FF FF FF 66 33 D0 E8 14 FC 33  // .YXf.....f3....3
    0F40: D2 C3 E8 05 00 0C 01 59 58 C3 53 66 50 8D 9C D4  // .......YX.SfP...
    0F50: 02 E8 D4 22 8A C4 E8 2F 22 66 58 5B C3 53 66 50  // ...".../"fX[.SfP
    0F60: 8D 9C D4 02 E8 C1 22 8A E0 E8 1C 22 66 58 5B C3  // ......"...."fX[.
    0F70: E8 CE 03 E8 91 03 8A DD E8 6B 19 8D 9C 3C 03 8A  // .........k...<..
    0F80: E9 32 C9 E8 46 22 C3 83 EC 08 8B EC E8 B2 03 E8  // .2..F"..........
    0F90: 75 03 E8 FF 18 8A 6E 00 8D 9C 4C 03 32 C9 E8 2B  // u.....n...L.2..+
    0FA0: 22 83 C4 08 C3 33 C9 56 E8 23 03 0B F6 5E 74 0C  // "....3.V.#...^t.
    0FB0: FE C1 E8 A6 1E 38 C1 75 EE 0C 01 C3 8D 9C D4 02  // .....8.u........
    0FC0: E8 65 22 38 C8 74 0A 8A C1 E8 BC 21 B0 02 E8 2F  // .e"8.t.....!.../
    0FD0: 04 32 C0 C3 E8 0A 00 8D 9C D0 02 32 C9 E8 EC 21  // .2.........2...!
    0FE0: C3 8D 1D E8 42 22 66 8B D0 8D 9C 02 03 E8 38 22  // ....B"f.......8"
    0FF0: 51 8B C8 8D 9C 06 03 E8 2E 22 66 C1 E0 10 8B C1  // Q........"f.....
    1000: 59 66 3B C2 75 04 B5 00 EB 02 B5 02 C3 E8 6D 03  // Yf;.u.........m.
    1010: 8D 9C 40 03 B1 03 E8 B3 21 E8 B2 06 8D 9C 40 03  // ..@.....!.....@.
    1020: B1 02 E8 A7 21 E8 DF 02 80 FD 00 75 1D E8 94 00  // ....!......u....
    1030: 66 81 FA F0 D2 00 00 75 06 66 BA 78 69 00 00 E8  // f......u.f.xi...
    1040: B6 00 E8 EF 00 E8 AB 03 EB 38 E8 81 03 E8 A3 03  // .........8......
    1050: 66 52 E8 F7 02 0B D2 74 07 E8 82 18 66 5A EB 22  // fR.....t....fZ."
    1060: E8 5E 03 E8 00 1B 66 5A 51 E8 9B 02 80 FD 02 59  // .^....fZQ......Y
    1070: 75 10 B5 04 66 81 FA 74 40 00 00 76 05 B5 08 66  // u...f..t@..v...f
    1080: D1 EA 8D 9C 54 03 66 8B C2 E8 FC 20 8D 9C 40 03  // ....T.f.... ..@.
    1090: E8 95 21 8A E5 E8 F0 20 E8 1E 01 8D 9C 48 03 32  // ..!.... .....H.2
    10A0: C9 E8 28 21 E8 9A 02 E8 5D 02 E8 34 18 8D 9C 58  // ..(!....]..4...X
    10B0: 03 32 C9 E8 16 21 E8 88 02 E8 4B 02 8D 9C 60 03  // .2...!....K...`.
    10C0: E8 EC 17 C3 53 8D 9C 29 01 E8 5C 21 66 33 D2 0A  // ....S..)..\!f3..
    10D0: C0 75 05 BA 48 3F 5B C3 8A D0 66 B8 8C 0A 00 00  // .u..H?[...f.....
    10E0: 66 F7 E2 66 8B F8 E8 58 02 B3 00 E8 3F 17 66 3B  // f..f...X....?.f;
    10F0: D7 76 03 66 8B D7 5B C3 B7 01 53 8D 9C 42 03 E8  // .v.f..[...S..B..
    1100: 26 21 8A C8 5B 66 52 E8 83 00 E8 C1 02 66 3B D1  // &!..[fR......f;.
    1110: 66 5A 76 09 D0 E7 E8 07 00 38 EF 72 DD 8A EF C3  // fZv......8.r....
    1120: 53 8D 9C 2A 01 E8 00 21 24 0F 8A E8 0A ED 75 02  // S..*...!$.....u.
    1130: B5 01 5B C3 51 83 EC 08 8B EC 66 C7 46 00 48 3F  // ..[.Q.....f.F.H?
    1140: 78 69 66 C7 46 04 F0 D2 00 00 E8 FF 01 0B D2 74  // xif.F..........t
    1150: 03 E8 9B 17 8A FD 53 8D 9C 42 03 E8 CA 20 8A C8  // ......S..B... ..
    1160: 5B E8 60 FF 66 33 C0 8B 46 00 66 3B C2 73 19 66  // [.`.f3..F.f;.s.f
    1170: 8B D0 E8 18 00 E8 56 02 66 3B D1 72 05 83 C5 02  // ......V.f;.r....
    1180: EB D4 66 33 D2 8B 56 00 83 C4 08 59 C3 66 52 52  // ..f3..V....Y.fRR
    1190: 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A  // 2.........f3...Z
    11A0: 51 66 33 C0 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // Qf3.....f..f...Y
    11B0: 66 F7 F1 66 8B C8 66 5A C3 E8 90 01 0B D2 74 0B  // f..f..fZ......t.
    11C0: E8 16 00 0A ED 75 11 E8 B8 16 C3 B5 00 E8 F1 01  // .....u..........
    11D0: E8 5F 19 75 03 E8 01 00 C3 B5 00 8D 9C 31 01 E8  // ._.u.........1..
    11E0: 46 20 A8 01 74 02 B5 01 C3 53 E8 5F 01 66 C1 E2  // F ..t....S._.f..
    11F0: 10 E8 4D 01 8D 9C B8 02 E8 2D 20 8A E8 E8 5F 16  // ..M......- ..._.
    1200: 8A EB 5B C3 57 53 53 E8 DF FF E8 34 01 5B E8 A2  // ..[.WSS....4.[..
    1210: 16 74 49 80 FD 00 75 24 53 E8 A8 FE E8 AF 04 8A  // .tI...u$S.......
    1220: CD E8 FC FE 8A FD E8 64 FF 5B E8 FB 1F 66 25 FF  // .......d.[...f%.
    1230: FF 00 00 66 3B C8 73 21 32 DB EB 20 80 FD 02 75  // ...f;.s!2.. ...u
    1240: 18 53 E8 7C 01 E8 FB 18 5B 74 0E 8D 1D E8 D8 1F  // .S.|....[t......
    1250: 3D 74 40 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53  // =t@v.2......[_.S
    1260: E8 39 01 8B D8 E8 DC F8 85 C3 5B C3 53 8B F0 E8  // .9........[.S...
    1270: C8 1A 23 F0 74 07 8B C6 E8 69 19 8B F3 5B C3 E8  // ..#.t....i...[..
    1280: 08 00 74 05 E8 D8 FF 74 F6 C3 33 C0 0B F6 74 03  // ..t....t..3...t.
    1290: E8 09 01 33 F6 E8 08 00 74 03 E8 CF FF 0B F6 C3  // ...3....t.......
    12A0: 57 53 E8 E0 1A 0B C0 74 09 8B 1D 83 C7 02 3B C3  // WS.....t......;.
    12B0: 75 F7 8B 1D 83 FB FF 74 0E 83 C7 02 E8 7B 1A 85  // u......t.....{..
    12C0: D8 74 EF 8B C3 EB 02 33 C0 0B C0 5B 5F C3 51 33  // .t.....3...[_.Q3
    12D0: F6 8A E9 E8 A9 FF 74 07 E8 46 00 38 E9 75 F4 0B  // ......t..F.8.u..
    12E0: F6 59 C3 33 C0 E8 B8 FF 74 13 E8 7F FF 8B DE B9  // .Y.3....t.......
    12F0: FB 00 E8 78 1B 83 C6 08 E8 C2 19 EB E8 BB F0 16  // ...x............
    1300: B8 5A A5 E8 9A 1E C3 53 66 50 8D 9C 40 03 E8 17  // .Z.....SfP..@...
    1310: 1F 8A E8 66 58 5B C3 8D 9C 64 03 E8 0A 1F 0B C0  // ...fX[...d......
    1320: C3 53 66 50 8D 9C D4 02 E8 FD 1E 8A C8 66 58 5B  // .SfP.........fX[
    1330: C3 53 66 50 8D 9C D5 02 E8 ED 1E 8A C8 66 58 5B  // .SfP.........fX[
    1340: C3 53 8D 5C 14 E8 E0 1E 8B D0 5B C3 53 66 50 8D  // .S.\......[.SfP.
    1350: 5C 16 E8 D3 1E 8B D0 66 58 5B C3 53 66 50 8D 9C  // \......fX[.SfP..
    1360: 50 03 E8 C3 1E 66 8B D0 66 58 5B C3 53 66 50 8D  // P....f..fX[.SfP.
    1370: 9C 54 03 E8 B2 1E 66 8B D0 66 58 5B C3 53 66 50  // .T....f..fX[.SfP
    1380: 8D 5C 10 E8 A2 1E 8B C8 66 58 5B C3 66 50 53 8D  // .\......fX[.fPS.
    1390: 9C 41 03 E8 92 1E 5B 8A D8 66 58 C3 53 8D 5C 08  // .A....[..fX.S.\.
    13A0: E8 85 1E 5B C3 53 50 8D 9C 4C 03 E8 7A 1E 8A C8  // ...[.SP..L..z...
    13B0: 58 5B C3 53 50 8D 9C 4D 03 E8 6C 1E 8A C8 58 5B  // X[.SP..M..l...X[
    13C0: C3 53 50 8D 5C 0C E8 5F 1E 8B D0 58 5B C3 53 66  // .SP.\.._...X[.Sf
    13D0: 50 8D 9C 00 03 E8 50 1E 66 33 D2 8B D0 66 58 5B  // P.....P.f3...fX[
    13E0: C3 8D 5C 04 E8 41 1E C3 51 8D 5C 04 32 C9 E8 DB  // ..\..A..Q.\.2...
    13F0: 1D 59 C3 8D 9C 50 03 E8 2E 1E 8B C2 E8 89 1D C3  // .Y...P..........
    1400: 53 51 8A E8 E8 DA FF 24 FD 0A E8 E8 DA FF 59 5B  // SQ.....$......Y[
    1410: C3 66 50 8D 9C D8 02 E8 0E 1E 66 8B D0 66 58 C3  // .fP.......f..fX.
    1420: 53 66 50 66 51 66 8B C8 BB 00 00 E8 86 17 66 23  // SfPfQf........f#
    1430: C2 66 0B C1 E8 87 17 66 59 66 58 5B C3 BB 00 00  // .f.....fYfX[....
    1440: E8 71 17 66 25 03 03 FF 00 C3 57 0B C0 75 10 33  // .q.f%.....W..u.3
    1450: F6 E8 36 FE 74 26 E8 25 00 A8 04 74 F4 EB 13 8B  // ..6.t&.%...t....
    1460: C8 E8 D6 18 23 C1 74 14 E8 01 FE E8 10 00 A8 04  // ....#.t.........
    1470: 74 0A 5F 8D 5C 28 E8 2D 05 0B F6 C3 5F C3 E8 FC  // t._.\(.-...._...
    1480: FE 0A C9 74 72 E8 39 FF E8 B4 16 74 30 0A ED 74  // ...tr.9....t0..t
    1490: 10 8A CD B5 02 E8 A0 19 B1 02 8D 9C 48 01 E8 2B  // ............H..+
    14A0: 1D E8 34 02 A8 04 74 15 8D 5C 28 E8 56 00 74 0D  // ..4...t..\(.V.t.
    14B0: E8 0E FF E8 80 16 74 3F 80 FD 02 74 3A 8D 5C 28  // ......t?...t:.\(
    14C0: E8 38 00 E8 20 0B 33 C9 50 8D 9C 28 01 E8 58 1D  // .8.. .3.P..(..X.
    14D0: 66 0B C0 74 03 B9 00 08 58 0A C0 75 13 8D 5C 28  // f..t....X..u..\(
    14E0: E8 3F 00 75 0B 80 CD 02 E8 19 00 74 03 80 CD 04  // .?.u.......t....
    14F0: 8D 9C 48 01 E8 D5 1C E8 DE 01 C3 51 B9 49 00 E8  // ..H........Q.I..
    1500: 6B 19 59 C3 51 E8 1A 00 75 14 E8 9C 01 3C 01 75  // k.Y.Q...u....<.u
    1510: 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9  // .. ..'.u......3.
    1520: 59 C3 53 E8 02 1D 66 3D 00 FF FF FF 75 0E 83 C3  // Y.S...f=....u...
    1530: 04 E8 F4 1C 66 3D FF FF FF 00 75 00 5B C3 50 52  // ....f=....u.[.PR
    1540: 32 D2 E8 E3 1C 02 D0 02 D4 66 C1 E8 10 02 D0 02  // 2........f......
    1550: D4 83 C3 04 E2 EC 0A D2 5A 58 C3 8D 9C 4C 01 E8  // ........ZX...L..
    1560: 1F 01 E8 73 01 B5 13 A8 08 75 0C E8 53 FE 8A EA  // ...s.....u..S...
    1570: 80 FD 13 75 02 B5 03 8D 9C B8 02 66 33 C0 8A C5  // ...u.......f3...
    1580: E8 05 1C E8 16 FE A9 11 00 74 37 B5 01 E8 22 01  // .........t7...".
    1590: E8 45 01 A8 04 75 17 55 BD 00 00 B8 61 40 E8 F0  // .E...u.U....a@..
    15A0: 02 B8 45 40 E8 EA 02 5D B5 02 E8 8A 00 C3 E8 2F  // ..E@...]......./
    15B0: 01 B5 02 8D 5C 28 E8 DD 00 75 02 B5 01 E8 77 00  // ....\(...u....w.
    15C0: EB 67 A9 C8 0E 74 3E E8 0E 01 A8 08 74 08 8D 5C  // .g...t>.....t..\
    15D0: 28 E8 B4 00 74 B5 B5 02 E8 D7 00 E8 FA 00 A8 04  // (...t...........
    15E0: 74 0B 8D 5C 28 E8 F8 00 E8 F8 02 EB 0A 8D 9C 68  // t..\(..........h
    15F0: 01 B8 3C 6A E8 60 05 E8 D4 00 80 FD 00 75 37 B5  // ..<j.`.......u7.
    1600: 02 E8 C0 00 C3 A9 22 00 74 2C B5 04 E8 A3 00 8D  // ......".t,......
    1610: 9C 68 01 56 E8 DD 19 8B F7 E8 58 03 5E E8 85 19  // .h.V......X.^...
    1620: E8 A1 00 8D 5C 28 E8 AB 19 8D 9C 68 01 E8 4F 03  // ....\(.....h..O.
    1630: 66 8B D1 E8 C0 07 C3 8D 9C B4 02 B1 02 E8 8C 1B  // f...............
    1640: B5 02 E8 7F 00 C3 8D 9C 4C 01 E8 34 00 E8 88 00  // ........L..4....
    1650: A8 04 74 23 8D 5C 28 E8 86 00 E8 97 19 8D 9C 68  // ..t#.\(........h
    1660: 01 06 0E 07 B9 07 00 E8 3D 18 07 E8 60 00 E8 50  // ........=...`..P
    1670: FD 8D 5C 28 E8 88 19 8D 5C 28 E8 37 19 E8 DB FE  // ..\(....\(.7....
    1680: C3 B9 61 00 E8 E6 17 C3 53 81 C3 05 01 E8 98 1B  // ..a.....S.......
    1690: 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83  // $.<.[....=..u.S.
    16A0: C3 18 E8 83 1B 5B A8 01 C3 53 83 C3 12 E8 78 1B  // .....[...S....x.
    16B0: 5B C3 8D 9C B4 02 32 C9 E8 11 1B C3 8D 9C B4 02  // [.....2.........
    16C0: E8 65 1B C3 8D 9C B4 02 B1 01 E8 FF 1A C3 8D 9C  // .e..............
    16D0: B4 02 B1 01 E8 0D 1B C3 8D 9C 48 01 E8 49 1B C3  // ..........H..I..
    16E0: 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1 E3  // UWQ.........+...
    16F0: 8D 58 4E E8 32 1B E8 98 01 E2 EE 8D 5C 4B E8 27  // .XN.2.......\K.'
    1700: 1B B9 04 00 8B D0 BF 05 17 85 55 06 74 17 66 8B  // ..........U.t.f.
    1710: 05 8D 9A F4 01 E8 70 1A 8B 45 04 8D 9A F8 01 E8  // ......p..E......
    1720: 7E 1A 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00  // ~..........|^...
    1730: 33 ED 8B DF E8 F1 1A 0B C0 74 09 E8 12 01 E8 4C  // 3........t.....L
    1740: 00 83 C5 1C 83 C7 12 E2 E9 32 ED E8 76 FF 8D 5C  // .........2..v..\
    1750: 28 E8 55 FF 3D 01 04 75 10 83 C3 14 E8 C9 1A 24  // (.U.=..u.......$
    1760: 70 C0 E8 04 8A E8 E8 5B FF 59 5F 5D C3 20 03 58  // p......[.Y_]. .X
    1770: 02 3C 00 01 00 00 04 00 03 3C 00 00 08 00 05 00  // .<.......<......
    1780: 04 4B 00 00 01 80 02 E0 01 3C 00 20 00 51 8D 1D  // .K.......<. .Q..
    1790: E8 95 1A 8D 9A 68 01 E8 06 1A 8D 5D 02 E8 88 1A  // .....h.....]....
    17A0: 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 7B 1A 8D 9A 6E  // ..j.....]..{...n
    17B0: 01 E8 7C 00 8D 5D 08 E8 6E 1A 8B C8 8A DC 66 C1  // ..|..]..n.....f.
    17C0: C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 E5  // ................
    17D0: 06 8A FC C0 E7 04 80 E7 03 80 E4 0F C0 E4 04 0A  // ................
    17E0: D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A  // ...?............
    17F0: 74 01 E8 AB 19 8D 9A 72 01 8B C1 E8 A2 19 8D 9A  // t......r........
    1800: 76 01 33 C0 8A C6 E8 97 19 8D 9A 78 01 33 C0 8A  // v.3........x.3..
    1810: C2 E8 8C 19 8D 5D 0C E8 0E 1A 8D 9A 7A 01 E8 0F  // .....]......z...
    1820: 00 8D 5D 0F E8 01 1A 8D 9A 7E 01 E8 72 19 59 C3  // ..]......~..r.Y.
    1830: 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0  // ....f...........
    1840: ED 04 8B C1 E8 59 19 83 C3 02 8B C2 E8 51 19 C3  // .....Y.......Q..
    1850: 8D 5D 11 E8 D2 19 8A E0 BA 06 02 C0 E8 07 74 03  // .]............t.
    1860: 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA  // ........$.<.u...
    1870: 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD  // @<.u.......t....
    1880: A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8 10 19  // ..t.............
    1890: C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A  // .<.t=.....$?.<..
    18A0: F8 01 E8 FB 18 0F B6 C2 83 C0 1F C1 E0 03 8D 9A  // ................
    18B0: F4 01 E8 EB 18 0F B6 DE C1 EB 06 C1 E3 02 2E F7  // ................
    18C0: A7 6D 18 2E F7 B7 6B 18 8D 9A F6 01 E8 D1 18 83  // .m....k.........
    18D0: C5 08 C3 01 00 01 00 04 00 03 00 05 00 04 00 10  // ................
    18E0: 00 09 00 57 8D 9C 68 01 8B FB 8B DF E8 90 00 0B  // ...W..h.........
    18F0: C9 74 44 8D 5D 18 E8 2F 19 A8 80 74 0D 8B DF 56  // .tD.]../...t...V
    1900: 8D 36 D1 18 E8 6D 00 5E EB 28 66 8B D1 E8 E6 04  // .6...m.^.(f.....
    1910: 8D 9C A6 00 E8 11 19 3C 01 75 17 66 81 F9 80 07  // .......<.u.f....
    1920: 38 04 74 09 66 81 F9 00 05 D0 02 75 05 B5 03 E8  // 8.t.f......u....
    1930: 80 FD 83 C7 1C EB B3 5F C3 8C 0A D0 02 8A 00 E0  // ......._........
    1940: 01 2D 00 10 00 3E 00 09 00 06 00 00 00 00 00 00  // .-...>..........
    1950: 00 06 00 00 00 50 53 51 B9 07 00 53 8B DA E8 C7  // .....PSQ...S....
    1960: 18 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 12 15  // ....[t.f........
    1970: 59 5B 58 C3 51 53 B9 07 00 E8 1F 15 5B 59 C3 66  // Y[X.QS......[Y.f
    1980: 50 53 83 C3 06 E8 A0 18 5B 8B C8 66 C1 E1 10 53  // PS......[..f...S
    1990: 83 C3 02 E8 92 18 8B C8 5B 66 58 C3 8D 9C 48 01  // ........[fX...H.
    19A0: 32 C9 E8 27 18 C3 57 B9 20 00 E8 FA 14 5F C3 E8  // 2..'..W. ...._..
    19B0: 0A FD 3C 01 75 57 8D 9C B6 02 E8 6B 18 A8 02 74  // ..<.uW.....k...t
    19C0: 71 66 C1 CE 10 E8 F3 03 66 C1 CE 10 0A C0 75 0E  // qf......f.....u.
    19D0: 8D 9C 4C 01 B8 3C 6A E8 7D 01 0C 01 EB 7A 8D 9C  // ..L..<j.}....z..
    19E0: 68 01 B0 00 E8 36 01 75 07 B0 00 E8 DF 00 74 68  // h....6.u......th
    19F0: 8D 9C 68 01 B0 01 E8 24 01 75 52 B0 01 E8 B0 00  // ..h....$.uR.....
    1A00: 75 56 B0 00 E8 A9 00 EB 4F 0B F6 EB 4B 3C 04 74  // uV......O...K<.t
    1A10: 21 3C 03 74 1D 66 C1 CE 10 E8 9F 03 66 C1 CE 10  // !<.t.f......f...
    1A20: 0A C0 74 07 B0 01 E8 A4 00 75 2D B0 00 E8 9D 00  // ..t......u-.....
    1A30: 75 26 8D BC 68 01 8D 1D E8 ED 17 0B C0 74 19 8B  // u&..h........t..
    1A40: DF B0 00 E8 D7 00 75 05 83 C7 1C EB E9 8B D3 8D  // ......u.........
    1A50: 9C 4C 01 E8 FF FE 0B F6 C3 57 53 51 E8 44 13 3B  // .L.......WSQ.D.;
    1A60: 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D  // U.u.f.....f...;]
    1A70: 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2  // .u...t.:E.t.....
    1A80: DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52  // .3.......Y[_.QfR
    1A90: E8 10 13 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74  // ...:e.u...t.:E.t
    1AA0: 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3  // ......3.....fZY.
    1AB0: 51 E8 EF 12 56 8D 9C 4C 01 8B F7 E8 B6 FE 5E E8  // Q...V..L......^.
    1AC0: 5B 00 75 07 83 C7 1C E2 EB 33 FF 59 C3 8D BC F4  // [.u......3.Y....
    1AD0: 01 8A C8 8D 1D E8 50 17 0B C0 74 40 66 50 E8 DB  // ......P...t@fP..
    1AE0: FB 3C 01 66 58 74 05 3D 40 06 73 2B 66 8B D0 8D  // .<.fXt.=@.s+f...
    1AF0: 5D 04 E8 33 17 E8 61 FF 74 1D 8D 9C 4C 01 56 8B  // ]..3..a.t...L.V.
    1B00: F2 E8 70 FE 5E 53 8D 9C 62 01 33 C0 E8 91 16 5B  // ..p.^S..b.3....[
    1B10: 8A C1 E8 08 00 75 05 83 C7 08 EB B7 C3 66 51 50  // .....u.......fQP
    1B20: 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8 FA 16 5B 66  // Sf.....f......[f
    1B30: 8B D0 E8 4A FE 58 3C 01 75 0A 66 3B CA 75 13 E8  // ...J.X<.u.f;.u..
    1B40: C2 F6 75 10 3B CA 72 0A 66 3B CA 72 05 E8 B4 F6  // ..u.;.r.f;.r....
    1B50: 75 02 32 C0 66 59 C3 56 57 E8 31 FF 8B F7 E8 13  // u.2.fY.VW.1.....
    1B60: FE 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9  // ._^.fPSfQRWVQ...
    1B70: 08 00 E8 F8 12 59 8D 5C 08 8B C1 66 C1 E0 10 8A  // .....Y.\...f....
    1B80: C2 E8 04 16 F6 C2 03 75 24 8B C1 24 7F BF 47 1C  // .......u$..$..G.
    1B90: 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66  // .=.....:.u.f.E.f
    1BA0: B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01  // ................
    1BB0: 74 25 8B C1 E8 61 01 0F 84 EB 00 33 C9 8A CC 8A  // t%...a.....3....
    1BC0: D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1  // ...u..\.f%....f.
    1BD0: E0 08 E8 B3 15 EB B2 8A E1 8A CA 80 E1 0C C0 E9  // ................
    1BE0: 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC  // ...........pr*..
    1BF0: 75 73 25 80 EC 70 8A C4 32 E4 50 E8 21 02 8B D8  // us%..p..2.P.!...
    1C00: 58 38 D8 72 05 33 C0 E9 9C 00 E8 19 02 E8 18 16  // X8.r.3..........
    1C10: 0B C0 0F 84 90 00 EB 1B 32 C0 E8 70 FE 0F 84 85  // ........2..p....
    1C20: 00 8D 5C 16 8B 05 E8 77 15 8B 45 06 66 C1 E0 10  // ..\....w..E.f...
    1C30: 8B 45 02 50 E8 00 0B 66 C1 E1 10 8B C8 58 8D 1C  // .E.P...f.....X..
    1C40: E8 45 15 66 50 8D 5C 04 66 8B C1 E8 3A 15 66 58  // .E.fP.\.f...:.fX
    1C50: 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50  // f...f......f..fP
    1C60: 8D 5C 06 E8 C2 15 8B C8 66 58 66 D3 E0 66 C1 E8  // .\......fXf..f..
    1C70: 10 40 8D 5C 14 E8 28 15 BF 98 1C 83 F9 01 74 11  // .@.\..(.......t.
    1C80: BF A0 1C 81 F9 01 01 74 08 BF A8 1C 83 F9 02 75  // .......t.......u
    1C90: 15 8D 5C 0C 66 8B 05 E8 EE 14 8D 5C 10 66 8B 45  // ..\.f......\.f.E
    1CA0: 04 E8 E4 14 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00  // ......^_ZfY[fX..
    1CB0: 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80  // @....@..........
    1CC0: 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02  // ....@....@......
    1CD0: 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90  // .....^..@.......
    1CE0: 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01  // ....^....^......
    1CF0: 12 80 02 E0 01 13 80 02 90 01 62 80 02 E0 01 FF  // ..........b.....
    1D00: 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00  // ................
    1D10: 08 10 08 08 08 00 00 00 56 E8 77 12 80 E4 01 3B  // ........V.w....;
    1D20: 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B  // .t......3....D..
    1D30: C0 5E C3 57 53 50 E8 5A 12 83 E9 0A E8 E0 00 83  // .^.WSP.Z........
    1D40: F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02  // ..v.............
    1D50: E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8  // ......X[_.fSQfR.
    1D60: 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00  // A..w.f...f...f..
    1D70: 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 B8 09 66  // ...f..f3.f.....f
    1D80: 5A 59 66 5B C3 53 66 50 BB 07 00 E8 26 0E 0A C0  // ZYf[.SfP....&...
    1D90: 66 58 5B C3 53 66 50 BB 07 00 E8 17 0E A8 01 66  // fX[.SfP........f
    1DA0: 58 5B C3 53 66 50 8D 5C 06 E8 7C 14 8A C8 66 58  // X[.SfP.\..|...fX
    1DB0: 5B C3 51 B9 08 00 E8 C9 10 59 C3 53 8D 5C 08 E8  // [.Q......Y.S.\..
    1DC0: 66 14 24 03 5B C3 8D 5C 09 E8 5C 14 C3 51 53 B1  // f.$.[..\..\..QS.
    1DD0: 01 8A E8 8D 5C 08 E8 F3 13 5B 59 C3 53 8D 1C E8  // ....\....[Y.S...
    1DE0: 46 14 5B C3 53 8D 5C 04 E8 3D 14 5B C3 53 8D 5C  // F.[.S.\..=.[.S.\
    1DF0: 16 E8 34 14 5B C3 53 66 52 33 C0 E8 5B FC 66 5A  // ..4.[.SfR3..[.fZ
    1E00: 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D  // u..4.t....@...s.
    1E10: E8 75 13 48 E8 0F 00 66 8B C2 E8 6B 13 5B C3 BB  // .u.H...f...k.[..
    1E20: 00 1E E8 03 14 C3 BB 08 1E C1 E0 03 03 D8 C3 BB  // ................
    1E30: 00 1E B9 32 00 E8 35 10 C3 51 E8 E2 FF 0B C0 74  // ...2..5..Q.....t
    1E40: 12 8B C8 BB 08 1E E8 DF 13 66 3B C2 74 07 83 C3  // .........f;.t...
    1E50: 08 E2 F3 0B DB 59 C3 C3 C3 00 BB 20 DF E8 69 35  // .....Y..... ..i5
    1E60: E8 BE F4 B5 01 E8 2B 07 C3 BB 00 DF E8 5A 35 E8  // ......+......Z5.
    1E70: AF F4 B5 00 E8 1C 07 C3 80 F9 00 75 0A E8 E1 0F  // ...........u....
    1E80: 8A C8 B5 02 E8 E5 08 0B F6 74 29 E8 93 F4 B5 01  // .........t).....
    1E90: E8 14 07 56 33 F6 B5 00 E8 5D 06 5E B5 01 E8 04  // ...V3....].^....
    1EA0: F5 E8 C8 08 E8 85 09 E8 77 F4 8D 9C 00 03 E8 FD  // ........w.......
    1EB0: 06 E8 46 07 66 C1 CE 10 B5 01 E8 3B 06 E8 06 FF  // ..F.f......;....
    1EC0: A8 40 75 07 32 C0 B5 01 E8 4B 08 66 C1 CE 10 C3  // .@u.2....K.f....
    1ED0: E8 4E F4 B5 01 E8 96 06 B5 00 E8 CA 06 E8 2D 07  // .N............-.
    1EE0: B1 0F E8 16 0A B1 10 E8 11 0A E8 2B 00 C3 E8 7A  // ...........+...z
    1EF0: 00 E8 3D F4 B5 00 E8 75 06 B5 00 E8 A9 06 E8 B2  // ..=....u........
    1F00: F4 E8 5D 0F 38 C1 74 0F 80 F9 08 72 05 80 F9 0B  // ..].8.t....r....
    1F10: 76 05 B5 03 E8 55 08 C3 53 66 50 BB 02 00 E8 93  // v....U..SfP.....
    1F20: 0C 66 A9 00 00 01 00 66 58 5B 75 3E E8 1D F4 0B  // .f.....fX[u>....
    1F30: D2 74 0C E8 AB F4 3C 01 74 05 B1 0F E8 FA 09 B1  // .t....<.t.......
    1F40: 0C E8 75 00 B1 01 E8 28 0A E8 BB F3 80 FD 00 75  // ..u....(.......u
    1F50: 0D E8 E6 01 B1 0D E8 A2 09 B1 03 E8 5B 00 E8 EB  // ............[...
    1F60: F3 0B D2 74 05 B1 01 E8 CF 09 C3 E8 DE F3 0B D2  // ...t............
    1F70: 74 05 B1 00 E8 C2 09 B1 02 E8 3D 00 E8 62 F4 A8  // t.........=..b..
    1F80: 01 74 0D E8 81 F3 80 FD 00 75 05 B0 02 E8 12 04  // .t.......u......
    1F90: B1 00 E8 DC 09 B1 0D E8 1F 00 C3 B1 07 E8 D1 09  // ................
    1FA0: E8 A9 F3 0B D2 75 0C E8 17 F4 E8 85 0B 75 09 E8  // .....u.......u..
    1FB0: 6D 0A C3 B1 07 E8 81 09 C3 E8 05 F4 E8 73 0B 75  // m............s.u
    1FC0: 24 51 E8 AC 09 59 80 F9 0C 75 1A 33 D2 56 83 C6  // $Q...Y...u.3.V..
    1FD0: 08 E8 9C 0B 5E 0A C0 75 0C B9 0A 00 E8 DF 0E 42  // ....^..u.......B
    1FE0: 83 FA 1E 75 E8 C3 56 83 C6 08 E8 24 0B 5E E8 5B  // ...u..V....$.^.[
    1FF0: F3 0B D2 74 03 E8 99 08 80 FD 01 0F 84 D1 00 80  // ...t............
    2000: FD 02 0F 85 F2 00 B1 0C E8 AE FF 56 83 C6 08 E8  // ...........V....
    2010: 5E 0B 5E 0A C0 0F 84 DF 00 E8 DF 00 0A DB 0F 85  // ^.^.............
    2020: D6 00 8D 9C 35 01 E8 FF 11 A8 01 74 03 E8 7F 03  // ....5......t....
    2030: E8 19 F3 0B D2 74 05 B1 14 E8 FD 08 66 33 C9 E8  // .....t......f3..
    2040: 3B F3 66 BA 50 01 40 50 66 C1 C9 10 8A C1 66 C1  // ;.f.P.@Pf.....f.
    2050: C9 10 E8 15 0A 0F 85 9F 00 66 BA 50 01 50 4F 52  // .........f.P.POR
    2060: E8 E9 F2 80 FA 22 5A 74 0D 8D 9C 2D 01 E8 B8 11  // ....."Zt...-....
    2070: 24 06 3C 02 75 02 B6 02 8D 5C 28 66 C1 C9 10 03  // $.<.u....\(f....
    2080: D9 66 C1 C9 10 E8 E2 09 75 6E 8A DF 32 FF 66 C1  // .f......un..2.f.
    2090: C9 10 03 CB 66 C1 C9 10 66 BA 50 01 10 30 33 DB  // ....f...f.P..03.
    20A0: E8 C7 09 75 53 66 C1 C9 10 8B C1 66 C1 C9 10 0B  // ...uSf.....f....
    20B0: C0 74 45 83 F8 10 75 0F 8D 5C 28 E8 6A 11 66 0B  // .tE...u..\(.j.f.
    20C0: C0 0F 85 7D FF EB 31 3D 80 00 0F 82 74 FF EB 25  // ...}..1=....t..%
    20D0: E8 AA F2 8A E9 B1 A0 BA 00 80 BF 32 00 8D 5C 28  // ...........2..\(
    20E0: E8 5C 09 80 FF 01 74 0D B1 A2 8D 5C 28 E8 4F 09  // .\....t....\(.O.
    20F0: 80 FF 01 75 03 B0 00 C3 B0 01 C3 E8 2B 00 74 0C  // ...u........+.t.
    2100: B0 01 E8 9D 02 75 21 E8 1F 00 75 1C 66 BA 0C 00  // .....u!...u.f...
    2110: 90 43 8D 9C 30 01 E8 51 09 66 BA 20 00 90 41 8D  // .C..0..Q.f. ..A.
    2120: 9C 34 01 E8 44 09 33 DB C3 E8 51 F2 66 BA 00 00  // .4..D.3...Q.f...
    2130: 90 47 8D 9C 28 01 E8 31 09 C3 E8 A4 F2 3C 01 75  // .G..(..1.....<.u
    2140: 0E E8 ED 02 80 FD 01 75 06 B5 02 E8 12 03 C3 8D  // .......u........
    2150: 9C AC 03 B9 10 00 E8 14 0D B0 01 E8 44 02 74 08  // ............D.t.
    2160: B5 04 E8 11 03 E9 19 01 B1 08 E8 8E 07 E8 66 02  // ..............f.
    2170: B1 09 E8 86 07 E8 AC 01 8D 9C B8 03 66 33 C0 E8  // ............f3..
    2180: 06 10 E8 47 01 B9 90 01 E8 28 0D B0 01 E8 F7 01  // ...G.....(......
    2190: B5 02 E8 D5 02 E8 5B 01 E8 E7 02 E8 C7 01 B5 03  // ......[.........
    21A0: E8 C7 02 33 C9 E8 E7 00 F6 C5 01 75 2E B5 02 E8  // ...3.......u....
    21B0: B8 02 E8 07 01 F6 C5 04 74 08 B5 01 E8 B7 02 E9  // ........t.......
    21C0: BF 00 8A FD 80 E7 03 E8 CF 00 80 E3 03 38 FB 75  // .............8.u
    21D0: 07 E8 33 01 0F 84 A9 00 E8 54 01 FE C1 E8 AC F1  // ..3......T......
    21E0: 38 D9 75 C1 8D 9C AC 03 E8 3D 10 3C 03 74 05 E8  // 8.u......=.<.t..
    21F0: DA 00 EB A1 8D 9C B0 03 66 33 C0 E8 8A 0F 8D 9C  // ........f3......
    2200: 2A 01 E8 23 10 A8 40 74 0C B1 13 E8 ED 06 B0 03  // *..#..@t........
    2210: E8 74 01 EB 0A B1 0A E8 E1 06 B0 02 E8 68 01 B5  // .t...........h..
    2220: 04 E8 46 02 E8 CC 00 E8 58 02 E8 38 01 B5 05 E8  // ..F.....X..8....
    2230: 38 02 33 C9 E8 58 00 80 FD 07 75 05 E8 73 00 75  // 8.3..X....u..s.u
    2240: 27 51 B5 04 E8 23 02 59 F6 C5 01 75 07 B5 03 E8  // 'Q...#.Y...u....
    2250: 24 02 EB 2D E8 65 00 8A D5 E8 D3 00 E8 5D 00 38  // $..-.e.......].8
    2260: EA 75 05 E8 A1 00 74 19 FE C1 E8 1F F1 38 D9 75  // .u....t......8.u
    2270: C3 8D 9C AC 03 E8 B0 0F 3C 04 75 05 E8 4D 00 EB  // ........<.u..M..
    2280: A3 B0 00 E8 01 01 B1 0B E8 70 06 E8 A3 01 C3 8D  // .........p......
    2290: 9C C0 03 E8 0F 00 8A E8 C3 53 8D 9C C4 03 E8 04  // .........S......
    22A0: 00 5B 8A D8 C3 51 E8 7F 0F C0 E1 02 D3 E8 24 0F  // .[...Q........$.
    22B0: 59 C3 8D 9C C2 03 E8 6F 0F A8 01 C3 8D 9C B8 03  // Y......o........
    22C0: E8 21 0F C3 8D 9C B8 03 E8 01 0F C3 33 C9 33 D2  // .!..........3.3.
    22D0: E8 E9 FF 38 D5 76 02 8A D5 FE C1 E8 AE F0 38 D9  // ...8.v........8.
    22E0: 72 EE 33 C9 8A EA 8D 9C 5C 03 E8 DF 0E B1 0B E8  // r.3.....\.......
    22F0: 7F 06 C3 E8 87 F0 8D 9C B8 03 E8 2B 0F 66 BA 03  // ...........+.f..
    2300: 01 80 83 E8 64 07 C3 51 53 8D 9C B0 03 E8 D4 0E  // ....d..QS.......
    2310: FE C5 E8 B7 0E 80 FD 06 72 07 B5 02 E8 57 01 33  // ........r....W.3
    2320: C9 5B 59 C3 66 33 C0 8D 9C B0 03 E8 5A 0E C3 32  // .[Y.f3......Z..2
    2330: ED E8 65 FF 80 E3 0C C0 EB 02 B7 03 2A FB C0 E3  // ..e.........*...
    2340: 03 8A EB 80 FB 18 72 03 80 CD 20 E8 4B FF 80 E3  // ......r... .K...
    2350: 03 38 FB 72 02 8A DF 80 FB 03 75 03 80 CD 04 0A  // .8.r......u.....
    2360: EB E8 60 FF C3 E8 15 F0 8D 9C C0 03 66 BA 02 02  // ..`.........f...
    2370: 90 45 E8 F5 06 C3 E8 04 F0 66 BA 00 01 90 42 8D  // .E.......f....B.
    2380: 9C B4 03 E8 E4 06 C3 E8 F3 EF 66 BA 02 01 80 50  // ..........f....P
    2390: E8 D7 06 C3 E8 D5 EF 8B C2 66 33 D2 B9 8C 0A F7  // .........f3.....
    23A0: F1 C3 E8 D8 EF 66 BA 00 06 80 50 E8 BC 06 C3 E8  // .....f....P.....
    23B0: CB EF 66 BA 11 01 80 50 B0 04 E8 AD 06 C3 E8 BC  // ..f....P........
    23C0: EF 66 BA 00 06 90 40 8D 9C C8 03 E8 9C 06 8D 9C  // .f....@.........
    23D0: C8 03 E8 53 0E C3 E8 BB FF E8 B0 EF 8A E3 80 CC  // ...S............
    23E0: 80 50 E8 98 EF 58 66 BA 00 01 80 61 E8 7B 06 33  // .P...Xf....a.{.3
    23F0: C9 E8 23 EF 0B C0 74 02 B5 10 8D 9C BC 03 E8 CB  // ..#...t.........
    2400: 0D 8A C5 E8 77 EF 66 BA 07 01 80 50 E8 5B 06 E8  // ....w.f....P.[..
    2410: AF EF E8 21 07 75 19 8D 9C 48 03 E8 0A 0E 0A C0  // ...!.u...H......
    2420: 74 0E E8 58 EF 66 BA 0A 01 80 50 B0 01 E8 3A 06  // t..X.f....P...:.
    2430: C3 E8 42 FF E8 2E FF E8 84 FF 3C 01 75 1C E8 71  // ..B.......<.u..q
    2440: FE 74 17 33 C9 E8 47 FE 80 FD 07 75 0D FE C1 E8  // .t.3..G....u....
    2450: 3A EF 38 D9 75 EF B5 01 EB 02 B5 00 E8 01 00 C3  // :.8.u...........
    2460: 8D 9C AC 03 B1 02 E8 63 0D C3 51 8D 9C AC 03 32  // .......c..Q....2
    2470: C9 E8 58 0D 59 C3 51 8D 9C AC 03 B1 01 E8 4C 0D  // ..X.Y.Q.......L.
    2480: 59 C3 8D 9C 32 01 E8 9F 0D 0A C0 75 15 B9 64 00  // Y...2......u..d.
    2490: 8D 9C AC 03 E8 91 0D 3C 02 74 03 B9 90 01 E8 12  // .......<.t......
    24A0: 0A C3 32 E4 B1 04 33 D2 F6 E1 8B C8 E8 0F 0A C3  // ..2...3.........
    24B0: 51 8D 5C 14 E8 71 0D 66 C1 E0 10 E8 98 01 59 C3  // Q.\..q.f......Y.
    24C0: 33 C9 E8 96 09 38 C1 73 05 B5 00 E8 A7 00 B5 00  // 3....8.s........
    24D0: E8 9B 00 FE C1 E8 86 09 38 C1 72 E6 B1 14 8A E9  // ........8.r.....
    24E0: E8 7E 09 38 C1 74 05 B5 03 E8 80 02 FE C1 E8 67  // .~.8.t.........g
    24F0: 09 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC 0B F6 74  // ...8.v.........t
    2500: 29 E8 D8 F8 66 C1 C8 10 80 FD 10 75 06 8D 5C 18  // )...f......u..\.
    2510: E8 15 0D 66 89 46 00 8D 5C 04 E8 0B 0D 66 89 46  // ...f.F..\....f.F
    2520: 04 8D 5C 08 E8 01 0D 88 46 0A 89 4E 08 8C D0 66  // ..\.....F..N...f
    2530: C1 E0 10 8B C4 BB 2B 00 E8 7B 08 83 C4 0C C3 33  // ......+..{.....3
    2540: DB 83 EC 08 8B EC 89 5E 00 8C D0 66 C1 E0 10 8B  // .......^...f....
    2550: C4 BB 01 00 E8 5F 08 8B EC 8B 4E 00 8B 56 02 66  // ....._....N..V.f
    2560: 8B 46 04 83 C4 08 C3 BB 25 00 E8 0F 00 C3 BB 23  // .F......%......#
    2570: 00 E8 08 00 C3 BB 0D 00 E8 01 00 C3 83 EC 04 8B  // ................
    2580: EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 E8 27 08 83  // ..N...f......'..
    2590: C4 04 C3 BB 22 00 E8 E3 FF 80 FD 01 74 08 B5 01  // ....".......t...
    25A0: BB 06 00 E8 D6 FF C3 BB 2C 00 E8 CF FF C3 E8 77  // ........,......w
    25B0: 0C 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC 55 51  // .f.....t@.....UQ
    25C0: B9 04 00 83 C3 02 E8 5F 0C 66 89 46 00 83 C5 04  // ......._.f.F....
    25D0: 83 C3 04 E2 F1 83 C3 04 E8 4D 0C 66 C1 C8 10 66  // .........M.f...f
    25E0: 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10 8B C4  // .F.Y].N...f.....
    25F0: BB 31 00 E8 C0 07 83 C4 18 C3 E8 24 ED 8D 9C D0  // .1.........$....
    2600: 02 E8 24 0C 8A E8 BB 21 00 E8 70 FF C3 8D 9C 3C  // ..$....!..p....<
    2610: 03 E8 14 0C 8A F8 E8 EE EC 8A DD 53 8D 9C 42 03  // ...........S..B.
    2620: E8 05 0C 8A E8 5B E8 F8 EC E8 95 ED E8 07 05 75  // .....[.........u
    2630: 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01 88 5E  // .........N..~..^
    2640: 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A 00 E8  // ..n...f......*..
    2650: 64 07 83 C4 04 C3 83 EC 10 8B EC 66 8B C8 66 33  // d..........f..f3
    2660: C0 66 89 46 04 BB 00 17 E8 1D 0B 66 B8 00 80 20  // .f.F.......f... 
    2670: 50 66 89 46 0C 66 33 C0 66 89 46 08 56 E8 11 07  // Pf.F.f3.f.F.V...
    2680: 66 8B 44 04 66 50 66 C1 E8 16 88 46 08 66 58 66  // f.D.fPf....F.fXf
    2690: C1 E0 0A 66 05 00 17 00 00 66 89 46 00 5E 8C D0  // ...f.....f.F.^..
    26A0: 66 C1 E0 10 8B C4 BB 35 00 E8 0A 07 8B EC 66 B8  // f......5......f.
    26B0: 00 80 00 00 66 2B C8 66 89 46 04 66 05 00 00 20  // ....f+.f.F.f... 
    26C0: 40 66 89 46 0C 66 33 C0 66 89 46 08 66 89 46 00  // @f.F.f3.f.F.f.F.
    26D0: 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 D8 06 8B EC  // ..f......5......
    26E0: 66 8B 46 0C 66 25 FF FF 1F 00 66 01 46 04 66 3B  // f.F.f%....f.F.f;
    26F0: C8 76 1F 66 2B C8 66 8B 46 04 66 3D 00 FF 01 00  // .v.f+.f.F.f=....
    2700: 76 06 66 B8 00 FF 01 00 66 3B C8 73 AE 66 8B C1  // v.f.....f;.s.f..
    2710: EB A9 83 C4 10 C3 83 EC 08 8B EC 89 4E 00 66 89  // ............N.f.
    2720: 56 02 89 5E 06 8C D0 66 C1 E0 10 8B C4 BB 2D 00  // V..^...f......-.
    2730: E8 83 06 83 C4 08 C3 3D C0 7F 76 04 B8 C0 7F C3  // .......=..v.....
    2740: 83 C0 3F 24 C0 C3 51 E8 DE 0A 66 33 D2 B9 0A 00  // ..?$..Q...f3....
    2750: F7 F1 8B C8 E8 D1 0A 03 C1 66 25 FF FF 00 00 59  // .........f%....Y
    2760: 3D 10 27 73 03 B8 10 27 C3 32 D2 C3 80 FD 02 75  // =.'s...'.2.....u
    2770: 19 E8 9D EC 66 BB 00 08 00 00 E8 8E 00 66 33 D2  // ....f........f3.
    2780: 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75 10 66  // f............u.f
    2790: 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB 36 51  // 3...f3.f......6Q
    27A0: 33 D2 E8 62 EB 8A D5 66 C1 E2 10 E8 93 EB 8A F2  // 3..b...f........
    27B0: 8A D1 66 8B C2 66 0D 00 00 00 80 E8 CE EB 80 FB  // ..f..f..........
    27C0: 04 76 06 66 0D 00 00 00 08 E8 02 EC E8 52 EB 66  // .v.f.........R.f
    27D0: 33 DB 8A D9 59 83 EC 14 8B EC 66 89 46 04 66 89  // 3...Y.....f.F.f.
    27E0: 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00 66 F7  // ^.f..f3.f.d...f.
    27F0: E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10 8B C4  // .f.F......f.....
    2800: E8 B3 05 8B EC B3 01 83 C4 14 C3 83 EC 10 8B EC  // ................
    2810: 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66 C1 E0  // f.V.f.^......f..
    2820: 10 8B C4 E8 90 05 B3 01 83 C4 10 C3 C3 53 51 66  // .............SQf
    2830: 50 B9 A0 8C 80 FB 00 75 1C B9 90 7E E8 0E 05 83  // P......u...~....
    2840: E3 03 80 FB 03 75 0E E8 E4 05 66 3D 50 C3 00 00  // .....u....f=P...
    2850: 72 03 B9 F0 D2 66 33 D2 8B D1 66 58 59 5B C3 66  // r....f3...fXY[.f
    2860: 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13 74  // R..f......u....t
    2870: 0E 80 FD 14 74 09 B3 01 80 FD 0E 74 02 B3 02 66  // ....t......t...f
    2880: 5A C3 B5 11 80 FA 23 74 07 80 FA 22 74 02 B5 00  // Z.....#t..."t...
    2890: C3 B5 02 C3 B1 01 80 FD 00 75 06 C7 46 00 0B 01  // .........u..F...
    28A0: C3 50 33 C0 E8 79 01 04 14 89 46 00 58 C3 C3 C3  // .P3..y....F.X...
    28B0: 0C 01 C3 E8 72 09 66 C1 E8 10 0B C0 74 1A 53 83  // ....r.f.....t.S.
    28C0: C3 06 E8 63 09 5B 3D E0 01 72 0D 53 83 C3 18 E8  // ...c.[=..r.S....
    28D0: 56 09 5B A9 10 00 74 03 32 C0 C3 0C 01 C3 B5 0C  // V.[...t.2.......
    28E0: C3 32 ED B5 02 C3 57 E8 01 01 8B 4D 06 5F C3 80  // .2....W....M._..
    28F0: FA 22 75 05 C7 46 00 78 69 C3 C3 E8 04 01 80 FD  // ."u..F.xi.......
    2900: FF 74 35 83 EC 0C 8B EC 88 4E 01 88 6E 00 80 F9  // .t5......N..n...
    2910: 0F 75 05 E8 24 00 EB 0F 80 F9 10 75 0A 8D 9C 48  // .u..$......u...H
    2920: 03 E8 04 09 88 46 02 8C D0 66 C1 E0 10 8B C4 BB  // .....F...f......
    2930: 04 00 E8 81 04 83 C4 0C C3 C3 66 53 E8 2D EA 66  // ..........fS.-.f
    2940: 8B C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B  // ..f3.f.....f..f[
    2950: 8A E8 88 6E 09 8D 9C 40 03 E8 CC 08 88 46 02 88  // ...n...@.....F..
    2960: 66 03 66 C1 E8 10 88 46 08 E8 EF E9 66 89 56 04  // f.f....F....f.V.
    2970: C3 80 F9 04 74 03 E8 C8 E9 83 EC 10 8B EC 80 F9  // ....t...........
    2980: 04 75 0A 88 4E 01 32 C0 88 46 00 EB 4C E8 90 00  // .u..N.2..F..L...
    2990: 88 46 00 88 4E 01 E8 28 EA 88 56 0A 80 F9 01 74  // .F..N..(..V....t
    29A0: 11 80 F9 0B 75 33 8D 9C 5C 03 E8 7B 08 88 46 02  // ....u3..\..{..F.
    29B0: EB 27 E8 C8 E9 88 6E 08 E8 A0 E9 66 89 56 04 E8  // .'....n....f.V..
    29C0: CA E9 88 5E 03 E8 3F E9 88 6E 02 51 E8 33 00 8A  // ...^..?..n.Q.3..
    29D0: CD B0 01 D2 E0 59 88 46 09 8C D0 66 C1 E0 10 8B  // .....Y.F...f....
    29E0: C4 BB 4C 00 E8 CF 03 83 C4 10 C3 E8 AC 03 03 7D  // ..L............}
    29F0: 04 83 3D FF 74 0B 3B 15 74 05 83 C7 0A EB F2 0B  // ..=.t.;.t.......
    2A00: FF C3 8D 9C 3C 03 E8 1F 08 32 ED 3C 03 74 0C 3C  // ....<....2.<.t.<
    2A10: 09 72 09 3C 0E 77 05 2C 08 8A E8 C3 B5 FF C3 C3  // .r.<.w.,........
    2A20: 52 32 C0 80 EE 21 80 FA 1E 74 10 B0 02 80 FA 20  // R2...!...t..... 
    2A30: 74 09 B0 04 80 FA 21 74 02 B0 06 02 C6 5A C3 83  // t.....!t.....Z..
    2A40: EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06  // .....~..^..V..N.
    2A50: 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 58 03 8B EC  // ..f......6..X...
    2A60: 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2  // .^..~.....V3.f..
    2A70: 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58  // ....u.P3.....2.X
    2A80: 53 BB 04 3E E8 01 07 66 8B C2 BB 00 3E E8 F8 06  // S..>...f....>...
    2A90: 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1  // [f......u.3...f.
    2AA0: E2 10 BA 00 3E 83 EC 08 8B EC 66 89 56 00 88 4E  // ....>.....f.V..N
    2AB0: 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00  // ......F..F...F..
    2AC0: 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 E8 02 8B EC  // ..f......N......
    2AD0: 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90  // .^..~......t2Q..
    2AE0: 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6  // ... t....u......
    2AF0: 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 B2  // ..t....<.t......
    2B00: 03 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E  // .Y.........v...^
    2B10: C3 8D 5C 04 E8 11 07 8B D0 B5 02 E8 14 00 74 11  // ..\...........t.
    2B20: B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5  // .....u..a....u..
    2B30: 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80  // .........t......
    2B40: FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74  // ......t........t
    2B50: 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04  // ........u.......
    2B60: 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3  // u..........t....
    2B70: 8D 5C 09 E8 B2 06 8A C8 0A C9 75 03 32 C0 C3 B5  // .\........u.2...
    2B80: 02 E8 B4 02 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 97  // ......$.....\...
    2B90: 06 8A D0 B6 01 83 EC 08 8B EC 89 56 02 8C D0 66  // ...........V...f
    2BA0: C1 E0 10 8B C4 BB 4F 00 E8 0B 02 8B EC 8A 56 04  // ......O.......V.
    2BB0: 83 C4 08 C3 53 81 C3 C9 05 E8 3A 06 5B C3 53 81  // ....S.....:.[.S.
    2BC0: C3 C9 05 E8 8B 05 5B C3 66 53 81 C3 00 10 E8 25  // ......[.fS.....%
    2BD0: 06 66 5B C3 57 E8 82 01 8A 45 2D B4 FF F7 45 50  // .f[.W....E-...EP
    2BE0: 20 00 5F C3 50 56 0F BC D8 8D 36 8B 2B E8 63 03  //  ._.PV....6.+.c.
    2BF0: 5E 58 C3 00 20 00 24 00 00 00 28 00 2C 00 30 00  // ^X.. .$...(.,.0.
    2C00: 34 00 38 00 00 00 3C 00 40 00 44 53 56 51 8B F7  // 4.8...<.@.DSVQ..
    2C10: B3 00 E8 30 00 0B F6 74 16 49 0B C9 75 04 33 FF  // ...0...t.I..u.3.
    2C20: EB 0D 8B DF 03 7D 02 3B F3 74 04 E2 F5 33 FF 0B  // .....}.;.t...3..
    2C30: FF 59 5E 5B C3 0E 00 00 00 0A 00 06 00 08 00 0C  // .Y^[............
    2C40: 00 0E 00 10 00 56 8D 36 CD 2B E8 06 03 E8 13 01  // .....V.6.+......
    2C50: 03 DE 8B 3F 0B FF 74 0B 03 FE 33 C9 8A 0D 83 C7  // ...?..t...3.....
    2C60: 04 0B FF 5E C3 51 56 53 C1 EB 0C E8 D7 FF 5B 75  // ...^.QVS......[u
    2C70: 04 33 FF EB 0B 3B 1D 74 07 83 C7 08 E2 F7 33 FF  // .3...;.t......3.
    2C80: 0B FF 5E 59 C3 57 E8 DC FF 75 04 33 DB 5F C3 E8  // ..^Y.W...u.3._..
    2C90: 02 00 5F C3 52 51 8B 5D 04 0B DB 74 1B 56 E8 C2  // .._.RQ.]...t.V..
    2CA0: 00 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07  // ...^3..O..?.t.:.
    2CB0: 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 50 8D 1C  // t.....3...YZ.P..
    2CC0: E8 C5 04 8B D8 E8 72 00 23 C3 74 6C 33 FF E8 3A  // ......r.#.tl3..:
    2CD0: FF 0B FF 74 63 39 05 75 F5 66 33 C0 8B 45 08 8B  // ...tc9.u.f3..E..
    2CE0: 4D 02 83 F9 0A 74 18 8B 4D 0A 8B D1 81 E2 00 70  // M....t..M......p
    2CF0: 80 FE 20 75 0A 66 C1 C8 10 8B C1 66 C1 C8 10 8D  // .. u.f.....f....
    2D00: 5C 0C E8 83 04 66 33 C0 8B 45 04 8D 5C 04 E8 77  // \....f3..E..\..w
    2D10: 04 33 C9 8B D8 50 B0 01 E8 6A FF 58 74 0F 8A 4F  // .3...P...j.Xt..O
    2D20: 02 8B D8 B0 02 E8 5D FF 74 03 8A 6F 02 8D 5C 08  // ......].t..o..\.
    2D30: 66 33 C0 8B C1 E8 50 04 58 C3 56 E8 25 00 8B 44  // f3....P.X.V.%..D
    2D40: 04 5E C3 56 E8 1C 00 89 44 04 5E C3 C3 8B DA B0  // .^.V....D.^.....
    2D50: 14 E8 31 FF 74 03 8B 5F 02 C3 BF 52 02 8B 3D 8B  // ..1.t.._...R..=.
    2D60: 7D 0C C3 BE 52 02 8B 34 8B 74 30 C3 1E 0E 1F BF  // }...R..4.t0.....
    2D70: 52 02 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE 52 02 8B  // R..=.}.......R..
    2D80: 34 8B 74 10 C3 BF 52 02 8B 3D 8B 7D 26 83 C7 04  // 4.t...R..=.}&...
    2D90: C3 BE 52 02 8B 34 8B 74 1A C3 BF 52 02 8B 3D 8B  // ..R..4.t...R..=.
    2DA0: 7D 3A C3 BF 52 02 8B 3D 8B 7D 0A 83 C7 04 B9 08  // }:..R..=.}......
    2DB0: 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33  // ............F.f3
    2DC0: C0 C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 7F  // ..F...F..R......
    2DD0: 16 5A 07 83 C4 06 C3 E8 80 FF F7 45 50 01 00 C3  // .Z.........EP...
    2DE0: E8 77 FF 83 4D 50 01 C3 E8 6F FF 88 45 58 C3 66  // .w..MP...o..EX.f
    2DF0: 53 83 EC 28 8B EC 66 89 5E 00 66 89 4E 04 8C D0  // S..(..f.^.f.N...
    2E00: 66 C1 E0 10 8B C4 BB 00 00 E8 AA FF 83 C4 28 66  // f.............(f
    2E10: 5B E8 48 01 BB 04 00 E8 9A FD 66 C1 E8 10 E8 C7  // [.H.......f.....
    2E20: FF C3 E8 35 FF 66 8B 5D 08 66 8B 4D 0C C3 57 E8  // ...5.f.].f.M..W.
    2E30: 28 FF 66 8B 45 28 5F C3 83 EC 04 8B EC 89 4E 00  // (.f.E(_.......N.
    2E40: 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8 68 FF 8B EC  // ..f......8..h...
    2E50: 8A 6E 02 83 C4 04 C3 C3 B0 06 C3 B0 02 C3 B0 06  // .n..............
    2E60: C3 B0 08 C3 E8 F3 FE 8B 45 56 0B C0 C3 53 66 50  // ........EV...SfP
    2E70: 66 33 C0 E8 12 03 83 C3 04 E2 F8 66 58 5B C3 32  // f3.........fX[.2
    2E80: C0 C3 FC E8 A2 03 66 C1 CB 10 E8 FB 02 66 C1 CB  // ......f......f..
    2E90: 10 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 E7  // .f..........f...
    2EA0: 02 83 C3 04 E2 F6 C3 FC E8 7D 03 66 AB 83 C3 04  // .........}.f....
    2EB0: E2 F6 C3 66 50 B8 19 00 E8 10 00 66 58 C3 66 50  // ...fP......fX.fP
    2EC0: B8 D4 30 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA  // ..0.....fX.R....
    2ED0: E8 63 01 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 04  // .c.fS..f.....f..
    2EE0: B1 03 00 B2 00 66 EF B2 04 66 33 C0 66 EF 66 B8  // .....f...f3.f.f.
    2EF0: 08 B1 03 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03  // ......f...f.3.f.
    2F00: D8 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66  // .s.f.f.....u.f.f
    2F10: 3B C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED  // ;.s.f...;.r.....
    2F20: 66 5B 5A C3 BB 42 EC E8 CC 02 66 33 D2 66 BB 19  // f[Z..B....f3.f..
    2F30: 00 00 00 66 F7 F3 C3 66 50 53 BB 07 00 E8 74 FC  // ...f...fPS....t.
    2F40: 25 00 02 35 00 02 0B C0 5B 66 58 C3 BB 0A 15 E8  // %..5....[fX.....
    2F50: A4 02 C3 32 FF D1 E3 03 F3 8B 1C C3 E8 ED FF 66  // ...2...........f
    2F60: C1 E0 0A 66 83 E8 20 E8 27 FE 66 89 44 04 C7 44  // ...f.. .'.f.D..D
    2F70: 08 20 00 C3 56 1E 0E 1F E8 16 FE 66 8B 44 04 66  // . ..V......f.D.f
    2F80: C1 E0 0A 1F 5E C3 C3 56 E8 F1 FD 8B 4C 22 8A 44  // ....^..V....L".D
    2F90: 29 5E C3 BE 52 02 8B 34 8B 74 1E 83 C6 04 B9 1C  // )^..R..4.t......
    2FA0: 00 C3 33 FF C3 56 E8 D3 FD 8A 6C 28 80 E5 70 C0  // ..3..V....l(..p.
    2FB0: ED 04 5E C3 56 E8 C4 FD 53 81 C3 09 01 E8 68 02  // ..^.V...S.....h.
    2FC0: 8A E8 5B 53 81 C3 00 01 E8 5D 02 5B 8A C5 66 89  // ..[S.....].[..f.
    2FD0: 44 3C 5E C3 56 E8 A4 FD 66 8B 44 3C 53 81 C3 00  // D<^.V...f.D<S...
    2FE0: 01 E8 A4 01 5B 53 81 C3 08 01 B1 01 8A E8 E8 DB  // ....[S..........
    2FF0: 01 5B 5E C3 56 E8 84 FD 8B FE 83 C7 04 5E C3 56  // .[^.V........^.V
    3000: E8 79 FD 8A 44 28 80 FD 00 74 0E 24 8F C0 E5 04  // .y..D(...t.$....
    3010: 0A C5 80 FD 20 75 02 0C 02 24 FE 81 7C 04 34 21  // .... u...$..|.4!
    3020: 76 02 0C 01 88 44 28 E8 08 FB 75 04 80 4C 30 01  // v....D(...u..L0.
    3030: 5E C3 32 C0 C3 00 66 50 8C C8 3D 00 C0 75 10 BA  // ^.2...fP..=..u..
    3040: C3 03 EC 8A F0 0A F6 74 06 B2 4C 66 ED EB 17 53  // .......t..Lf...S
    3050: 2E 8B 1E 46 02 B2 20 E8 DD 00 A8 01 75 05 B2 14  // ...F.. .....u...
    3060: E8 D4 00 8A F4 5B 32 D2 66 58 C3 2E 8B 1E 46 02  // .....[2.fX....F.
    3070: C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B  // ...u.Kt.C;.w....
    3080: C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B  // .+..........+..;
    3090: CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B  // .r.u.;.w.+...+.+
    30A0: D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B  // .....+.+.....UV+
    30B0: F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04  // .......r.E;.r.w.
    30C0: 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3  // ;.v....Mx ....+.
    30D0: 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3  // ...r...Mx.......
    30E0: 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6  // ..s.............
    30F0: 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B  // 3.^]..P...t.....
    3100: C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50  // .t.....X.....RfP
    3110: B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8  // ....f.......$...
    3120: 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52  // .f.fXZ.R...f.Z.R
    3130: BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8  // ...f.Z..1.......
    3140: E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D  // .....$..........
    3150: C3 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66  // .RfSfP...fXf[Z.f
    3160: C1 E3 10 66 C1 EB 0E E8 CC FE E8 71 01 C3 66 50  // ...f.......q..fP
    3170: 66 C1 E3 10 66 C1 EB 10 E8 F9 FD 66 03 D8 66 81  // f...f......f..f.
    3180: CB 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B  // .....fX.RfS...f[
    3190: 5A C3 66 50 E8 9F FE E8 D4 FF E8 41 01 66 58 C3  // Z.fP.......A.fX.
    31A0: 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1  // RQfSfP..........
    31B0: 03 E8 82 FE E8 B7 FF E8 0B 01 66 D3 C8 58 50 66  // ..........f..XPf
    31C0: D3 C0 E8 19 01 66 58 66 5B 59 5A C3 66 50 51 C0  // .....fXf[YZ.fPQ.
    31D0: E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF  // ...S.f....f.....
    31E0: 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8  // YfX.fPQ....;.f..
    31F0: 59 8A E8 66 58 C3 E8 5F 00 C3 E8 39 FE 66 C1 E3  // Y..fX.._...9.f..
    3200: 10 66 C1 EB 0E E8 BD 00 C3 E8 2A FE 66 C1 E3 02  // .f........*.f...
    3210: E8 B2 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8 15  // ....RfS...f[Z...
    3220: FE E8 4A FF E8 9E 00 C3 51 66 52 8A EB 8A CB 80  // ..J.....QfR.....
    3230: E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74 14  // ..............t.
    3240: 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66 0F  // f...........f.f.
    3250: AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66 5B  // ....fZY.RfS...f[
    3260: 5A C3 52 E8 A3 FF 5A C3 66 50 55 52 66 50 8B EC  // Z.R...Z.fPURfP..
    3270: 8B 56 0C 89 56 08 E8 BD FD 2E A1 9D 02 B2 18 EF  // .V..V...........
    3280: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    3290: 52 8B EC E8 A0 FD B2 00 66 8B 46 0A 66 EF 8B 56  // R.......f.F.f..V
    32A0: 08 89 56 0C 66 8B 46 04 66 89 46 08 5A 5D 66 58  // ..V.f.F.f.F.Z]fX
    32B0: 66 58 C3 66 50 52 E8 7D FD B2 18 66 ED 2E A3 9D  // fX.fPR.}...f....
    32C0: 02 5A 66 58 C3 66 81 FB FF 00 00 00 77 04 8A D3  // .ZfX.f......w...
    32D0: EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66 81  // ..f....f...f..f.
    32E0: FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00 66  // .....w.....f...f
    32F0: EF 66 93 B2 04 66 EF C3 C3 C3 C3 C3 C3 C3 C3 C3  // .f...f..........
    3300: C3 C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C  // ..U..SQ..&.\.&.L
    3310: 16 E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26  // ..(..f.Y[].SQ..&
    3320: 8B 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51  // .\$3....Y[.U..SQ
    3330: 8B F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8  // ..&.\.&.L...RVW.
    3340: 06 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26  // ......N.....&.|&
    3350: 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3  // .E.2.. .+.......
    3360: 06 D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06  // ........M.2.....
    3370: D1 E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21  // ..........&!D.&!
    3380: 7C 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8  // |.....&.|&.M.2..
    3390: 20 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08  //  .+...f.F.......
    33A0: D1 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B  // .n..^....M.2....
    33B0: 56 FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC  // V.........#F.#V.
    33C0: 8A 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44  // .M.2.........&.D
    33D0: 1C 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52  // .&.T.._^Z.U..SQR
    33E0: 57 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00  // WP..&..&.E.2.. .
    33F0: 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A  // +...............
    3400: 4D 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06  // M..N..F.....N...
    3410: D1 E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66  // ......&.G.&....f
    3420: F8 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0  // ._Z...SQRW......
    3430: 26 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8  // &.w&.L.2.. .+...
    3440: BE FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F  // .............&..
    3450: 26 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA  // &.M.2...........
    3460: F7 D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05  // ....&!G.&!W._...
    3470: 53 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74  // SV......&.w&.<.t
    3480: 73 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00  // s.<.uX.D.2.&....
    3490: 75 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 4C  // uL&;G.uF..k....L
    34A0: 95 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09  // .&.G&....&.w&.<.
    34B0: 74 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 4A 95 26  // t...2.k......J.&
    34C0: 8B 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26  // .w&..2....D.&)G&
    34D0: 26 FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B  // &.G&&.G.&.w...&.
    34E0: 77 26 8A 04 32 E4 6B F0 03 8A 84 4C 95 26 01 47  // w&..2.k....L.&.G
    34F0: 26 E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52  // &...3.3...^[.SQR
    3500: 56 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7  // V...w5&.T.&.W.&.
    3510: 47 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14  // G.....&.G 3.&.G.
    3520: 26 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A  // &.T.....&.G/....
    3530: 05 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14  // .&..4.u"&.w.&.w.
    3540: 75 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1  // u.&.g.&.W.&.g.&.
    3550: 57 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4  // W....y....&.G42.
    3560: 05 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF  // ....&.G.&.W.....
    3570: FE E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ....SV...w5&.D.2
    3580: E4 C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08  // ....&.7&.4..&.G.
    3590: 26 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52  // &._.&..&.\.^[.SR
    35A0: 56 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA  // V.....w5..&.T...
    35B0: 40 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04  // @s!&.w.2....&.t.
    35C0: 03 F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44  // ..&.W.&.G.&..&.D
    35D0: 02 E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57  // ......Au.&.G.&.W
    35E0: 0A 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12  // .&.G.&.W..h..@u.
    35F0: 26 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E  // &.G.&.W.&.G.&.W.
    3600: EB 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB  // .Q..Bu.&.G.&.G".
    3610: 42 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33  // B..Cu.&.G.&.G3.3
    3620: 80 FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57  // ..Fu.&.W.&.G.&.W
    3630: 18 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08  // .&.G.....Gu.&.G.
    3640: 26 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26  // &.G$....Hu.&.G.&
    3650: 89 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A  // .G ^Z[.SV...w5&.
    3660: 44 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B  // D.2.&.G.&.G...^[
    3670: C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32  // .SV..&.w.&.t...2
    3680: E4 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26  // .&.G.&.G...&._.&
    3690: FF 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B  // .G.^[.SV..&.w.&.
    36A0: 74 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B  // t..4&.w.&.G...&.
    36B0: 5F 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B  // _.&.G..^[.SV..&.
    36C0: 77 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26  // w.&.t....t.&.G.&
    36D0: 89 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53  // .w.&._.&.G..^[.S
    36E0: 52 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57  // RV...p...&.G.&.W
    36F0: 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54  // .........&.G.&.T
    3700: 16 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02  // ....+..J.S..&._.
    3710: 26 FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47  // &.G.[.S..&._.&.G
    3720: 02 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57  // ..[.SV...k...&.W
    3730: 20 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26  //  3.&.W.&.D.....&
    3740: 8B 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33  // .G.2....=..u.2.3
    3750: D2 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04  // .^[.&.G.2....=..
    3760: 74 EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B  // t.&..4.u..../.^[
    3770: C3 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00  // .&.G42.&.G.&.G..
    3780: 00 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26  // ......^[.S.....&
    3790: 8B 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B  // .G....&..&....&.
    37A0: 07 26 8B 57 02 5B C3 AD 37 A2 37 B8 37 07 38 BE  // .&.W.[..7.7.7.8.
    37B0: 37 D6 37 F0 37 FB 37 01 38 53 51 56 8B D8 E8 B0  // 7.7.7.7.8SQV....
    37C0: FE 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14  // .....&....u"&...
    37D0: 40 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B  // @s.&.w.&._....&.
    37E0: 44 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B  // D...&..&.W..{.&.
    37F0: 77 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE  // w.&.G.......uq..
    3800: 08 77 6C 03 F6 2E FF A4 3F 37 26 8B 47 10 26 8B  // .wl.....?7&.G.&.
    3810: 57 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05  // W..T.&.G.&.W..I.
    3820: 26 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33  // &.G".K&.O32....3
    3830: D2 E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A  // ............+.&.
    3840: 4F 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2  // O32....3........
    3850: FA F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A  // ........&.G.&.W.
    3860: E9 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33  // ...&.G$..&.G ..3
    3870: C0 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26  // .3....SV.......&
    3880: 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26  // .G.&.W.........&
    3890: 01 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33  // .G.&.T......^[.3
    38A0: C0 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26  // .3..SV.....&.w.&
    38B0: 03 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6  // .w"...T.^[.S..&.
    38C0: 47 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3  // G+....&.G.&.W.[.
    38D0: 53 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8  // S..&.G+......S..
    38E0: 26 C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35  // &.G+......S....5
    38F0: 26 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97  // &._.......2.....
    3900: DA 94 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B  // ..[.SRV..&.G,2..
    3910: F0 03 F0 8B C3 FF 94 F6 94 26 89 47 08 26 89 57  // .........&.G.&.W
    3920: 0A 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 0E  // .&.G-2..........
    3930: 95 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B  // .&.G.&.W....SQV.
    3940: D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 3E 95 E3 0A 26  // .&.O+2.....>...&
    3950: D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    3960: F1 C1 E6 02 8B 8C 1E 95 8B B4 20 95 26 21 4F 04  // .......... .&!O.
    3970: 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 46 95  // &!w.&.O*2.....F.
    3980: E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08  // ..&.g.&.W...&.O.
    3990: 26 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53  // &.w.&.O.&.w....S
    39A0: 51 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4  // QRVW......&.G+2.
    39B0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 46 95 32  // .....&.G*....F.2
    39C0: ED 8B 84 1E 95 8B 94 20 95 E3 06 D1 E0 D1 D2 E2  // ....... ........
    39D0: FA F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47  // .....&!G.&!W.&.G
    39E0: 2A 32 E4 8B F0 8A 8C 46 95 32 ED E3 0A 26 D1 6F  // *2.....F.2...&.o
    39F0: 0A 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02  // .&._...&.G+.....
    3A00: 8B 84 1E 95 8B 94 20 95 26 21 47 08 26 21 57 0A  // ...... .&!G.&!W.
    3A10: 26 8A 47 2A 32 E4 8B F0 8A 8C 46 95 32 ED E3 0A  // &.G*2.....F.2...
    3A20: 26 D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    3A30: 57 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3  // W.&.G.&.W._^ZY[.
    3A40: 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 3E  // SQV..&.O+2.....>
    3A50: 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    3A60: 2B 32 ED 8B F1 C1 E6 02 8B 8C 1E 95 8B B4 20 95  // +2............ .
    3A70: 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1  // &!O.&!w.&.O*2...
    3A80: 8A 8C 46 95 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..F...&.o.&._...
    3A90: 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 1E 95 8B  // &.O+2...........
    3AA0: B4 20 95 26 21 4F 08 26 21 77 0A E9 BB 02 51 52  // . .&!O.&!w....QR
    3AB0: 57 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A  // W......&..+.t.&.
    3AC0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 94 26 89  // G,2...........&.
    3AD0: 47 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0  // G.&.W...&.G,2...
    3AE0: 03 F0 8B C3 FF 94 02 95 26 8A 47 2D 32 E4 8B F0  // ........&.G-2...
    3AF0: 03 F0 8B C3 FF 94 0E 95 26 89 47 04 26 89 57 06  // ........&.G.&.W.
    3B00: 8C D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32  // ....&..+.tJ&.G+2
    3B10: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 46 95  // ......&.G*....F.
    3B20: 32 ED 8B 84 1E 95 8B 94 20 95 E3 06 D1 E0 D1 D2  // 2....... .......
    3B30: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3  // ......&!G.&!W...
    3B40: E8 F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26  // ...&.G.&.W.&.G.&
    3B50: 09 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57  // .W...&.W.&.G.&.W
    3B60: 08 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&.G.&.G,2......
    3B70: C3 FF 94 EA 94 5F 5A 59 C3 53 51 52 56 57 8B D8  // ....._ZY.SQRVW..
    3B80: 26 8A 47 2A 32 E4 8B F0 8A 8C 46 95 32 ED E3 0A  // &.G*2.....F.2...
    3B90: 26 D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A  // &.g.&.W.......&.
    3BA0: 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A  // G+2......&.G*...
    3BB0: 8D 46 95 32 ED 8B 84 1E 95 8B 94 20 95 E3 06 D1  // .F.2....... ....
    3BC0: E0 D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57  // .........&.G.&.W
    3BD0: 06 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57  // .&.G.&.W.&!G.&!W
    3BE0: 0A E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C  // ..V.U..QRP..&.G,
    3BF0: 32 E4 8B F0 03 F0 8B C3 FF 94 F6 94 26 89 47 08  // 2...........&.G.
    3C00: 26 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC  // &.W.&.G+.F......
    3C10: 26 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1  // &.G.&.W.&.O-2...
    3C20: 03 F1 8B C3 FF 94 0E 95 26 89 47 14 26 89 57 16  // ........&.G.&.W.
    3C30: 8B C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 3E 95  // ...D..F.2.....>.
    3C40: E3 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B  // ..&.o.&._...&.W+
    3C50: 32 F6 8B F2 C1 E6 02 8B 84 1E 95 8B 94 20 95 26  // 2............ .&
    3C60: 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A  // !G.&!W.&.G*2....
    3C70: 8C 46 95 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2  // .F.2...&.g.&.W..
    3C80: F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57  // .&.G.&.W.&.G.&.W
    3C90: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EA  // .&.G,2..........
    3CA0: 94 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A  // ..f.ZY].Q...V.&.
    3CB0: 4F 2B 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1 6F 06  // O+2.....>...&.o.
    3CC0: 26 D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32  // &._........&.O,2
    3CD0: ED 8B F1 03 F1 8B C3 FF 94 EA 94 59 C3 8B D8 E8  // ...........Y....
    3CE0: 22 FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26  // "....U.&.G.&.w.&
    3CF0: 09 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03  // .G.&.w.&.G,2....
    3D00: F0 8B C3 FF 94 EA 94 C3 53 56 8B D8 E8 F5 FB 8B  // ........SV......
    3D10: C3 E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08  // ..(.&.G.&.w.&1G.
    3D20: 26 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &1w.&.G,2.......
    3D30: FF 94 EA 94 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B  // ....^[.SQV......
    3D40: C3 E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1  // ....&.O...&.g.&.
    3D50: 57 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B  // W......F.&.O,2..
    3D60: F1 03 F1 8B C3 FF 94 EA 94 5E 59 5B C3 53 51 56  // .........^Y[.SQV
    3D70: 8B D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A  // ..........&.O...
    3D80: 26 D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8  // &.o.&._.....R...
    3D90: 72 FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57  // r........&.G.&.W
    3DA0: 06 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A  // .&.G.&.T......&.
    3DB0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EA 94 5A C3  // G,2...........Z.
    3DC0: 52 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47  // R...>....q...&.G
    3DD0: 04 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51  // .&.W.&)G.&.T...Q
    3DE0: 52 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26  // R........U.&.D.&
    3DF0: 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 F7 F2 26 89  // .T.&.\.&.L....&.
    3E00: 44 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B  // D.&.T.ZY.R......
    3E10: C2 E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0  // ..,....\.Z.QRW..
    3E20: E8 E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A  // ........&.D.&.T.
    3E30: 26 8B 5C 04 26 8B 4C 06 E8 36 F2 26 89 44 0C 26  // &.\.&.L..6.&.D.&
    3E40: 89 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26  // .T.....&.D.&.T.&
    3E50: 8B 5C 04 26 8B 4C 06 E8 17 F2 26 89 5C 10 26 89  // .\.&.L....&.\.&.
    3E60: 4C 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB  // L....R..........
    3E70: 8B C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3  // .....Z.QR.......
    3E80: E8 BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26  // .......&.G.&.W.&
    3E90: 3B 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01  // ;W.u.&;G.u.&.G0.
    3EA0: 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75  // ZY...&.G.&;G.r.u
    3EB0: 0A 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88  // .&;W.s.3......&.
    3EC0: 47 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4  // G0ZY.QRW..&.G,2.
    3ED0: 8B F0 03 F0 8B C3 FF 94 F6 94 26 89 47 08 26 89  // ..........&.G.&.
    3EE0: 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6  // W.....&.G+2.....
    3EF0: 02 8B F8 8A 8D 3E 95 32 ED 8B 84 1E 95 8B 94 20  // .....>.2....... 
    3F00: 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3F10: 08 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC  // .&!W..M.U..QRW..
    3F20: 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    3F30: 8A 8D 3E 95 32 ED 8B 84 1E 95 89 46 F4 8B 84 20  // ..>.2......F... 
    3F40: 95 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E  // ..F....f..V....~
    3F50: F4 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03  // ..F..F.&.G,2....
    3F60: F0 8B C3 FF 94 F6 94 26 89 47 08 26 89 57 0A 8B  // .......&.G.&.W..
    3F70: C3 E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0  // ..G.&.G.&.W.....
    3F80: 8B 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47  // .V...&#G.&#W.&.G
    3F90: 14 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A  // .&.W.&!...F.&!G.
    3FA0: 8C D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F  // ...w5..&.<.s.&.O
    3FB0: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26  // ...&.g.&.W.....&
    3FC0: 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .O...&.o.&._...&
    3FD0: 21 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B  // !...F.&!G.&.W.&.
    3FE0: 47 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4  // G.&.W.&.G.&.G,2.
    3FF0: 8B F0 03 F0 8B C3 FF 94 EA 94 8D 66 FA 5F E9 A3  // ...........f._..
    4000: FC 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08  // .R........4.&.G.
    4010: 26 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05  // &.W.&.W.u.&.G.t.
    4020: B8 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51  // ........&.G0Z.SQ
    4030: 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94  // RV..&.O-2.......
    4040: 0E 95 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4  // ..&.G.&.W.&.G+2.
    4050: 8B F0 8A 8C 3E 95 E3 0A 26 D1 6F 06 26 D1 5F 04  // ....>...&.o.&._.
    4060: E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 1E 95 8B  // ..&.G+..........
    4070: 94 20 95 26 21 47 04 26 21 57 06 E9 BD F9 52 8B  // . .&!G.&!W....R.
    4080: D8 E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18  // ....&.G.&.W.&.G.
    4090: 26 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E  // &.W.Z.QR........
    40A0: C0 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26  // .&.w.&.t..<ZZt[&
    40B0: 8B 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02  // .w.&.t..<cu.&.w.
    40C0: 26 FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57  // &.D....!.&.G.&.W
    40D0: 0A 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1  // ......&.G.&.W...
    40E0: 8E C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD  // ..&.W.&.G.&;G.u.
    40F0: 26 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47  // &;W.u.&.w.&..&.G
    4100: 14 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83  // ...&.G.ZY.&._.&.
    4110: 47 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B  // G..ZY.RW......&.
    4120: 77 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47  // w.&.t..T...u.&.G
    4130: 22 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B  // ".../...u.&.w.&.
    4140: 3F 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B  // ?&.4&+u.&.w"..&.
    4150: 07 E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04  // ........2.......
    4160: 26 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3  // &.G"&._.&.G.._Z.
    4170: 8B D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A  // ..&.g/.&.w.&.t..
    4180: 44 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3  // D.&.G4&._.&.G...
    4190: 8B D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77  // ..&.w.&.t..t.&.w
    41A0: 20 EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80  //  ..S..&.G,2.$.&.
    41B0: 67 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26  // g/....&.G..O...&
    41C0: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  // .w.&.t..D.2.&.G.
    41D0: 26 C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26  // &.G......@.&._.&
    41E0: 83 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A  // .G.....&.w.&.t..
    41F0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
    4200: E8 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    4210: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    4220: 8B C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02  // ........SV..&.w.
    4230: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    4240: 06 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26  // .........c.SV..&
    4250: 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26  // .w...&._.._....&
    4260: 01 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83  // .\.^[.QR..&.w.&.
    4270: 44 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A  // D..&.......&.w(.
    4280: 44 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26  // D.2........<.tO&
    4290: 8B 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47  // .w(.T.2......&.G
    42A0: 31 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4  // 1&.w.&.4.D....2.
    42B0: 24 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0  // $....2.$.&.g/...
    42C0: 0B 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1  // .&.G.&.7&.G.....
    42D0: E0 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59  // ..&..&.G2.&.O(ZY
    42E0: C3 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6  // .S..&.G2.[.W....
    42F0: 8E C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47  // ..&..,.t.&.G,&:G
    4300: 30 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // 0u.&.w.&.t.&...&
    4310: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    4320: C3 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B  // .&._.&.G.._.SVW.
    4330: D8 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30  // .....&..0.t.&.G0
    4340: 26 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B  // &:G,u &.w.&.t.&.
    4350: 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89  // ..&.=.t...&._.&.
    4360: 77 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB  // w._^[.&._.&.G...
    4370: F1 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74  // .SVW......&..0.t
    4380: E5 EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02  // ...U..SQRW..&.w.
    4390: 26 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26  // &.t...&.G=.....&
    43A0: 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6  // ..=.s &.w.&.W=2.
    43B0: 26 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35  // &.|.........&.T5
    43C0: 26 FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2  // &.G=..&.....2...
    43D0: C1 E6 02 8A 94 6B 95 26 01 55 02 26 8B 7F 28 8A  // .....k.&.U.&..(.
    43E0: 55 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01  // U....&.W-&..(.U.
    43F0: C0 EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55  // ......&.W+&..(.U
    4400: 01 C0 EA 06 26 88 57 2A 8A 94 6A 95 26 88 57 2C  // ....&.W*..j.&.W,
    4410: 8D 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77  // .f._ZY[].SV..&.w
    4420: 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03  // ....tH.....t....
    4430: C3 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B  // ....^[.SV..&.w..
    4440: C6 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3  // ..tH.....t .....
    4450: 16 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46  // ..U..SQVW..@...F
    4460: B8 E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E  // .......F.&.E.._.
    4470: 03 D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46  // ...^..F........F
    4480: E0 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B  // .2..F......2....
    4490: 5E E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66  // ^....?...e..F..f
    44A0: E7 F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00  // ...F...F...f.F..
    44B0: 00 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01  // ....F....F....<.
    44C0: 0F 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0  // .....V...2....^.
    44D0: 03 D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B  // ...?.tu&.E......
    44E0: 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9  // G.2......2......
    44F0: 00 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46  // .t...3.P.......F
    4500: BA 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4  // ...tA...&.G...2.
    4510: 03 C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA  // ...^...&.E....^.
    4520: 26 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02  // &...^.&.....&.G.
    4530: 8B 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6  // .^..v.&.w..^..^.
    4540: C6 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83  // .F.....F.....F..
    4550: 8A 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A  // .F.2.........f..
    4560: 46 EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E  // F.2..........^..
    4570: C0 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80  // .&._..^..^.&._..
    4580: 3F 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89  // ?[uJ.F...^.&._..
    4590: 5E F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83  // ^..^.&...G.2....
    45A0: C1 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85  // ..2.......^..^..
    45B0: DB 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F  // .t.&...G....2.$.
    45C0: C1 E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46  // .......^.&)....F
    45D0: B8 E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF  // .......F......2.
    45E0: C1 E3 02 8D 46 B8 FF 97 68 95 E9 72 FF 83 7E F6  // ....F...h..r..~.
    45F0: 00 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02  // ......~..t..F...
    4600: 32 C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26  // 2..f._^....SQ..&
    4610: 8A 4F 04 32 ED E8 9B E8 59 5B C3 53 51 8B D8 26  // .O.2....Y[.SQ..&
    4620: 8A 4F 04 32 ED E8 96 E8 59 5B C3 53 8B D8 26 8A  // .O.2....Y[.S..&.
    4630: 47 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04  // G.2...[.SQ..&.O.
    4640: 32 ED E8 13 D8 59 5B C3 53 8B D8 66 50 66 52 66  // 2....Y[.S..fPfRf
    4650: 51 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04  // Qf&.G.f&.W.f&.O.
    4660: 66 F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66  // f..f&.G.f&.W.fYf
    4670: 5A 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // ZfX[.S..fPfRfQf&
    4680: 8B 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C  // .G.f&.O.f..f&.G.
    4690: 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B  // f&.W.fYfZfX[.SW.
    46A0: D8 26 8B 5F 14 E8 52 EB 8B D0 66 C1 E8 10 92 5F  // .&._..R...f...._
    46B0: 5B C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8  // [.SW..&.G.&.W...
    46C0: 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8 50 EB EB D8  // ..f.........P...
    46D0: 53 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1  // SRW..&.G.&.W..f.
    46E0: E0 10 8B C2 26 8B 5F 14 E8 74 EA 5F 5A 5B C3 53  // ....&._..t._Z[.S
    46F0: 52 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10  // R..&.G.&.W..f...
    4700: 8B C2 26 8B 5F 26 8B 5F 01 E8 53 EA 5A 5B C3 53  // ..&._&._..S.Z[.S
    4710: 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8 DC EA 8B D0  // RV..&.\&._......
    4720: 66 C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B  // f....&.D.&.T.^Z[
    4730: C3 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92  // .SQRW..&.G.&.W..
    4740: 66 C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16  // f.......&.G.&.W.
    4750: 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8  // ....f...........
    4760: 30 EA 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 00  // 0._ZY[...f......
    4770: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    4780: 0E 1F 0A C0 75 06 E8 37 01 E9 D8 00 3C 01 75 06  // ....u..7....<.u.
    4790: E8 67 01 E9 CE 00 3C 02 75 06 E8 9B 02 E9 C4 00  // .g....<.u.......
    47A0: 3C 03 75 0B E8 CF 03 8B EC 89 5E 0C E9 B5 00 3C  // <.u.......^....<
    47B0: 04 75 0B E8 DE 03 8B EC 89 5E 0C E9 A6 00 3C 05  // .u.......^....<.
    47C0: 75 0B E8 09 05 8B EC 89 56 10 E9 97 00 3C 06 75  // u.......V....<.u
    47D0: 11 E8 86 04 8B EC 89 5E 0C 89 4E 14 89 56 10 E9  // .......^..N..V..
    47E0: 82 00 3C 07 75 10 E8 78 05 8B EC 88 7E 0D 89 4E  // ..<.u..x....~..N
    47F0: 14 89 56 10 EB 6E 3C 08 75 0A E8 BB 04 8B EC 88  // ..V..n<.u.......
    4800: 7E 0D EB 60 3C 09 75 05 E8 B4 05 EB 57 3C 0A 75  // ~..`<.u.....W<.u
    4810: 10 E8 FC 05 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // .......N..~..F..
    4820: 43 3C 0B 75 0B E8 F6 05 8B EC 66 89 4E 14 EB 34  // C<.u......f.N..4
    4830: 3C 10 75 0A E8 EB 05 8B EC 89 5E 0C EB 26 3C 11  // <.u.......^..&<.
    4840: 75 0D E8 1F 06 8B EC 89 5E 0C 89 4E 14 EB 15 3C  // u.......^..N...<
    4850: 15 75 0F E8 4A 06 8B EC 89 5E 0C EB 07 B8 4F 01  // .u..J....^....O.
    4860: EB 02 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66  // ..2....F.f_f^f]f
    4870: 5B 66 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E E9  // [fZfYfX...P.....
    4880: 03 8C D8 A3 EC 5A A3 FC 5A A3 0E 5B 2E 8E 1E E1  // .....Z..Z..[....
    4890: 03 A3 AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45  // .....X..01.00.VE
    48A0: 53 41 00 03 70 02 00 00 01 00 00 00 00 00 00 00  // SA..p...........
    48B0: 00 03 32 0F 77 01 00 00 04 01 00 00 30 48 00 00  // ..2.w.......0H..
    48C0: B9 3F 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B  // .?.......f3..f..
    48D0: FB BE 36 48 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47  // ..6H."......O..G
    48E0: 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E  // ..O..O..O .."...
    48F0: 0E 1F E8 3E D4 B0 4F 32 E4 C3 56 51 57 B9 10 00  // ...>..O2..VQW...
    4900: 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00  // f3..f._Y........
    4910: C6 45 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45  // .E...E.@..E.@..E
    4920: 1B 04 C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7  // ...E...E...E..f.
    4930: 45 3E 00 84 D7 17 8E DB E8 4D BE 66 0B C0 0F 84  // E>.......M.f....
    4940: EE 00 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 C3  // ....f.E(..f.....
    4950: 4C 66 89 45 0C 81 F9 FF 81 0F 84 CF 00 80 E5 03  // Lf.E............
    4960: B2 01 53 8E DB BE 80 1C E8 F9 D1 5B 06 1F 0F 84  // ..S........[....
    4970: BE 00 53 E8 66 D4 66 89 45 12 C7 45 16 08 10 8D  // ..S.f.f.E..E....
    4980: 5C 0C E8 A3 E8 66 89 45 1F 66 89 45 36 8D 5C 10  // \....f.E.f.E6.\.
    4990: E8 95 E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 87  // ...f.E#f.E:.\...
    49A0: E8 0A C0 75 04 5B E9 87 00 E8 30 D4 66 C1 E8 10  // ...u.[....0.f...
    49B0: 3D 58 02 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08  // =X.t.=^.t.w..E..
    49C0: EB 04 C6 45 17 0E E8 DA D3 80 F9 00 74 04 C6 45  // ...E........t..E
    49D0: 1B 06 2E A1 E3 03 89 45 08 8D 5C 04 E8 49 E8 66  // .......E..\..I.f
    49E0: 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08  // ..f......E..E2..
    49F0: D2 E0 88 45 19 8D 5C 14 E8 2D E8 5B 3D 00 03 77  // ...E..\..-.[=..w
    4A00: 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45  // /S.....3...[...E
    4A10: 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8 BE  // ..E5.E4..WS.....
    4A20: BD 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02  // .[_..u....%.2...
    4A30: B4 03 B0 4F 8E DB 5E C3 81 FB FF 81 74 6A 0A FF  // ...O..^.....tj..
    4A40: 75 04 8B C3 EB 21 F6 C7 08 75 63 8B CB B2 01 BE  // u....!...uc.....
    4A50: 20 1C E8 0F D1 74 57 E8 61 D3 0A C0 75 0E 66 C1  //  ....tW.a...u.f.
    4A60: E8 10 80 E7 80 0A C7 E8 91 04 EB 3C E8 7B C1 74  // ...........<.{.t
    4A70: 05 E8 A0 BE EB 00 E8 9D C2 BE 20 1C E8 34 BD 74  // .......... ..4.t
    4A80: 2D E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 22 D3  // -....,.f. ....".
    4A90: BE 00 1C E8 25 D3 66 C1 E8 10 8B D8 32 C0 F6 C7  // ....%.f.....2...
    4AA0: 80 74 02 B0 40 E8 74 BD B0 4F 32 E4 EB 04 B0 4F  // .t..@.t..O2....O
    4AB0: B4 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 1D D3 8B  // ...V.3.... .....
    4AC0: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    4AD0: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    4AE0: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    4AF0: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 BD 64 8C  // ..&.....&.....d.
    4B00: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    4B10: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    4B20: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    4B30: EF B9 04 00 B4 01 BE A0 4A AC 86 E0 EF 8A E0 FE  // ........J.......
    4B40: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    4B50: A4 4A 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .J....B.J.......
    4B60: EC B9 14 00 BA C0 03 32 E4 BE AD 4A 8A C4 EE AC  // .......2...J....
    4B70: EE FE C4 E2 F7 C3 BE 00 1C E8 3F D2 66 C1 E8 10  // ..........?.f...
    4B80: 8B D8 E8 0F D2 75 05 E8 FB D1 75 04 B8 4F 00 C3  // .....u....u..O..
    4B90: B8 4F 03 C3 83 E1 0F 0F 84 BB 00 0A D2 75 0C B8  // .O...........u..
    4BA0: 00 1C E8 1D 03 83 C3 11 E9 A6 00 80 FA 01 75 33  // ..............u3
    4BB0: 8B FB BB C9 05 B9 08 00 FC E8 3A E6 66 AB 43 E2  // ..........:.f.C.
    4BC0: F8 66 C1 E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E  // .f...f..........
    4BD0: 1F E8 C3 BE 06 1F B8 01 1C B9 07 00 8B DF E8 E1  // ................
    4BE0: 02 EB 6E 80 FA 02 75 6E 8B F3 06 1F FC BB C9 05  // ..n...un........
    4BF0: B9 08 00 66 AD E8 59 E5 43 E2 F8 06 56 0E 1F BB  // ...f..Y.C...V...
    4C00: D0 05 E8 F1 E5 8A D0 80 E2 03 66 C1 E8 10 8B C8  // ..........f.....
    4C10: BE 00 1C E8 4E CF BB CE 05 E8 DA E5 8B C8 66 C1  // ....N.........f.
    4C20: E8 10 8B D0 B0 18 B7 01 E8 94 B8 5B 07 53 81 C3  // ...........[.S..
    4C30: 00 04 B8 02 1C B9 07 00 E8 87 02 5E 8B FE 66 C1  // ...........^..f.
    4C40: E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E 1F E8 95  // ..f.............
    4C50: BE B0 4F 32 E4 C3 32 C0 C3 00 E8 37 D1 74 53 BE  // ..O2..2....7.tS.
    4C60: 00 1C 80 FB 00 74 18 80 FB 01 75 05 E8 75 D1 EB  // .....t....u..u..
    4C70: 1D 80 FB 02 75 10 8B C1 E8 28 D1 D3 E8 8B C8 E8  // ....u....(......
    4C80: D1 BD 74 2E EB 08 80 FB 03 75 24 E8 CC D0 E8 12  // ..t......u$.....
    4C90: D1 8B D8 D3 E3 50 33 C0 BA 00 03 3B DA 77 05 BA  // .....P3....;.w..
    4CA0: FF FF EB 04 F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32  // ........X...O..2
    4CB0: C0 C3 B0 4F B4 03 C3 00 0A DB 75 07 8A EF E8 AB  // ...O......u.....
    4CC0: BF EB 05 E8 90 BF 8A F8 B0 4F 32 E4 C3 00 E8 C3  // .........O2.....
    4CD0: D0 74 2C BE 00 1C E8 E2 D0 66 C1 E8 10 F6 C4 40  // .t,......f.....@
    4CE0: 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80 FF 01 75 14  // u...u.........u.
    4CF0: BB 13 00 E8 00 E5 D1 E8 8B D0 B0 4F 32 E4 C3 B0  // ...........O2...
    4D00: 4F B4 03 C3 32 C0 C3 52 53 66 50 81 E2 FF 02 D1  // O...2..RSfP.....
    4D10: E2 8B C2 40 66 C1 E0 10 8B C2 BB 13 00 E8 31 E4  // ...@f.........1.
    4D20: BB 12 00 E8 2B E4 66 58 5B 5A C3 9C 1E 06 66 50  // ....+.fX[Z....fP
    4D30: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F E8 27  // fQfRfSfUfVfW...'
    4D40: E5 E8 8A FF E8 46 E5 8B EC 89 56 10 89 46 18 66  // .....F....V..F.f
    4D50: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F 9D  // _f^f]f[fZfYfX...
    4D60: CB E8 30 D0 74 54 F6 C3 7F 75 38 53 BE 00 1C E8  // ..0.tT...u8S....
    4D70: 72 D0 F7 E2 66 C1 E2 10 8B D0 66 81 E1 FF FF 00  // r...f.....f.....
    4D80: 00 66 03 D1 E8 1C D0 80 E2 FC 66 D3 E2 66 81 E2  // .f........f..f..
    4D90: FF FF FF 02 8D 5C 18 66 8B C2 E8 EB E3 5B E8 9A  // .....\.f.....[..
    4DA0: BC EB 0F 80 FB 82 74 C3 80 FB 01 75 0A E8 7F BC  // ......t....u....
    4DB0: 32 FF B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3 E8  // 2..O2..2...O....
    4DC0: D2 CF 74 47 80 FF 20 74 08 66 C1 E7 10 66 C1 EF  // ..tG.. t.f...f..
    4DD0: 10 81 F9 00 01 77 31 0A DB 74 05 80 FB 80 75 10  // .....w1..t....u.
    4DE0: 32 F6 E8 71 BE 3C 06 74 02 B6 01 E8 F8 BC EB 13  // 2..q.<.t........
    4DF0: 80 FB 01 75 13 32 F6 E8 5C BE 3C 06 74 02 B6 01  // ...u.2..\.<.t...
    4E00: E8 94 BC B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3  // ....O2..2...O...
    4E10: 0E 07 BF 84 92 2E 8B 0E 82 92 B8 4F 00 C3 32 C0  // ...........O..2.
    4E20: C3 00 0A DB 75 06 B7 04 B3 10 EB 2F 80 FB 01 75  // ....u....../...u
    4E30: 1D 53 32 C9 0A FF 74 02 B1 01 E8 D6 BD B1 01 0A  // .S2...t.........
    4E40: FF 74 02 B1 00 E8 B7 BE E8 A0 BB 5B EB 0D 80 FB  // .t.........[....
    4E50: 02 75 0D E8 CF BD 8A F8 C0 E7 02 B0 4F 32 E4 C3  // .u..........O2..
    4E60: B8 4F 03 C3 80 FB 01 75 09 33 C0 E8 35 BE 74 2B  // .O.....u.3..5.t+
    4E70: EB 24 80 FB 07 75 24 0A FF 75 0E B0 82 E8 3F B6  // .$...u$..u....?.
    4E80: 0A C9 74 12 B9 03 03 EB 0D 0B C9 B1 00 74 02 B1  // ..t..........t..
    4E90: 03 B0 82 E8 29 B6 B0 4F 32 E4 C3 B0 4F B4 03 C3  // ....)..O2...O...
    4EA0: 80 E3 01 0A DB 75 05 BB 02 01 EB 0C 33 C0 53 E8  // .....u......3.S.
    4EB0: 4D BE E8 95 C5 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // M....[t..O2...O.
    4EC0: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    4ED0: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    4EE0: D1 E0 8B F0 58 2E FF 94 A4 4E 66 5F 66 5E 66 5D  // ....X....Nf_f^f]
    4EF0: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    4F00: C4 D1 E0 8B F0 58 2E FF 94 A4 4E C3 DE 4E 28 89  // .....X....N..N(.
    4F10: 41 89 5E 89 D3 4F 61 80 93 80 06 81 89 81 17 83  // A.^..Oa.........
    4F20: 1B 83 24 86 F5 86 78 87 DF 87 7A 89 9F 89 48 8C  // ..$...x...z...H.
    4F30: EC 51 8F 90 92 4E 92 4E 92 4E 92 4E 92 4E 92 4E  // .Q...N.N.N.N.N.N
    4F40: 5F 91 9F 75 F3 76 2E 8E 1E E1 03 80 26 87 04 F3  // _..u.v......&...
    4F50: 50 8A E0 80 E4 7F E8 C6 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    4F60: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    4F70: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    4F80: 53 E8 67 42 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.gB..[u..&.....
    4F90: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    4FA0: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    4FB0: 04 18 C7 06 0C 01 AA 5C 8C 0E 0E 01 CD 42 C3 80  // .......\.....B..
    4FC0: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    4FD0: C8 B2 08 BE 40 1C E8 8B CB E8 0E BC 74 05 E8 33  // ....@.......t..3
    4FE0: B9 EB 00 E8 30 BD BE 40 1C E8 C7 B7 58 5B 0F 84  // ....0..@....X[..
    4FF0: 6C FF 2E 8E 1E E1 03 0E 07 E8 4B 2A 0E 1F 53 66  // l.........K*..Sf
    5000: BB 40 1C 00 1C E8 AA CD BE 00 1C B0 20 E8 0C B8  // .@.......... ...
    5010: 5B 2E 8E 1E E1 03 0E 07 E8 54 2F E8 24 00 E8 23  // [........T/.$..#
    5020: 3E E8 D1 01 E8 8E 01 E8 A9 3F 0E 1F BE 00 1C B0  // >........?......
    5030: 10 E8 E8 B7 E8 2F 2F E8 27 2F C3 8B EC C6 46 1B  // .....//.'/....F.
    5040: 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 94  // .../........R...
    5050: 0B C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30  // ..S.....c......0
    5060: EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06  // .2.&.'.C....[...
    5070: 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01  // 2...S...........
    5080: 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0  // &.'<.u... .C....
    5090: 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3  // [&.G............
    50A0: 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2  // ....#...&.G..u..
    50B0: BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4  // ......t.........
    50C0: 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46  // ......t....&...F
    50D0: FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0  // .....S......2...
    50E0: 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32  // .....&...C.....2
    50F0: C0 EE 1E 06 E8 81 2E 0B ED 74 09 1F 1E B9 10 00  // .........t......
    5100: F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32  // ..F...[.S..7...2
    5110: C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB  // ....&.'.C....[..
    5120: AA 53 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33  // .S......}......3
    5130: F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88  // .....<J.....u ..
    5140: 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C  // .$.<.~$<.t <.t.<
    5150: 07 74 18 B0 40 F6 E4 03 D8 81 C3 C0 04 C3 B0 40  // .t..@..........@
    5160: D0 EC F6 E4 03 D8 81 C3 C0 05 C3 B0 40 F6 E4 03  // ............@...
    5170: D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3  // .....u......u...
    5180: C0 01 C3 81 C3 40 06 C3 BF 2C 51 BE 4D 51 33 C9  // .....@...,Q.MQ3.
    5190: E8 4E 00 C3 04 00 01 05 40 01 06 80 01 0D 40 03  // .N......@.....@.
    51A0: 0E 80 03 0F 40 04 10 80 04 11 80 06 12 C0 06 13  // ....@...........
    51B0: 00 07 62 00 02 53 8A 1E 49 04 80 FB 07 7F 10 32  // ..b..S..I......2
    51C0: FF D1 E3 2E 8B 87 69 51 A2 65 04 88 26 66 04 5B  // ......iQ.e..&f.[
    51D0: C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29  // .,0(0-0)0*0.0.?)
    51E0: 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03  // 0.8%u...].3.....
    51F0: 3B FE 75 ED C3 1E 06 2E 8E 1E E1 03 F6 06 87 04  // ;.u.............
    5200: 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20  // .uI.>L..tB.I... 
    5210: 2E 8B 3E E7 03 26 F6 47 33 01 75 0E 26 F6 47 09  // ..>..&.G3.u.&.G.
    5220: 01 75 1B 2E 8B 3E E5 03 EB 14 3C 06 7E 0B 2E 8B  // .u...>....<.~...
    5230: 3E E3 03 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8  // >..&.g7.@f3...f.
    5240: 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04  //  . ...f3..f..&..
    5250: 7F 07 1F C3 2E 8E 1E E1 03 80 FB 10 75 03 E9 7A  // ............u..z
    5260: 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC  // ... u......2u...
    5270: 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8  // ...u............
    5280: 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35  // .....$.........5
    5290: 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06  // u(<.u.....@.....
    52A0: 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75  // ..@............u
    52B0: 06 E8 D8 08 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9  // ............0t..
    52C0: 96 00 50 E8 25 3F 8A EF BA CC 03 EC 8A C8 58 0A  // ..P.%?........X.
    52D0: C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10  // .u0.....u...u...
    52E0: 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24  // .$0<0u.........$
    52F0: 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04  // 0<0u....&..o....
    5300: 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1  // ..6<.uA.&..o....
    5310: 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09  // .u......$0<0t...
    5320: 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75  // ..t........$0<0u
    5330: 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0  // .....t..........
    5340: 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04  // .......)<.u+.&..
    5350: 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74  // o.........1u...t
    5360: 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04  // .<.u.........&..
    5370: F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74  // ....F.....3u.<.t
    5380: 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04  // .<.u..&.........
    5390: 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04  // .....4u.<.u..&..
    53A0: FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80  // ...<.u..........
    53B0: FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00  // .6u&. .<.t....<.
    53C0: 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01  // t...............
    53D0: EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA  // .B."............
    53E0: CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04  // .....u..........
    53F0: D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6  // ..%.......^..N..
    5400: 46 1A 12 C3 9C FA C7 06 14 00 8C 7A 8C 0E 16 00  // F..........z....
    5410: 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27 28 90  // ..(........c-'(.
    5420: 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14  // +...............
    5430: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    5440: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    5450: 00 FF 28 18 08 00 08 09 03 00 02 63 2D 27 28 90  // ..(........c-'(.
    5460: 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14  // +...............
    5470: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    5480: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    5490: 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82  // ..P........c_OP.
    54A0: 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28  // U..............(
    54B0: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    54C0: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    54D0: 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82  // ..P........c_OP.
    54E0: 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28  // U..............(
    54F0: 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    5500: 13 14 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E  // ................
    5510: 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27 28 90  // ..(...@....c-'(.
    5520: 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14  // +...............
    5530: 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12  // ................
    5540: 13 14 15 16 17 01 00 03 00 00 00 00 00 00 30 0F  // ..............0.
    5550: 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27 28 90  // ..(...@....c-'(.
    5560: 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14  // +...............
    5570: 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12  // ................
    5580: 13 14 15 16 17 01 00 03 00 00 00 00 00 00 30 0F  // ..............0.
    5590: 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
    55A0: 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
    55B0: 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17  // ................
    55C0: 17 17 17 17 17 01 00 01 00 00 00 00 00 00 00 0D  // ................
    55D0: 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82  // ..P........._OP.
    55E0: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
    55F0: 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10 18 18  // .c..............
    5600: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
    5610: 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82  // ..P........._OP.
    5620: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50  // T..>.@.........P
    5630: 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A  // ................
    5640: 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05  // ..............@.
    5650: 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24  // .........(..-2 $
    5660: 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32  // 8?......... $(-2
    5670: 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33  // 8?..........%/83
    5680: 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B  // .*%')*,#..#%'*,+
    5690: 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31  // *))-27;974234551
    56A0: 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C  // ,'/0234433258:=<
    56B0: 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B  // :98899:741......
    56C0: 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F  // ................
    56D0: 0B 07 10 10 12 13 14 13 13 13 12 14 16 18 1A 19  // ................
    56E0: 18 17 16 17 17 17 18 15 14 11 15 15 16 17 17 17  // ................
    56F0: 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18  // ................
    5700: 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D  // ................
    5710: 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B  // ................
    5720: 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C  // ................
    5730: 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F  // ................
    5740: 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00  // ................
    5750: 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90  // ..(... ....c-'(.
    5760: 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14  // +...............
    5770: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    5780: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
    5790: 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82  // ..P...@....c_OP.
    57A0: 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28  // T..............(
    57B0: 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12  // ................
    57C0: 13 14 15 16 17 01 00 0F 00 00 00 00 00 00 00 05  // ................
    57D0: 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14  // ........%(... ..
    57E0: 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20  // (,..%*..26..',. 
    57F0: 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A  // 49...$..,0..!&..
    5800: 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24  // .3..+0.$8=..-2 $
    5810: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
    5820: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
    5830: 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B  // 8?..............
    5840: 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24  // ....-2 $8?..-2 $
    5850: 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82  // 8?P........._OP.
    5860: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
    5870: 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00 08 00  // .c..............
    5880: 00 00 18 00 00 0B 00 05 00 00 00 00 00 00 00 05  // ................
    5890: 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82  // ..P........._OP.
    58A0: 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28  // T....@........](
    58B0: 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    58C0: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
    58D0: 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90  // ..(.........-'(.
    58E0: 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14  // +....M........].
    58F0: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    5900: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    5910: 00 FF 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90  // ..(.........-'(.
    5920: 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14  // +....M........].
    5930: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    5940: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    5950: 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82  // ..P........._OP.
    5960: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
    5970: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    5980: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    5990: 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82  // ..P........._OP.
    59A0: 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28  // U....M........](
    59B0: 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .c...........89:
    59C0: 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E  // ;<=>?...........
    59D0: 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27 28 90  // ..(........g-'(.
    59E0: 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14  // +....O..........
    59F0: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    5A00: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
    5A10: 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82  // ..P........g_OP.
    5A20: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
    5A30: 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    5A40: 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E  // ;<=>?...........
    5A50: 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82  // ..P........f_OP.
    5A60: 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28  // U....O.........(
    5A70: 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18  // ................
    5A80: 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A  // ................
    5A90: 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
    5AA0: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
    5AB0: 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ......??????????
    5AC0: 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05  // ?????...........
    5AD0: 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82  // ..P........._OP.
    5AE0: 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28  // T..>.@.........(
    5AF0: 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A  // .............89:
    5B00: 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05  // ;<=>?...........
    5B10: 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82  // ..(... ....c_OP.
    5B20: 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28  // T....A.........(
    5B30: 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A  // @...............
    5B40: 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05  // .....A........@.
    5B50: 0F FF AA 53 00 C0 00 00 00 00 00 00 00 00 00 00  // ...S............
    5B60: 00 00 0A 5B 00 C0 00 00 00 00 00 00 00 00 00 00  // ...[............
    5B70: 00 00 1A 00 5D 92 00 C0 00 00 00 00 00 00 00 00  // ....]...........
    5B80: 00 00 00 00 00 00 00 00 00 00 00 00 1E E8 10 00  // ................
    5B90: 2E 8E 1E E1 03 E8 B3 36 E8 8A 36 E8 68 1A 1F C3  // .......6..6.h...
    5BA0: 2E 8E 1E E1 03 C7 06 87 04 60 F9 C6 06 8A 04 0B  // .........`......
    5BB0: A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 65 1E A0  // .....$.......e..
    5BC0: 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04  // ...&....... ..c.
    5BD0: D4 03 B8 03 00 E8 23 F3 C3 1E 2E 8E 1E E1 03 0E  // ......#.........
    5BE0: 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8  // ..........t..S..
    5BF0: 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F  // ..........>c..u/
    5C00: BE 5E 5C B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1  // .^\.@.3.........
    5C10: EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04  // ..........B...E.
    5C20: EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26  // ...E....J......&
    5C30: 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF EA 55  // .G+.....t1.....U
    5C40: 3C 08 74 11 B9 40 00 BF 6A 57 3C 38 74 07 3C 3F  // <.t..@..jW<8t.<?
    5C50: 74 03 BF AA 57 33 DB 9C FA 8A C3 EE 2E 8A 01 42  // t...W3.........B
    5C60: EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C  // .....J....I<.t%<
    5C70: 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 EC D0  // 8t.<?t*...3.Q...
    5C80: B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59  // .......t.....g.Y
    5C90: E2 EA EB 20 E8 D5 D0 B9 10 00 33 DB E8 57 00 EB  // ... ......3..W..
    5CA0: 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 7A 2F FE  // ..@.3.Q.(....z/.
    5CB0: C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F  // .Y..[..*.*.*.*.?
    5CC0: 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A  // .?.?.?.*.?.*.?.*
    5CD0: 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 4E 5C 8B  // .?...........N\.
    5CE0: FB D1 EF 83 E7 0F 2E 8A AD 4E 5C 8B FB 83 E7 0F  // .........N\.....
    5CF0: 2E 8A 8D 4E 5C C3 9C 8A C3 FA EE 2E 8A 05 42 EE  // ...N\.........B.
    5D00: 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7  // G....G....G..J..
    5D10: 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99  // ..........~.....
    5D20: 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38  // .~|.....|.....|8
    5D30: 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10  // ...8|.|8...8....
    5D40: 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18  // 8.8|..l.8...<~<.
    5D50: 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C  // ............<ff<
    5D60: 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC  // .............6x.
    5D70: CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70  // .x~..~.~.......p
    5D80: F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C  // .`>>66.f...<f.f<
    5D90: DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06  // .............>..
    5DA0: 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00  // ...<~.~<..fffff.
    5DB0: 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38  // f...{;....<f8ll8
    5DC0: CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C  // .x.........<~.~<
    5DD0: 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C  // .~.<~.........~<
    5DE0: 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30  // ...........0p.p0
    5DF0: 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24  // ...........$f.f$
    5E00: 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10  // ....8||.....||8.
    5E10: 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00  // ...........<<...
    5E20: 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C  // ..lll.....ll.l.l
    5E30: 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60  // l..~.|........0`
    5E40: C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00  // ..8l8v..v...0...
    5E50: 00 00 18 30 60 60 60 30 18 00 60 30 18 18 18 30  // ...0```0..`0...0
    5E60: 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18  // `...|.|......~..
    5E70: 00 00 00 00 00 00 18 18 30 00 00 00 00 FE 00 00  // ........0.......
    5E80: 00 00 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0  // .......88....0`.
    5E90: 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18  // ..|.....|..x....
    5EA0: 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6  // ~.|...0f..|..<..
    5EB0: 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6  // |...<l..........
    5EC0: 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18  // |.|.....|.......
    5ED0: 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6  // ..|..|..|.|..~..
    5EE0: 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18  // |...............
    5EF0: 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE  // .0..0`0.........
    5F00: 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00  // ..`0...0`.|.....
    5F10: 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6  // ..|.....~.8l....
    5F20: C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66  // ...ff|ff..<f...f
    5F30: 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2  // <..lfffl........
    5F40: FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6  // ...b`|``..|.....
    5F50: 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18  // |.........<.....
    5F60: 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC  // <.<.....p.......
    5F70: C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6  // ...````b........
    5F80: C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6  // ..........|.....
    5F90: 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6  // |..ff|``..|.....
    5FA0: 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6  // |.........|..|..
    5FB0: 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6  // |.~Z....<.......
    5FC0: 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE  // |.....l8........
    5FD0: C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18  // ...l888l..fff<..
    5FE0: 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60  // <.....0b..|`````
    5FF0: 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C  // |..`0.....|.....
    6000: 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // |..8l...........
    6010: 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC  // ..00........x.|.
    6020: 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6  // ~..`|fff....|...
    6030: 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0  // |...|...~...|...
    6040: 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E  // |..60.00x...v..~
    6050: 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18  // .|.`|fff....8...
    6060: 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C  // <........x.`flxl
    6070: E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6  // ............l...
    6080: C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6  // .....ffff...|...
    6090: 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C  // |....ff|`...v..|
    60A0: 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06  // .....f``....|.|.
    60B0: 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC  // |.00.006........
    60C0: 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE  // v.....l8........
    60D0: 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76  // l....l8l.......v
    60E0: 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18  // .|....0d.....p..
    60F0: 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E 18 18  // ..........p.....
    6100: 70 00 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C  // p.v.........88ll
    6110: FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE  // ..<f.f<..x......
    6120: 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC  // v...|...|.|.x.|.
    6130: 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC  // ~...x.|.~...x.|.
    6140: 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18  // ~.88x.|.~...|.|.
    6150: 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0  // l8|.|...|...|...
    6160: 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18  // |...|...|.f.8...
    6170: 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18  // <.|.8...<...8...
    6180: 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE  // <..8l.....88.|..
    6190: C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8  // ............l.~.
    61A0: 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6  // n.~.......|..|..
    61B0: 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6  // |....|..|....|..
    61C0: 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE  // |.|.....v.......
    61D0: 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C  // v...<...<..8l..l
    61E0: 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E  // 8.......|...~..~
    61F0: 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C  // ..8l`.f.l..f<~.<
    6200: 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C  // ..>c8.c>...>a<.|
    6210: 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18  // ....x.|.~...8...
    6220: 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC  // <....|..|.......
    6230: 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE  // v.....ff........
    6240: C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E  // ..>.>`gc=.>.v..~
    6250: 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60  // .|...0`f<....|``
    6260: 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36  // .....|.......0|6
    6270: 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C  // .>...0l<~.....<<
    6280: 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8  // ...6l.l6....l6l.
    6290: 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA  // ..".".".".U.U.U.
    62A0: 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18  // U..w.w.w.w......
    62B0: 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18  // ................
    62C0: 18 18 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36  // ..6666.666.....6
    62D0: 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36  // 66........66...6
    62E0: 36 36 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36  // 6666666666.....6
    62F0: 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00  // 6666......6666..
    6300: 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18  // ................
    6310: 18 18 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00  // ................
    6320: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18  // ................
    6330: 18 18 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18  // ................
    6340: 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36  // ..........666676
    6350: 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36  // 666670?.....?076
    6360: 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36  // 6666...........6
    6370: 36 36 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00  // 6666707666......
    6380: 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00  // ..66...666......
    6390: 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18  // ..6666..........
    63A0: 18 18 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00  // .......6666666?.
    63B0: 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18  // ................
    63C0: 18 18 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36  // ......?6666666.6
    63D0: 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00  // 66..............
    63E0: 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF  // ................
    63F0: FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0  // ................
    6400: F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00  // ................
    6410: 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6  // ....f...f..x....
    6420: CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C  // ....b```....llll
    6430: 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8  // l...`0`....~....
    6440: 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18  // p..ffff|...v....
    6450: 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C  // 8..8l.l8..8l...l
    6460: 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC  // 8.8l..ll..>`8f..
    6470: 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C  // x...~..~...|...|
    6480: C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6  // ..8`...`8.|.....
    6490: C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00  // ............~...
    64A0: 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00  // ~.0...0.~...0...
    64B0: 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78  // ~..............x
    64C0: 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC  // 0.....~....v..v.
    64D0: 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00  // ..|..|..........
    64E0: 00 00 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38  // ...............8
    64F0: 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00  // ...lll....p.0...
    6500: 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00  // ....||||........
    6510: 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    6520: 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6530: 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81  // .......~........
    6540: 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE  // ~......|........
    6550: 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38  // |.......l.....|8
    6560: 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00  // .........8|.|8..
    6570: 00 00 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10  // .........88.l.l.
    6580: 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10  // 8.......8||...l.
    6590: 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00  // 8..........<<<..
    65A0: 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF  // ................
    65B0: FF FF FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18  // ..........<fff<.
    65C0: 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7  // ................
    65D0: FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC  // ..........6x....
    65E0: 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18  // x......<fff<.~..
    65F0: 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8  // ..............x.
    6600: 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E  // p......>6>66v.f.
    6610: 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB  // .........~<ff<~.
    6620: 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0  // ................
    6630: 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E  // ..........>~.~>.
    6640: 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C  // ........<~....~<
    6650: 18 00 00 00 00 00 00 66 66 66 66 66 66 66 00 66  // .......fffffff.f
    6660: 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B  // f...........{...
    6670: 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C  // .......|..`|..|.
    6680: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE  // ..|.............
    6690: FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18  // ........<~...~<.
    66A0: 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18  // ~.......<~......
    66B0: 18 00 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C  // ..............~<
    66C0: 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00  // ................
    66D0: 00 00 00 00 00 00 00 00 00 00 30 70 FE 70 30 00  // ..........0p.p0.
    66E0: 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00  // ................
    66F0: 00 00 00 00 00 00 00 00 00 00 24 66 FF 66 24 00  // ..........$f.f$.
    6700: 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE  // .........888||..
    6710: 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10  // ..........|||88.
    6720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6730: 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18  // ........<<<<....
    6740: 18 00 00 00 00 00 36 36 36 36 14 00 00 00 00 00  // ......6666......
    6750: 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C  // .......lll.ll.ll
    6760: 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6  // l........|..x<..
    6770: 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18 30 66  // |.........bf..0f
    6780: C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC  // .......8l80v~...
    6790: 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // v...............
    67A0: 00 00 00 00 00 00 00 0C 18 30 30 30 30 30 30 18  // .........000000.
    67B0: 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18  // .......0........
    67C0: 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00  // 0.........l8.8l.
    67D0: 00 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00  // ............~...
    67E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    67F0: 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00 00 00  // ................
    6800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    6810: 18 00 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0  // .............0`.
    6820: 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6  // .......|........
    6830: 7C 00 00 00 00 00 00 18 78 18 18 18 18 18 18 18  // |.......x.......
    6840: 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6  // ~......|.....0`.
    6850: FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6  // .......|...<....
    6860: 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C  // |........<l.....
    6870: 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6  // ................
    6880: 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6  // |......|........
    6890: 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30  // |...........0000
    68A0: 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6  // 0......|...|....
    68B0: 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6  // |......|....~...
    68C0: 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // |...............
    68D0: 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // ................
    68E0: 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18  // ..........0`.`0.
    68F0: 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00  // ................
    6900: 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30  // ........`0.....0
    6910: 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18  // `......|........
    6920: 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0  // .......|........
    6930: 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6  // ~......8l.......
    6940: C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66  // ........fff|ffff
    6950: FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66  // .......<f......f
    6960: 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C  // <.......lffffffl
    6970: F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66  // ........f`d|d``f
    6980: FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60  // ........f`d|d```
    6990: F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6  // .......|........
    69A0: 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6  // |...............
    69B0: C6 00 00 00 00 00 00 3C 18 18 18 18 18 18 18 18  // .......<........
    69C0: 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8  // <......<........
    69D0: 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6  // p...............
    69E0: C6 00 00 00 00 00 00 F0 60 60 60 60 60 60 62 66  // ........``````bf
    69F0: FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6  // ................
    6A00: C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6  // ................
    6A10: C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    6A20: 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60  // |.......ffff|```
    6A30: F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6  // .......|........
    6A40: 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66  // |.......fff|xlff
    6A50: E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6  // .......|...p....
    6A60: 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18  // |......~Z.......
    6A70: 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6  // <...............
    6A80: 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38  // |.............l8
    6A90: 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6  // ................
    6AA0: C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6  // ..........l88l..
    6AB0: C6 00 00 00 00 00 00 66 66 66 66 66 3C 18 18 18  // .......fffff<...
    6AC0: 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6  // <...........0`..
    6AD0: FE 00 00 00 00 00 00 7C 60 60 60 60 60 60 60 60  // .......|````````
    6AE0: 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06  // |..........`0...
    6AF0: 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C  // .......|........
    6B00: 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00 00 00  // |......8l.......
    6B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B20: 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00 00 00  // ................
    6B30: 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC  // ..........x.|...
    6B40: 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // v.......``|fffff
    6B50: FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6  // ..........|.....
    6B60: 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC  // |.........|.....
    6B70: 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6  // ~.........|.....
    6B80: 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30  // |.......600.0000
    6B90: 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76  // x.........v....v
    6BA0: 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // ..|.....``|fffff
    6BB0: E6 00 00 00 00 00 00 18 18 00 38 18 18 18 18 18  // ..........8.....
    6BC0: 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C  // <...............
    6BD0: CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66  // ..x.....``fflxlf
    6BE0: E6 00 00 00 00 00 00 18 18 18 18 18 18 18 18 18  // ................
    6BF0: 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6  // ..........l.....
    6C00: C6 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 66  // ...........fffff
    6C10: 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6  // f.........|.....
    6C20: 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C  // |..........ffff|
    6C30: 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C  // ``........v....|
    6C40: 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60  // ...........f````
    6C50: F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6  // ..........|..|..
    6C60: 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30 30 36  // |......000.00006
    6C70: 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC CC CC  // ................
    6C80: 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38  // v.............l8
    6C90: 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE  // ................
    6CA0: 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6  // l...........l8l.
    6CB0: C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76  // ...............v
    6CC0: 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62  // ..|...........0b
    6CD0: FE 00 00 00 00 00 00 0E 18 18 18 70 18 18 18 18  // ...........p....
    6CE0: 0E 00 00 00 00 00 00 18 18 18 18 00 18 18 18 18  // ................
    6CF0: 18 00 00 00 00 00 00 70 18 18 18 0E 18 18 18 18  // .......p........
    6D00: 70 00 00 00 00 00 00 76 DC 00 00 00 00 00 00 00  // p......v........
    6D10: 00 00 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE  // ...........88ll.
    6D20: 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18  // .......<f....f<.
    6D30: 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE  // ..8.............
    6D40: 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6  // v.......0.|.....
    6D50: 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC  // |.....0x..x.|...
    6D60: 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC  // v.........x.|...
    6D70: 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC  // v.....`0..x.|...
    6D80: 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC  // v.....8l8.x.|...
    6D90: 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18  // v........|....|.
    6DA0: 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6  // .l8...0x..|.....
    6DB0: 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6  // |.........|.....
    6DC0: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6  // |.....0...|.....
    6DD0: 7C 00 00 00 00 00 00 66 00 00 38 18 18 18 18 18  // |......f..8.....
    6DE0: 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18 18 18  // <......<f.8.....
    6DF0: 3C 00 00 00 00 00 00 00 00 00 38 18 18 18 18 18  // <.........8.....
    6E00: 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6  // <.......8l......
    6E10: C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6  // .....8l8.8l.....
    6E20: C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60  // .......0..``|```
    6E30: FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF  // .........f......
    6E40: 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8  // v......~........
    6E50: DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6  // ......0x..|.....
    6E60: 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6  // |.........|.....
    6E70: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6  // |.....0...|.....
    6E80: 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE  // |.....0x........
    6E90: 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE  // v.....`0........
    6EA0: 76 00 00 00 00 00 18 00 3C 18 18 18 18 18 18 18  // v.......<.......
    6EB0: 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6  // <.......|.......
    6EC0: 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6  // |...............
    6ED0: 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18  // |........|....|.
    6EE0: 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6  // ......8l``.```f.
    6EF0: 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18  // l.....ffff<.~.<.
    6F00: 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E  // .......>cc0..cc>
    6F10: 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E  // ..........>c8.c>
    6F20: 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC  // ........0.x.|...
    6F30: 76 00 00 00 00 00 0C 18 30 00 38 18 18 18 18 18  // v.......0.8.....
    6F40: 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6  // <.......0.|.....
    6F50: 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC CC DC  // |......0`.......
    6F60: 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66  // v......v...fffff
    6F70: E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6  // ......v.........
    6F80: C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33  // ......!...3``gc3
    6F90: 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66  // ......B<.;fff>.f
    6FA0: 3C 00 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6  // <......00.000`..
    6FB0: 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60 60 60  // |...........~```
    6FC0: 00 00 00 00 00 00 00 00 00 00 00 00 7E 06 06 06  // ............~...
    6FD0: 00 00 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36  // ......``bfl.0`.6
    6FE0: 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36  // ..>...``bfl.6n.6
    6FF0: 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C  // ~...........<<<<
    7000: 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00  // ..........6l.l6.
    7010: 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00  // ...........l6l..
    7020: 00 00 00 00 00 11 44 11 44 11 44 11 44 11 44 11  // ......D.D.D.D.D.
    7030: 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.U.U.U.U.U.
    7040: 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.w.w.w.w.w.
    7050: 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18  // w.w.w...........
    7060: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    7070: 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    7080: 18 18 18 18 18 36 36 36 36 36 36 36 F6 36 36 36  // .....6666666.666
    7090: 36 36 36 36 36 00 00 00 00 00 00 00 FE 36 36 36  // 66666........666
    70A0: 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18  // 66666...........
    70B0: 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36  // .....66666...666
    70C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    70D0: 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36  // 66666........666
    70E0: 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00  // 6666666666......
    70F0: 00 00 00 00 00 36 36 36 36 36 36 36 FE 00 00 00  // .....6666666....
    7100: 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00  // ................
    7110: 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 18 18  // ................
    7120: 18 18 18 18 18 18 18 18 18 18 18 18 1F 00 00 00  // ................
    7130: 00 00 00 00 00 18 18 18 18 18 18 18 FF 00 00 00  // ................
    7140: 00 00 00 00 00 00 00 00 00 00 00 00 FF 18 18 18  // ................
    7150: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 18 18  // ................
    7160: 18 18 18 18 18 00 00 00 00 00 00 00 FF 00 00 00  // ................
    7170: 00 00 00 00 00 18 18 18 18 18 18 18 FF 18 18 18  // ................
    7180: 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    7190: 18 18 18 18 18 36 36 36 36 36 36 36 37 36 36 36  // .....66666667666
    71A0: 36 36 36 36 36 36 36 36 36 36 37 30 3F 00 00 00  // 666666666670?...
    71B0: 00 00 00 00 00 00 00 00 00 00 3F 30 37 36 36 36  // ..........?07666
    71C0: 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00  // 6666666666......
    71D0: 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36  // .............666
    71E0: 36 36 36 36 36 36 36 36 36 36 37 30 37 36 36 36  // 6666666666707666
    71F0: 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00  // 66666...........
    7200: 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36  // .....66666...666
    7210: 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00  // 66666...........
    7220: 00 00 00 00 00 36 36 36 36 36 36 36 FF 00 00 00  // .....6666666....
    7230: 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18  // ................
    7240: 18 18 18 18 18 00 00 00 00 00 00 00 FF 36 36 36  // .............666
    7250: 36 36 36 36 36 36 36 36 36 36 36 36 3F 00 00 00  // 666666666666?...
    7260: 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00  // ................
    7270: 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    7280: 18 18 18 18 18 00 00 00 00 00 00 00 3F 36 36 36  // ............?666
    7290: 36 36 36 36 36 36 36 36 36 36 36 36 FF 36 36 36  // 666666666666.666
    72A0: 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18  // 66666...........
    72B0: 18 18 18 18 18 18 18 18 18 18 18 18 F8 00 00 00  // ................
    72C0: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 18 18  // ................
    72D0: 18 18 18 18 18 FF FF FF FF FF FF FF FF FF FF FF  // ................
    72E0: FF FF FF FF FF 00 00 00 00 00 00 00 00 FF FF FF  // ................
    72F0: FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7300: F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    7310: 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00  // ................
    7320: 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC  // .........v......
    7330: 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6  // v......x........
    7340: CC 00 00 00 00 00 00 FE 66 62 60 60 60 60 60 60  // ........fb``````
    7350: 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C  // `..........lllll
    7360: 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6  // l........b0..0b.
    7370: FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8  // ..........~.....
    7380: 70 00 00 00 00 00 00 00 00 66 66 66 66 66 7C 60  // p........fffff|`
    7390: C0 80 00 00 00 00 00 00 00 00 76 DC 18 18 18 18  // ..........v.....
    73A0: 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38  // ........88l..l88
    73B0: FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C  // ........8l.....l
    73C0: 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C  // 8......8l....lll
    73D0: EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC  // .......>``<f....
    73E0: 78 00 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00  // x.........~...~.
    73F0: 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60  // .........|....|`
    7400: C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30  // .........0``|``0
    7410: 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    7420: C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE  // ................
    7430: 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00  // ...........~....
    7440: 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00  // ~......0.....0..
    7450: 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00  // ~........0`0....
    7460: 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18  // ~...............
    7470: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 58  // ...............X
    7480: 78 30 00 00 00 00 00 00 00 18 18 00 7E 00 18 18  // x0..........~...
    7490: 00 00 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC  // ...........v..v.
    74A0: 00 00 00 00 00 00 00 78 CC CC 78 00 00 00 00 00  // .......x..x.....
    74B0: 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00  // ................
    74C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00 00  // ................
    74D0: 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78  // ...............x
    74E0: 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00  // 8.......lllll...
    74F0: 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00  // .......p..0`....
    7500: 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E  // ..........~~~~~~
    7510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7520: 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    7530: 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30  // ....../........0
    7540: 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB  // `......0..~.....
    7550: C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF  // ...~....M.......
    7560: DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18  // .........T......
    7570: 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3  // .....<....V.....
    7580: C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3  // ....f<.....W....
    7590: C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00 00 C3  // .......f....X...
    75A0: C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00  // ..f<<f.......Y..
    75B0: C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00  // ....f<...<....\.
    75C0: 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D  // ....`0.........m
    75D0: 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00  // .....f..........
    75E0: 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00  // v.........f<....
    75F0: 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00  // .w...........f..
    7600: 00 00 00 00 BD 64 C3 0B DB 74 03 E9 46 01 57 32  // .....d...t..F.W2
    7610: C0 B9 40 00 F3 AA 5F BB 4D 92 26 89 1D 26 8C 4D  // ..@..._.M.&..&.M
    7620: 02 2E 8E 1E E1 03 57 BE 49 04 B9 1E 00 83 C7 04  // ......W.I.......
    7630: FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0  // ...&..FG.._.....
    7640: 26 88 45 22 A1 85 04 26 89 45 23 57 E8 9C 1B 5F  // &.E"...&.E#W..._
    7650: 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74  // &.]%&.}&..I....t
    7660: 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 25 92 32  // ......2......%.2
    7670: E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 26 92 26  // ...t.@&.E'...&.&
    7680: 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00  // .E).............
    7690: 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90  // =..~...=^.~...=.
    76A0: 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26  // .~...=..~.&.U*.&
    76B0: 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0  // ....$...........
    76C0: 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0  // ......$.........
    76D0: 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45  // 0.B.$........&.E
    76E0: 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E  // -..&.E1.w...2...
    76F0: A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9  // ......;.t4&.w...
    7700: 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74  // ..t....&.w.....t
    7710: 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA  // ....&.w.....t...
    7720: 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F  // .&.w.....t......
    7730: 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC  // &.U2............
    7740: 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2  // ...........%....
    7750: 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE  // &.E+...F.....t..
    7760: C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20  // .t6..tV...F.... 
    7770: 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0  // ....t...`...t...
    7780: 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B  // :...t......?....
    7790: EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1  // ..F..F....... ..
    77A0: 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1  // .t.......t......
    77B0: 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01  // .t.......F......
    77C0: 74 06 E8 D9 14 E8 25 01 F6 C1 02 74 03 E8 85 01  // t.....%....t....
    77D0: F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA  // ...t.........B..
    77E0: FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32  // ..J....k.......2
    77F0: E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2  // .......B....J...
    7800: F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2  // ..... ..&....GF.
    7810: F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4  // ..&.%.G.........
    7820: EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B  // .&..G........QW.
    7830: C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01  // .+.&........&.D.
    7840: 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88  // &.TA...&.D....&.
    7850: 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83  // D....&.D....&...
    7860: C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE  // ........p.&.....
    7870: 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26  // ...&.TA2.....[.&
    7880: 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49  // .D..._...2.....I
    7890: FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B  // .&.D.._Y..`.....
    78A0: C7 2B C3 26 89 47 02 51 57 2E 8E 1E E1 03 A0 10  // .+.&.G.QW.......
    78B0: 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1  // .$0..I..........
    78C0: 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3  // ................
    78D0: A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE  // ..t......|......
    78E0: 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26  // ......_Y..:....&
    78F0: 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8  // .?....Q.........
    7900: 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A  // ...........G..&.
    7910: 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54  // D........&...&.T
    7920: 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01  // A......2....&.D.
    7930: EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB  // ....&.D.....2...
    7940: FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44  // .. ...2......&.D
    7950: 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E  // ..Y....&......Q.
    7960: 8E 1E E1 03 26 8A 05 80 26 10 04 CF 08 06 10 04  // ....&...&.......
    7970: 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8  // G.I.............
    7980: 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8  // ........~.......
    7990: 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8  // v..t....n..|....
    79A0: 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA  // f.......^.Y.....
    79B0: 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE  // ..+.&.G.......4.
    79C0: 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A  // B.&......&.E.PJJ
    79D0: EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42  // .&.E.......B2..B
    79E0: 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04  // B....XJ.....&.w.
    79F0: 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6  // ...l....4.&.....
    7A00: 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42  // .&.D..VBB...2..B
    7A10: B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44  // ...&...F..^..&.D
    7A20: 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3  // ........$.......
    7A30: E8 6B 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB  // .k..............
    7A40: 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87  // .... ..P......&.
    7A50: 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6  // ...&..$...<.~.&.
    7A60: 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74  // G3.u.<#t.<2t.<3t
    7A70: 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04  // ...&.G..u....&I.
    7A80: BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2  // ........&.G..t..
    7A90: D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00  // ..&.....c...N...
    7AA0: C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33  // ..b......P.....3
    7AB0: C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01  // ....&..2..J.&.G.
    7AC0: A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C  // ...&.G....&.G..L
    7AD0: 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33  // .&.G....`.X.R2.3
    7AE0: D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A  // .......)u.2.3...
    7AF0: CD 17 5A C3 06 1E 60 2E 8E 1E E1 03 2E 83 0E EB  // ..Z...`.........
    7B00: 03 00 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01  // ..un.>...tg.....
    7B10: 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E  // ..b.2.......P..>
    7B20: 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A  // b.P2.....2.AQ..J
    7B30: 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50  // .2......)u=QR..P
    7B40: 04 B4 08 E8 7C D3 0A C0 75 02 B0 20 33 D2 32 E4  // ....|...u.. 3.2.
    7B50: CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59  // ....)u.Z..Y....Y
    7B60: E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8  // ...w.2....X..P..
    7B70: AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5  // ..a...ZYY....R*.
    7B80: 38 C6 7D 02 32 C0 2E 8E 06 E3 03 5A C3 A0 85 04  // 8.}.2......Z....
    7B90: F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4  // ................
    7BA0: 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD  // ..m...2.........
    7BB0: 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04  // ..Ku.2..W..S..b.
    7BC0: 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1  // ..u...t..5.[..+.
    7BD0: 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A  // ......2....2.+..
    7BE0: DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20  // .t**..&....R... 
    7BF0: 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3  // .......Z........
    7C00: A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB  // .....Hu.........
    7C10: F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3  // .......B.$....J.
    7C20: 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E E1 03  // ...B...J........
    7C30: 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E E1 03 8B  // ..c.............
    7C40: 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02  // .c...P........u.
    7C50: B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E E1  // ..X.............
    7C60: 03 80 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80  // ..>I..t..>I..t..
    7C70: 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E  // >I..t..>I....P..
    7C80: 06 E5 03 A0 10 04 24 30 3C 30 74 05 2E 8E 06 E7  // ......$0<0t.....
    7C90: 03 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01  // .X..t......N....
    7CA0: 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6  // .+.2...J........
    7CB0: E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A  // .......u...8.~..
    7CC0: DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04  // ............:.J.
    7CD0: 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A  // t..........@....
    7CE0: D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01  // ..........+.....
    7CF0: 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3  // ..S..*.2.2.+.+..
    7D00: 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58  // .............u.X
    7D10: B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6  // . ........u..S..
    7D20: 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91  // *.t.......X.....
    7D30: B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E E7 03 8A  // . ..............
    7D40: C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34  // .".....t.0.....4
    7D50: 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E E7  // "...............
    7D60: 03 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74  // ....."...(.....t
    7D70: 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0  // ................
    7D80: F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1  // ................
    7D90: 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 E7 03 8B C1  // ................
    7DA0: E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8  // ...u......$.....
    7DB0: 2E 8E 06 E7 03 8A C1 8A E6 E8 6D 00 75 02 8A DE  // ..........m.u...
    7DC0: F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3  // ..........+.....
    7DD0: 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13  // ..*..,Q..VW.....
    7DE0: C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00  // .....+.+.... ...
    7DF0: 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59  //  ........_^....Y
    7E00: E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3  // ........W.......
    7E10: AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3  // ...+.... .......
    7E20: AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01  // ._....u.........
    7E30: 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59  // +.8.v.2.Q......Y
    7E40: 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0  // 2..P..>I..t.....
    7E50: 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A  // .......P.....RS.
    7E60: DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1  // .2.....P....P...
    7E70: 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04  // L...[..[Z.R...J.
    7E80: F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E  // ..2.....Z.......
    7E90: 8A A6 3A 7E 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 3A  // ..:~...........:
    7EA0: 7E C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3  // ~.....03<?......
    7EB0: FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A  // ..&..........t..
    7EC0: D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63  // ......u..V.E...c
    7ED0: 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A  // ............R...
    7EE0: C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A  // ..&J....2...Z.S.
    7EF0: DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3  // .2.....P......[.
    7F00: 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04  // R..2.R...&...&J.
    7F10: 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A  // Z....t...L...u.Z
    7F20: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03  // .R...J...2......
    7F30: 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2  // .N..........Z...
    7F40: F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A  // .&J..........t..
    7F50: C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC  // .2..&L..........
    7F60: C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8  // ............ ...
    7F70: EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04  // ....2....>..&.}.
    7F80: 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8  // .....S..........
    7F90: 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F  // ..........U.....
    7FA0: FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0  // .<.t....v.<Ut.2.
    7FB0: 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0  // [...............
    7FC0: 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5  // [....6......t%..
    7FD0: 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2  // *.....R2........
    7FE0: 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8  // +.Q....+.+.Y..Z.
    7FF0: 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A  // ................
    8000: E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB  // .2..........+...
    8010: F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E E1 03 89 0E 60  // ..+.Nu.........`
    8020: 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6  // ...$`. t........
    8030: 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8  // .........>I..t..
    8040: 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A  // ..t.......t..B..
    8050: 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A  // 6......8.~...td.
    8060: E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03  // ......\8.tX.....
    8070: 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A  // |........I...~D.
    8080: E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74  // .*...u.8.t8..8.t
    8090: 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD  // 2....8.~....~...
    80A0: 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13  // ......}.....8.t.
    80B0: 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE  // ........*.......
    80C0: C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E E1 03 A2 62  // ...............b
    80D0: 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A  // .2....&L..N....z
    80E0: FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC  // .t..>I..w.......
    80F0: FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E E1 03  // .....P..'.......
    8100: 8A 26 49 04 E8 7E 9C 74 07 C7 06 50 04 00 00 C3  // .&I..~.t...P....
    8110: E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3  // .H.t....t.w..w..
    8120: E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A  // .......|.t...N..
    8130: D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7  // ........J.R.&...
    8140: E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B  // .....Z.....0....
    8150: C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7  // ..g....R..J.....
    8160: 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E  // &........Z.U....
    8170: 1E E1 03 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74  // ....&I....t....t
    8180: 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3  // .w@......S......
    8190: E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E  // ..............+>
    81A0: 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0  // J....R.&...&J...
    81B0: 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8  // ...+.Z..J.......
    81C0: 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8  // ......|.t.......
    81D0: 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26  // .........R..J..&
    81E0: 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9  // ....+...+.Z.....
    81F0: C3 2E 8E 1E E1 03 2E 8E 06 E7 03 E8 5D FA 74 11  // ............].t.
    8200: 80 3E 49 04 07 7C 18 2E 8E 06 E5 03 74 03 E9 B1  // .>I..|......t...
    8210: 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1  // ..I...&.....F...
    8220: 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E  // P.........+....>
    8230: 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26  // I..u....&...F.E&
    8240: 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02  // ... .F.E..P.....
    8250: B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20  // ..........V.... 
    8260: E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C  // .O.........+..>.
    8270: 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6  // .2....u.&.}..u..
    8280: 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3  // ..........t.GVW.
    8290: A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE  // ._^t#.......t.G.
    82A0: CA 75 E2 FE CC 74 0F 2E 8E 1E E1 03 C4 3E 7C 00  // .u...t.......>|.
    82B0: B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46  // ......2........F
    82C0: 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E  // ...>I..|.u..Z...
    82D0: 06 E3 03 E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC  // ............+...
    82E0: B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A  // ..........>I..r.
    82F0: F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4  // ....`u.......u..
    8300: 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A  // ...........Q..&.
    8310: 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8  // ....F.E.6J...X..
    8320: 00 01 32 D2 E9 44 FF 2E 8E 06 E3 03 A1 50 04 8B  // ..2..D.......P..
    8330: D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04  // .2.R..2..&J..&..
    8340: 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E  // Z........+...S.>
    8350: 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A  // J.O.........2.&.
    8360: 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00  // .....t....F...f.
    8370: 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33  // E..Ku.[...2....3
    8380: ED EB 03 BD 01 00 2E 8E 1E E1 03 2E 8E 06 E7 03  // ................
    8390: 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 E5 03 80 FC  // .&I....t........
    83A0: 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF  // .t.|=.........2.
    83B0: D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03  // ....P....J...2..
    83C0: C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8  // .......t....L...
    83D0: FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2  // ..u.....u.....G.
    83E0: FC C3 50 2E 8E 06 E7 03 A1 50 04 E8 EE FA 8B F8  // ..P......P......
    83F0: A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F  // .P..&J...X..t.$.
    8400: C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0  // .6|....6....2...
    8410: 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3  // ......ti.....U..
    8420: 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75  // .........P.....u
    8430: 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89  // '..U.#....N.#.&.
    8440: 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E  // .....N..u......>
    8450: 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31  // .X.r........#.&1
    8460: 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE  // ...%.#.&1.. ..P.
    8470: CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9  // .u......>.X.I...
    8480: C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC  // ...P.....t..&0..
    8490: 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81  // &0.. ..P........
    84A0: EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85  // .?.X. .......&..
    84B0: FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01  // ....O.........?.
    84C0: 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81  // X........8.r.2..
    84D0: C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA  // ............2...
    84E0: 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA  // f...Q...f...J...
    84F0: 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA  // du..h...Zu..`...
    8500: AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F  // ..u....R..f...f.
    8510: B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7  // ..P.f..f.....f..
    8520: 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03  // .....f...Z..J...
    8530: A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 E3 03 58  // .P.P...........X
    8540: 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A  // WQP.....;.......
    8550: C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF  // ...s...&..fG..u.
    8560: 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0  // f.....XY_.....8.
    8570: 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59  // r.Q2...I.......Y
    8580: 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B  // +.....R3...f....
    8590: C7 66 C1 C7 10 E8 ED 97 74 16 38 E0 74 12 0F B6  // .f......t.8.t...
    85A0: D0 E8 63 C7 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10  // ..c...f.....f...
    85B0: 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F  // Z.....|.......b.
    85C0: 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80  // ..........u.....
    85D0: CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E  // ..PS..2.....P.[.
    85E0: 8E 06 E3 03 E8 07 F9 8B F8 8B 2E 85 04 58 32 F6  // .............X2.
    85F0: 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC  // R.6J.V.&...6....
    8600: 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0  // .u..|..u...F....
    8610: B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50  // .....um......ZXP
    8620: 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2  // RJ..WQQW..2.....
    8630: FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA  // ._G..8.v.2...I..
    8640: 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF  // G..Y..Y_........
    8650: 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7  // [KZQW...&.%.....
    8660: 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB  // _G+.B;.v.3...I..
    8670: 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8  // G..Y............
    8680: 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E E1  // ................
    8690: 03 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04  // ..>c..t.......u.
    86A0: CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F  // .B.......u......
    86B0: 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04  // .&f...&f..-...f.
    86C0: 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24  // .. .......t..f.$
    86D0: DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A  // ....t.. .f.$....
    86E0: D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB  // ..S...~..SP.....
    86F0: D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A  // .........`.t....
    8700: C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00  // ..,...t.&.......
    8710: 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E  // ..t.&.].X[......
    8720: 1E E1 03 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8  // ....>I.3........
    8730: FE F2 C3 E8 30 F8 C3 9C FA E8 62 05 B2 C0 B9 03  // ....0.....b.....
    8740: 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88  // ...........t.G&.
    8750: 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E  // ......... ......
    8760: E1 03 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06  // ...&I....t....w.
    8770: 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8  // t........|.tL...
    8780: E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E E3 03 F6 C3  // ................
    8790: 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3  // .u........%.....
    87A0: EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8  // ..%...%.........
    87B0: 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25  // ...........%...%
    87C0: EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 E3 03 A1  // .........P......
    87D0: 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3  // J..........X&...
    87E0: 2E 8E 1E E1 03 8A 26 49 04 E8 6F F4 74 0F 80 FC  // ......&I..o.t...
    87F0: 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC  // .w.t.._....F....
    8800: 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E E3 03  // .|.t)..5........
    8810: BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74  // ...2.........".t
    8820: 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A  // ......}....~...J
    8830: 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E E3 03 8A  // ................
    8840: 05 8B EC 88 46 1A C3 2E 8E 1E E1 03 8A 3E 62 04  // ....F........>b.
    8850: 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49  // ....2..P.......I
    8860: 04 3C 0D 76 4A 2E 8E 06 E7 03 E8 EE F3 75 33 8A  // .<.vJ........u3.
    8870: 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03  // .J..............
    8880: 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73  // .N........A..8.s
    8890: 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0  // Y....c..........
    88A0: EF C3 2E 8E 06 E5 03 80 F9 07 74 C3 E9 83 00 75  // ..........t....u
    88B0: 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9  // .2...<.u.:6..u..
    88C0: 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05  // .........u......
    88D0: 8B C2 E8 4C F6 C3 3C 07 75 04 E8 2B 7E C3 3C 08  // ...L..<.u..+~.<.
    88E0: 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB  // u...t.....2.2.+.
    88F0: 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16  // :6..t...........
    8900: 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB  // c...........+.+.
    8910: 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0  // &.e.P.>N........
    8920: 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3  // ............X. .
    8930: AB C3 B9 01 00 B4 0A E8 88 C5 FE C2 3A 16 4A 04  // ............:.J.
    8940: 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74  // t....2.2...:6..t
    8950: 2E FE C6 EB ED 89 14 2E 8E 06 E7 03 E8 FC F2 74  // ...............t
    8960: 0E 2E 8E 06 E5 03 80 F9 07 74 04 32 FF EB 10 8B  // .........t.2....
    8970: C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33  // ........O..J...3
    8980: C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7  // ..6....J......p.
    8990: 2E 8E 1E E1 03 F6 06 87 04 08 74 03 CD 42 C3 E8  // ..........t..B..
    89A0: 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E E1 03 8A DF  // v....F..........
    89B0: 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05  // 2.....P...8.b.u.
    89C0: 8B C2 E8 5C F5 C3 2E 8E 1E E1 03 8A DF 32 FF D1  // ...\.........2..
    89D0: E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56  // ...P...`....N..V
    89E0: 12 C3 2E 8E 1E E1 03 A0 87 04 24 80 0A 06 49 04  // ..........$...I.
    89F0: 8A 26 4A 04 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .&J..>b....F..^.
    8A00: 89 4E 16 89 56 12 C3 2E 8E 1E E1 03 3C 04 7F 1B  // .N..V.......<...
    8A10: 50 52 BA CC 03 EC A8 01 5A 58 74 08 80 3E 63 04  // PR......ZXt..>c.
    8A20: D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32  // .t...>c..u.<.s.2
    8A30: E4 8B E8 D1 E5 2E FF A6 D2 89 0A 8A 2A 8A 3C 8A  // ............*.<.
    8A40: 71 8A BB 89 BB 89 BB 89 96 8A AE 8A B2 8A BB 89  // q...............
    8A50: BB 89 BB 89 BB 89 BB 89 BB 89 E0 8A BB 89 E4 8A  // ................
    8A60: FF 8A BB 89 3E 8B BB 89 4C 8B 67 8B 6E 8B 7A 8B  // ....>...L.g.n.z.
    8A70: 9E 8B 80 3E 49 04 13 74 15 E8 FC F4 8B C3 86 E0  // ...>I..t........
    8A80: E8 AD EF 0B ED 74 07 8A C7 32 FF 26 88 01 E8 D0  // .....t...2.&....
    8A90: F4 C3 E8 E3 F4 8A C7 E8 81 FC 0B ED 74 F0 26 88  // ............t.&.
    8AA0: 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8 C9 F4 1F  // }....>I..t......
    8AB0: 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01  // ..t.............
    8AC0: 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE  // 2...............
    8AD0: C4 E2 F4 AC E8 44 FC EB B5 80 FB 01 77 B0 E8 80  // .....D......w...
    8AE0: F4 B2 C0 B0 30 E8 38 F1 24 F7 80 26 65 04 DF 80  // ....0.8.$..&e...
    8AF0: FB 00 74 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D  // ..t.....e. .....
    8B00: 01 8A C3 B2 C0 E8 18 F1 8B C8 EE B0 20 EE 8B EC  // ............ ...
    8B10: 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8 42 F4 B9  // .N..x........B..
    8B20: 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05  // ..2........B.&..
    8B30: FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D  // ..J..G.......B..
    8B40: 26 88 05 E8 20 F4 EB 5A E8 CE 00 C3 8B FA 51 8B  // &... ..Z......Q.
    8B50: C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83  // .&.5&.m.&.M.....
    8B60: C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 F3 F3 B2 C0  // ..CY.....u......
    8B70: B0 30 E8 AB F0 24 7F F6 C7 01 74 02 0C 80 B4 30  // .0...$....t....0
    8B80: E8 AD EE EB 1D FE CB 75 1C E8 D5 F3 B2 C0 B0 30  // .......u.......0
    8B90: E8 8D F0 EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8  // ......u.....4...
    8BA0: 8E EE E8 BC F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16  // ..............N.
    8BB0: 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26  // .v....Q.....&.5&
    8BC0: 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA  // .m.&.M....CY....
    8BD0: C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46  // ..........2....F
    8BE0: 0E C3 E8 7C F3 B2 C0 B0 34 E8 34 F0 8A F8 EE B0  // ...|....4.4.....
    8BF0: 30 E8 2C F0 B3 01 A8 80 75 05 B3 00 C0 EF 02 8B  // 0.,.....u.......
    8C00: EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A  // ..^...Q...s..*..
    8C10: C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04 02 74 03  // ..R.CY........t.
    8C20: E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03  // ......9.......t.
    8C30: E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0  // .........P....P.
    8C40: 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64  // ;..P....Y..Y...d
    8C50: F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58  // ....2|.........X
    8C60: C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C FA EE 42  // .R.9.ZS........B
    8C70: 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53  // ..........[....S
    8C80: 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC  // ......BB........
    8C90: 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51  // ............[.PQ
    8CA0: E8 BE F2 B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3  // .........u...YX.
    8CB0: 2E 8E 1E E1 03 8B F8 24 0F 81 E7 F0 00 C1 EF 03  // .......$........
    8CC0: 83 FF 06 7F 18 2E FF A5 62 8C 6A 8C 7F 8C 1D 8D  // ........b.j.....
    8CD0: 79 8D 3C 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4  // y.<.t.<.........
    8CE0: 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B  // .......<.w.PSPR.
    8CF0: 16 63 04 B0 07 E8 28 EF 8A E0 D0 EC 80 E4 01 A8  // .c....(.........
    8D00: 40 74 03 80 CC 02 B0 12 E8 15 EF 40 A3 85 04 B0  // @t.........@....
    8D10: 09 E8 0C EF A8 80 74 04 D1 2E 85 04 A1 85 04 8B  // ......t.........
    8D20: D0 3D F4 01 73 1B BA E0 01 3D C2 01 73 13 BA 90  // .=..s....=..s...
    8D30: 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8  // .=|.s..^.=J.s...
    8D40: 00 89 16 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B  // .....ZX......].[
    8D50: 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3  // X..2...t...<.t..
    8D60: 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80  // .<.t............
    8D70: F9 08 7E 04 81 E9 01 01 87 1E 85 04 53 E8 98 F2  // ..~.........S...
    8D80: 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74  // [......t...t...t
    8D90: 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06  // 8..t<..t@...|...
    8DA0: 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E  // ~..........t.2..
    8DB0: 8A 97 5D 8D 89 0E 85 04 88 16 84 04 89 2E 0C 01  // ..].............
    8DC0: 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB  // ........*.......
    8DD0: D6 BD AA 5C B9 08 00 EB CA BD BD 64 B9 10 00 EB  // ...\.......d....
    8DE0: C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07  // ...u............
    8DF0: 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB  // w5...w...u...|..
    8E00: 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5  // &..... ...u.....
    8E10: 2E 8B 2E 9C 75 EB 10 0E 07 8A DF 32 FF 80 EB 02  // ....u......2....
    8E20: D1 E3 2E 8B AF D0 8D 8B C5 8B EC 89 4E 16 89 56  // ............N..V
    8E30: 12 89 46 0A 8C 46 1E C3 BD 64 AA 5C AA 60 AA 64  // ..F..F...d.\.`.d
    8E40: BD 64 BD 74 53 06 8A 26 49 04 E8 D2 C2 26 8A 47  // .d.tS..&I....&.G
    8E50: 02 26 8A 67 33 F6 C4 01 74 22 BD BD 64 3C 10 7D  // .&.g3...t"..d<.}
    8E60: 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD AA 5C 8C  // ..q.....<.}...\.
    8E70: 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10  // ...........-..<.
    8E80: 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05  // }...<.t.....<.t.
    8E90: 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86  // .....&.G..t.....
    8EA0: C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2  // .2........[.....
    8EB0: BA CE 03 EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8  // ................
    8EC0: 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0  // ...........P$...
    8ED0: 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD  // t"..3....<.u....
    8EE0: BD 64 EB 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7  // .d....u.........
    8EF0: 08 BD AA 5C E8 2D 00 58 A8 80 74 00 BA C4 03 B8  // ...\.-.X..t.....
    8F00: 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75  // ...............u
    8F10: 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8  // .....P.X....2...
    8F20: 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26  // .......u.....u.&
    8F30: 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 E3  // .~..u...........
    8F40: 03 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6  // .......@S.....[.
    8F50: C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28  // ..t.. .........(
    8F60: 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3  // 2...2.Q...t.F...
    8F70: A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5  // ... t.. .+...Y..
    8F80: 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06  // .t.F..u....&I.P.
    8F90: 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B  // W.>..&.}.....t0.
    8FA0: EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03 47  // ....&..<.t$8.t.G
    8FB0: EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01  // ....&.......&.E.
    8FC0: A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F  // ...&.}..>......_
    8FD0: 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26  // .X.&.G3.t......&
    8FE0: C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C  // ._.....t....&..<
    8FF0: FF 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4 87  // .t.G8.I.u.&..2..
    9000: 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85  // ...........c..&.
    9010: 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE  // ...........t....
    9020: 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A  // B.$....J...B.$..
    9030: C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84  // ..............>.
    9040: 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80  // ..u.............
    9050: 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A  // t...H......c...J
    9060: 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C  // ..&............L
    9070: 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D  // ...&I.P.W.>..&.}
    9080: 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C  // .....tJ.....&..<
    9090: FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26  // .t>8.t.G....&.=&
    90A0: 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C  // .].&.M.&.U.&.E.<
    90B0: FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3  // .t...P......&...
    90C0: 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB  // ..X...&.}...2...
    90D0: FD 5F 07 58 C3 50 53 51 52 2E A1 EB 03 0B C0 74  // ._.X.PSQR......t
    90E0: 09 2E 8B 2E 9C 75 0E 07 EB 08 B8 30 11 B7 02 E8  // .....u.....0....
    90F0: D0 BD 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E  // ..ZY[X.<.|....S.
    9100: 8E 1E E1 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04  // ......2.......P.
    9110: 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45 3C  // .5[..V..QS&.F.E<
    9120: 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75  // ...u.2..@<.t2<.u
    9130: 05 E8 D4 75 EB 62 3C 08 75 08 0A D2 74 5A FE CA  // ...u.b<.u...tZ..
    9140: EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01 00  // .'....t.&.^.E...
    9150: B4 09 E8 6D BD FE C2 3A 16 4A 04 72 0C 32 D2 89  // ...m...:.J.r.2..
    9160: 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8 EA  // .:6..s......+P..
    9170: EA 75 08 B8 00 08 E8 49 BD EB 09 80 3E 49 04 07  // .u.....I....>I..
    9180: 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D  // t.2..>b.S..U.%.]
    9190: 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01  // [.>b.X..[Y..Z...
    91A0: 00 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 71 ED  // .u.....:>b.u..q.
    91B0: C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA  // ..d.3..6....J...
    91C0: B8 01 06 E8 FC BC C3 2E 8E 1E E1 03 0A C0 75 0D  // ..............u.
    91D0: E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75  // ......^..F...<.u
    91E0: 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 5D  // ..A....F.......]
    91F0: 92 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8  // ..:.r.....2.....
    9200: 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3  // ..]...t...u.....
    9210: A0 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6  // ...$0<0t....u...
    9220: C3 01 74 E9 C3 BF 5D 92 2E 8A 0D 32 C0 83 C7 04  // ..t...]....2....
    9230: 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE  // .;.t....;.t.....
    9240: C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06  // .8.~............
    9250: 89 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74 18  // ...t..........t.
    9260: BB 08 00 BA B4 03 E8 1C ED 74 21 B7 01 E8 C9 E9  // .........t!.....
    9270: 80 FA D4 74 17 86 FB C3 BA D4 03 E8 07 ED 74 0C  // ...t..........t.
    9280: B7 02 E8 B4 E9 80 FA B4 74 02 86 FB C3 0F 08 0F  // ........t.......
    9290: 08 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01 01  // ................
    92A0: 01 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01  // ................
    92B0: 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08 FF  // ................
    92C0: 0E 00 00 3F 00 10 01 08 00 00 00 00 01 00 02 02  // ...?............
    92D0: 01 00 04 04 01 00 05 02 05 00 06 01 06 05 06 00  // ................
    92E0: 08 01 08 00 07 02 07 06 07 00 55 02 34 00 90 00  // ..........U.4...
    92F0: D2 00 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8  // ........_W..PfR.
    9300: F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8  // .............f..
    9310: 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3  // ..f....2.f..fZX.
    9320: 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8  // f.O.fRfVSWP..uD.
    9330: C8 FF FF FF 66 33 F6 66 BB D0 05 E8 00 01 00 00  // ....f3.f........
    9340: C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66 D1 E2  // .....@u+f....f..
    9350: 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8  // f..f@...f..f....
    9360: E8 00 00 00 66 BB 12 00 E8 DF 00 00 00 66 58 32  // ....f........fX2
    9370: E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03  // .fPX_[f^fZ..f.O.
    9380: 52 51 53 57 66 56 50 8A FB 80 E3 7F 0A DB 75 26  // RQSWfVP.......u&
    9390: E8 67 FF FF FF C1 E2 10 66 8B D1 C1 E2 02 66 BE  // .g......f.....f.
    93A0: 00 00 E8 C7 00 00 00 66 BE 00 02 E8 BE 00 00 00  // .......f........
    93B0: 66 58 32 E4 66 50 58 66 5E 5F 5B 59 5A C3 66 B8  // fX2.fPXf^_[YZ.f.
    93C0: 4F 03 66 51 57 56 53 52 50 8A FB 80 E3 7F 0A DB  // O.fQWVSRP.......
    93D0: 75 39 8A DA 57 5A E8 21 FF FF FF 66 33 F6 66 53  // u9..WZ.!...f3.fS
    93E0: 66 BB D0 05 E8 57 00 00 00 80 E4 01 66 5B 80 E7  // f....W......f[..
    93F0: FE 0A FC 66 BE 00 00 E8 DE 00 00 00 66 BE 00 02  // ...f........f...
    9400: E8 D5 00 00 00 66 58 32 E4 66 50 58 5A 5B 5E 5F  // .....fX2.fPXZ[^_
    9410: 66 59 C3 90 53 50 51 F6 C7 80 74 20 66 BB 9C 1B  // fY..SPQ...t f...
    9420: E8 1B 00 00 00 A8 01 74 13 66 B9 FF FF 66 BB A3  // .......t.f...f..
    9430: 1B E8 0A 00 00 00 A8 01 75 02 E2 F1 59 58 5B C3  // ........u...YX[.
    9440: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    9450: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    9460: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 52 E8  // .f......f...X.R.
    9470: A0 FF FF FF 81 E2 FF FF FF 02 66 BB 04 1A E8 BD  // ..........f.....
    9480: FF FF FF 25 00 00 00 FD 03 C2 66 25 00 F0 E8 B9  // ...%......f%....
    9490: FF FF FF 66 BB 05 1A E8 B0 FF FF FF 66 81 E2 FF  // ...f........f...
    94A0: 0F 66 BB 01 1A E8 96 FF FF FF 24 03 8A C8 66 D3  // .f........$...f.
    94B0: EA 66 BB 06 1A E8 86 FF FF FF 66 03 C2 66 BB 0D  // .f........f..f..
    94C0: 1A E8 86 FF FF FF 66 8B C2 24 FC C1 E0 10 66 BB  // ......f..$....f.
    94D0: 5C 1B E8 75 FF FF FF 5A C3 90 52 66 53 66 51 E8  // \..u...Z..RfSfQ.
    94E0: 30 FF FF FF 33 C0 8A C3 66 53 66 BB 79 1A E8 59  // 0...3...fSf.y..Y
    94F0: FF FF FF 66 5B 66 49 66 81 E1 FF 00 66 41 32 C0  // ...f[fIf....fA2.
    9500: 66 53 66 BB 78 1A E8 41 FF FF FF 66 5B 26 8A 42  // fSf.x..A...f[&.B
    9510: 02 C1 E0 0A 26 8A 42 01 C1 E0 0A 26 8A 02 C1 E0  // ....&.B....&....
    9520: 02 F6 C7 01 75 03 C1 E0 02 66 53 66 BB 7C 1A E8  // ....u....fSf.|..
    9530: 18 FF FF FF 66 5B 83 C2 04 E2 D2 66 59 66 5B 5A  // ....f[.....fYf[Z
    9540: C3 00 75 38 68 38 68 38 68 38 53 38 53 38 53 38  // ..u8h8h8h8S8S8S8
    9550: 53 38 95 34 0C 35 36 35 77 36 76 36 76 36 BC 36  // S8.4.565w6v6v6.6
    9560: 21 37 51 37 0E 38 37 38 37 38 AE 36 A1 36 A1 36  // !7Q7.87878.6.6.6
    9570: A1 36 A1 36 A1 36 BC 36 21 37 51 37 0E 38 3C 38  // .6.6.6.6!7Q7.8<8
    9580: 82 38 37 38 37 38 FF FF FF FF FF FF 00 00 FF FF  // .87878..........
    9590: 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    95A0: 00 00 FF 00 00 00 00 00 08 10 00 08 10 18 00 08  // ................
    95B0: 10 18 99 32 01 99 32 02 A7 46 03 87 46 03 BE 33  // ...2..2..F..F..3
    95C0: 03 72 33 03 9A 32 04 B3 32 04 C3 32 04 99 32 03  // .r3..2..2..2..2.
    95D0: 00 00 00 00 46 3A 00 02 46 3A 01 02 46 3A 02 02  // ....F:..F:..F:..
    95E0: 46 3A 03 02 46 3A 04 02 46 3A 05 02 40 3C 00 02  // F:..F:..F:..@<..
    95F0: 40 3C 01 02 40 3C 02 02 40 3C 03 02 40 3C 04 02  // @<..@<..@<..@<..
    9600: 40 3C 05 02 75 3C 00 02 75 3C 01 02 75 3C 02 02  // @<..u<..u<..u<..
    9610: 75 3C 03 02 75 3C 04 02 75 3C 05 02 B0 3E 00 02  // u<..u<..u<...>..
    9620: B0 3E 01 02 B0 3E 02 02 B0 3E 03 02 B0 3E 04 02  // .>...>...>...>..
    9630: B0 3E 05 02 B0 3E 00 02 B0 3E 01 02 B0 3E 02 02  // .>...>...>...>..
    9640: B0 3E 03 02 B0 3E 04 02 B0 3E 05 02 77 3D 00 02  // .>...>...>..w=..
    9650: 77 3D 01 02 77 3D 02 02 77 3D 03 02 77 3D 04 02  // w=..w=..w=..w=..
    9660: 77 3D 05 02 B3 3D 00 02 B3 3D 01 02 B3 3D 02 02  // w=...=...=...=..
    9670: B3 3D 03 02 B3 3D 04 02 B3 3D 05 02 24 3D 00 02  // .=...=...=..$=..
    9680: 24 3D 01 02 24 3D 02 02 24 3D 03 02 24 3D 04 02  // $=..$=..$=..$=..
    9690: 24 3D 05 02 58 3D 00 02 58 3D 01 02 58 3D 02 02  // $=..X=..X=..X=..
    96A0: 58 3D 03 02 58 3D 04 02 58 3D 05 02 08 41 00 00  // X=..X=..X=...A..
    96B0: 3B 41 01 00 3B 41 02 00 28 41 00 00 16 40 00 02  // ;A..;A..(A...@..
    96C0: 0F 3E 00 02 0F 3E 01 02 0F 3E 02 02 0F 3E 03 02  // .>...>...>...>..
    96D0: 0F 3E 04 02 0F 3E 05 02 2E 40 00 02 83 42 05 00  // .>...>...@...B..
    96E0: 83 42 01 00 83 42 00 00 83 42 02 00 C4 42 00 00  // .B...B...B...B..
    96F0: C4 42 02 00 09 43 00 00 99 3F 00 02 99 3F 01 02  // .B...C...?...?..
    9700: 99 3F 02 02 99 3F 03 02 99 3F 04 02 99 3F 05 02  // .?...?...?...?..
    9710: 55 41 00 00 7D 41 00 00 FE 41 00 00 79 42 00 00  // UA..}A...A..yB..
    9720: 5D 3E 00 02 5D 3E 01 02 5D 3E 02 02 5D 3E 03 02  // ]>..]>..]>..]>..
    9730: 5D 3E 04 02 5D 3E 05 02 78 42 00 01 78 42 00 01  // ]>..]>..xB..xB..
    9740: 7C 3B 00 02 7C 3B 01 02 7C 3B 02 02 7C 3B 03 02  // |;..|;..|;..|;..
    9750: 7C 3B 04 02 7C 3B 05 02 9D 41 00 00 79 42 00 00  // |;..|;...A..yB..
    9760: 79 42 00 00 79 42 00 00 AE 40 00 00 A0 3C 00 02  // yB..yB...@...<..
    9770: A0 3C 01 02 A0 3C 02 02 A0 3C 03 02 A0 3C 04 02  // .<...<...<...<..
    9780: A0 3C 05 02 CF 3C 00 02 CF 3C 01 02 CF 3C 02 02  // .<...<...<...<..
    9790: CF 3C 03 02 CF 3C 04 02 CF 3C 05 02 05 3D 00 02  // .<...<...<...=..
    97A0: 05 3D 01 02 05 3D 02 02 05 3D 03 02 05 3D 04 02  // .=...=...=...=..
    97B0: 05 3D 05 02 C0 41 00 00 E3 41 00 00 A1 3D 01 02  // .=...A...A...=..
    97C0: A1 3D 02 02 FD 3D 01 02 FD 3D 02 02 A6 00 01 01  // .=...=...=......
    97D0: 94 AA 22 AB 7A AB C0 C9 04 D4 32 AC 00 00 CA C9  // ..".z.....2.....
    97E0: 00 00 46 AD 46 AE F2 AF 14 B1 E0 B5 68 B7 70 B7  // ..F.F.......h.p.
    97F0: 7A D1 AC D1 AE BC C0 BD E2 BD 00 00 00 00 00 00  // z...............
    9800: 00 00 00 00 00 00 70 BE 00 00 00 00 BC DD 5C DE  // ......p.......\.
    9810: 00 00 30 C1 A8 C1 1C C2 00 00 5A C2 86 C2 00 00  // ..0.......Z.....
    9820: A8 C2 C2 C2 42 C3 08 C4 B8 C5 02 C6 00 E4 98 C6  // ....B...........
    9830: D6 C6 AE C7 00 00 EE E0 02 C9 32 E3 E4 C9 08 E0  // ..........2.....
    9840: 16 CC 76 CC 80 CC 8A CC C6 CC 76 CE 6C D6 7E CE  // ..v.......v.l.~.
    9850: EE CF EE D0 00 00 BC D1 00 00 C0 E2 00 00 FA B7  // ................
    9860: 5C BC 00 00 00 00 00 00 96 D6 DC D7 14 DB 60 DD  // \.............`.
    9870: 80 D3 4A 00 01 01 00 00 00 00 00 00 54 98 38 99  // ..J.........T.8.
    9880: A4 99 D8 99 00 00 06 AA 00 00 26 9A 02 9B 0E 9B  // ..........&.....
    9890: 2E 9B A2 9B BA 9B 00 00 EE A9 00 00 FC 9E 00 00  // ................
    98A0: 00 00 02 9F 34 A3 60 A0 00 00 62 A9 8A A9 B2 A3  // ....4.`...b.....
    98B0: 00 00 00 00 14 A8 20 A9 00 00 3E AA E4 00 01 02  // ...... ...>.....
    98C0: 4E 0C 80 02 C0 00 90 01 2D 00 20 00 40 00 01 00  // N.......-. .@...
    98D0: 03 00 00 00 00 00 00 00 02 00 E6 55 D6 09 80 02  // ...........U....
    98E0: A0 00 E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00  // ....-...`.......
    98F0: 00 00 08 08 06 00 12 3C A0 0F 20 03 00 01 58 02  // .......<.. ...X.
    9900: 1C 00 28 00 80 00 01 00 04 00 00 00 00 00 00 00  // ..(.............
    9910: 00 00 6A 3C 64 19 00 04 40 01 00 03 26 00 18 00  // ..j<d...@...&...
    9920: 88 00 03 00 06 00 00 00 00 00 00 00 06 00 55 3C  // ..............U<
    9930: 30 2A 00 05 08 02 C0 03 28 00 60 00 70 00 01 00  // 0*......(.`.p...
    9940: 03 00 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05  // ...........<0*..
    9950: 98 01 00 04 2A 00 30 00 70 00 01 00 03 00 00 00  // ....*.0.p.......
    9960: 00 00 00 00 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    9970: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    9980: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    9990: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    99A0: 6C 00 02 02 01 02 32 0F 30 75 00 00 30 75 00 00  // l.....2.0u..0u..
    99B0: 00 00 00 00 40 7E 05 00 00 00 00 00 00 00 00 00  // ....@~..........
    99C0: C0 27 09 00 00 00 00 00 92 F4 00 00 00 00 84 03  // .'..............
    99D0: 9A 0B 70 17 00 00 00 00 28 88 04 00 00 00 00 00  // ..p.....(.......
    99E0: 00 00 00 00 00 00 00 00 40 9C C4 09 10 27 52 03  // ........@....'R.
    99F0: 1F 40 10 27 10 27 10 27 00 00 00 00 00 00 00 00  // .@.'.'.'........
    9A00: 00 00 00 00 00 00 00 00 00 00 00 00 34 00 02 01  // ............4...
    9A10: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    9A20: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    9A30: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    9A40: 4E 00 01 03 00 00 00 00 00 00 00 00 00 00 00 00  // N...............
    9A50: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    9A60: 00 00 20 00 00 00 00 00 1D 3C 01 00 00 00 00 00  // .. ......<......
    9A70: 00 48 C8 00 07 5A 5A 07 7D 00 00 00 00 00 00 00  // .H...ZZ.}.......
    9A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DC 00  // ................
    9A90: 01 01 68 48 6A 48 6B 48 69 48 68 48 6A 48 6B 48  // ..hHjHkHiHhHjHkH
    9AA0: 69 48 90 00 00 00 00 08 08 08 08 00 00 6C 48 6E  // iH...........lHn
    9AB0: 48 6F 48 6D 48 6C 48 6E 48 6F 48 6D 48 91 00 00  // HoHmHlHnHoHmH...
    9AC0: 00 00 08 08 08 08 00 00 70 48 72 48 73 48 71 48  // ........pHrHsHqH
    9AD0: 70 48 72 48 73 48 71 48 92 00 00 00 00 08 08 08  // pHrHsHqH........
    9AE0: 08 00 00 74 48 76 48 77 48 75 48 74 48 76 48 77  // ...tHvHwHuHtHvHw
    9AF0: 48 75 48 93 00 00 00 00 08 08 08 08 00 00 78 48  // HuH...........xH
    9B00: 7A 48 7B 48 79 48 78 48 7A 48 7B 48 79 48 94 00  // zH{HyHxHzH{HyH..
    9B10: 00 00 00 08 08 08 08 00 00 7C 48 7E 48 7F 48 7D  // .........|H~H.H}
    9B20: 48 7C 48 7E 48 7F 48 7D 48 95 00 00 00 00 08 08  // H|H~H.H}H.......
    9B30: 08 08 00 00 98 48 9A 48 9B 48 99 48 98 48 9A 48  // .....H.H.H.H.H.H
    9B40: 9B 48 99 48 96 00 00 00 00 01 01 01 01 00 00 80  // .H.H............
    9B50: 48 82 48 83 48 81 48 80 48 82 48 83 48 81 48 97  // H.H.H.H.H.H.H.H.
    9B60: 00 00 00 00 08 08 08 08 00 00 0C 00 01 05 E0 FF  // ................
    9B70: 3F 00 20 00 20 00 20 00 01 01 8D 48 00 01 8D 48  // ?. . . ....H...H
    9B80: 08 02 8D 48 10 03 8D 48 18 04 8D 48 1A 05 8D 48  // ...H...H...H...H
    9B90: 1C 06 83 01 05 3D 74 00 01 01 10 01 06 12 11 01  // .....=t.........
    9BA0: 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55 17 01  // .....j...j...U..
    9BB0: 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9 66 01  // .U........e...f.
    9BC0: 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55 24 01  // ..!..."..j#..U$.
    9BD0: 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01  // ..E...F...u...v.
    9BE0: 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01  // .....p...p...q..
    9BF0: 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01  // .q...r...r...s..
    9C00: 0A 73 F5 01 16 74 F6 01 0A 74 18 00 02 03 01 08  // .s...t...t......
    9C10: 04 08 09 01 02 08 00 00 00 00 00 00 00 00 00 00  // ................
    9C20: 00 00 41 03 07 01 00 4D 00 81 06 00 00 9A 28 00  // ..A....M......(.
    9C30: 00 19 00 00 00 00 80 06 01 40 0D 03 00 E8 6E 03  // .........@....n.
    9C40: 00 32 00 19 00 4D 00 A1 02 98 02 00 00 B5 01 3B  // .2...M.........;
    9C50: 01 77 00 F9 00 DE 01 06 03 00 00 D1 02 00 00 20  // .w............. 
    9C60: 03 3A 03 4C 11 02 00 53 07 00 00 00 00 00 00 01  // .:.L...S........
    9C70: 02 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    9C80: 00 00 00 00 00 07 00 02 00 00 00 00 00 05 00 00  // ................
    9C90: 00 00 00 00 00 00 00 00 00 00 10 EE 02 00 00 00  // ................
    9CA0: 00 00 00 02 FF 00 00 00 00 00 00 03 FF 00 00 00  // ................
    9CB0: 00 00 00 04 FF 00 00 00 00 00 00 05 FF 00 00 00  // ................
    9CC0: 00 00 00 06 FF 00 00 00 00 00 00 07 FF 00 00 00  // ................
    9CD0: 00 00 00 08 FF 00 00 00 00 00 00 20 03 00 00 00  // ........... ....
    9CE0: 00 00 00 52 03 00 00 00 00 00 00 84 03 00 00 00  // ...R............
    9CF0: 00 00 00 B6 03 00 00 00 00 00 00 E8 03 00 00 00  // ................
    9D00: 00 00 00 1A 04 00 00 00 00 00 00 4C 04 00 00 00  // ...........L....
    9D10: 00 00 00 7E 04 00 00 00 00 00 00 00 08 84 03 00  // ...~............
    9D20: 00 00 00 00 00 02 FF 00 00 00 00 00 00 03 FF 00  // ................
    9D30: 00 00 00 00 00 04 FF 00 00 00 00 00 00 05 FF 00  // ................
    9D40: 00 00 00 00 00 06 FF 00 00 00 00 00 00 07 FF 00  // ................
    9D50: 00 00 00 00 00 08 FF 00 00 00 00 00 00 01 08 00  // ................
    9D60: 00 00 30 75 00 00 00 00 00 80 00 00 00 00 01 E6  // ..0u............
    9D70: FF 60 EA 00 00 00 00 00 00 00 00 00 00 02 E6 FF  // .`..............
    9D80: 90 5F 01 00 00 00 00 00 00 00 00 00 03 E6 FF 44  // ._.............D
    9D90: BF 01 00 00 00 00 00 00 00 00 00 04 E6 FF 9C DA  // ................
    9DA0: 01 00 00 00 00 00 00 00 00 00 05 E6 FF 04 EB 01  // ................
    9DB0: 00 00 00 00 00 00 00 00 00 06 E6 FF D0 FB 01 00  // ................
    9DC0: 00 00 00 00 00 00 00 00 07 00 00 2C 27 02 00 00  // ...........,'...
    9DD0: 00 00 00 00 00 00 00 00 03 00 20 03 00 00 E8 03  // .......... .....
    9DE0: 30 75 00 00 00 00 08 52 03 00 00 E8 03 A0 86 01  // 0u.....R........
    9DF0: 00 00 00 0B B6 03 00 00 E8 03 40 0D 03 00 00 00  // ..........@.....
    9E00: 00 08 08 00 00 90 E2 00 00 F8 24 01 00 18 F6 00  // ..........$.....
    9E10: 00 00 00 00 00 A8 DE 00 00 09 B4 FF 18 F6 00 00  // ................
    9E20: 80 38 01 00 88 0D 01 00 00 00 00 00 00 FA 00 00  // .8..............
    9E30: 0A 9B FF A0 09 01 00 08 4C 01 00 F8 24 01 00 00  // ........L...$...
    9E40: 00 00 00 70 11 01 00 0B 82 FF 28 1D 01 00 A8 5B  // ...p......(....[
    9E50: 01 00 68 3C 01 00 00 00 00 00 E0 28 01 00 0C 69  // ..h<.......(...i
    9E60: FF C8 2C 01 00 60 67 01 00 F0 4F 01 00 00 00 00  // ..,..`g...O.....
    9E70: 00 68 3C 01 00 0D 37 FF 80 38 01 00 18 73 01 00  // .h<...7..8...s..
    9E80: 78 63 01 00 00 00 00 00 08 4C 01 00 0E 05 FF 38  // xc.......L.....8
    9E90: 44 01 00 D0 7E 01 00 00 77 01 00 00 00 00 00 C0  // D...~...w.......
    9EA0: 57 01 00 0F 00 00 F0 4F 01 00 A0 86 01 00 A0 86  // W......O........
    9EB0: 01 00 00 00 00 00 78 63 01 00 01 17 00 00 02 00  // ......xc........
    9EC0: 20 00 00 09 03 A0 0F 64 19 34 21 D0 07 A0 0F 70  //  ......d.4!....p
    9ED0: 17 94 2A 01 64 00 E4 12 E8 08 2C 27 02 00 4B 12  // ..*.d.....,'..K.
    9EE0: 78 00 78 00 64 00 78 00 78 00 78 00 64 00 01 2E  // x.x.d.x.x.x.d...
    9EF0: 36 00 00 04 91 00 00 00 94 00 AF 00 AF 00 00 00  // 6...............
    9F00: 00 00 AF 00 55 00 00 00 00 00 5E 00 02 00 69 00  // ....U.....^...i.
    9F10: 50 00 50 00 73 00 73 00 5F 00 00 00 90 20 96 00  // P.P.s.s._.... ..
    9F20: 90 00 00 06 00 00 00 00 01 06 00 00 01 02 00 01  // ................
    9F30: 01 02 00 02 01 02 00 02 01 02 00 02 01 02 00 02  // ................
    9F40: 01 02 01 03 00 10 00 00 00 00 00 00 00 10 00 00  // ................
    9F50: 00 00 00 00 02 10 00 00 00 00 00 00 00 01 00 00  // ................
    9F60: 00 00 00 00 05 00 01 01 97 00 5E 01 01 03 88 0E  // ..........^.....
    9F70: 48 00 00 00 FB 00 00 00 12 00 00 00 05 01 00 00  // H...............
    9F80: 08 00 0A 00 13 31 00 11 21 21 80 00 0A 00 13 32  // .....1..!!.....2
    9F90: 00 11 21 22 00 02 0A 00 0C 31 00 11 20 21 00 04  // ..!".....1.. !..
    9FA0: 0A 00 0C 32 00 11 20 22 00 08 0A 00 04 31 00 11  // ...2.. ".....1..
    9FB0: 1E 21 05 00 00 00 13 31 74 00 7A 00 00 00 13 32  // .!.....1t.z....2
    9FC0: 8F 00 95 00 00 00 0C 31 AA 00 B0 00 00 00 0C 32  // .......1.......2
    9FD0: C5 00 CB 00 00 00 04 31 E0 00 E6 00 00 00 01 21  // .......1.......!
    9FE0: 21 00 00 00 04 0C 01 00 10 02 00 00 08 00 00 00  // !...............
    9FF0: 01 04 90 00 02 04 06 00 FF 01 21 22 00 00 00 04  // ..........!"....
    A000: 0C 01 00 20 02 00 00 80 00 00 00 01 04 92 00 02  // ... ............
    A010: 04 04 00 FF 01 20 21 00 00 00 04 0C 01 00 30 02  // ..... !.......0.
    A020: 00 00 00 02 00 00 01 04 91 00 02 04 01 00 FF 01  // ................
    A030: 20 22 00 00 00 04 0C 01 00 40 02 00 00 00 04 00  //  ".......@......
    A040: 00 01 04 93 00 02 04 05 00 FF 01 1E 21 00 00 00  // ............!...
    A050: 04 0C 01 00 50 02 00 00 00 08 00 00 01 04 95 00  // ....P...........
    A060: 02 04 03 00 FF 05 00 00 00 21 21 27 01 2D 01 00  // .........!!'.-..
    A070: 00 21 22 32 01 38 01 00 00 20 21 3D 01 43 01 00  // .!"2.8... !=.C..
    A080: 00 20 22 48 01 4E 01 00 00 1E 21 53 01 59 01 00  // . "H.N....!S.Y..
    A090: 00 01 00 11 01 13 31 14 04 0F 00 FF 01 00 11 01  // ......1.........
    A0A0: 13 32 14 04 0F 00 FF 01 00 11 01 0C 31 14 04 0F  // .2..........1...
    A0B0: 00 FF 01 00 11 01 0C 32 14 04 0F 00 FF 01 00 11  // .......2........
    A0C0: 01 04 31 14 04 0F 00 FF D4 02 02 01 30 DC B4 00  // ..1.........0...
    A0D0: 00 80 03 00 2C 1F 00 00 14 00 00 00 DC 0C 14 00  // ....,...........
    A0E0: 00 00 D5 0C 33 03 00 00 D4 0C 00 02 0C 00 00 0B  // ....3...........
    A0F0: 29 00 20 0F D3 0B E0 1F 12 00 ED 09 10 A8 08 00  // ). .............
    A100: 92 09 00 04 0C 00 94 09 00 04 0C 00 93 09 00 04  // ................
    A110: 0C 00 6D 09 1F 10 14 01 2E 08 00 04 0C 00 30 08  // ..m...........0.
    A120: 80 0C 0C 00 2F 08 00 04 0C 00 4F 09 B4 00 01 00  // ..../.....O.....
    A130: 1E 09 00 04 0C 00 F3 09 1B 90 00 00 E9 09 5A 8A  // ..............Z.
    A140: FF 00 EA 09 7A AE FF 08 EE 09 10 0C 00 00 EF 09  // ....z...........
    A150: 10 0C 00 00 E5 09 FC FD FC FC E6 09 FD F8 FC FC  // ................
    A160: E7 09 FC FC F3 FC E8 09 FC FC FC F5 F0 09 08 6F  // ...............o
    A170: C3 00 F1 09 05 29 C3 00 DA 09 11 40 04 00 D6 09  // .....).....@....
    A180: 03 F8 6F 00 F2 09 10 10 87 01 F4 09 45 4F 70 08  // ..o.........EOp.
    A190: F5 09 16 3A 02 03 DB 09 03 03 00 00 E1 09 00 00  // ...:............
    A1A0: 00 00 E2 09 04 00 00 00 74 09 C9 00 00 00 76 09  // ........t.....v.
    A1B0: 00 30 00 00 7F 09 49 9A 24 00 80 09 51 12 25 02  // .0....I.$...Q.%.
    A1C0: 3B 08 1C 3C 00 70 56 08 3F 40 00 00 57 08 10 10  // ;..<.pV.?@..W...
    A1D0: 00 00 5A 08 97 09 00 00 E7 0D 99 00 C1 50 E8 0D  // ..Z..........P..
    A1E0: 99 01 C1 50 E9 0D 89 00 C1 50 EA 0D 19 03 C1 50  // ...P.....P.....P
    A1F0: 51 08 99 00 C1 50 52 08 99 00 C1 50 53 08 99 00  // Q....PR....PS...
    A200: C1 50 54 08 99 00 C1 50 5C 08 91 09 00 00 83 08  // .PT....P\.......
    A210: 91 01 00 00 59 08 91 51 00 00 5B 08 91 29 00 00  // ....Y..Q..[..)..
    A220: 5D 08 91 09 00 00 58 08 91 09 00 00 64 08 13 00  // ].....X.....d...
    A230: 00 00 84 08 95 09 00 00 3D 08 49 92 24 00 80 08  // ........=.I.$...
    A240: 91 09 00 00 35 08 1E 00 F9 00 41 08 12 68 8F F8  // ....5.....A..h..
    A250: 42 08 13 6A 91 F6 77 08 91 13 00 00 70 08 11 0B  // B..j..w.....p...
    A260: 00 00 EB 0D 3D 90 80 40 EC 0D 35 50 54 40 ED 0D  // ....=..@..5PT@..
    A270: 3D 50 1C 40 EE 0D 35 B0 6A 40 66 08 45 90 80 40  // =P.@..5.j@f.E..@
    A280: 67 08 55 50 80 40 68 08 3D 50 4C 40 69 08 3D 70  // g.UP.@h.=PL@i.=p
    A290: 80 40 6D 08 91 09 01 00 71 08 15 24 00 00 88 08  // .@m.....q..$....
    A2A0: 91 11 00 00 78 08 91 12 00 00 6B 08 A1 09 00 00  // ....x.....k.....
    A2B0: 72 08 91 09 00 00 6C 08 01 09 00 00 74 08 95 51  // r.....l.....t..Q
    A2C0: 00 00 4D 08 11 09 00 00 4E 08 11 2A 00 00 73 08  // ..M.....N..*..s.
    A2D0: 13 0F 00 00 75 08 91 09 00 00 7D 08 91 09 00 00  // ....u.....}.....
    A2E0: 89 08 91 01 00 00 3E 08 49 92 CC 00 7F 08 91 11  // ......>.I.......
    A2F0: 00 00 7E 08 91 21 03 00 6F 08 91 29 00 00 3C 08  // ..~..!..o..)..<.
    A300: 07 00 00 80 81 09 91 0C 00 00 82 09 95 09 00 00  // ................
    A310: 85 09 11 01 00 00 83 09 91 09 00 00 84 09 11 8C  // ................
    A320: 00 00 86 09 91 09 00 00 87 09 11 09 00 00 88 09  // ................
    A330: 91 89 00 00 7B 09 91 49 00 00 7C 09 A1 09 00 00  // ....{..I..|.....
    A340: 70 05 00 04 0C 00 8E 0C 00 00 00 00 83 08 91 01  // p...............
    A350: 00 00 84 08 95 09 00 00 85 08 97 09 00 00 88 08  // ................
    A360: 91 11 00 00 89 08 91 01 00 00 8A 08 93 09 00 00  // ................
    A370: 50 08 91 09 02 00 3F 08 28 28 72 72 40 08 50 50  // P.....?.((rr@.PP
    A380: 28 28 43 08 80 80 00 00 CD 09 10 00 00 00 C0 09  // ((C.............
    A390: 40 0F 50 00 60 08 E1 09 02 00 00 00 7D 00 01 01  // @.P.`.......}...
    A3A0: 01 02 04 20 00 06 20 00 00 03 91 0A 02 92 0A 09  // ... .. .........
    A3B0: 10 00 01 82 04 20 00 06 20 00 00 03 91 0A 08 20  // ..... .. ...... 
    A3C0: 00 00 03 92 0A 09 26 00 01 03 02 0E 00 06 10 00  // ......&.........
    A3D0: 00 03 0E 00 02 0F 00 09 38 00 01 83 02 0E 00 06  // ........8.......
    A3E0: 10 00 00 03 0E 00 08 20 00 00 03 0F 00 09 4E 00  // ....... ......N.
    A3F0: 01 05 02 82 00 06 10 00 00 03 82 00 02 83 00 09  // ................
    A400: 60 00 01 85 02 82 00 06 10 00 00 03 82 00 08 20  // `.............. 
    A410: 00 00 03 83 00 09 76 00 00 00 61 04 02 02 4B 00  // ......v...a...K.
    A420: 5A 00 FC 02 B2 03 2A 03 00 00 01 01 08 04 32 10  // Z.....*.......2.
    A430: 54 76 37 00 62 60 FF 00 00 50 03 05 53 09 04 00  // Tv7.b`...P..S...
    A440: 00 00 00 10 00 0B 00 40 00 61 91 02 02 00 00 00  // .......@.a......
    A450: 00 00 43 65 07 00 00 00 00 00 4B 34 47 34 31 33  // ..Ce......K4G413
    A460: 32 35 46 45 00 03 00 04 00 FF FF 00 FF FF FF 00  // 25FE............
    A470: 00 00 00 00 2A 00 34 00 2F 0A 04 30 0A 00 D5 0A  // ....*.4./..0....
    A480: 04 2C 0A 04 28 0A 04 29 0A 04 2A 0A 04 2B 0A 04  // .,..(..)..*..+..
    A490: 81 0A 04 8B 0A 04 5F 0A 04 DD 09 84 DE 09 84 FF  // ......_.........
    A4A0: FF 00 A8 61 00 00 11 10 00 00 00 00 00 00 22 CC  // ...a..........".
    A4B0: 1C 00 62 8C 11 0B 20 57 09 08 0D C3 60 01 00 20  // ..b... W....`.. 
    A4C0: 42 00 21 01 14 20 AA 88 00 A0 00 00 00 00 04 03  // B.!.. ..........
    A4D0: 08 09 16 0D 0E 0E 60 EA 00 00 33 30 00 00 00 00  // ......`...30....
    A4E0: 00 00 22 CC 1C 00 A5 20 24 19 40 57 0B 0B 16 C5  // ..".... $.@W....
    A4F0: 51 03 00 22 64 00 3A 05 14 20 CA 88 00 A0 00 00  // Q.."d.:.. ......
    A500: 00 00 09 06 11 14 35 14 17 10 90 5F 01 00 33 30  // ......5...._..30
    A510: 00 00 00 00 00 00 22 CC 1C 00 E7 30 36 25 80 57  // ......"....06%.W
    A520: 0B 0F 9D 86 02 05 00 24 85 00 5A 09 14 20 DA 88  // .......$..Z.. ..
    A530: 00 A0 00 00 00 00 0D 08 19 1E 50 1B 1E 12 A0 86  // ..........P.....
    A540: 01 00 33 30 00 00 00 00 00 00 22 CC 1C 00 08 B5  // ..30......".....
    A550: 36 29 90 57 0B 10 1F C7 92 05 00 44 86 00 62 0A  // 6).W.......D..b.
    A560: 14 20 6A 89 00 A0 00 00 00 00 0E 09 1C 21 59 1D  // . j..........!Y.
    A570: 20 13 74 B7 01 00 33 30 00 00 00 00 00 00 22 CC  //  .t...30......".
    A580: 1C 00 29 BD 47 2F A0 57 0C 11 23 48 53 06 00 46  // ..).G/.W..#HS..F
    A590: A6 00 6A 0C 14 20 6A 89 00 A0 00 00 00 00 10 0A  // ..j.. j.........
    A5A0: 20 26 65 20 24 14 48 E8 01 00 33 30 00 00 00 00  //  &e $.H...30....
    A5B0: 00 00 22 CC 1C 00 4A C5 48 34 B0 57 0C 12 A6 88  // .."...J.H4.W....
    A5C0: 03 07 00 46 A7 00 72 0E 14 20 7A 89 00 A0 00 00  // ...F..r.. z.....
    A5D0: 00 00 12 0B 23 2A 70 22 27 14 1C 19 02 00 33 30  // ....#*p"'.....30
    A5E0: 00 00 00 00 00 00 22 CC 1C 00 8C CD 59 3A C0 57  // ......".....Y:.W
    A5F0: 0D 13 AA 09 B4 07 00 48 C7 00 7A 00 14 20 7A 89  // .......H..z.. z.
    A600: 00 A0 02 00 00 00 14 0D 27 2E 7B 25 2B 15 F0 49  // ........'.{%+..I
    A610: 02 00 55 50 00 00 00 00 00 00 22 CC 1C 00 AD 51  // ..UP......"....Q
    A620: 5A 3E C0 57 0E 14 2D 4A 64 08 00 48 C7 00 03 01  // Z>.W..-Jd..H....
    A630: 14 20 7A 89 00 A0 03 00 00 00 15 0E 2A 31 86 27  // . z.........*1.'
    A640: 2E 16 C4 7A 02 00 55 50 00 00 00 00 00 00 22 CC  // ...z..UP......".
    A650: 1C 00 CE 59 6B 44 D0 57 0F 15 31 CB 24 09 00 4A  // ...YkD.W..1.$..J
    A660: E7 00 0B 03 14 20 7A 89 00 A0 03 00 00 00 17 0F  // ..... z.........
    A670: 2E 36 92 2A 32 17 98 AB 02 00 77 70 00 00 00 00  // .6.*2.....wp....
    A680: 00 00 22 CC 1C 00 10 62 6C 49 D0 57 10 16 B5 0B  // .."....blI.W....
    A690: D5 09 00 4A E7 00 14 05 14 20 7A 89 00 A0 03 00  // ...J..... z.....
    A6A0: 00 00 19 11 31 39 9D 2C 36 17 30 E6 02 00 77 70  // ....19.,6.0...wp
    A6B0: 00 00 00 00 00 00 22 CC 1C 00 10 6A 7D 4F E0 57  // ......"....j}O.W
    A6C0: 11 17 B9 8C A5 0A 00 4C 07 01 1C 07 14 20 7A 89  // .......L..... z.
    A6D0: 00 A0 03 00 00 00 1B 11 35 3F AA 2F 3A 18 40 0D  // ........5?./:.@.
    A6E0: 03 00 77 70 00 00 00 00 00 00 22 CC 1C 00 31 EE  // ..wp......"...1.
    A6F0: 7D 53 F0 57 11 18 3B CD 35 0B 00 4C 07 01 24 08  // }S.W..;.5..L..$.
    A700: 14 20 7A 89 00 A0 03 00 00 00 1C 12 38 42 B3 31  // . z.........8B.1
    A710: 3C 19 00 00 00 00 06 00 08 00 0E 00 44 FF FF 00  // <...........D...
    A720: FF FF FF 00 1F 00 00 00 FF FF FF 01 1F 00 00 00  // ................
    A730: FF FF FF 02 1F 00 00 00 FF FF FF 03 1F 00 00 00  // ................
    A740: 00 00 00 00 E1 B4 88 D6 9B 00 A5 3F 21 00 FD 02  // ...........?!...
    A750: D1 00 81 F6 D2 00 88 D6 9B 00 66 3F 05 00 F4 9B  // ..........f?....
    A760: 41 00 A6 B0 E6 00 4E 1E 6F 06 D1 00 42 D6 D3 00  // A.....N.o...B...
    A770: AC 3F 05 00 81 56 9F 00 E6 BB 40 00 16 B1 F4 00  // .?...V....@.....
    A780: 88 D6 9B 00 E5 3D 28 00 E1 B1 11 E6 B3 00 F4 3B  // .....=(........;
    A790: 05 00 6F 06 CA 00 42 D6 D3 00 BC AB 21 00 88 76  // ..o...B.....!..v
    A7A0: 97 00 E6 BB 08 00 A6 B0 F4 00 4B 1E 4F 07 D1 00  // ..........K.O...
    A7B0: C2 D2 D3 00 88 F6 D2 00 F4 3B 05 00 66 3F 21 00  // .........;..f?!.
    A7C0: A6 90 BD 00 81 76 B3 00 F4 3B 05 00 4B 00 5C 00  // .....v...;..K.\.
    A7D0: 80 0A 04 8C 0A 04 95 0A 04 96 0A 04 99 0A 04 82  // ................
    A7E0: 0A 04 74 0A 04 75 0A 04 00 00 44 01 00 44 02 00  // ..t..u....D..D..
    A7F0: 44 03 00 44 04 00 44 05 00 44 09 00 44 0A 00 44  // D..D..D..D..D..D
    A800: 0B 00 44 0C 00 44 0D 00 44 0F 00 44 4E 0A 04 54  // ..D..D..D..DN..T
    A810: 0A 00 97 0A 04 98 0A 00 FF FF 00 FF FF FF 00 72  // ...............r
    A820: 21 60 50 D8 CD 00 E0 5A 4A 6F A0 0D F0 8C 30 00  // !`P....ZJo....0.
    A830: E0 03 70 13 46 03 61 00 00 00 00 66 66 00 00 FF  // ..p.F.a....ff...
    A840: FF 0C 0C 04 00 04 02 20 3C 00 00 00 03 00 63 04  // ....... <.....c.
    A850: 06 00 00 23 00 00 00 00 00 00 00 98 00 02 00 85  // ...#............
    A860: 08 00 00 00 00 1E 01 30 00 00 00 00 00 86 53 AA  // .......0......S.
    A870: AA AA 00 F5 08 03 00 00 00 00 00 00 0C 01 03 06  // ................
    A880: C0 D4 01 00 F8 24 01 00 38 00 06 0A 6A 24 09 00  // .....$..8...j$..
    A890: 80 1A 06 00 E8 03 00 00 0C 01 18 08 20 03 00 00  // ............ ...
    A8A0: B0 04 00 00 38 C1 01 00 38 C1 01 00 00 00 00 00  // ....8...8.......
    A8B0: 00 00 00 00 00 00 00 00 34 C4 01 00 43 01 00 00  // ........4...C...
    A8C0: 00 00 00 00 00 00 00 00 C0 FF 08 0F 08 31 AC 10  // .............1..
    A8D0: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    A8E0: 4B 00 00 00 00 00 00 00 2B 00 00 00 00 00 00 00  // K.......+.......
    A8F0: 10 00 00 00 00 00 00 00 9B 02 00 00 03 00 00 00  // ................
    A900: EA 01 00 00 8A 02 00 00 34 03 00 00 7E 04 00 00  // ........4...~...
    A910: EC 04 00 00 50 05 00 00 B4 05 00 00 E6 05 00 00  // ....P...........
    A920: B0 71 0B 00 00 35 0C 00 60 1F 0D 00 98 E0 0E 00  // .q...5..`.......
    A930: 70 B7 0F 00 E0 C8 10 00 00 17 11 00 30 8C 11 00  // p...........0...
    A940: 29 01 00 00 A2 04 00 00 BE 01 00 00 1B 00 B8 0B  // )...............
    A950: 00 00 6B B6 43 F8 B5 9C 05 00 7A 28 FF FF 00 00  // ..k.C.....z(....
    A960: 00 00 F3 0D 03 00 7F 60 FE FF 00 00 00 00 23 FF  // .......`......#.
    A970: 58 00 00 00 00 00 00 00 8A 00 EB FF FF FF C0 12  // X...............
    A980: 00 01 00 01 00 01 00 00 42 00 03 01 01 03 0E 00  // ........B.......
    A990: 10 96 20 00 00 00 00 00 FF 00 01 07 0C 00 0E 00  // .. .............
    A9A0: 00 00 00 00 00 00 04 00 24 00 00 04 00 00 02 80  // ........$.......
    A9B0: 10 00 00 00 00 00 20 03 00 00 10 00 52 03 02 00  // ...... .....R...
    A9C0: 00 00 84 03 00 80 00 00 B6 03 28 00 03 01 FF FF  // ..........(.....
    A9D0: FF 00 4B 00 B8 0B 01 00 00 00 FF FF FF 00 32 00  // ..K...........2.
    A9E0: 4E 0C 02 00 00 00 FF FF FF 00 7C 01 45 0C 07 12  // N.........|.E...
    A9F0: 00 00 64 00 02 03 14 00 00 00 4A 2D 00 00 70 06  // ..d.......J-..p.
    AA00: 02 06 00 00 00 00 1E 21 52 00 4C 00 03 FF FF 00  // .......!R.L.....
    AA10: 1E 22 55 00 4C 00 09 FF FF 00 20 21 58 00 4C 00  // ."U.L..... !X.L.
    AA20: 0A FF FF 00 20 22 5B 00 4C 00 0B FF FF 00 21 21  // .... "[.L.....!!
    AA30: 5E 00 4C 00 0C FF FF 00 21 22 61 00 4C 00 0D FF  // ^.L.....!"a.L...
    AA40: FF 00 FF FF 14 04 FF 15 04 FF 16 04 FF 17 04 FF  // ................
    AA50: 18 04 FF 19 04 FF 18 00 02 01 02 00 08 00 80 00  // ................
    AA60: 00 02 00 04 00 08 40 00 01 00 10 00 FF FF 38 00  // ......@.......8.
    AA70: 02 01 04 4A 00 00 7C 92 00 00 01 04 1E 00 3C 00  // ...J..|.......<.
    AA80: 00 00 F8 24 01 00 01 03 1E 00 3C 00 1E 00 F0 49  // ...$......<....I
    AA90: 02 00 01 02 1E 00 3C 00 1E 00 E0 93 04 00 01 01  // ......<.........
    AAA0: 1E 00 00 00 1E 00 55 00 01 01 01 10 02 00 89 02  // ......U.........
    AAB0: 10 00 11 02 00 01 00 21 00 01 00 8C 92 04 00 45  // .......!.......E
    AAC0: 00 02 00 50 00 14 00 70 00 84 00 68 02 02 00 6D  // ...P...p...h...m
    AAD0: 02 01 00 46 02 02 00 48 02 02 00 4A 02 02 00 4C  // ...F...H...J...L
    AAE0: 02 02 00 7D 02 40 00 88 99 02 00 90 99 01 00 06  // ...}.@..........
    AAF0: 9B 08 00 F8 E6 08 01 00 00 00 00 00 8E 00 01 02  // ................
    AB00: 00 08 02 01 02 00 52 47 52 02 02 65 02 07 52 0D  // ......RGR..e..R.
    AB10: 55 00 02 52 0D 52 23 2C 25 02 01 3D 25 02 06 45  // U..R.R#,%..=%..E
    AB20: 17 00 51 02 52 3D 52 39 02 0D 02 01 03 52 43 66  // ..Q.R=R9.....RCf
    AB30: 04 02 8C 02 2E 00 02 0D 02 01 00 52 43 02 05 02  // ...........RC...
    AB40: 04 00 52 03 52 43 02 F9 02 01 52 05 02 01 02 00  // ..R.RC....R.....
    AB50: 0E E5 02 08 52 0A 02 05 02 02 00 00 00 52 43 02  // ....R........RC.
    AB60: 05 02 04 00 20 03 52 43 02 05 02 30 75 00 40 52  // .... .RC...0u.@R
    AB70: 0B 02 05 02 04 00 52 03 52 43 02 01 02 01 0E E5  // ......R.RC......
    AB80: 02 08 52 0B 0D 65 D0 05 02 5B 57 00 01 02 00 00  // ..R..e...[W.....
    AB90: 37 00 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A 02  // 7..R......2.....
    ABA0: 88 00 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09 05  // ....2......F....
    ABB0: 46 FF FF FF 02 56 00 40 03 20 40 01 1A 09 25 40  // F....V.@. @...%@
    ABC0: 03 75 02 46 40 03 18 40 5C 1B 2D 02 46 40 27 00  // .u.F@..@\.-.F@'.
    ABD0: 46 06 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01 40  // F..-.@\....A...@
    ABE0: 5B 00 B7 00 01 01 04 00 37 00 00 01 05 0E 00 02  // [.......7.......
    ABF0: 00 40 01 37 03 00 5C 05 02 00 FC 7F FF FF 02 00  // .@.7..\.........
    AC00: 00 00 5C 05 10 00 FF FF 9D FF 00 09 41 00 5C 05  // ..\.........A.\.
    AC10: 21 00 7F FF FF FF 80 00 00 00 5C 05 40 00 BE 3F  // !.........\.@..?
    AC20: FF FF 40 40 01 00 37 00 00 01 05 0E 00 70 00 01  // ..@@..7......p..
    AC30: 10 37 03 00 01 05 70 00 00 40 00 01 5C 05 A0 00  // .7....p..@..\...
    AC40: 0F FF FE DF 10 00 01 60 5C 05 A2 00 7F F3 97 FF  // .......`\.......
    AC50: 86 04 88 5A 5C 05 A4 00 1B F0 FF FF 20 0D 40 04  // ...Z\....... .@.
    AC60: 5C 05 B1 00 FF 2D FF FF 80 50 18 96 37 00 00 54  // \....-...P..7..T
    AC70: 00 06 00 01 25 C5 14 02 01 05 C2 14 7F 00 00 00  // ....%...........
    AC80: 01 05 E8 15 70 3D 29 0A 01 05 E9 15 9C A4 0D 20  // ....p=)........ 
    AC90: 01 05 EA 15 20 95 87 00 5B 00 13 01 01 01 04 00  // .... ...[.......
    ACA0: 37 00 00 03 01 00 00 54 20 24 15 01 25 00 08 0F  // 7......T $..%...
    ACB0: 01 25 28 08 0F 5C 25 2B 08 F8 01 55 00 00 52 34  // .%(..\%+...U..R4
    ACC0: 52 3E 03 24 40 0C 00 15 25 40 04 5C 62 01 08 0F  // R>.$@...%@.\b...
    ACD0: 40 01 04 D7 09 24 00 01 04 02 08 00 00 01 04 1C  // @....$..........
    ACE0: 08 20 00 66 18 2D 0C 42 10 00 56 00 40 03 0C 40  // . .f.-.B..V.@..@
    ACF0: 00 00 3E 0D 40 00 00 44 73 00 01 02 00 00 40 01  // ..>.@..Ds.....@.
    AD00: 04 01 00 02 00 2D 0D 42 06 00 43 53 00 0D 25 68  // .....-.B..CS..%h
    AD10: 15 03 54 00 34 FE 01 05 35 FE 03 0A 03 0A 01 05  // ..T.4...5.......
    AD20: 35 FE 04 0A 04 0A 01 00 03 0A 69 15 01 00 04 0A  // 5.........i.....
    AD30: 69 15 5C 25 D5 09 FB 01 0D 05 D5 09 00 08 00 40  // i.\%...........@
    AD40: 54 00 34 FE 01 05 35 FE 03 0A 0C 00 01 05 35 FE  // T.4...5.......5.
    AD50: 04 0A 0C 00 52 0F 66 1C 2D 0C 42 0A 00 55 00 00  // ....R.f.-.B..U..
    AD60: 52 12 66 1C 2D 0C 42 0C 00 02 0D 00 01 00 52 1F  // R.f.-.B.......R.
    AD70: 52 1E 02 05 00 30 75 00 00 52 10 4C E5 00 20 44  // R....0u..R.L.. D
    AD80: ED 00 0D 25 80 0A 18 02 25 00 FF 52 40 4A 65 80  // ...%....%..R@Je.
    AD90: 0A 0F 49 0E 01 52 03 03 20 00 80 0A 09 25 00 FC  // ..I..R.. ....%..
    ADA0: 52 1E 5C 22 80 0A 03 00 52 07 52 48 5B 00 FF 00  // R.\"....R.RH[...
    ADB0: 02 01 00 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A  // ....7..f...A..-.
    ADC0: 41 42 2D 0D 42 04 00 3D 24 00 03 00 44 30 00 2D  // AB-.B..=$...D0.-
    ADD0: 0D 42 04 00 3E 0A 42 41 44 FB 00 43 19 00 56 00  // .B..>.BAD..C..V.
    ADE0: 43 03 A4 41 02 00 03 F2 41 41 03 0C 41 00 00 3E  // C..A....AA..A..>
    ADF0: 0D 41 00 00 44 FB 00 3E 0D 41 61 48 49 6B 00 3E  // .A..D..>.AaHIk.>
    AE00: E5 41 10 46 5F 00 1B 3D 41 01 43 6B 00 09 E5 41  // .A.F_..=A.Ck...A
    AE10: 03 15 3D 41 02 2D E5 41 0C 03 3A 43 41 54 00 00  // ..=A.-.A..:CAT..
    AE20: 00 33 0D 41 01 00 01 0A 00 00 41 0D 02 01 00 44  // .3.A......A....D
    AE30: 2D 0D 41 02 00 01 0A 00 00 41 03 32 43 41 4B E5  // -.A......A.2CAK.
    AE40: 00 01 49 D7 00 07 02 01 00 45 2D 0D 41 01 00 01  // ..I......E-.A...
    AE50: 0A 00 00 41 4A 02 01 00 44 44 B9 00 03 29 43 00  // ...AJ...DD...)C.
    AE60: 0E A2 00 44 43 C1 00 03 29 43 00 08 A2 00 45 33  // ...DC...)C....E3
    AE70: 0D 41 03 00 01 0A 00 00 41 03 3A 43 41 07 02 01  // .A......A.:CA...
    AE80: 00 45 43 FA 00 0D 02 01 00 44 33 0D 41 01 00 01  // .EC......D3.A...
    AE90: 0A 00 00 41 3D A5 00 01 44 F5 00 07 02 01 00 45  // ...A=...D......E
    AEA0: 43 FA 00 0D 02 01 00 44 5B 55 20 00 5B 00 AC 01  // C......D[U .[...
    AEB0: 01 02 14 00 37 00 00 4B E5 00 08 44 23 00 01 05  // ....7..K...D#...
    AEC0: 82 00 70 03 00 80 3C 05 83 00 00 00 02 00 46 68  // ..p...<.......Fh
    AED0: 01 03 01 04 00 02 E5 00 01 52 3C 01 05 82 00 40  // .........R<....@
    AEE0: 01 50 C0 0D 25 83 00 08 66 FF 2D 0D 42 6C 01 01  // .P..%...f.-.Bl..
    AEF0: 05 82 00 40 03 50 C0 4A 25 83 00 01 44 56 00 2D  // ...@.P.J%...DV.-
    AF00: 0D 42 20 00 03 04 00 08 00 03 04 01 0C 00 03 04  // .B .............
    AF10: 02 10 00 03 04 03 14 00 01 04 82 00 04 00 4A 05  // ..............J.
    AF20: 83 00 80 00 00 00 44 97 00 2D 05 00 10 00 00 00  // ......D..-......
    AF30: 2D 05 01 10 00 00 00 2D 05 02 10 00 00 00 2D 05  // -......-......-.
    AF40: 03 10 00 00 00 4A 25 83 00 02 44 B8 00 01 04 82  // .....J%...D.....
    AF50: 00 1C 00 0D 25 83 00 10 01 04 82 00 04 00 4A 25  // ....%.........J%
    AF60: 83 00 01 44 AA 00 01 04 82 00 18 00 01 21 83 00  // ...D.........!..
    AF70: 02 01 02 82 00 00 01 01 83 00 01 56 00 40 03 29  // ...........V.@.)
    AF80: 40 02 15 25 40 06 01 04 82 00 00 00 5C 8A 83 00  // @..%@.......\...
    AF90: 3F 00 40 01 02 82 00 01 01 99 83 00 04 01 02 82  // ?.@.............
    AFA0: 00 03 01 99 83 00 05 01 04 82 00 1C 00 0D A5 83  // ................
    AFB0: 00 10 01 02 82 00 01 0D E5 83 00 04 01 02 82 00  // ................
    AFC0: 02 01 01 83 00 03 01 02 82 00 01 01 09 83 00 05  // ................
    AFD0: 0D E5 83 00 02 01 04 82 00 1C 00 0D 25 83 00 01  // ............%...
    AFE0: 01 04 82 00 04 00 4A 25 83 00 02 44 32 01 01 05  // ......J%...D2...
    AFF0: 82 00 40 01 50 C0 07 25 83 00 F7 02 02 00 04 4C  // ..@.P..%.......L
    B000: E5 04 08 49 68 01 52 2F 02 01 01 00 02 02 00 04  // ...Ih.R/........
    B010: 02 E5 00 02 52 3F 5B 7A 40 00 68 02 50 C0 78 02  // ....R?[z@.h.P.x.
    B020: 50 C0 8C 02 50 C0 90 02 50 C0 94 02 50 C0 98 02  // P...P...P...P...
    B030: 50 C0 AC 02 50 C0 B0 02 50 C0 E4 02 50 C0 F4 02  // P...P...P...P...
    B040: 50 C0 08 03 50 C0 0C 03 50 C0 10 03 50 C0 14 03  // P...P...P...P...
    B050: 50 C0 28 03 50 C0 2C 03 50 C0 22 01 02 01 0C 04  // P.(.P.,.P.".....
    B060: 37 00 00 5C 25 2B 08 F8 01 54 20 24 15 07 25 EB  // 7..\%+...T $..%.
    B070: 09 FE 4B E5 00 40 44 A1 00 01 05 91 0A 0D 00 00  // ..K..@D.........
    B080: 00 03 B0 01 92 0A 52 3B 03 01 00 00 56 38 00 3E  // ......R;....V8.>
    B090: 01 00 01 45 62 00 3E 01 00 02 45 53 00 01 05 91  // ...Eb.>...ES....
    B0A0: 0A 0D 00 00 00 07 A5 92 0A F7 43 A1 00 01 05 91  // ..........C.....
    B0B0: 0A 0D 00 00 00 54 38 92 0A 43 A1 00 03 00 02 96  // .....T8..C......
    B0C0: 0A 03 F8 01 99 0A 01 05 91 0A 00 00 00 00 03 08  // ................
    B0D0: 01 92 0A 01 05 91 0A 0D 00 00 00 5C 8D 92 0A 00  // ...........\....
    B0E0: 00 80 00 07 E5 99 0A BF 07 65 96 0A F0 01 05 91  // .........e......
    B0F0: 0A 00 00 00 00 01 0D 92 0A 77 77 02 01 01 00 52  // .........ww....R
    B100: 10 02 01 01 00 02 E5 01 01 52 3F 52 30 02 E5 01  // .........R?R0...
    B110: 02 02 01 02 00 52 3F 07 25 F3 09 FC 55 00 01 4A  // .....R?.%...U..J
    B120: 25 80 0A 08 49 D1 00 02 25 01 07 52 40 4B E5 00  // %...I...%..R@K..
    B130: 40 44 12 01 01 05 91 0A 0D 00 00 00 4C A5 01 80  // @D..........L...
    B140: 49 ED 00 54 38 92 0A 01 B2 92 0A 01 52 3B 3E 01  // I..T8.......R;>.
    B150: 00 01 46 12 01 01 FA 99 0A 01 01 6A 96 0A 02 01  // ..F........j....
    B160: 05 91 0A 00 00 00 00 01 0A 92 0A 01 0D 25 EB 09  // .............%..
    B170: 01 07 25 2B 08 F8 0D 25 24 15 03 5B CB 04 01 07  // ..%+...%$..[....
    B180: 08 08 37 00 00 3D 25 01 FF 44 95 04 3D 25 01 19  // ..7..=%..D..=%..
    B190: 46 91 04 3D 25 01 02 47 91 04 3D 25 01 14 45 95  // F..=%..G..=%..E.
    B1A0: 04 3D 05 00 00 00 00 00 44 43 02 4B E5 01 02 49  // .=......DC.K...I
    B1B0: 61 00 02 A9 02 02 55 28 02 0E E5 01 80 3D 05 00  // a.....U(.....=..
    B1C0: 40 4B 4C 00 45 61 00 0D A5 C2 9D 40 03 21 41 01  // @KL.Ea.....@.!A.
    B1D0: 33 25 41 14 03 22 43 41 0D E2 C1 48 44 66 FF 2D  // 3%A.."CA...HDf.-
    B1E0: 0D 42 AB 04 03 39 40 01 09 0D 40 30 00 1B 0D 40  // .B...9@...@0...@
    B1F0: 02 2D 0A 42 40 56 00 00 56 00 01 02 05 03 40 01  // .-.B@V..V.....@.
    B200: 00 00 02 65 01 01 20 05 00 0A 00 00 00 03 02 46  // ...e.. ........F
    B210: 40 3D 05 00 80 8D 5B 00 47 A6 00 0E E5 01 08 55  // @=....[.G......U
    B220: 28 01 4B E5 01 08 44 B1 00 1B 05 46 01 3E 05 46  // (.K...D....F.>.F
    B230: A0 2F C5 01 48 C6 00 2C 65 01 01 15 05 46 01 43  // ./..H..,e....F.C
    B240: B1 00 14 2D 01 05 03 05 01 00 00 01 00 4B E5 01  // ...-.........K..
    B250: 02 49 33 01 4B E5 01 80 49 DF 00 27 04 46 00 00  // .I3.K...I..'.F..
    B260: 3E 05 41 00 00 00 00 44 45 01 03 04 40 00 00 03  // >.A....DE...@...
    B270: 02 00 41 27 02 40 41 03 02 40 00 3E 05 41 00 00  // ..A'.@A..@.>.A..
    B280: 00 00 49 F3 00 7C 05 00 00 00 01 00 7E 04 40 00  // ..I..|......~.@.
    B290: 00 7C 04 40 00 00 7E 02 40 00 03 02 01 40 3E 05  // .|.@..~.@....@>.
    B2A0: 01 33 F3 00 00 48 33 01 03 05 01 00 00 01 00 27  // .3...H3........'
    B2B0: 04 46 00 00 7C 02 01 41 7E 04 40 00 00 03 0A 00  // .F..|..A~.@.....
    B2C0: 40 27 04 46 00 00 03 8A 00 40 56 18 01 43 AF 01  // @'.F.....@V..C..
    B2D0: 7C 02 40 00 7E 05 40 A0 86 01 00 03 01 41 03 09  // |.@.~.@......A..
    B2E0: 05 41 03 00 00 00 6F 02 40 41 7C 05 40 45 0C 00  // .A....o.@A|.@E..
    B2F0: 00 7E 05 40 40 4B 4C 00 3E 05 40 00 00 00 00 49  // .~.@@KL.>.@....I
    B300: 8A 01 03 25 40 01 7C 05 40 40 4B 4C 00 7E 05 40  // ...%@.|.@@KL.~.@
    B310: 45 0C 00 00 03 01 41 03 09 05 41 03 00 00 00 75  // E.....A...A....u
    B320: 02 40 41 1B 05 40 01 2D 02 00 40 66 FF 2D 0D 42  // .@A..@.-..@f.-.B
    B330: 9F 04 56 00 40 03 21 40 01 33 25 40 14 15 25 40  // ..V.@.!@.3%@..%@
    B340: 01 2D 0A 42 40 03 0C 48 00 00 4A 65 E2 48 10 44  // .-.B@..H..Je.H.D
    B350: FE 02 03 39 41 01 09 0D 41 30 00 1B 0D 41 04 3C  // ...9A...A0...A.<
    B360: 22 5E 49 41 49 22 02 3C 21 23 49 03 49 22 02 3C  // "^IAI".<!#I.I".<
    B370: 29 25 49 03 49 22 02 03 20 41 5F 49 09 25 41 E0  // )%I.I".. A_I.%A.
    B380: 3E 29 41 01 49 22 02 4B E5 01 40 49 F6 02 3C 02  // >)A.I".K..@I..<.
    B390: 20 49 00 49 22 02 3C 0A 22 49 01 44 26 02 0E E5  //  I.I".<."I.D&...
    B3A0: 01 01 3A 00 00 4B E5 01 01 44 69 04 4B E5 01 02  // ..:..K...Di.K...
    B3B0: 49 43 02 3D 25 02 05 46 43 02 55 28 02 52 23 56  // IC.=%..FC.U(.R#V
    B3C0: 00 40 03 21 40 01 33 25 40 14 03 0A 48 40 07 25  // .@.!@.3%@...H@.%
    B3D0: 60 01 FE 66 FF 2D 0D 42 9F 04 56 00 40 03 21 40  // `..f.-.B..V.@.!@
    B3E0: 01 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48  // .3%@..%@.-.B@..H
    B3F0: 00 00 07 65 23 49 FE 54 00 21 49 54 00 22 49 07  // ...e#I.T.!IT."I.
    B400: 65 E2 48 EF 4A 65 E2 48 20 49 88 02 07 65 F2 48  // e.H.Je.H I...e.H
    B410: EF 4A 65 F2 48 20 49 95 02 3D 05 00 00 00 00 00  // .Je.H I..=......
    B420: 49 FE 02 4A A5 C1 48 80 44 D2 02 56 00 41 5C 25  // I..J..H.D..V.A\%
    B430: E0 48 F8 06 51 02 4A 65 E0 48 01 44 BA 02 2D A5  // .H..Q.Je.H.D..-.
    B440: 41 01 2D 0D 48 10 00 3E A5 41 04 45 B2 02 56 08  // A.-.H..>.A.E..V.
    B450: 48 03 21 41 01 33 25 41 14 03 22 43 41 07 E2 C1  // H.!A.3%A.."CA...
    B460: 48 45 4A E5 C1 48 3F 49 91 04 07 A5 C2 9D BF 43  // HEJ..H?I.......C
    B470: 91 04 01 02 20 49 00 43 17 04 01 05 DA 48 80 88  // .... I.C.....H..
    B480: 01 00 3D A5 01 00 49 1F 03 3D 05 00 E0 3B 66 00  // ..=...I..=...;f.
    B490: 45 1F 03 07 25 DB 48 FE 43 3F 03 0D 25 DB 48 01  // E...%.H.C?..%.H.
    B4A0: 3D A5 01 02 49 3F 03 4B E5 01 08 44 3F 03 01 05  // =...I?.K...D?...
    B4B0: 7A 49 80 88 01 00 0D 25 7B 49 01 0D 25 5F 49 01  // zI.....%{I..%_I.
    B4C0: 03 39 40 01 09 0D 40 30 00 1B 0D 40 04 01 22 5E  // .9@...@0...@.."^
    B4D0: 49 40 0D 65 5F 49 80 3E 25 40 02 44 66 03 03 65  // I@.e_I.>%@.Df..e
    B4E0: 40 04 5C 6A 5F 49 FB 40 66 FF 56 00 40 2D 0D 42  // @.\j_I.@f.V.@-.B
    B4F0: BB 04 03 21 40 03 09 0D 40 03 00 15 0D 40 02 2D  // ...!@...@....@.-
    B500: 0A 42 40 01 0C 24 49 00 00 01 E4 26 49 02 00 0D  // .B@..$I....&I...
    B510: 25 26 49 02 01 21 23 49 03 01 A5 23 49 E8 01 02  // %&I..!#I...#I...
    B520: 20 49 00 54 00 21 49 01 02 22 49 01 4B E5 01 08  //  I.T.!I.."I.K...
    B530: 44 BF 03 07 65 5F 49 FE 43 C4 03 0D 65 5F 49 01  // D...e_I.C...e_I.
    B540: 5C 29 5F 49 1F 01 01 8D 2B 49 20 03 01 29 25 49  // \)_I....+I ..)%I
    B550: 03 07 65 5F 49 7F 5C 65 E2 48 E3 04 4A 65 E2 48  // ..e_I.\e.H..Je.H
    B560: 20 49 E0 03 0D 65 E2 48 10 4A 65 E2 48 20 44 ED  //  I...e.H.Je.H D.
    B570: 03 4B E5 01 02 49 17 04 5C 65 F2 48 E3 04 4A 65  // .K...I..\e.H..Je
    B580: F2 48 20 49 02 04 0D 65 F2 48 10 4A 65 F2 48 20  // .H I...e.H.Je.H 
    B590: 44 0F 04 3D A5 01 02 44 25 04 3D A5 01 03 49 2C  // D..=...D%.=...I,
    B5A0: 04 4B E5 01 80 49 3A 04 03 01 00 02 02 B1 02 01  // .K...I:.........
    B5B0: 52 41 02 02 02 00 0D 65 5F 49 40 4A 65 5F 49 20  // RA.....e_I@Je_I 
    B5C0: 44 3F 04 07 65 5F 49 BF 56 00 40 03 21 40 01 33  // D?..e_I.V.@.!@.3
    B5D0: 25 40 14 03 0A 48 40 0D 25 60 01 01 51 01 4B E5  // %@...H@.%`..Q.K.
    B5E0: 01 02 49 91 04 3A 00 00 3D 25 02 05 46 91 04 02  // ..I..:..=%..F...
    B5F0: 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08  // %.......a.......
    B600: A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00  // ...........R.:..
    B610: 5B 02 25 01 0B 43 69 04 7A 2C 00 00 00 A0 00 40  // [.%..Ci.z,.....@
    B620: 51 E0 51 80 52 20 53 40 42 0F 00 40 42 0F 00 40  // Q.Q.R S@B..@B..@
    B630: 42 0F 00 40 42 0F 00 A1 83 64 00 24 83 32 00 A3  // B..@B....d.$.2..
    B640: 76 19 00 A3 76 0C 00 00 87 01 02 01 00 00 37 00  // v...v.........7.
    B650: 00 3D 65 00 07 44 BC 00 56 00 40 20 25 00 03 03  // .=e..D..V.@ %...
    B660: 0A 48 40 3D 65 00 01 44 BB 00 56 08 48 03 21 48  // .H@=e..D..V.H.!H
    B670: 00 01 0D FA 02 02 00 52 14 01 05 8D 1A 00 00 40  // .......R.......@
    B680: 00 01 25 BE 1B 02 01 A5 CC 1A C0 01 0D 91 1A 45  // ..%............E
    B690: 01 5C 05 DA 1A F0 FF FF FF 02 00 00 00 07 25 03  // .\............%.
    B6A0: 1B FB 0D 25 7D 1A 01 01 05 34 1B 01 00 00 00 5C  // ...%}....4.....\
    B6B0: 05 36 1B EE FE 00 00 11 01 FF 7F 01 25 3A 1B 11  // .6..........%:..
    B6C0: 5C 05 32 1B F8 F8 F8 FF 00 00 00 00 01 0D 33 1B  // \.2...........3.
    B6D0: FF 7F 01 05 B3 1B 07 40 00 00 0D A5 B6 1B 01 01  // .......@........
    B6E0: 05 31 1B 00 08 00 04 01 0D 86 1B 04 00 01 0D E7  // .1..............
    B6F0: 1B 01 00 5C 05 00 1B FF FF FD FF 00 00 02 00 3A  // ...\...........:
    B700: 00 00 5B 5B 5C 05 F6 02 FF 00 FE 9F 04 FC 00 20  // ..[[\.......... 
    B710: 01 05 F9 02 10 27 02 00 01 05 14 03 00 08 00 20  // .....'......... 
    B720: 01 05 0C 03 00 90 00 10 01 25 09 01 01 01 05 3B  // .........%.....;
    B730: 01 64 02 12 00 01 05 30 01 A0 86 11 00 01 E5 09  // .d.....0........
    B740: 17 64 01 05 22 17 00 00 9B 02 01 05 06 17 21 84  // .d..".........!.
    B750: 20 00 01 8D E5 17 64 00 01 25 E4 17 01 01 05 31  //  .....d..%.....1
    B760: 01 3C 00 01 08 5C 65 D4 00 FC 02 01 0D FC 00 00  // .<...\e.........
    B770: 01 01 05 2F 48 00 00 00 00 01 05 04 48 00 00 00  // .../H.......H...
    B780: 00 01 05 3A 48 0F 00 00 00 0D E5 CB 05 10 01 05  // ...:H...........
    B790: F8 16 00 00 00 30 01 25 32 01 00 55 00 00 52 4E  // .....0.%2..U..RN
    B7A0: 02 25 00 07 52 33 02 05 00 00 07 00 00 52 4D 2C  // .%..R3.......RM,
    B7B0: 25 00 01 3D 25 00 06 45 65 01 66 16 03 0C 41 04  // %..=%..Ee.f...A.
    B7C0: 00 4C 0D 41 02 00 44 B7 00 0D A5 C9 05 04 5B 00  // .L.A..D.......[.
    B7D0: 07 00 01 01 00 00 5B 00 8A 00 01 01 00 00 37 00  // ......[.......7.
    B7E0: 00 01 05 03 2B 54 10 76 32 56 00 41 03 50 41 9F  // ....+T.v2V.A.PA.
    B7F0: 03 56 00 40 66 FF 2D 0D 42 4A 00 4C 65 41 10 44  // .V.@f.-.BJ.LeA.D
    B800: 46 00 09 65 41 07 03 2A 40 41 15 0D 40 03 2D 0A  // F..eA..*@A..@.-.
    B810: 42 40 01 04 02 08 00 00 01 04 03 2B 04 00 5B 7A  // B@.........+..[z
    B820: 40 00 23 10 54 76 45 10 76 32 32 10 54 76 54 10  // @.#.TvE.v22.TvT.
    B830: 76 32 03 21 54 76 05 41 76 32 13 20 54 76 15 40  // v2.!Tv.Av2. Tv.@
    B840: 76 32 32 10 45 76 54 10 67 32 32 10 54 76 54 10  // v22.EvT.g22.TvT.
    B850: 76 32 32 10 65 47 54 10 27 63 32 10 75 46 54 10  // v22.eGT.'c2.uFT.
    B860: 37 62 61 04 01 01 08 00 37 00 00 01 05 82 00 00  // 7ba.....7.......
    B870: 00 20 C0 07 A5 83 00 FC 01 05 82 00 2C 01 50 C0  // . ..........,.P.
    B880: 37 05 00 01 0D 2C 01 06 02 01 05 A4 01 09 00 40  // 7....,.........@
    B890: 00 01 05 A0 01 03 00 00 00 01 0D B0 01 02 04 01  // ................
    B8A0: E5 98 01 00 4A 25 00 00 01 49 E6 00 5C 25 0C 00  // ....J%...I..\%..
    B8B0: 80 64 5C 25 10 00 80 64 5C 25 14 00 80 64 5C 25  // .d\%...d\%...d\%
    B8C0: 18 00 80 64 5C 25 1C 00 80 64 5C 25 24 00 80 18  // ...d\%...d\%$...
    B8D0: 5C 25 28 00 80 64 0D 25 2C 00 01 0D 25 20 00 01  // \%(..d.%,...% ..
    B8E0: 0D 25 00 00 01 01 05 D8 01 B8 29 E8 00 01 05 DC  // .%........).....
    B8F0: 01 B8 29 E8 00 01 05 E0 01 B8 29 E8 00 01 05 E4  // ..).......).....
    B900: 01 B8 29 E8 00 01 E5 14 02 64 01 05 74 01 00 00  // ..)......d..t...
    B910: 24 00 37 00 00 01 05 82 00 14 00 00 C0 0D 65 83  // $.7...........e.
    B920: 00 01 51 FA 01 05 82 00 00 00 00 C0 0D 25 83 00  // ..Q..........%..
    B930: 01 01 05 82 00 70 01 50 C0 37 05 00 54 00 18 01  // .....p.P.7..T...
    B940: 01 05 A8 01 20 40 00 00 01 E5 60 02 64 01 E5 DC  // .... @....`.d...
    B950: 02 64 01 25 44 03 00 37 00 00 07 A5 97 01 F7 54  // .d.%D..7.......T
    B960: 00 92 01 01 05 82 00 78 03 20 C0 01 0D 83 00 19  // .......x. ......
    B970: 00 01 05 82 00 00 00 60 C0 5C 05 83 00 FD FF FF  // .......`.\......
    B980: FF 02 00 00 00 01 05 82 00 10 00 00 C0 01 05 83  // ................
    B990: 00 02 00 80 2A 01 05 82 00 70 03 00 80 3C 05 83  // ....*....p...<..
    B9A0: 00 00 00 02 00 46 35 04 01 05 82 00 60 03 20 C0  // .....F5.....`. .
    B9B0: 37 05 00 5C 05 60 03 10 01 18 F0 20 A4 62 00 5C  // 7..\.`..... .b.\
    B9C0: 05 64 03 FF FF 00 FC 00 00 01 01 5C 05 6C 03 10  // .d.........\.l..
    B9D0: 01 08 F0 20 A4 62 00 5C 05 70 03 FF FF 00 FC 00  // ... .b.\.p......
    B9E0: 00 01 01 5C 05 50 03 87 00 7C 00 19 52 9D 7F 5C  // ...\.P...|..R..\
    B9F0: 05 54 03 07 0C 80 FF 38 20 01 00 5C 05 E4 01 BF  // .T.....8 ..\....
    BA00: FF FF DF BF FF 01 20 5C 05 84 00 FF FD FF FF FF  // ...... \........
    BA10: 7D A0 00 37 00 00 01 05 82 00 04 00 30 C0 37 05  // }..7........0.7.
    BA20: 00 01 05 04 00 02 00 91 06 01 05 0C 00 60 6A 00  // .............`j.
    BA30: 08 01 05 10 00 01 00 00 00 37 00 00 02 05 00 44  // .........7.....D
    BA40: 00 03 05 52 45 03 01 00 00 02 05 00 44 00 18 0C  // ...RE.......D...
    BA50: 52 45 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00  // RE......0.7..>..
    BA60: 0A 00 44 39 02 3D 0D 00 38 02 44 26 02 3D 0D 00  // ..D9.=..8.D&.=..
    BA70: 45 01 44 26 02 01 05 1C 00 4D 00 00 AA 01 05 20  // E.D&.....M..... 
    BA80: 00 DA A7 8C 31 43 49 02 01 05 1C 00 4D 00 C0 AC  // ....1CI.....M...
    BA90: 01 05 20 00 EC A7 78 31 43 49 02 01 05 1C 00 4D  // .. ...x1CI.....M
    BAA0: 00 C0 AC 01 05 20 00 EC A7 78 31 01 05 24 00 00  // ..... ...x1..$..
    BAB0: 21 00 00 01 05 28 00 FF FF FF FF 01 05 64 00 96  // !....(.......d..
    BAC0: 43 81 01 01 05 68 00 87 25 09 40 01 05 6C 00 35  // C....h..%.@..l.5
    BAD0: 14 BF 02 01 05 70 00 01 80 00 00 01 05 2C 00 00  // .....p.......,..
    BAE0: 21 00 00 01 05 30 00 FF FF FF FF 37 05 00 03 F8  // !....0.....7....
    BAF0: 00 80 00 09 E5 00 0C 4C E5 00 04 44 AF 02 4C E5  // .......L...D..L.
    BB00: 00 08 49 BD 02 69 E5 00 04 03 0D 00 00 02 43 B6  // ..I..i........C.
    BB10: 02 69 E5 00 08 56 08 00 5C 8A 10 00 0F F0 00 4C  // .i...V..\......L
    BB20: E5 00 04 44 D2 02 0D 65 24 00 04 54 00 28 00 0D  // ...D...e$..T.(..
    BB30: 25 24 00 01 4C E5 00 08 44 E7 02 0D 65 2C 00 04  // %$..L...D...e,..
    BB40: 54 00 30 00 0D 25 2C 00 01 37 00 00 02 05 00 44  // T.0..%,..7.....D
    BB50: 00 03 05 52 45 03 01 00 00 02 05 00 44 00 18 0C  // ...RE.......D...
    BB60: 52 45 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00  // RE......0.7..>..
    BB70: 0A 00 44 91 03 3D 0D 00 38 02 44 91 03 3D 0D 00  // ..D..=..8.D..=..
    BB80: 45 01 44 91 03 03 F8 00 80 00 09 E5 00 0C 4C E5  // E.D...........L.
    BB90: 00 04 44 44 03 4C E5 00 08 49 91 03 02 05 00 14  // ..DD.L...I......
    BBA0: 01 0B 06 43 4B 03 02 05 00 14 01 05 06 52 45 08  // ...CK........RE.
    BBB0: 05 00 3F 00 00 00 01 05 82 00 04 00 30 C0 37 05  // ..?.........0.7.
    BBC0: 00 56 00 41 03 21 41 00 09 25 41 1F 4B 25 00 20  // .V.A.!A..%A.K%. 
    BBD0: 44 88 03 03 A5 41 20 33 8A 41 41 56 08 41 15 1D  // D....A 3.AAV.A..
    BBE0: 41 03 31 02 20 00 41 43 91 03 15 05 41 13 2B 02  // A.1. .AC....A.+.
    BBF0: 20 00 41 37 00 00 03 05 00 24 00 30 C0 03 05 01  //  .A7.....$.0....
    BC00: 44 00 30 C0 01 05 82 00 80 00 30 C0 03 38 40 83  // D.0.......0..8@.
    BC10: 00 4C 25 40 04 49 11 04 01 02 82 00 00 4A 25 83  // .L%@.I.......J%.
    BC20: 00 01 49 11 04 0D 65 83 00 04 66 FF 2D 0D 42 39  // ..I...e...f.-.B9
    BC30: 04 56 00 41 01 02 82 00 01 4A 25 83 00 01 49 D2  // .V.A.....J%...I.
    BC40: 03 01 02 82 00 01 01 04 83 00 00 00 2D 0D 42 04  // ............-.B.
    BC50: 00 2D 25 41 04 3E 25 41 28 45 D2 03 01 02 82 00  // .-%A.>%A(E......
    BC60: 01 4A 25 83 00 01 49 FA 03 01 02 82 00 00 07 65  // .J%...I........e
    BC70: 83 00 FB 2D 05 00 08 00 00 00 2D 05 01 08 00 00  // ...-......-.....
    BC80: 00 1B 05 40 01 3E 05 00 2C 00 30 C0 44 AF 03 01  // ...@.>..,.0.D...
    BC90: 05 BD 00 00 6C 00 00 5B 7A 28 00 25 00 00 00 49  // ....l..[z(.%...I
    BCA0: 20 20 00 4D 60 46 00 6D 40 20 00 71 80 40 00 75  //   .M`F.m@ .q.@.u
    BCB0: 00 00 00 79 00 00 00 7D 00 68 00 01 40 0F 00 0A  // ...y...}.h..@...
    BCC0: 00 00 00 00 52 00 01 01 00 00 37 00 00 52 3E 03  // ....R.....7..R>.
    BCD0: 0C 41 14 00 01 0A 0A 15 41 33 0D 41 01 00 1B 0D  // .A......A3.A....
    BCE0: 41 04 15 05 41 10 2D 05 41 00 F4 00 F4 01 02 09  // A...A.-.A.......
    BCF0: 08 41 33 8D 41 00 F4 1B 1D 41 07 01 1A 06 00 41  // .A3.A....A.....A
    BD00: 01 05 01 0B 00 00 00 F4 01 25 C9 00 F4 01 05 C4  // .........%......
    BD10: 00 00 00 00 00 5B 11 01 01 01 00 04 37 00 00 03  // .....[......7...
    BD20: F9 46 00 08 E5 00 7F 03 0A 41 42 2D 0D 41 04 00  // .F.......AB-.A..
    BD30: 03 8C 41 02 00 2D 0C 42 00 00 2D 0D 42 04 00 56  // ..A..-.B..-.B..V
    BD40: 30 46 03 04 40 00 00 3E 05 40 00 00 00 00 44 49  // 0F..@..>.@....DI
    BD50: 00 3D FA 00 40 44 50 00 3E A5 46 01 49 5B 00 33  // .=..@DP.>.F.I[.3
    BD60: 1A 42 41 43 62 00 03 A5 46 01 3D 02 00 40 47 62  // .BACb...F.=..@Gb
    BD70: 00 2D 1A 42 41 43 2C 00 4C E5 46 80 44 6A 00 5B  // .-.BAC,.L.F.Dj.[
    BD80: 03 8A 41 42 56 00 40 03 0A 42 41 03 8C 40 00 00  // ..ABV.@..BA..@..
    BD90: 3E 8D 40 FF FF 44 10 01 03 24 42 02 00 03 22 46  // >.@..D...$B..."F
    BDA0: 42 09 25 42 3F 3E 25 42 05 49 A6 00 03 1A 40 40  // B.%B?>%B.I....@@
    BDB0: 03 0D 42 04 00 2D 1A 42 41 43 E1 00 3E 25 42 06  // ..B..-.BAC..>%B.
    BDC0: 49 CD 00 33 0D 41 03 00 56 08 42 2D 0D 40 01 00  // I..3.A..V.B-.@..
    BDD0: 3E 1A 40 40 47 9F 00 2D 1A 42 41 2D 0D 41 03 00  // >.@@G..-.BA-.A..
    BDE0: 43 04 01 03 1A 40 40 09 0D 42 1F 00 2D 1A 42 41  // C....@@..B..-.BA
    BDF0: 4C 25 46 80 49 04 01 56 18 40 4C 25 46 40 49 F9  // L%F.I..V.@L%F@I.
    BE00: 00 01 02 00 00 40 01 04 01 00 00 00 43 04 01 01  // .....@......C...
    BE10: 02 91 0A 40 01 04 92 0A 00 00 2D 0D 41 03 00 03  // ...@......-.A...
    BE20: 8A 41 42 43 71 00 5B 00 21 00 02 01 00 04 37 00  // .ABCq.[.!.....7.
    BE30: 00 01 01 A4 00 01 01 01 94 00 00 3C 25 95 00 01  // ...........<%...
    BE40: 49 13 00 02 00 01 A4 00 5B 00 8E 00 01 02 00 04  // I.......[.......
    BE50: 66 FF 56 08 47 2D 0D 42 5C 00 03 21 47 00 09 25  // f.V.G-.B\..!G..%
    BE60: 47 F0 42 22 47 63 00 43 00 63 80 36 00 63 60 3E  // G.B"Gc.C.c.6.c`>
    BE70: 00 63 20 2E 00 5A 5A 5B 2D 0D 42 26 00 43 43 00  // .c ..ZZ[-.B&.CC.
    BE80: 2D 0D 42 0C 00 43 43 00 2D 0D 42 18 00 03 21 47  // -.B..CC.-.B...!G
    BE90: 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03 0C 48  // ..%G.-.BG-.BG..H
    BEA0: 00 00 5B 7A 32 00 00 00 00 02 00 04 00 26 00 28  // ..[z2........&.(
    BEB0: 00 2A 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 00  // .*....,.-.../...
    BEC0: 00 01 00 02 00 03 00 04 00 05 00 0A 00 00 A0 00  // ................
    BED0: 40 51 E0 51 80 52 20 53 BF 02 02 02 1C 04 20 05  // @Q.Q.R S...... .
    BEE0: 01 64 00 00 00 03 02 02 40 66 1F 02 04 01 0C 00  // .d......@f......
    BEF0: 52 45 08 05 01 FF 03 00 00 3D 0D 01 00 00 49 2F  // RE.......=....I/
    BF00: 00 02 04 00 28 00 5B 02 04 01 1C 00 52 45 08 05  // ....(.[.....RE..
    BF10: 01 FF 00 00 00 20 05 01 A0 86 01 00 7C 04 40 20  // ..... ......|.@ 
    BF20: 00 7E 05 40 FF 00 00 00 03 02 01 40 03 04 40 24  // .~.@.......@..@$
    BF30: 00 21 05 40 A0 86 01 00 2D 02 01 40 02 E5 00 01  // .!.@....-..@....
    BF40: 56 00 03 02 0D 03 02 00 56 00 04 7C 04 02 3C 00  // V.......V..|..<.
    BF50: 7E 05 40 10 27 00 00 02 02 01 40 02 04 02 4C 00  // ~.@.'.....@...L.
    BF60: 02 A4 03 56 00 02 E4 03 5A 00 52 37 03 01 05 01  // ...V....Z.R7....
    BF70: 03 71 03 03 03 04 40 64 00 21 05 40 A0 86 01 00  // .q....@d.!.@....
    BF80: 02 02 01 40 55 18 03 02 04 02 50 00 02 E4 03 5B  // ...@U.....P....[
    BF90: 00 52 37 7C 04 02 40 00 7E 05 40 10 27 00 00 02  // .R7|..@.~.@.'...
    BFA0: 02 02 40 02 E4 03 57 00 52 37 02 E5 03 01 02 02  // ..@...W.R7......
    BFB0: 02 01 52 37 03 01 06 01 03 B1 03 03 7C 05 06 A0  // ..R7........|...
    BFC0: 86 01 00 7E 02 40 05 03 02 03 40 03 02 05 40 43  // ...~.@....@...@C
    BFD0: FA 00 3D E5 00 00 44 66 02 3E 04 03 04 00 47 21  // ..=...Df.>....G!
    BFE0: 01 03 02 03 05 3E 04 03 04 00 47 21 01 03 04 03  // .....>....G!....
    BFF0: 04 00 2D 05 03 71 02 00 00 03 04 40 7C 00 3E 05  // ..-..q.....@|.>.
    C000: 40 00 00 00 00 44 D9 01 33 04 03 7C 00 7C 02 03  // @....D..3..|.|..
    C010: 03 7E 05 40 A0 86 01 00 03 02 46 40 02 04 01 50  // .~.@......F@...P
    C020: 00 03 04 40 64 00 21 05 40 A0 86 01 00 02 02 02  // ...@d.!.@.......
    C030: 40 02 05 03 02 00 00 00 02 A4 03 5B 00 52 37 7C  // @..........[.R7|
    C040: 04 03 4C 00 7E 05 40 A0 86 01 00 02 02 02 40 02  // ..L.~.@.......@.
    C050: E4 03 5A 00 52 37 02 02 02 01 02 E5 03 01 52 37  // ..Z.R7........R7
    C060: 03 01 04 01 02 04 01 40 00 02 A4 03 57 00 7C 04  // .......@....W.|.
    C070: 03 3C 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4  // .<.~.@.......@..
    C080: 03 56 00 52 37 7C 05 04 10 27 00 00 7E 01 40 01  // .V.R7|...'..~.@.
    C090: 03 02 04 40 03 02 05 02 3E 02 05 04 45 CE 01 33  // ...@....>...E..3
    C0A0: 02 05 04 43 E0 01 33 02 04 05 03 02 05 04 43 E0  // ...C..3.......C.
    C0B0: 01 03 02 04 02 56 00 05 7C 04 02 74 00 7E 05 40  // .....V..|..t.~.@
    C0C0: 10 27 00 00 03 02 04 40 7C 02 40 40 02 02 01 40  // .'.....@|.@@...@
    C0D0: 02 02 02 41 7C 04 02 78 00 7E 05 40 10 27 00 00  // ...A|..x.~.@.'..
    C0E0: 7C 02 40 40 02 25 03 01 52 37 7C 02 05 05 52 37  // |.@@.%..R7|...R7
    C0F0: 02 25 03 03 52 37 03 04 40 68 00 21 05 40 0A 00  // .%..R7..@h.!.@..
    C100: 00 00 2C 02 01 40 7C 04 02 6C 00 7E 05 40 10 27  // ..,..@|..l.~.@.'
    C110: 00 00 2C 02 01 40 7C 04 02 70 00 7E 05 40 10 27  // ..,..@|..p.~.@.'
    C120: 00 00 2C 02 01 40 26 05 01 64 00 00 00 21 05 40  // ..,..@&..d...!.@
    C130: 64 00 00 00 2D 02 02 40 55 38 00 43 68 00 2D 05  // d...-..@U8.Ch.-.
    C140: 05 70 02 00 00 27 05 05 71 02 00 00 21 05 40 71  // .p...'..q...!.@q
    C150: 02 00 00 3E 04 40 04 00 47 89 02 02 04 00 2C 00  // ...>.@..G.....,.
    C160: 5B 56 00 00 03 31 00 00 33 25 00 01 02 02 00 40  // [V...1..3%.....@
    C170: 03 04 46 08 00 03 04 40 80 00 15 25 00 02 2D 0A  // ..F....@...%..-.
    C180: 42 00 21 04 40 84 00 2D 02 46 40 3D 02 00 46 48  // B.!.@..-.F@=..FH
    C190: BE 02 02 02 00 46 5B 00 78 00 01 01 00 00 37 00  // .....F[.x.....7.
    C1A0: 00 52 14 0D A5 51 1B 01 54 20 54 1B 07 25 44 1B  // .R...Q..T T..%D.
    C1B0: FE 54 20 45 1B 42 29 00 63 00 31 00 63 01 39 00  // .T E.B).c.1.c.9.
    C1C0: 63 02 4D 00 5A 5A 43 70 00 01 25 45 1B 02 43 3E  // c.M.ZZCp..%E..C>
    C1D0: 00 01 25 45 1B 01 54 20 42 1B 54 00 43 1B 54 00  // ..%E..T B.T.C.T.
    C1E0: 47 1B 43 70 00 01 0D 43 1B 01 01 01 05 47 1B 01  // G.Cp...C.....G..
    C1F0: 00 01 00 0D 65 48 1B 01 0D 65 4B 1B 01 01 0D 53  // ....eH...eK....S
    C200: 1B 10 10 01 25 42 1B 01 54 30 51 1B 3A 00 00 5B  // ....%B..T0Q.:..[
    C210: 74 00 01 01 00 00 37 00 00 4A A5 CB 05 01 44 15  // t.....7..J....D.
    C220: 00 02 65 00 01 0E 25 00 80 52 14 03 00 46 CC 00  // ..e...%..R...F..
    C230: 08 25 00 0F 52 14 54 30 9D 1B 3C 69 9D 1B 00 44  // .%..R.T0..<i...D
    C240: 65 00 01 69 9D 1B 00 3D 65 00 00 44 65 00 4A A5  // e..i...=e..De.J.
    C250: 9C 1B 01 44 65 00 4C 25 46 01 44 69 00 4A 25 A3  // ...De.L%F.Di.J%.
    C260: 1B 01 49 4D 00 4A 25 A3 1B 01 44 55 00 4A 25 A3  // ..IM.J%...DU.J%.
    C270: 1B 01 49 5D 00 3A 00 00 5B 4A 25 9D 1B 01 44 69  // ..I].:..[J%...Di
    C280: 00 43 65 00 3E 00 01 01 00 00 37 00 00 52 14 3D  // .Ce.>.....7..R.=
    C290: 65 00 01 44 30 00 0D 65 9C 1B 03 07 25 9C 1B FE  // e..D0..e....%...
    C2A0: 4A A5 9C 1B 01 49 1C 00 07 E5 00 1B 7F 54 20 A9  // J....I.......T .
    C2B0: 1B 43 3A 00 0D E5 00 1B 80 0D 25 9C 1B 01 3A 00  // .C:.......%...:.
    C2C0: 00 5B 2C 00 02 01 00 00 37 00 00 3C 21 FC 00 00  // .[,.....7..<!...
    C2D0: 49 19 00 0D A5 C0 00 01 43 26 00 3C 61 FC 00 00  // I.......C&.<a...
    C2E0: 49 26 00 0D A5 C0 00 02 0D A5 C1 00 01 5B 22 00  // I&...........[".
    C2F0: 01 01 04 04 03 39 00 00 55 38 00 20 02 00 00 03  // .....9..U8. ....
    C300: 04 41 00 00 56 38 41 27 02 40 41 02 E2 00 40 5B  // .A..V8A'.@A...@[
    C310: 19 00 01 01 00 08 37 00 00 52 14 01 01 5E 1B 00  // ......7..R...^..
    C320: 01 01 5F 1B 01 3A 00 00 5B 00 80 00 02 01 00 00  // .._..:..[.......
    C330: 56 00 40 03 39 40 00 55 38 00 66 FF 2D 0D 42 50  // V.@.9@.U8.f.-.BP
    C340: 00 3E 0C 40 02 00 47 27 00 2D 0D 42 08 00 43 17  // .>.@..G'.-.B..C.
    C350: 00 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00  // .3.@..!.@..-.@..
    C360: 56 18 40 03 02 46 40 7B 05 00 40 42 0F 00 7E 02  // V.@..F@{..@B..~.
    C370: 40 46 02 02 00 40 5B 7A 30 00 64 00 00 00 00 00  // @F...@[z0.d.....
    C380: 00 00 FF FF 07 00 01 00 00 00 C8 00 3F 00 08 00  // ............?...
    C390: 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60 00  // ..@._.@.2...~.`.
    C3A0: 64 00 00 32 7F 00 7F 00 64 00 C6 00 01 03 04 00  // d..2....d.......
    C3B0: 37 00 00 56 00 46 56 00 00 03 21 00 00 55 20 00  // 7..V.FV...!..U .
    C3C0: 3D 65 00 03 44 2C 00 3D 65 00 0D 46 BB 00 02 29  // =e..D,.=e..F...)
    C3D0: 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22 00 4A  // ..2%...%.`R.\".J
    C3E0: F8 00 02 22 00 00 52 14 03 08 41 C0 1A 09 0D 41  // ..."..R...A....A
    C3F0: 03 00 66 FF 2D 0D 42 C2 00 2D 0A 42 41 03 24 00  // ..f.-.B..-.BA.$.
    C400: 00 00 3D E2 00 00 48 A7 00 3E 25 00 04 44 76 00  // ..=...H..>%..Dv.
    C410: 03 22 46 00 33 25 46 01 15 25 46 04 0F 25 46 01  // ."F.3%F..%F..%F.
    C420: 33 39 00 00 3E 25 00 01 44 93 00 3E 25 00 02 44  // 39..>%..D..>%..D
    C430: 8C 00 03 25 46 21 03 65 00 2F 43 97 00 03 65 00  // ...%F!.e./C...e.
    C440: 13 03 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46  // ..yF.3eF..-F..eF
    C450: 01 52 14 01 02 F2 1B 46 01 52 EE 1B 00 54 00 F9  // .R.....F.R...T..
    C460: 1B 54 00 ED 1B 3A 00 00 5B 7A 04 00 03 02 01 04  // .T...:..[z......
    C470: AF 01 01 04 00 08 37 00 00 3D 65 02 01 49 44 01  // ......7..=e..ID.
    C480: 4B A5 02 03 49 5D 00 02 05 00 00 03 00 05 02 05  // K...I]..........
    C490: 01 00 05 02 00 3C 21 FC 00 02 49 57 00 01 8D C0  // .....<!...IW....
    C4A0: 00 00 02 51 02 01 05 C6 00 00 00 10 00 01 05 C8  // ...Q............
    C4B0: 00 00 00 50 00 01 0D C3 00 02 00 54 20 CA 00 01  // ...P.......T ...
    C4C0: 05 C2 00 00 01 00 00 56 20 40 43 83 00 0E 25 02  // .......V @C...%.
    C4D0: 80 52 14 54 00 CC 00 56 08 48 08 25 02 07 0D 25  // .R.T...V.H.%...%
    C4E0: CA 00 01 01 25 C2 00 01 54 00 C6 00 54 00 C8 00  // ....%...T...T...
    C4F0: 56 20 40 3D A5 01 00 49 8F 00 0D 25 C2 00 10 07  // V @=...I...%....
    C500: 65 D0 05 FE 3D A5 01 01 47 A0 00 0D 65 D0 05 01  // e...=...G...e...
    C510: 03 A0 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00  // ..@....F....AF-.
    C520: 46 C6 00 2D 00 41 C8 00 52 14 01 32 07 1A 40 01  // F..-.A..R..2..@.
    C530: 32 08 1A 40 01 02 04 1A 46 01 02 05 1A 41 54 30  // 2..@....F....AT0
    C540: C1 1A 54 00 5C 1B 01 01 5D 1B 00 54 08 09 1A 54  // ..T.\...]..T...T
    C550: 08 0A 1A 54 08 0B 1A 54 08 0C 1A 01 09 0E 1A 00  // ...T...T........
    C560: 01 19 0D 1A 00 5C 19 01 1A FC F8 01 5C A5 01 1A  // .....\......\...
    C570: 0F 10 01 09 06 1A 01 01 25 00 1A 01 0D 25 B3 1B  // ........%....%..
    C580: 04 5C 62 B3 1B FE 40 54 20 35 1A 54 20 3C 1A 54  // .\b...@T 5.T <.T
    C590: 00 CA 1B 54 00 C8 1B 54 00 CC 1B 4B A5 02 03 49  // ...T...T...K...I
    C5A0: 40 01 0E 25 02 80 52 14 01 05 CC 00 01 00 00 00  // @..%..R.........
    C5B0: 3A 00 00 5B 52 14 3D 65 02 00 49 61 01 54 20 00  // :..[R.=e..Ia.T .
    C5C0: 1A 3A 00 00 3C 21 FC 00 02 49 60 01 54 08 C1 00  // .:..<!...I`.T...
    C5D0: 5B 3D 65 02 10 44 6E 01 01 09 06 1A 01 5B 03 00  // [=e..Dn......[..
    C5E0: 40 04 1A 09 05 40 00 00 00 FD 2D 01 40 00 09 0D  // @....@....-.@...
    C5F0: 40 00 F0 01 02 04 1A 40 08 0D 00 FF 0F 56 00 41  // @......@.....V.A
    C600: 03 31 41 01 74 0A 00 41 2C 09 01 00 08 25 00 FC  // .1A.t..A,....%..
    C610: 14 05 00 10 01 01 5C 1B 00 01 09 0D 1A 01 5B 00  // ......\.......[.
    C620: 49 00 01 01 00 00 37 00 00 52 14 07 65 B6 1B FE  // I.....7..R..e...
    C630: 3D 65 00 01 44 37 00 54 30 6E 1A 54 30 11 1A 54  // =e..D7.T0n.T0..T
    C640: 20 B5 1B 54 20 BD 1B 54 30 BD 1B 4A 25 B6 1B 01  //  ..T ..T0..J%...
    C650: 49 2B 00 3A 00 00 5B 0D 25 BD 1B 01 54 00 9E 1B  // I+.:..[.%...T...
    C660: 07 25 C0 1A F4 3A 00 00 5B 00 95 00 01 03 00 00  // .%...:..[.......
    C670: 37 00 00 52 14 0D 25 03 1B 04 54 20 78 1A 54 00  // 7..R..%...T x.T.
    C680: 80 1A 3D 65 00 01 49 56 00 0D 25 7E 1A 07 01 25  // ..=e..IV..%~...%
    C690: 7F 1A 01 51 01 4A 25 7F 1A 02 44 29 00 54 20 7F  // ...Q.J%...D).T .
    C6A0: 1A 54 08 81 1A 54 08 82 1A 54 08 83 1A 01 0D 84  // .T...T...T......
    C6B0: 1A FF FF 01 0D 85 1A FF FF 01 0D 86 1A FF FF 5B  // ...............[
    C6C0: 01 31 79 1A 00 56 00 41 03 19 41 01 3B 02 41 3D  // .1y..V.A..A.;.A=
    C6D0: 65 00 02 49 78 00 03 00 40 7C 1A 04 02 00 40 43  // e..Ix...@|....@C
    C6E0: 81 00 03 03 40 00 01 02 7C 1A 40 2D 05 46 04 00  // ....@...|.@-.F..
    C6F0: 00 00 2D 8D 41 01 00 3E 89 41 01 45 65 00 5B 00  // ..-.A..>.A.Ee.[.
    C700: 3D 00 01 01 00 04 37 00 00 56 00 40 03 38 40 9A  // =.....7..V.@.8@.
    C710: 0A 21 05 40 E2 04 00 00 02 02 00 40 03 00 40 99  // .!.@.......@..@.
    C720: 0A 1B 05 40 14 09 0D 40 07 00 21 05 40 09 3D 00  // ...@...@..!.@.=.
    C730: 00 27 05 40 64 00 00 00 2C 02 00 40 5B 00 D8 00  // .'.@d...,..@[...
    C740: 01 01 0C 00 37 00 00 01 05 82 00 2C 00 50 C0 4A  // ....7......,.P.J
    C750: 25 83 00 01 49 3B 00 02 05 00 40 7E 05 00 01 05  // %...I;....@~....
    C760: 82 00 B4 00 50 C0 02 E8 00 83 00 52 29 26 05 00  // ....P......R)&..
    C770: 10 27 00 00 02 02 00 40 5B 03 05 00 AC 02 50 C0  // .'.....@[.....P.
    C780: 03 05 01 8C 02 50 C0 03 05 02 78 02 50 C0 01 05  // .....P....x.P...
    C790: 82 00 40 03 50 C0 4A 25 83 00 01 44 75 00 03 05  // ..@.P.J%...Du...
    C7A0: 00 28 03 50 C0 03 05 01 08 03 50 C0 03 05 02 F4  // .(.P......P.....
    C7B0: 02 50 C0 01 02 82 00 02 4A 05 83 00 80 00 00 00  // .P......J.......
    C7C0: 44 8C 00 2D 05 01 10 00 00 00 01 02 82 00 01 56  // D..-...........V
    C7D0: 00 40 03 18 40 83 00 21 05 40 10 27 00 00 03 02  // .@..@..!.@.'....
    C7E0: 46 40 56 00 40 03 08 40 83 00 21 05 40 10 27 00  // F@V.@..@..!.@.'.
    C7F0: 00 27 05 40 00 00 01 00 2D 02 46 40 01 02 82 00  // .'.@....-.F@....
    C800: 00 56 00 40 03 20 40 83 00 09 25 40 0F 75 02 46  // .V.@. @...%@.u.F
    C810: 40 02 02 00 46 5B 53 01 02 03 00 18 37 00 00 66  // @...F[S.....7..f
    C820: FF 2D 0D 42 47 01 55 28 05 2D 09 42 05 2D 09 42  // .-.BG.U(.-.B.-.B
    C830: 05 03 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D  // ...H....A.-.A.>.
    C840: 41 03 00 46 3F 00 5C 05 B3 1B FB 0F F0 FF 00 30  // A..F?.\........0
    C850: 00 00 43 4B 00 5C 05 B3 1B FF 0F F0 FF 04 40 00  // ..CK.\........@.
    C860: 00 03 09 41 00 2D 19 41 00 33 0D 41 01 00 01 0A  // ...A.-.A.3.A....
    C870: 80 1B 41 54 08 82 1B 01 99 82 1B 02 03 19 41 00  // ..AT..........A.
    C880: 33 09 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01  // 3.A.V.A..A.3.AA.
    C890: 8A 81 1B 41 03 19 41 00 33 09 41 02 2D 1A 41 41  // ...A..A.3.A.-.AA
    C8A0: 2D 09 41 00 4B 25 04 10 44 99 00 2D 09 41 00 01  // -.A.K%..D..-.A..
    C8B0: 0A 81 1B 41 03 21 41 04 09 25 41 02 1B 25 41 01  // ...A.!A..%A..%A.
    C8C0: 01 22 83 1B 41 54 00 5E 1B 01 31 5E 1B 04 01 B1  // ."..AT.^..1^....
    C8D0: 5E 1B 04 03 09 41 01 2D 19 41 01 33 0D 41 01 00  // ^....A.-.A.3.A..
    C8E0: 01 0A 87 1B 41 54 08 8E 1B 01 99 8E 1B 03 03 19  // ....AT..........
    C8F0: 41 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41  // A.3.A.V.A..A.3.A
    C900: 41 01 8A 8D 1B 41 03 19 41 01 33 09 41 03 2D 1A  // A....A..A.3.A.-.
    C910: 41 41 2D 09 41 01 4B 25 04 20 44 0B 01 2D 09 41  // AA-.A.K%. D..-.A
    C920: 01 01 0A 8D 1B 41 03 21 41 04 09 25 41 04 1B 25  // .....A.!A..%A..%
    C930: 41 02 01 22 8F 1B 41 54 00 5F 1B 01 39 5F 1B 04  // A.."..AT._..9_..
    C940: 01 B9 5F 1B 04 03 21 41 04 09 25 41 80 1B 25 41  // .._...!A..%A..%A
    C950: 07 01 22 9E 1B 41 3A 00 00 5B 7A 0C 00 00 00 00  // .."..A:..[z.....
    C960: 02 00 04 00 26 00 28 00 2A 00 BE 00 01 01 00 04  // ....&.(.*.......
    C970: 37 00 00 03 A1 40 00 3D A5 00 00 49 49 00 66 04  // 7....@.=...II.f.
    C980: 03 24 40 58 00 3E 25 40 FF 49 AE 00 55 00 01 02  // .$@X.>%@.I..U...
    C990: 25 01 28 52 09 02 0D 01 29 01 52 09 02 0D 01 2A  // %.(R....).R....*
    C9A0: 02 52 09 02 0D 01 2B 03 52 09 03 B1 40 01 01 B1  // .R....+.R...@...
    C9B0: 0A 15 01 66 1C 03 64 40 10 00 56 20 40 2D 0D 42  // ...f..d@..V @-.B
    C9C0: 14 00 54 30 CD 05 3E A4 40 0A 00 49 93 00 3D A5  // ..T0..>.@..I..=.
    C9D0: 00 00 44 AE 00 03 24 41 1C 00 03 71 41 00 09 0D  // ..D...$A...qA...
    C9E0: 41 0F 0F 3E 62 41 41 49 93 00 01 A2 CD 05 40 01  // A..>bAAI......@.
    C9F0: 64 80 0A 1C 00 3D A4 00 1C 00 44 AE 00 2D 0C 42  // d....=....D..-.B
    CA00: 04 00 2D 25 40 01 3E 62 40 40 49 5C 00 01 F1 0A  // ..-%@.>b@@I\....
    CA10: 15 00 0D A5 0A 15 80 5B 01 A2 CD 05 40 01 64 80  // .......[....@.d.
    CA20: 0A 1C 00 54 18 0A 15 5B 0A 00 01 01 08 00 37 00  // ...T...[......7.
    CA30: 00 5B 1A 00 01 01 00 04 37 00 00 01 05 E5 09 FC  // .[......7.......
    CA40: FD FC FC 01 05 E6 09 FD F8 FC FC 5B 31 02 01 01  // ...........[1...
    CA50: 00 08 37 00 00 0D 25 F4 16 08 07 25 62 18 FE 56  // ..7...%....%b..V
    CA60: 00 41 03 39 41 01 09 25 41 0F 03 0A 40 42 66 FF  // .A.9A..%A...@Bf.
    CA70: 2D 0D 42 11 02 15 25 41 02 2D 0A 42 41 03 0C 41  // -.B...%A.-.BA..A
    CA80: 00 00 01 02 00 00 41 07 A5 01 00 FE 54 08 01 00  // ......A.....T...
    CA90: 01 0C FB 16 02 00 03 0A 42 40 03 05 40 50 C3 00  // ........B@..@P..
    CAA0: 00 56 00 41 03 21 41 00 27 02 40 41 01 8A F7 16  // .V.A.!A.'.@A....
    CAB0: 40 01 25 F7 16 02 0D 25 F5 16 02 01 A9 F9 16 01  // @.%....%........
    CAC0: 4B 25 01 01 49 7F 00 54 30 F9 16 01 0D F9 16 00  // K%..I..T0.......
    CAD0: 31 2B A5 F9 16 01 4B 25 01 02 44 96 00 2B A5 F9  // 1+....K%..D..+..
    CAE0: 16 01 56 00 41 03 71 41 01 0F E5 41 80 01 02 FA  // ..V.A.qA...A....
    CAF0: 16 41 03 69 41 00 2D A5 41 01 01 02 FA 16 41 4B  // .A.iA.-.A.....AK
    CB00: 25 01 02 44 C6 00 56 28 41 2D A5 41 01 01 02 FA  // %..D..V(A-.A....
    CB10: 16 41 4B 25 01 01 44 E7 00 03 71 41 00 2D A5 41  // .AK%..D...qA.-.A
    CB20: 01 01 02 FA 16 41 03 79 41 00 2D A5 41 01 01 02  // .....A.yA.-.A...
    CB30: FA 16 41 0D 25 F4 16 01 03 A5 41 01 43 BA 01 03  // ..A.%.....A.C...
    CB40: 29 40 01 03 65 40 01 03 99 40 00 56 00 41 03 71  // )@..e@...@.V.A.q
    CB50: 41 01 0F 65 41 01 0F E5 41 80 01 02 FA 16 41 01  // A..eA...A.....A.
    CB60: A5 F9 16 04 3D 65 01 04 47 28 01 01 0D F9 16 01  // ....=e..G(......
    CB70: 13 43 57 01 01 A2 F9 16 40 01 0D F9 16 01 31 43  // .CW.....@.....1C
    CB80: 57 01 07 65 F9 16 EF 01 A5 F9 16 03 3E 25 40 04  // W..e........>%@.
    CB90: 46 57 01 01 A2 F9 16 40 31 A5 F9 16 01 5C 65 F9  // FW.....@1....\e.
    CBA0: 16 FD 20 0D 25 F4 16 01 03 A5 41 00 43 BA 01 03  // .. .%.....A.C...
    CBB0: 05 41 01 00 00 80 03 AA 41 40 01 02 FA 16 41 3D  // .A......A@....A=
    CBC0: 65 01 01 49 82 01 02 A8 00 FA 16 43 F9 01 56 00  // e..I.......C..V.
    CBD0: 41 03 1A 41 40 3B 02 41 03 28 41 FA 16 03 68 41  // A..A@;.A.(A...hA
    CBE0: FA 16 03 A8 41 FA 16 03 E8 41 FA 16 04 02 00 41  // ....A....A.....A
    CBF0: 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 F9 01 33  // V(@-.@..>%@.G..3
    CC00: 25 40 04 43 36 01 02 65 00 02 03 0D 41 64 00 33  // %@.C6..e....Ad.3
    CC10: 0D 41 01 00 3E 0D 41 00 00 44 F9 01 51 64 4A 25  // .A..>.A..D..QdJ%
    CC20: F6 16 10 44 C3 01 4A 65 F6 16 06 49 F9 01 02 65  // ...D..Je...I...e
    CC30: 00 01 0D 25 F5 16 02 3E A5 41 00 44 63 01 4B 25  // ...%...>.A.Dc.K%
    CC40: 01 01 44 F3 00 0D 25 F5 16 02 01 25 F4 16 02 51  // ..D...%....%...Q
    CC50: 01 54 00 F4 16 54 00 FB 16 5B 7A 20 00 68 48 01  // .T...T...[z .hH.
    CC60: 00 6C 48 03 02 70 48 05 04 74 48 42 41 78 48 49  // .lH..pH..tHBAxHI
    CC70: 48 7C 48 4B 4A 98 48 29 28 80 48 4D 4C 00 5F 00  // H|HKJ.H)(.HML._.
    CC80: 02 02 00 04 37 00 00 3D 65 00 01 44 54 00 55 30  // ....7..=e..DT.U0
    CC90: 00 3D 25 00 06 46 50 00 32 25 00 01 20 25 00 08  // .=%..FP.2%.. %..
    CCA0: 56 08 48 03 22 48 40 0D A5 99 18 01 02 A0 00 98  // V.H."H@.........
    CCB0: 18 08 A5 00 03 4A 25 98 18 02 44 4A 00 5C 0D 99  // .....J%...DJ.\..
    CCC0: 18 FF FE 01 00 43 50 00 0D 0D 99 18 01 01 3A 00  // .....CP.......:.
    CCD0: 00 5B 0D 65 CF 05 08 0D 25 80 01 01 5B 00 0A 00  // .[.e....%...[...
    CCE0: 01 02 00 00 5B 7A 00 00 0A 00 01 01 00 04 55 00  // ....[z........U.
    CCF0: 00 5B 3C 00 01 01 00 00 55 00 00 55 00 01 01 05  // .[<.....U..U....
    CD00: 91 0A 03 00 00 00 02 38 00 92 0A 02 21 01 00 08  // .......8....!...
    CD10: 25 00 0F 08 25 01 F0 20 05 00 20 4E 00 00 02 02  // %...%.. .. N....
    CD20: 00 40 20 05 01 E2 04 00 00 02 02 01 40 5B AF 01  // .@ .........@[..
    CD30: 01 06 04 18 03 05 46 00 51 25 02 3D E5 00 01 49  // ......F.Q%.=...I
    CD40: F3 00 55 38 00 66 08 03 24 41 04 00 2D 0D 42 08  // ..U8.f..$A..-.B.
    CD50: 00 55 00 02 3D 04 00 00 00 47 42 00 2C A5 02 01  // .U..=....GB.,...
    CD60: 2D 0D 42 0C 00 3D A2 02 41 45 26 00 55 00 01 5B  // -.B..=..AE&.U..[
    CD70: 02 24 02 05 00 02 64 02 04 00 03 01 46 00 56 00  // .$....d.....F.V.
    CD80: 40 03 21 40 02 6F 02 46 40 7C 05 46 00 40 00 00  // @.!@.o.F@|.F.@..
    CD90: 7E 05 40 C4 09 00 00 02 02 01 40 02 E5 02 01 7B  // ~.@.......@....{
    CDA0: 05 01 32 00 00 00 7E 05 40 10 27 00 00 7C 05 40  // ..2...~.@.'..|.@
    CDB0: 4E 0C 00 00 7E 05 40 40 4B 4C 00 02 0A 05 40 21  // N...~.@@KL....@!
    CDC0: 05 40 40 4B 4C 00 27 05 40 4E 0C 00 00 02 01 03  // .@@KL.'.@N......
    CDD0: 01 32 02 03 40 21 05 46 D0 07 00 00 27 05 40 10  // .2..@!.F....'.@.
    CDE0: 27 00 00 03 02 00 46 33 02 00 40 27 05 00 10 27  // '.....F3..@'...'
    CDF0: 00 00 3E 0C 40 06 00 48 D1 00 03 0C 40 06 00 55  // ..>.@..H....@..U
    CE00: 00 04 02 8A 04 40 03 01 40 01 33 01 40 04 21 05  // .....@..@.3.@.!.
    CE10: 40 32 00 00 00 27 05 40 50 C3 00 00 02 8A 05 40  // @2...'.@P......@
    CE20: 5B 55 38 00 03 05 40 00 32 00 00 3D 05 00 00 00  // [U8...@.2..=....
    CE30: 00 00 44 3C 01 03 02 40 46 2D 01 40 00 33 05 40  // ..D<...@F-.@.3.@
    CE40: 01 00 00 00 27 01 40 00 3E 05 40 9C 18 00 00 47  // ....'.@.>.@....G
    CE50: 2B 01 03 05 40 00 32 00 00 3E 05 40 C8 00 00 00  // +...@.2..>.@....
    CE60: 46 3C 01 03 05 40 C8 00 00 00 66 FF 2D 0D 42 8F  // F<...@....f.-.B.
    CE70: 01 3E 0C 40 02 00 47 53 01 2D 0D 42 08 00 43 43  // .>.@..GS.-.B..CC
    CE80: 01 33 0C 40 00 00 2D 0C 40 06 00 33 0D 40 01 00  // .3.@..-.@..3.@..
    CE90: 27 0C 40 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C  // '.@..-.@.....@3.
    CEA0: 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 27 02 46  // @..!.@..-.@..'.F
    CEB0: 40 02 0A 00 40 02 B2 00 40 5B 7A 20 00 C8 00 40  // @...@...@[z ...@
    CEC0: 06 08 00 19 00 40 06 80 0C 40 00 32 00 80 0C 38  // .....@...@.2...8
    CED0: 18 60 00 64 00 00 32 00 32 7F 00 64 00 00 07 00  // .`.d..2.2..d....
    CEE0: 02 01 00 00 5B 00 70 01 02 01 08 04 37 00 00 66  // ....[.p.....7..f
    CEF0: 1C 2D 0C 42 06 00 3D E5 00 02 44 4B 00 3D E5 00  // .-.B..=...DK.=..
    CF00: 03 44 F7 00 03 38 00 2F 0A 09 25 00 20 02 01 01  // .D...8./..%. ...
    CF10: 00 02 F0 01 CD 05 52 12 01 08 AB 0A 81 0A 01 18  // ......R.........
    CF20: 83 0A 81 0A 5C E2 2F 0A DF 00 5C E2 30 0A DF 00  // ....\./...\.0...
    CF30: 5B 02 F0 01 CD 05 0E E5 01 80 52 12 02 01 01 00  // [.........R.....
    CF40: 02 E4 01 2C 00 52 26 01 39 DD 09 01 02 EC 01 2C  // ...,.R&.9......,
    CF50: 00 52 26 01 79 DD 09 01 02 F4 01 2C 00 52 26 01  // .R&.y......,.R&.
    CF60: B9 DD 09 01 02 FC 01 2C 00 52 26 01 F9 DD 09 01  // .......,.R&.....
    CF70: 02 E4 01 30 00 52 26 01 39 DE 09 01 02 EC 01 30  // ...0.R&.9......0
    CF80: 00 52 26 01 79 DE 09 01 02 F4 01 30 00 52 26 01  // .R&.y......0.R&.
    CF90: B9 DE 09 01 02 FC 01 30 00 52 26 01 F9 DE 09 01  // .......0.R&.....
    CFA0: 31 05 DE 09 01 01 01 00 02 E5 01 08 52 26 3D E5  // 1...........R&=.
    CFB0: 01 04 46 D3 00 02 E5 01 04 3D E5 01 08 46 E1 00  // ..F......=...F..
    CFC0: 32 E5 01 04 43 F0 00 1A 3D 01 01 3D E5 01 12 45  // 2...C...=..=...E
    CFD0: F0 00 02 E5 01 12 5C 39 02 0A E0 01 5B 52 3B 03  // ......\9....[R;.
    CFE0: 05 00 10 00 00 00 03 05 01 2D 00 00 00 55 38 00  // .........-...U8.
    CFF0: 3D 01 00 01 45 30 01 03 0D 00 18 00 03 05 01 2E  // =...E0..........
    D000: 00 00 00 3D 01 00 02 45 30 01 03 0D 00 20 00 03  // ...=...E0.... ..
    D010: 05 01 2F 00 00 00 02 01 01 00 02 F0 01 CD 05 0E  // ../.............
    D020: E5 01 80 52 12 56 00 41 01 02 91 0A 01 01 04 92  // ...R.V.A........
    D030: 0A 0C 00 01 02 91 0A 00 01 04 92 0A 10 00 2D 05  // ..............-.
    D040: 00 01 00 00 00 2D 25 41 01 2D 0D 42 04 00 3E 25  // .....-%A.-.B..>%
    D050: 41 07 45 4D 01 5B 00 01 01 02 04 04 37 00 00 3D  // A.EM.[......7..=
    D060: 25 00 FF 49 EC 00 02 20 00 80 0A 4A 25 80 0A 08  // %..I... ...J%...
    D070: 49 26 00 08 25 00 10 07 25 80 0A EF 01 05 32 0A  // I&..%...%.....2.
    D080: 08 00 00 00 01 05 32 0A 10 00 00 00 01 05 82 00  // ......2.........
    D090: 10 00 60 C0 01 05 83 00 00 80 03 00 01 05 82 00  // ..`.............
    D0A0: 14 00 60 C0 03 00 40 83 00 66 18 3E 04 40 04 00  // ..`...@..f.>.@..
    D0B0: 49 EB 00 03 00 40 83 00 03 00 00 83 00 03 00 41  // I....@.........A
    D0C0: 83 00 3E 05 40 00 00 00 00 44 EB 00 01 00 91 0A  // ..>.@....D......
    D0D0: 83 00 01 00 92 0A 83 00 33 0D 40 01 00 3E 0D 40  // ........3.@..>.@
    D0E0: 00 00 49 76 00 01 05 64 C0 0C 02 00 00 54 00 65  // ..Iv...d.....T.e
    D0F0: C0 01 05 66 C0 CC 28 00 00 54 00 67 C0 15 05 00  // ...f..(..T.g....
    D100: 02 2D 05 00 00 00 00 7C 01 02 E8 C0 00 51 32 4A  // .-.....|.....Q2J
    D110: E5 A0 21 80 49 B9 00 01 05 32 0A 08 00 00 00 01  // ..!.I....2......
    D120: 05 32 0A 04 00 00 00 01 05 32 0A 01 00 00 00 51  // .2.......2.....Q
    D130: 32 50 02 4A 25 80 0A 80 44 DD 00 5C 21 80 0A EF  // 2P.J%...D..\!...
    D140: 00 5B 01 65 E7 0A FF 01 21 E7 0A 00 02 05 01 04  // .[.e....!.......
    D150: 00 00 00 52 1F 5B 8C 00 01 04 00 00 03 05 40 7C  // ...R.[........@|
    D160: 01 00 00 3D A5 00 00 44 15 00 5B 03 00 46 20 49  // ...=...D..[..F I
    D170: 7C 02 40 46 7E 05 40 A0 86 01 00 03 00 41 23 49  // |.@F~.@......A#I
    D180: 09 05 41 03 00 00 00 6F 02 40 41 7C 05 40 45 0C  // ..A....o.@A|.@E.
    D190: 00 00 7E 05 40 40 4B 4C 00 3E 05 40 00 00 00 00  // ..~.@@KL.>.@....
    D1A0: 49 51 00 03 25 40 01 01 8A 22 49 40 7C 05 40 40  // IQ..%@..."I@|.@@
    D1B0: 4B 4C 00 7E 05 40 45 0C 00 00 03 00 41 23 49 09  // KL.~.@E.....A#I.
    D1C0: 05 41 03 00 00 00 75 02 40 41 03 00 46 20 49 33  // .A....u.@A..F I3
    D1D0: 02 46 40 01 02 21 49 46 51 01 0D 65 23 49 01 51  // .F@..!IFQ..e#I.Q
    D1E0: 01 5B 31 00 01 03 04 00 37 00 00 55 38 00 26 05  // .[1.....7..U8.&.
    D1F0: 00 E2 04 00 00 01 E2 9A 0A 40 21 05 41 64 00 00  // .........@!.Ad..
    D200: 00 27 05 40 09 3D 00 00 15 25 40 04 5C A2 99 0A  // .'.@.=...%@.\...
    D210: 8F 40 5B 00 10 00 01 03 00 08 37 00 00 55 18 00  // .@[.......7..U..
    D220: 55 08 01 5B C3 01 01 04 00 04 37 00 00 3D 65 00  // U..[......7..=e.
    D230: 08 49 23 00 02 05 01 38 00 06 0A 52 45 08 0D 01  // .I#....8...RE...
    D240: FF 03 02 89 00 01 5B 3D 65 00 03 44 70 01 02 01  // ......[=e..Dp...
    D250: 01 00 02 65 01 07 52 50 3D 05 02 00 00 00 00 44  // ...e..RP=......D
    D260: 0B 01 37 00 00 01 05 82 00 7C 02 20 C0 01 05 82  // ..7......|. ....
    D270: 00 94 02 20 C0 4A A5 83 00 06 49 49 00 01 05 82  // ... .J....II....
    D280: 00 7C 02 20 C0 0D 65 83 00 04 01 05 82 00 7C 02  // .|. ..e.......|.
    D290: 20 C0 03 00 46 83 00 37 00 00 01 05 82 00 80 02  //  ...F..7........
    D2A0: 20 C0 5E 65 46 FC 01 3D 25 00 01 44 96 00 09 65  //  .^eF..=%..D...e
    D2B0: 46 FC 01 05 82 00 84 02 20 C0 3C 0C 83 00 04 00  // F....... .<.....
    D2C0: 44 C6 00 07 0D 83 00 9F FF 51 3C 03 0C 41 04 00  // D........Q<..A..
    D2D0: 4C 25 41 20 49 BE 00 0F 25 41 20 01 0A 83 00 41  // L%A I...%A ....A
    D2E0: 51 3C 01 0C 83 00 04 00 51 3C 56 00 40 03 19 40  // Q<......Q<V.@..@
    D2F0: 00 21 05 40 64 00 00 00 03 05 41 78 5D 02 00 33  // .!.@d.....Ax]..3
    D300: 02 41 40 27 05 41 71 02 00 00 03 22 46 40 01 05  // .A@'.Aq...."F@..
    D310: 82 00 7C 02 20 C0 01 02 83 00 46 01 05 82 00 94  // ..|. .....F.....
    D320: 02 20 C0 4A A5 83 00 02 49 F7 00 37 00 00 5B 02  // . .J....I..7..[.
    D330: 01 01 00 52 50 3D 05 02 00 00 00 00 44 6C 01 4B  // ...RP=......Dl.K
    D340: E5 02 40 44 2F 01 01 05 82 00 F8 01 60 C0 0D 25  // ..@D/.......`..%
    D350: 83 00 1F 4B 25 02 80 44 3B 01 0D A5 90 48 01 03  // ...K%..D;....H..
    D360: 05 41 FF FF FF FF 69 01 41 02 01 05 82 00 E4 01  // .A....i.A.......
    D370: 60 C0 09 00 41 83 00 0F 01 41 01 01 02 83 00 41  // `...A....A.....A
    D380: 01 05 82 00 F4 01 60 C0 0D 01 83 00 02 51 32 5B  // ......`......Q2[
    D390: 55 00 00 5B 02 01 01 00 52 50 3D 05 02 00 00 00  // U..[....RP=.....
    D3A0: 00 44 6C 01 02 E4 00 05 00 02 A4 00 06 00 02 0D  // .Dl.............
    D3B0: 02 01 01 03 24 41 08 00 4C 25 41 01 44 9F 01 02  // ....$A..L%A.D...
    D3C0: 65 02 02 02 25 01 32 02 64 01 0C 00 02 8C 01 0E  // e...%.2.d.......
    D3D0: 00 3D 65 01 FF 44 C2 01 02 99 02 00 52 36 2D 0D  // .=e..D......R6-.
    D3E0: 42 04 00 43 A3 01 5B 00 83 00 01 03 04 00 37 00  // B..C..[.......7.
    D3F0: 00 3D 65 00 09 44 80 00 03 0A 00 42 66 20 03 0C  // .=e..D.....Bf ..
    D400: 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3E 0A 42 41  // A..-.AB-.B..>.BA
    D410: 44 7C 00 3D 0C 00 00 00 44 3B 00 2D 0C 42 02 00  // D|.=....D;.-.B..
    D420: 43 24 00 02 0A 01 42 3D 65 00 03 44 7B 00 3D 65  // C$....B=e..D{.=e
    D430: 00 07 44 7B 00 03 E4 41 05 00 02 04 01 08 00 3E  // ..D{...A.......>
    D440: E5 41 00 44 7C 00 3D 8C 00 10 00 47 72 00 2D 0D  // .A.D|.=....Gr.-.
    D450: 42 06 00 33 E5 41 01 43 57 00 02 04 00 0C 00 03  // B..3.A.CW.......
    D460: 0A 42 00 5B 55 00 01 5B 52 1B 5B 00 67 02 01 05  // .B.[U..[R.[.g...
    D470: 00 00 37 00 00 03 20 46 CF 05 0E 25 00 60 52 14  // ..7... F...%.`R.
    D480: 08 25 00 0F 42 29 00 63 0F 58 00 63 11 4E 01 63  // .%..B).c.X.c.N.c
    D490: 12 CC 01 63 01 24 02 63 00 4D 02 63 08 18 01 63  // ...c.$.c.M.c...c
    D4A0: 09 F9 00 63 0A 00 01 63 13 08 01 63 14 10 01 63  // ...c...c...c...c
    D4B0: 0B 20 01 63 0C 14 02 63 0D 28 01 63 10 41 01 5A  // . .c...c.(.c.A.Z
    D4C0: 5A 43 F5 00 3D A5 00 02 44 E3 00 54 00 72 4A 3D  // ZC..=...D..T.rJ=
    D4D0: A5 00 00 44 71 00 3D A5 00 05 49 EB 00 54 08 A1  // ...Dq.=...I..T..
    D4E0: 4A 3D 25 02 00 49 80 00 02 25 02 02 32 25 02 01  // J=%..I...%..2%..
    D4F0: 01 E1 A1 4A 02 4A 25 A4 4A 01 49 C6 00 7B 05 01  // ...J.J%.J.I..{..
    D500: 00 80 00 00 7E 05 40 8C 0A 00 00 56 00 46 03 29  // ....~.@....V.F.)
    D510: 46 02 27 02 40 46 07 65 A8 4A FE 01 05 A9 4A 00  // F.'.@F.e.J....J.
    D520: 80 00 00 01 02 AA 4A 40 0D E5 AB 4A 10 0D 65 00  // ......J@...J..e.
    D530: 4A 04 02 20 00 00 4A 08 25 00 07 0E 25 00 00 52  // J.. ..J.%...%..R
    D540: 14 14 3D 00 04 5C B9 9C 1B 8F 00 3A 00 00 5B 01  // ..=..\.....:..[.
    D550: 05 72 4A 01 00 00 00 07 E5 00 4A 2F 0D 65 00 4A  // .rJ.......J/.e.J
    D560: 04 3A 00 00 5B 54 20 B0 4A 43 F5 00 01 25 B0 4A  // .:..[T .JC...%.J
    D570: 01 43 F5 00 01 25 B0 4A 02 43 F5 00 01 25 B0 4A  // .C...%.J.C...%.J
    D580: 03 43 F5 00 07 25 A0 4A EF 43 F5 00 0D 25 A0 4A  // .C...%.J.C...%.J
    D590: 10 43 F5 00 0D 65 A8 4A 01 51 0A 07 25 A5 4A FE  // .C...e.J.Q..%.J.
    D5A0: 51 0A 01 0D A4 4A 01 02 51 C8 43 F5 00 0D 25 B6  // Q....J..Q.C...%.
    D5B0: 4A 10 01 31 A7 4A 00 43 F5 00 01 0D 03 4A 1F 00  // J..1.J.C.....J..
    D5C0: 01 69 47 4A 02 4C 25 46 10 49 77 01 3D A5 00 03  // .iGJ.L%F.Iw.=...
    D5D0: 49 77 01 4A 25 0D 4A 10 49 77 01 01 A5 47 4A 02  // Iw.J%.J.Iw...GJ.
    D5E0: 43 7C 01 01 B1 47 4A 00 3D 25 02 00 44 91 01 32  // C|...GJ.=%..D..2
    D5F0: 25 02 01 14 25 02 04 5C E1 47 4A 8F 02 3D E5 00  // %...%..\.GJ..=..
    D600: 04 47 A0 01 0D 25 47 4A 01 43 A5 01 07 25 47 4A  // .G...%GJ.C...%GJ
    D610: FE 3D A5 00 05 44 B3 01 3D A5 00 00 49 C4 01 02  // .=...D..=...I...
    D620: A5 00 00 03 39 40 00 33 25 40 01 01 22 A3 4A 40  // ....9@.3%@..".J@
    D630: 02 E0 02 48 4A 43 F5 00 02 E0 02 48 4A 4B E5 02  // ...HJC.....HJK..
    D640: 01 44 F5 00 02 B0 00 47 4A 02 E5 00 04 4A 25 47  // .D.....GJ....J%G
    D650: 4A 01 44 ED 01 02 E5 00 08 3D A5 00 02 44 FB 01  // J.D......=...D..
    D660: 3D A5 00 03 49 04 02 54 00 48 4A 50 02 43 F5 00  // =...I..T.HJP.C..
    D670: 02 A5 00 00 03 31 43 00 4A 62 47 4A 44 44 F5 00  // .....1C.JbGJDD..
    D680: 54 08 A4 4A 51 C8 0D 25 A5 4A 01 51 32 43 F5 00  // T..JQ..%.J.Q2C..
    D690: 0D 25 48 4A 01 3D A5 00 00 44 39 02 01 0D 79 4A  // .%HJ.=...D9...yJ
    D6A0: 0F 01 43 F5 00 03 39 43 00 03 02 40 44 33 25 40  // ..C...9C...@D3%@
    D6B0: 01 01 0A 79 4A 40 43 F5 00 54 00 79 4A 07 25 48  // ...yJ@C..T.yJ.%H
    D6C0: 4A FE 07 0D 47 4A FE 80 54 20 A0 4A 54 20 B0 4A  // J...GJ..T .JT .J
    D6D0: 43 F5 00 00 29 00 01 01 00 00 37 00 00 66 1C 2D  // C...).....7..f.-
    D6E0: 0D 42 14 00 03 30 40 CD 05 3E 25 40 00 44 28 00  // .B...0@..>%@.D(.
    D6F0: 33 25 40 01 2D 0C 42 04 00 43 15 00 5B 00 46 01  // 3%@.-.B..C..[.F.
    D700: 01 06 00 00 37 00 00 42 29 00 63 07 24 01 63 01  // ....7..B).c.$.c.
    D710: 25 00 63 00 C0 00 63 0B 27 01 63 04 2C 01 5A 5A  // %.c...c.'.c.,.ZZ
    D720: 43 3F 01 02 65 00 11 52 04 4B E5 02 01 49 20 01  // C?..e..R.K...I .
    D730: 02 65 00 0A 55 08 02 52 4D 3D E5 00 04 47 50 00  // .e..U..RM=...GP.
    D740: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 3D A5  // h%...%..RMh%..=.
    D750: 00 00 49 82 00 20 05 01 64 00 00 00 02 05 01 14  // ..I.. ..d.......
    D760: 1E 00 02 2C 21 01 00 02 01 02 00 02 02 00 40 52  // ...,!.........@R
    D770: 0C 26 05 00 64 00 00 00 02 02 01 40 02 01 00 02  // .&..d......@....
    D780: 02 65 00 01 55 08 02 52 4D 3D E5 00 04 47 A0 00  // .e..U..RM=...G..
    D790: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 51 05  // h%...%..RMh%..Q.
    D7A0: 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 3D E5  // .e..R.Q..e..RM=.
    D7B0: 00 04 47 20 01 68 25 00 01 52 4D 43 20 01 02 65  // ..G .h%..RMC ..e
    D7C0: 00 12 52 04 4B E5 02 01 44 20 01 02 65 00 08 52  // ..R.K...D ..e..R
    D7D0: 4D 3D E5 00 04 47 E4 00 68 25 00 01 52 4D 68 25  // M=...G..h%..RMh%
    D7E0: 00 01 02 65 00 00 52 04 02 65 00 00 52 4D 3D E5  // ...e..R..e..RM=.
    D7F0: 00 04 47 01 01 68 25 00 01 52 4D 68 25 00 01 3D  // ..G..h%..RMh%..=
    D800: A5 00 00 49 20 01 02 01 02 00 02 05 01 14 00 00  // ...I ...........
    D810: 00 2C 21 01 00 55 00 00 52 0C 02 01 00 02 3A 00  // .,!..U..R.....:.
    D820: 00 5B 43 20 01 52 4D 43 20 01 66 06 02 29 00 00  // .[C .RMC .f..)..
    D830: 02 68 00 CB 05 02 8C 00 32 00 52 33 5B 02 29 00  // .h......2.R3[.).
    D840: 00 52 33 5B 38 03 02 01 00 00 37 00 00 0E 25 00  // .R3[8.....7...%.
    D850: 20 52 14 08 25 00 0F 42 29 00 63 07 35 00 63 0A  //  R..%..B).c.5.c.
    D860: 3D 00 63 01 21 01 63 00 7B 01 63 09 BB 01 63 08  // =.c.!.c.{.c...c.
    D870: E9 01 63 0B 01 02 5A 5A 5B 0D 65 C4 48 08 43 AD  // ..c...ZZ[.e.H.C.
    D880: 02 03 0A 46 48 66 FF 2D 0D 42 1A 03 56 00 40 20  // ...FHf.-.B..V.@ 
    D890: 25 00 05 2D 0A 42 40 20 25 00 02 03 0A 48 40 01  // %..-.B@ %....H@.
    D8A0: 04 06 48 00 00 01 64 05 48 04 00 07 E5 05 48 FC  // ..H...d.H.....H.
    D8B0: 07 A5 05 48 8F 03 0A 48 46 56 00 41 3D E5 00 04  // ...H...HFV.A=...
    D8C0: 47 96 00 03 05 41 00 80 01 01 4B 25 02 01 44 96  // G....A....K%..D.
    D8D0: 00 09 4D 41 7F FF 03 E5 41 02 5C FA D3 48 FC 41  // ..MA....A.\..H.A
    D8E0: 5C 52 C5 48 7F FE 41 3D A5 00 00 49 CC 00 07 A5  // \R.H..A=...I....
    D8F0: C1 48 7F 66 FF 2D 0D 42 DE 02 2D 0D 42 06 00 56  // .H.f.-.B..-.B..V
    D900: 00 41 3D A5 02 14 49 49 02 03 25 41 20 43 49 02  // .A=...II..%A CI.
    D910: 0D A5 C1 48 80 66 FF 2D 0D 42 B6 02 03 04 40 00  // ...H.f.-.B....@.
    D920: 00 3E 05 40 00 00 00 00 44 AD 02 03 21 43 00 03  // .>.@....D...!C..
    D930: E2 41 44 4C E4 41 05 00 44 07 01 3D A4 00 04 00  // .ADL.A..D..=....
    D940: 49 07 01 3D 04 01 00 00 47 0F 01 2D 0D 42 0C 00  // I..=....G..-.B..
    D950: 43 D8 00 03 04 40 06 00 03 24 41 0A 00 03 64 41  // C....@...$A...dA
    D960: 0B 00 43 52 02 07 65 C4 48 F7 03 0A 46 48 56 00  // ..CR..e.H...FHV.
    D970: 41 3D E5 00 04 47 3C 01 07 25 E2 48 F9 43 42 01  // A=...G<..%.H.CB.
    D980: 5C 25 E2 48 F9 02 4A 65 E0 48 01 44 42 01 07 25  // \%.H..Je.H.DB..%
    D990: E0 48 F8 4A 65 E0 48 01 44 4F 01 2D E5 41 01 2D  // .H.Je.H.DO.-.A.-
    D9A0: 0D 48 10 00 3E E5 41 04 45 2D 01 03 0A 48 46 0D  // .H..>.A.E-...HF.
    D9B0: 25 D1 48 02 4A 25 D1 48 04 44 70 01 43 AD 02 07  // %.H.J%.H.Dp.C...
    D9C0: 25 D1 48 FD 4A 25 D1 48 04 49 80 01 0D 65 C4 48  // %.H.J%.H.I...e.H
    D9D0: 08 56 00 41 4A 65 E0 48 01 44 90 01 5C 25 E0 48  // .V.AJe.H.D..\%.H
    D9E0: F8 04 51 02 4A 65 E0 48 01 44 A0 01 2D A5 41 01  // ..Q.Je.H.D..-.A.
    D9F0: 2D 0D 48 10 00 3E A5 41 04 45 90 01 43 AD 02 03  // -.H..>.A.E..C...
    DA00: 0A 46 48 56 08 48 20 25 00 02 03 22 48 40 0D 25  // .FHV.H %..."H@.%
    DA10: 05 48 01 0D E5 06 48 10 03 0A 48 46 0D A5 D3 48  // .H....H...HF...H
    DA20: 01 51 14 0D 25 D3 48 01 51 14 43 AD 02 07 A5 D3  // .Q..%.H.Q.C.....
    DA30: 48 FE 56 00 40 20 25 00 02 03 0A 48 40 07 E5 06  // H.V.@ %....H@...
    DA40: 48 EF 43 AD 02 08 A5 00 1B 66 FF 2D 0D 42 DE 02  // H.C......f.-.B..
    DA50: 03 21 43 00 03 A2 40 44 03 0C 40 02 00 4C A4 40  // .!C...@D..@..L.@
    DA60: 00 00 49 29 02 2D 0C 42 04 00 43 14 02 2D 0D 42  // ..I).-.B..C..-.B
    DA70: 06 00 3D A4 00 00 00 44 49 02 03 24 41 00 00 3E  // ..=....DI..$A..>
    DA80: 25 41 FF 44 49 02 2D 0A 42 40 43 2E 02 03 04 40  // %A.DI.-.B@C....@
    DA90: 01 00 03 65 41 08 01 0A C3 48 40 01 05 DA 48 88  // ...eA....H@...H.
    DAA0: 88 01 00 01 F2 DB 48 40 01 BA E2 48 40 01 BA F2  // ......H@...H@...
    DAB0: 48 40 01 BA 02 49 40 01 BA 12 49 40 01 25 E1 48  // H@...I@...I@.%.H
    DAC0: 20 01 25 F1 48 20 01 25 01 49 20 01 25 11 49 20  //  .%.H .%.I .%.I 
    DAD0: 01 2A E1 48 41 01 2A F1 48 41 01 2A 01 49 41 01  // .*.HA.*.HA.*.IA.
    DAE0: 2A 11 49 41 3D 65 00 0B 44 AD 02 5C A2 C8 48 DF  // *.IA=e..D..\..H.
    DAF0: 41 3A 00 00 5B 7A 84 00 0C 00 FF FF FF 00 02 3F  // A:..[z.........?
    DB00: 00 00 00 5F 00 08 40 9C 00 00 03 3F 00 00 00 5F  // ..._..@....?..._
    DB10: 00 08 FF FF FF 00 03 3F 00 00 2A 57 20 10 00 00  // .......?..*W ...
    DB20: 00 00 3F 00 05 00 39 00 00 4B 00 00 80 01 3A 00  // ..?...9..K....:.
    DB30: 00 80 02 1B 00 00 80 03 00 00 00 80 08 34 25 00  // .............4%.
    DB40: 80 09 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80  // ...%.........?..
    DB50: 11 01 38 00 9F 18 00 4A 00 9F FF 00 00 FF 03 02  // ..8....J........
    DB60: 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02 01  // ................
    DB70: 00 01 03 02 01 00 01 03 02 01 00 01 4C 02 01 02  // ............L...
    DB80: 00 08 37 00 00 3D 0D 00 00 00 44 CE 01 56 00 41  // ..7..=....D..V.A
    DB90: 03 21 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42  // .!A..%A...A...@B
    DBA0: 66 FF 2D 0D 42 34 02 2D 0A 42 41 03 0C 48 02 00  // f.-.B4.-.BA..H..
    DBB0: 0D A5 68 48 01 54 08 68 48 03 0C 48 00 00 03 F9  // ..hH.T.hH..H....
    DBC0: 41 01 15 3D 41 04 5C BA 00 5C 8F 41 03 0A 42 40  // A..=A.\..\.A..B@
    DBD0: 4A 25 00 5C 01 49 81 00 0D 0D 00 5C 01 01 0D 25  // J%.\.I.....\...%
    DBE0: 00 5C 10 4A 25 00 5C 20 44 67 00 07 25 00 5C EF  // .\.J%.\ Dg..%.\.
    DBF0: 4A 25 00 5C 20 49 74 00 0D 25 03 5C 40 56 00 41  // J%.\ It..%.\@V.A
    DC00: 03 09 41 00 3B 02 41 03 3B 41 00 1B 25 41 04 01  // ..A.;.A.;A..%A..
    DC10: A2 01 5C 41 03 69 41 01 15 2D 41 04 01 2A 01 5C  // ..\A.iA..-A..*.\
    DC20: 41 56 00 40 0F E5 40 80 03 73 40 00 01 02 06 5C  // AV.@..@..s@....\
    DC30: 40 56 00 40 03 6B 40 00 01 02 06 5C 40 03 63 40  // @V.@.k@....\@.c@
    DC40: 00 01 02 06 5C 40 03 7B 40 00 09 65 40 0F 01 02  // ....\@.{@..e@...
    DC50: 06 5C 40 3E 25 41 04 47 10 01 33 25 41 04 2D 05  // .\@>%A.G..3%A.-.
    DC60: 46 04 00 00 00 03 63 40 00 01 02 06 5C 40 03 6B  // F.....c@....\@.k
    DC70: 40 00 01 02 06 5C 40 03 73 40 00 01 02 06 5C 40  // @....\@.s@....\@
    DC80: 03 7B 40 00 01 02 06 5C 40 43 D7 00 0D 25 03 5C  // .{@....\@C...%.\
    DC90: 02 0D 25 01 5C 01 03 29 40 01 21 25 40 0A 2D 25  // ..%.\..)@.!%@.-%
    DCA0: 40 32 4A 25 04 5C 01 49 42 01 51 0A 33 25 40 01  // @2J%.\.IB.Q.3%@.
    DCB0: 3E 25 40 00 49 26 01 02 65 01 01 43 CA 01 4A 05  // >%@.I&..e..C..J.
    DCC0: 04 5C F0 8F FF 00 44 54 01 02 65 01 02 43 CA 01  // .\....DT..e..C..
    DCD0: 01 05 06 5C 01 00 00 80 03 00 40 06 5C 02 6A 01  // ...\......@.\.j.
    DCE0: 40 02 B8 01 04 5C 08 A5 01 1F 3D A5 01 00 46 7C  // @....\....=...F|
    DCF0: 01 02 65 01 03 43 CA 01 32 A5 01 01 3D 8D 00 00  // ..e..C..2...=...
    DD00: 00 44 CA 01 3D A5 01 00 44 CA 01 03 31 41 01 03  // .D..=...D...1A..
    DD10: 19 40 00 56 18 40 3B 02 40 03 28 40 06 5C 03 68  // .@.V.@;.@.(@.\.h
    DD20: 40 06 5C 03 A8 40 06 5C 03 E8 40 06 5C 04 02 00  // @.\..@.\..@.\...
    DD30: 40 3E 25 41 04 47 CA 01 33 25 41 04 2D 05 46 04  // @>%A.G..3%A.-.F.
    DD40: 00 00 00 43 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34  // ...C..:..[f.-.B4
    DD50: 02 03 0C 48 00 00 01 8D 08 5C 32 00 01 05 09 5C  // ...H.....\2....\
    DD60: 00 1C 02 00 01 05 0A 5C 10 11 3D 12 2D 0D 42 04  // .......\..=.-.B.
    DD70: 00 2C 25 00 01 3D 25 00 06 49 D5 01 56 08 48 03  // .,%..=%..I..V.H.
    DD80: 25 41 10 0D 65 97 48 40 07 65 97 48 BF 33 25 41  // %A..e.H@.e.H.3%A
    DD90: 01 3E 25 41 00 49 07 02 0D 25 3B 48 01 54 30 3B  // .>%A.I...%;H.T0;
    DDA0: 48 0D 25 3C 48 01 54 30 3C 48 51 32 5B 7A 18 00  // H.%<H.T0<HQ2[z..
    DDB0: 00 00 00 00 1C 00 04 00 38 00 08 00 54 00 0C 00  // ........8...T...
    DDC0: 70 00 10 00 8C 00 14 00 5C 00 01 02 00 04 02 25  // p.......\......%
    DDD0: 01 04 03 31 41 00 09 0D 41 0F 00 15 0D 41 01 66  // ...1A...A....A.f
    DDE0: FF 2D 0D 42 50 00 2D 0A 42 41 03 0C 48 00 00 07  // .-.BP.-.BA..H...
    DDF0: A5 68 48 FE 01 0D 68 48 11 11 50 02 4A 0D 6B 48  // .hH...hH..P.J.kH
    DE00: 01 00 49 41 00 02 25 01 13 54 08 68 48 54 00 6A  // ..IA..%..T.hHT.j
    DE10: 48 3A 00 00 5B 7A 0C 00 00 00 04 00 08 00 0C 00  // H:..[z..........
    DE20: 10 00 14 00 9F 00 01 01 04 00 37 00 00 52 3E 55  // ..........7..R>U
    DE30: 00 00 02 E4 00 16 00 66 1C 2D 0C 42 04 00 52 12  // .......f.-.B..R.
    DE40: 52 3E 01 0C D8 09 06 00 01 64 80 0A 1C 00 02 05  // R>.......d......
    DE50: 00 08 00 00 00 02 0C 01 08 00 52 1F 03 08 41 80  // ..........R...A.
    DE60: 0A 09 0D 41 03 00 66 FF 2D 0D 42 9B 00 2D 0A 42  // ...A..f.-.B..-.B
    DE70: 41 03 24 41 00 00 01 05 82 00 0C 00 20 C0 5C 0A  // A.$A........ .\.
    DE80: 83 00 00 FC 41 02 05 00 30 75 00 03 52 3F 02 05  // ....A...0u..R?..
    DE90: 00 A0 86 01 03 52 3F 02 05 00 48 E8 01 03 52 3F  // .....R?...H...R?
    DEA0: 02 05 00 30 75 00 03 52 3F 02 05 00 A0 86 01 03  // ...0u..R?.......
    DEB0: 52 3F 02 05 00 40 0D 03 03 52 3F 5B 7A 04 00 18  // R?...@...R?[z...
    DEC0: 10 08 04 00 AC 01 01 01 08 00 37 00 00 03 88 00  // ..........7.....
    DED0: 28 08 03 09 00 00 03 2A 41 00 03 22 43 41 01 22  // (......*A.."CA."
    DEE0: 28 08 44 5C 62 28 08 F8 41 42 22 00 63 01 39 00  // (.D\b(..AB".c.9.
    DEF0: 63 08 7E 00 63 04 07 01 5A 5A 43 A6 01 01 24 93  // c.~.c...ZZC...$.
    DF00: 0A 00 00 01 24 94 0A 01 00 01 04 A3 0A 02 00 01  // ....$...........
    DF10: 04 A4 0A 06 00 01 04 A5 0A 0A 00 01 04 A6 0A 0E  // ................
    DF20: 00 01 04 A7 0A 12 00 01 04 A8 0A 16 00 01 04 A9  // ................
    DF30: 0A 1A 00 01 04 AA 0A 1E 00 2D 0D 42 22 00 43 9B  // .........-.B".C.
    DF40: 01 5B 21 65 00 02 03 22 43 40 03 0A 41 44 56 08  // .[!e..."C@..ADV.
    DF50: 40 37 02 00 4C 09 41 01 49 A3 00 54 20 00 00 54  // @7..L.A.I..T ..T
    DF60: 30 00 00 0F 25 40 01 15 0D 41 01 4C 09 41 01 49  // 0...%@...A.L.A.I
    DF70: BA 00 0F 25 40 02 54 28 00 00 54 38 00 00 37 00  // ...%@.T(..T8..7.
    DF80: 00 3E 25 40 03 49 D5 00 03 2A 41 00 2D 25 41 04  // .>%@.I...*A.-%A.
    DF90: 03 22 43 41 07 0A 52 0D 45 52 3E 03 24 40 16 00  // ."CA..R.ER>.$@..
    DFA0: 21 25 40 04 55 00 00 02 EA 00 00 2C E2 00 40 66  // !%@.U......,..@f
    DFB0: 1C 03 0C 40 08 00 3E 0D 40 00 00 44 01 01 2D 0C  // ...@..>.@..D..-.
    DFC0: 42 08 00 52 12 37 00 00 43 9B 01 01 05 91 0A 00  // B..R.7..C.......
    DFD0: 00 00 00 3C 0D 92 0A 00 00 44 9B 01 3C 25 E7 0A  // ...<.....D..<%..
    DFE0: 07 49 39 01 01 05 91 0A 0E 00 00 00 03 00 01 92  // .I9.............
    DFF0: 0A 5C 05 92 0A 00 FF 00 FF 0F 00 FF 00 01 05 32  // .\.............2
    E000: 0A 05 00 00 00 51 0A 01 05 32 0A 01 00 00 00 03  // .....Q...2......
    E010: 00 41 E7 0A 3E 62 41 41 49 4B 01 51 0A 3E 25 41  // .A..>bAAIK.Q.>%A
    E020: 00 44 74 01 3E 25 41 07 49 9B 01 01 05 91 0A 0E  // .Dt.>%A.I.......
    E030: 00 00 00 01 02 92 0A 01 01 05 91 0A 03 00 00 00  // ................
    E040: 03 38 41 92 0A 15 25 41 04 3C E2 9A 0A 41 45 9B  // .8A...%A.<...AE.
    E050: 01 4A E5 99 0A 04 44 9B 01 5C 25 F3 09 FE 22 2D  // .J....D..\%..."-
    E060: 65 00 01 3E 65 00 04 45 12 00 01 1A 28 08 00 5B  // e..>e..E....(..[
    E070: E5 00 02 02 14 00 3D 25 02 01 44 1C 00 3D 25 02  // ......=%..D..=%.
    E080: 02 44 3E 00 3D 25 02 03 44 63 00 5B 2C 02 01 41  // .D>.=%..Dc.[,..A
    E090: 03 05 00 FF FF FF FF 33 02 00 40 3E 01 00 00 48  // .......3..@>...H
    E0A0: 39 00 2C 05 01 01 00 00 00 2C 02 00 40 5B 3D B9  // 9.,......,..@[=.
    E0B0: 02 02 44 5E 00 3D 01 00 01 45 51 00 32 01 00 01  // ..D^.=...EQ.2...
    E0C0: 5B 32 01 01 00 02 01 00 01 02 B9 02 02 5B 2C 01  // [2...........[,.
    E0D0: 00 01 5B 3D 05 00 00 00 00 00 49 77 00 3D 05 01  // ..[=......Iw.=..
    E0E0: 00 00 00 00 44 E0 00 56 00 43 03 0D 40 1F 00 03  // ....D..V.C..@...
    E0F0: 01 00 00 3D 05 01 00 00 00 00 44 95 00 03 01 00  // ...=......D.....
    E100: 01 03 65 40 20 03 22 43 40 4C 02 00 44 49 A7 00  // ..e@ ."C@L..DI..
    E110: 33 25 40 01 43 95 00 2D 2A 40 40 1B 25 40 01 03  // 3%@.C..-*@@.%@..
    E120: 22 43 40 03 02 00 44 03 01 41 01 7D 02 00 00 27  // "C@...D..A.}...'
    E130: 05 40 02 00 00 00 2D 02 41 00 1B 05 41 01 2D 02  // .@....-.A...A.-.
    E140: 41 40 3E 02 00 41 44 E0 00 03 02 00 41 43 B7 00  // A@>..AD.....AC..
    E150: 02 02 00 00 5B 00 D1 01 02 01 04 04 37 00 00 42  // ....[.......7..B
    E160: 21 00 63 07 29 00 63 03 66 00 63 02 D5 00 63 04  // !.c.).c.f.c...c.
    E170: FA 00 63 0C 85 01 63 0D A8 01 5A 5A 43 D0 01 01  // ..c...c...ZZC...
    E180: 0D 1D 48 9F 0F 01 05 1E 48 00 00 00 00 01 05 1F  // ..H.....H.......
    E190: 48 7D 00 00 00 66 06 01 4C 1F 48 39 00 03 24 46  // H}...f..L.H9..$F
    E1A0: 42 00 3E 25 46 00 44 58 00 01 25 1F 48 00 4A 25  // B.>%F.DX..%.H.J%
    E1B0: 1B 48 10 49 D0 01 0D E5 1B 48 02 5B 4A A5 CB 05  // .H.I.....H.[J...
    E1C0: 01 49 D0 01 4A 25 1B 48 01 44 D0 01 4A 25 1C 48  // .I..J%.H.D..J%.H
    E1D0: 10 44 76 00 4A E5 1B 48 02 49 91 00 4A 25 1C 48  // .Dv.J..H.I..J%.H
    E1E0: 08 49 D0 01 43 C5 00 4A E5 1B 48 01 49 D0 01 4A  // .I..C..J..H.I..J
    E1F0: 25 1B 48 10 44 C5 00 0D A5 1B 48 03 0D 65 1B 48  // %.H.D.....H..e.H
    E200: 03 01 0D 1D 48 00 00 5C 25 1B 48 EF 01 4A 25 1C  // ....H..\%.H..J%.
    E210: 48 10 44 B7 00 01 0D 1D 48 9F 0F 07 E5 1B 48 FC  // H.D.....H.....H.
    E220: 0D E5 1F 48 01 0D 25 1B 48 11 5B 66 06 03 24 46  // ...H..%.H.[f..$F
    E230: 42 00 3E 25 46 00 49 D0 01 4A 25 1B 48 01 44 D0  // B.>%F.I..J%.H.D.
    E240: 01 4A 25 1C 48 10 44 EB 00 5C E5 1B 48 FE 02 5B  // .J%.H.D..\..H..[
    E250: 4A 65 D0 05 02 44 07 01 0D 25 23 48 01 3D 8D 00  // Je...D...%#H.=..
    E260: 00 00 44 84 01 03 05 46 80 F0 FA 02 56 00 41 03  // ..D....F....V.A.
    E270: 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40 3E 05  // .A.!.A....'.F@>.
    E280: 41 00 00 00 00 44 37 01 2D 0D 40 01 00 01 8A 1D  // A....D7.-.@.....
    E290: 48 40 56 00 41 03 19 41 00 21 02 40 41 27 02 46  // H@V.A..A.!.@A'.F
    E2A0: 40 01 A5 22 48 0C 01 0A 22 48 40 15 05 40 04 56  // @.."H..."H@..@.V
    E2B0: 00 41 03 29 41 00 2D 0D 41 01 00 21 02 40 41 1B  // .A.)A.-.A..!.@A.
    E2C0: 05 40 08 01 0A 20 48 40 0D E5 20 48 C0 07 25 23  // .@... H@.. H..%#
    E2D0: 48 FE 4A 65 23 48 01 49 7C 01 5B 4A 25 1B 48 01  // H.Je#H.I|.[J%.H.
    E2E0: 44 9D 01 4A 25 1B 48 10 49 D0 01 4A 25 1C 48 10  // D..J%.H.I..J%.H.
    E2F0: 44 95 01 07 E5 1F 48 FE 0D 25 1B 48 11 5B 4A 25  // D.....H..%.H.[J%
    E300: 1B 48 01 44 D0 01 4A 25 1B 48 10 44 D0 01 4A 25  // .H.D..J%.H.D..J%
    E310: 1C 48 10 44 B8 01 07 A5 1B 48 FC 07 65 1B 48 FC  // .H.D.....H..e.H.
    E320: 5C 25 1B 48 EF 01 5B 00 71 00 03 01 08 00 37 00  // \%.H..[.q.....7.
    E330: 00 56 00 01 3D E5 00 20 48 1B 00 03 39 43 00 03  // .V..=.. H...9C..
    E340: 02 01 44 03 05 00 00 00 10 C0 2D 09 00 00 01 02  // ..D.......-.....
    E350: 82 00 00 03 00 40 83 00 56 00 41 03 31 41 00 75  // .....@..V.A.1A.u
    E360: 02 40 41 03 25 41 20 33 31 41 00 3D E2 00 41 47  // .@A.%A 31A.=..AG
    E370: 61 00 2D 0D 00 04 00 01 02 82 00 00 02 00 00 83  // a.-.............
    E380: 00 6E 02 00 41 0F 01 40 00 02 02 00 40 33 05 01  // .n..A..@....@3..
    E390: 01 00 00 00 08 02 00 01 5B 00 CE 00 03 01 00 10  // ........[.......
    E3A0: 37 00 00 56 00 40 4A 25 00 EC 01 44 30 00 4A 25  // 7..V.@J%...D0.J%
    E3B0: 05 EC 1E 49 30 00 03 25 40 01 01 05 05 EC 03 00  // ...I0..%@.......
    E3C0: 00 00 4A 65 05 EC 0F 49 28 00 3D 65 02 00 49 3C  // ..Je...I(.=e..I<
    E3D0: 00 2C 28 02 09 08 3D E5 02 00 49 48 00 2C A8 02  // .,(...=...IH.,..
    E3E0: 09 08 3D 65 02 02 49 6B 00 01 05 82 00 10 00 60  // ..=e..Ik.......`
    E3F0: C0 01 01 83 00 00 01 05 82 00 14 00 60 C0 02 05  // ............`...
    E400: 00 0C 02 00 00 3D E5 02 03 49 81 00 01 01 82 00  // .....=...I......
    E410: 01 02 05 01 0C 02 00 00 43 81 00 54 00 63 C0 01  // ........C..T.c..
    E420: 01 64 C0 00 01 21 65 C0 02 01 01 66 C0 01 01 31  // .d...!e....f...1
    E430: 67 C0 02 01 01 E8 C0 03 3D 65 02 01 44 AE 00 3D  // g.......=e..D..=
    E440: E5 02 01 44 AE 00 51 02 4A E5 A0 21 80 49 AE 00  // ...D..Q.J..!.I..
    E450: 3E 25 40 01 49 CD 00 01 05 05 EC 01 00 00 00 4A  // >%@.I..........J
    E460: 65 05 EC 0F 49 C5 00 5B F9 02 02 01 00 00 37 00  // e...I..[......7.
    E470: 00 3D 25 01 01 44 7B 00 3D 25 01 02 44 68 01 3D  // .=%..D{.=%..Dh.=
    E480: 25 01 00 49 CA 02 3D 05 00 00 00 00 00 49 39 00  // %..I..=......I9.
    E490: 3A 00 00 0D 25 68 18 01 4A 65 68 18 01 44 30 00  // :...%h..Jeh..D0.
    E4A0: 5B 54 20 68 18 52 3C 03 00 40 24 01 3E 39 40 00  // [T h.R<..@$.>9@.
    E4B0: 44 77 00 4A A5 24 01 08 44 4B 00 03 39 40 00 3E  // Dw.J.$..DK..9@.>
    E4C0: E5 40 00 49 62 00 03 E5 40 20 01 02 24 01 40 4A  // .@.Ib...@ ..$.@J
    E4D0: A5 24 01 08 44 67 00 4A A5 24 01 10 44 6F 00 55  // .$..Dg.J.$..Do.U
    E4E0: 38 00 5B 3D 65 01 02 44 D7 00 02 05 00 60 EA 00  // 8.[=e..D.....`..
    E4F0: 00 52 3C 3C F9 24 01 00 44 C1 00 07 25 15 01 FE  // .R<<.$..D...%...
    E500: 4A A5 24 01 10 44 98 00 03 00 40 24 01 03 F9 40  // J.$..D....@$...@
    E510: 00 3E 25 40 00 49 B4 00 03 25 40 68 01 02 24 01  // .>%@.I...%@h..$.
    E520: 40 4A A5 24 01 10 44 B9 00 5D 05 00 00 00 00 FF  // @J.$..D..]......
    E530: 40 7E 05 00 52 29 07 0D 18 01 F8 FE 43 3A 01 02  // @~..R)......C:..
    E540: 05 00 00 46 C3 23 07 25 15 01 FE 4A A5 01 17 03  // ...F.#.%...J....
    E550: 44 3A 01 56 08 40 03 31 40 01 15 0D 40 0E 0F 0D  // D:.V.@.1@...@...
    E560: 40 0F 04 01 0A 18 17 40 5C B1 19 17 FC 01 51 05  // @......@\.....Q.
    E570: 07 A5 01 17 FC 01 25 05 17 40 01 05 02 17 00 00  // ......%..@......
    E580: 3C 00 01 65 1C 17 01 54 08 04 17 01 A5 05 17 E8  // <..e...T........
    E590: 0D A5 19 17 10 4A 65 24 17 02 44 2D 01 0D 65 19  // .....Je$..D-..e.
    E5A0: 17 03 01 01 42 01 00 01 01 46 01 00 01 01 4A 01  // ....B....F....J.
    E5B0: 00 01 01 4E 01 00 01 01 52 01 00 01 01 56 01 00  // ...N....R....V..
    E5C0: 3D 65 01 02 49 67 01 5C 0D 18 01 F8 FF 01 01 5B  // =e..Ig.\.......[
    E5D0: 56 00 41 03 31 41 01 09 25 41 03 15 25 41 02 66  // V.A.1A..%A..%A.f
    E5E0: FF 2D 0D 42 D1 02 2D 0A 42 41 26 05 00 0A 00 00  // .-.B..-.BA&.....
    E5F0: 00 03 04 41 00 00 27 02 41 40 3E 05 40 00 00 01  // ...A..'.A@>.@...
    E600: 00 45 A1 01 03 0D 40 FF FF 66 FF 2D 0D 42 E1 02  // .E....@..f.-.B..
    E610: 56 00 41 03 39 41 01 15 25 41 02 2D 0A 42 41 03  // V.A.9A..%A.-.BA.
    E620: 0C 48 00 00 01 0A 30 1B 40 3A 00 00 3D 65 01 0B  // .H....0.@:..=e..
    E630: 49 2C 02 20 05 00 64 00 00 00 03 0C 48 02 00 03  // I,. ..d.....H...
    E640: 00 41 40 01 0F 25 41 10 09 0D 41 DF F7 4B A5 01  // .A@..%A...A..K..
    E650: 04 44 F0 01 0F 65 41 08 03 0C 48 00 00 4A 05 9C  // .D...eA...H..J..
    E660: 1B 01 00 00 00 44 15 02 03 0C 48 02 00 3C 02 41  // .....D....H..<.A
    E670: 01 40 49 15 02 3C 02 40 01 41 44 CA 02 03 0C 48  // .@I..<.@.AD....H
    E680: 02 00 07 25 40 01 EF 01 02 41 01 40 01 0A 40 01  // ...%@....A.@..@.
    E690: 41 43 CA 02 56 00 40 03 8D 40 0C 00 3D 65 01 18  // AC..V.@..@..=e..
    E6A0: 44 4F 02 03 8D 40 3E 00 3D 65 01 19 44 4F 02 03  // DO...@>.=e..DO..
    E6B0: A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03 15  // .@.3.@..1@..%@..
    E6C0: 25 40 04 0F 0D 40 01 01 4B A5 01 04 44 6C 02 0F  // %@...@..K...Dl..
    E6D0: 0D 40 00 02 56 00 41 03 29 41 01 33 25 41 14 03  // .@..V.A.)A.3%A..
    E6E0: 0C 48 00 00 4A 05 9C 1B 01 00 00 00 44 A8 02 03  // .H..J.......D...
    E6F0: 0C 48 02 00 4A 25 40 01 10 49 A8 02 3C 22 43 01  // .H..J%@..I..<"C.
    E700: 41 49 A8 02 03 1A 48 40 3C 0A 00 01 40 44 CA 02  // AI....H@<...@D..
    E710: 03 1A 48 40 07 25 00 01 FE 03 0C 48 02 00 01 22  // ..H@.%.....H..."
    E720: 43 01 41 07 0D 40 01 EF F7 03 1A 48 40 01 0A 00  // C.A..@.....H@...
    E730: 01 40 3A 00 00 5B 7A 28 00 00 CA 9A 3B 80 7C 81  // .@:..[z(....;.|.
    E740: 4A 00 2F 68 59 00 94 35 77 00 00 00 00 00 02 04  // J./hY..5w.......
    E750: 00 00 04 08 00 00 26 0C 00 00 28 10 00 00 2A 14  // ......&...(...*.
    E760: 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    E870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E880: 00 00 00 00                                      // ....


