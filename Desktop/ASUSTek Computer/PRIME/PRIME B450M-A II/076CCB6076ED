
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210105
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000008E0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000490  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x00003BD7  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 06)  VFCT  0x0000D484  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 07)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 08)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 09)  DSDT  0x0000B998  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 10)  SSDT  0x0000381A  0x01  "AMD   "  "MYRTLE  "  0x00000001  "INTL"   0x20120913
 11)  SSDT  0x00000D53  0x01  "AMD   "  "MYRTLEG2"  0x00000001  "INTL"   0x20120913
 12)  SSDT  0x00000060  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 13)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 15)  WPBT  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "ASUS"   0x00000001
 16)  SSDT  0x00005419  0x02  "AMD   "  "MYRTLE  "  0x00000002  "MSFT"   0x04000000
 17)  SSDT  0x000000BF  0x01  "AMD   "  "AmdTable"  0x00001000  "INTL"   0x20120913
 18)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 19)  SSDT  0x000010AC  0x01  "AMD   "  "MYRTLEPX"  0x00000001  "INTL"   0x20120913
 20)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 21)  FACS  0x00000040  0x02
 22)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 22 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 75
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 01
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 00
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 00
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 00
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 00
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 05
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 06
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 75 41 4C 41 53 4B 41  // APIC^....uALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 01 01  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 00  // ................
    0050: 00 00 00 00 00 08 05 00 00 00 00 00 00 08 06 00  // ................
    0060: 00 00 00 00 00 08 07 00 00 00 00 00 00 08 08 00  // ................
    0070: 00 00 00 00 00 08 09 00 00 00 00 00 00 08 0A 00  // ................
    0080: 00 00 00 00 00 08 0B 00 00 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 05 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 06 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000C6886018
[030h 0048   4]                Image OffsetX : 000001B0
[034h 0052   4]                Image OffsetY : 000000B5

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 4B 41 4C 41 53 4B 41  // BGRT8....KALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 00 00 18 60 88 C6 00 00 00 00  // .........`......
    0030: B0 01 00 00 B5 00 00 00                          // ........


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000490
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 26
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 1168 (0x490)

    0000: 43 52 41 54 90 04 00 00 01 26 41 4D 44 00 00 00  // CRAT.....&AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 13 00 00 00 01 00 00 00 00 00 00 00  // ................
    0030: 00 28 00 00 1D 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 04 00 2C 00 28 00 00 00 00 00 40 00 40 01 00 00  // ..,.(.....@.@...
    0050: 01 0B 04 20 00 00 00 00 01 28 00 00 01 00 00 00  // ... .....(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 CF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 30  // ...............0
    00C0: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 0F 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    02C0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    02D0: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0300: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0310: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0340: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0350: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0380: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0390: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    03C0: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    03D0: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0400: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0410: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0440: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0450: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0480: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (IO1B, 0x0300)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0230)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (SPMR, 0xFED80300)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (SRIO, Zero)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xCAF9BC98)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (AMWV, 0x09)
    Name (SMIM, 0x80000009)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (CNSB, Zero)
    Name (SMIP, 0xB2)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    OperationRegion (COMR, SystemIO, 0x03F8, 0x08)
    Field (COMR, ByteAcc, NoLock, Preserve)
    {
        SOUT,   8, 
        Offset (0x05), 
        SSAT,   8
    }

    Method (THRE, 0, NotSerialized)
    {
        Local0 = (SSAT & 0x20)
        While ((Local0 == Zero))
        {
            Local0 = (SSAT & 0x20)
        }
    }

    Method (OUTX, 1, NotSerialized)
    {
        THRE ()
        SOUT = Arg0
    }

    Method (OUTC, 1, NotSerialized)
    {
        If ((Arg0 == 0x0A))
        {
            OUTX (0x0D)
        }

        OUTX (Arg0)
    }

    Method (DBGN, 1, NotSerialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        OUTC (Local0)
    }

    Method (DBBT, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x04)
        DBGN (Local0)
        DBGN (Arg0)
    }

    Method (DBWD, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x08)
        DBBT (Local0)
        DBBT (Arg0)
    }

    Method (DBDW, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x10)
        DBWD (Local0)
        DBWD (Arg0)
    }

    Method (DBGQ, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x30)
        DBWD (Local0)
        Local0 = (Arg0 >> 0x20)
        DBWD (Local0)
        Local0 = (Arg0 >> 0x10)
        DBWD (Local0)
        DBWD (Arg0)
    }

    Name (DBGZ, Buffer (0x50){})
    Method (GETC, 2, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, DBGC)
        Return (DBGC) /* \GETC.DBGC */
    }

    Method (MNIO, 1, NotSerialized)
    {
        If ((ObjectType (Arg0) == One))
        {
            If ((Arg0 > 0xFFFFFFFF))
            {
                DBGQ (Arg0)
            }
            ElseIf ((Arg0 > 0xFFFF))
            {
                DBDW (Arg0)
            }
            ElseIf ((Arg0 > 0xFF))
            {
                DBWD (Arg0)
            }
            Else
            {
                DBBT (Arg0)
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x02))
        {
            DBGZ = Arg0
            Local1 = Zero
            While (One)
            {
                Local0 = GETC (DBGZ, Local1)
                If ((Local0 == Zero))
                {
                    Return (Zero)
                }

                OUTC (Local0)
                Local1++
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x03))
        {
            Local0 = Zero
            While ((Local0 < SizeOf (Arg0)))
            {
                Local1 = GETC (Arg0, Local0)
                If ((Local0 > Zero))
                {
                    OUTC (0x20)
                }

                DBBT (Local1)
                Local0++
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x04))
        {
            Local0 = Zero
            While ((Local0 < SizeOf (Arg0)))
            {
                OUTC (0x20)
                OUTC (0x20)
                MNIO (DerefOf (Arg0 [Local0]))
                OUTC (0x0A)
                Local0++
            }

            Return (Zero)
        }

        Return (One)
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x78), 
            ,   20, 
        SI3V,   1, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (\)
    {
        Device (AWW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AWW")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x12, 0x02, 0xC3, 0xBC, 0xD0, 0xA2, 0x41,  // .......A
                /* 0008 */  0xBA, 0x17, 0x81, 0x6C, 0xD5, 0xED, 0x77, 0x44,  // ...l..wD
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, NotSerialized)
            {
                Local0 = \_SB.CTRL
                Return (Local0)
            }

            Name (WQMO, Buffer (0x0241)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x31, 0x02, 0x00, 0x00, 0x9C, 0x04, 0x00, 0x00,  // 1.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5A, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // (Z.....B
                /* 0020 */  0x20, 0xA4, 0x02, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x45, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // E....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01,  // J.C...D.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02,  // .|...(..
                /* 0068 */  0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88, 0x6C, 0x34,  // ,.....l4
                /* 0070 */  0x4E, 0x50, 0x36, 0x34, 0x4A, 0x06, 0x84, 0x3C,  // NP64J..<
                /* 0078 */  0x0B, 0xB0, 0x0E, 0x4C, 0x08, 0xEC, 0x5E, 0x80,  // ...L..^.
                /* 0080 */  0x43, 0x01, 0xCE, 0x04, 0x08, 0x13, 0xA0, 0x4C,  // C......L
                /* 0088 */  0x80, 0x31, 0x08, 0x02, 0xD3, 0xD6, 0x70, 0x04,  // .1....p.
                /* 0090 */  0x54, 0x21, 0x98, 0x50, 0xCE, 0x25, 0x52, 0x83,  // T!.P.%R.
                /* 0098 */  0x60, 0x42, 0x09, 0x14, 0x24, 0x4C, 0x6F, 0x28,  // `B..$Lo(
                /* 00A0 */  0x12, 0x07, 0x22, 0x6D, 0x78, 0xC2, 0x6C, 0x4D,  // .."mx.lM
                /* 00A8 */  0x80, 0x45, 0x0C, 0x41, 0x45, 0x08, 0x1A, 0xA1,  // .E.AE...
                /* 00B0 */  0xFD, 0x41, 0x90, 0x58, 0x0B, 0xD6, 0x50, 0x1D,  // .A.X..P.
                /* 00B8 */  0x69, 0x34, 0xA8, 0xE1, 0x25, 0x38, 0x5C, 0x0F,  // i4..%8\.
                /* 00C0 */  0xF5, 0x1C, 0x3B, 0x17, 0x20, 0x7D, 0x92, 0x02,  // ..;. }..
                /* 00C8 */  0x39, 0xC8, 0x73, 0xAB, 0x73, 0x9C, 0x04, 0x24,  // 9.s.s..$
                /* 00D0 */  0x81, 0xB1, 0x12, 0x74, 0x30, 0x70, 0x28, 0xAE,  // ...t0p(.
                /* 00D8 */  0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0, 0x50,  // .5..e..P
                /* 00E0 */  0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.@...!2
                /* 00E8 */  0x40, 0xCF, 0xEE, 0x68, 0x30, 0x07, 0x00, 0x8F,  // @..h0...
                /* 00F0 */  0xEC, 0x64, 0xDE, 0x03, 0x4A, 0x15, 0x60, 0x76,  // .d..J.`v
                /* 00F8 */  0xCC, 0x9A, 0x5A, 0x82, 0xE3, 0x31, 0xF4, 0xE9,  // ..Z..1..
                /* 0100 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                /* 0108 */  0x46, 0x66, 0x68, 0xCF, 0xF4, 0xB4, 0x62, 0x86,  // Ffh...b.
                /* 0110 */  0x3C, 0xFC, 0xC3, 0x62, 0x62, 0x21, 0xF4, 0x41,  // <..bb!.A
                /* 0118 */  0xF0, 0x78, 0xE0, 0xFD, 0xFF, 0xC7, 0x03, 0x1E,  // .x......
                /* 0120 */  0xC5, 0x67, 0x02, 0x21, 0xBC, 0x12, 0xC4, 0xF6,  // .g.!....
                /* 0128 */  0x80, 0x12, 0x94, 0x07, 0x8C, 0x1E, 0x90, 0xFD,  // ........
                /* 0130 */  0x0A, 0x40, 0x08, 0x5E, 0xE6, 0x88, 0xE4, 0x14,  // .@.^....
                /* 0138 */  0x41, 0x63, 0xF2, 0xE4, 0x5E, 0x0D, 0x42, 0x3C,  // Ac..^.B<
                /* 0140 */  0x24, 0x14, 0x3E, 0x00, 0xCD, 0xEA, 0x31, 0x81,  // $.>...1.
                /* 0148 */  0x11, 0x14, 0x09, 0x8F, 0x12, 0x03, 0x8F, 0x3A,  // .......:
                /* 0150 */  0x04, 0x44, 0x3E, 0x9A, 0x73, 0x09, 0x7F, 0x34,  // .D>.s..4
                /* 0158 */  0x51, 0x4E, 0xE1, 0x70, 0x7C, 0x62, 0x30, 0x42,  // QN.p|b0B
                /* 0160 */  0xF8, 0x72, 0x0F, 0x0E, 0x44, 0xF3, 0x7C, 0x34,  // .r..D.|4
                /* 0168 */  0x89, 0x33, 0x7A, 0x17, 0xF0, 0xD9, 0x80, 0x1D,  // .3z.....
                /* 0170 */  0x2E, 0x1C, 0x89, 0x42, 0x36, 0x16, 0xEA, 0xA1,  // ...B6...
                /* 0178 */  0x52, 0x61, 0x40, 0x9A, 0x78, 0xDC, 0x98, 0x47,  // Ra@.x..G
                /* 0180 */  0xD1, 0xFB, 0x78, 0x28, 0xCA, 0xEB, 0x01, 0x83,  // ..x(....
                /* 0188 */  0x38, 0x29, 0x8F, 0x4E, 0xF0, 0x14, 0xC2, 0x12,  // 8).N....
                /* 0190 */  0x48, 0xE8, 0x90, 0x3C, 0x02, 0x47, 0x06, 0xA3,  // H..<.G..
                /* 0198 */  0x20, 0x1E, 0xBF, 0xE3, 0x40, 0xC8, 0xC9, 0x51,  //  ...@..Q
                /* 01A0 */  0x00, 0x35, 0x3A, 0xDF, 0x04, 0x3C, 0xAE, 0x53,  // .5:..<.S
                /* 01A8 */  0x3A, 0x8C, 0x03, 0x39, 0x8B, 0x28, 0xAF, 0x0C,  // :..9.(..
                /* 01B0 */  0x26, 0x30, 0xCE, 0x23, 0x03, 0xAC, 0x11, 0x1E,  // &0.#....
                /* 01B8 */  0xCE, 0xD9, 0x79, 0x22, 0x86, 0x33, 0xA4, 0xE1,  // ..y".3..
                /* 01C0 */  0xF8, 0x55, 0xE0, 0x8D, 0x22, 0x01, 0x3F, 0x12,  // .U..".?.
                /* 01C8 */  0xC0, 0xBF, 0x6E, 0xF8, 0x40, 0x70, 0x0A, 0x8F,  // ..n.@p..
                /* 01D0 */  0x1A, 0x6F, 0x19, 0x09, 0x2C, 0xF0, 0x48, 0x00,  // .o..,.H.
                /* 01D8 */  0x0A, 0x20, 0x5F, 0x02, 0xAC, 0xF4, 0x20, 0x40,  // . _... @
                /* 01E0 */  0xE7, 0x10, 0x22, 0x4C, 0x34, 0x13, 0xFC, 0xFF,  // .."L4...
                /* 01E8 */  0xC3, 0x73, 0xC1, 0x63, 0xA5, 0xB2, 0xC6, 0x85,  // .s.c....
                /* 01F0 */  0x1A, 0xAA, 0x4F, 0x07, 0x0C, 0xFB, 0x1D, 0xC0,  // ..O.....
                /* 01F8 */  0xA2, 0x67, 0xA8, 0x1B, 0xC1, 0x41, 0xBD, 0x3D,  // .g...A.=
                /* 0200 */  0x58, 0xA2, 0x53, 0xA9, 0x4E, 0x61, 0x3D, 0x52,  // X.S.Na=R
                /* 0208 */  0x0E, 0x6B, 0xB4, 0xB0, 0x07, 0xFC, 0xE4, 0xE0,  // .k......
                /* 0210 */  0x5B, 0x87, 0x67, 0x66, 0x8C, 0xB0, 0x1E, 0xAD,  // [.gf....
                /* 0218 */  0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  // ......U.
                /* 0220 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  // 25.4...R
                /* 0228 */  0x63, 0xC6, 0x4E, 0x22, 0x8E, 0xF1, 0x12, 0xD0,  // c.N"....
                /* 0230 */  0x58, 0x2C, 0x62, 0x39, 0x02, 0xB1, 0x74, 0x0A,  // X,b9..t.
                /* 0238 */  0x19, 0x01, 0x51, 0x10, 0x10, 0x01, 0xF9, 0xFF,  // ..Q.....
                /* 0240 */  0x0F                                             // .
            })
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PG26, Package (0x00){})
        Name (AG26, Package (0x00){})
        Name (PG2B, Package (0x00){})
        Name (AG2B, Package (0x00){})
        Name (PG2D, Package (0x00){})
        Name (AG2D, Package (0x00){})
        Name (PG2E, Package (0x00){})
        Name (AG2E, Package (0x00){})
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xD0000000)
            Name (MBL, 0x2D000000)
            Name (MAB, 0x0000000430000000)
            Name (MAL, 0x0000007BD0000000)
            Name (MAM, 0x0000007FFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (!SRIO)
                    {
                        CTRL &= 0x1A
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000080000000)
                    Name (UMAB, 0x00000003AF000000)
                    Name (UMAM, 0x000000042EFFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y0F, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (X161)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PD16) /* \_SB_.PD16 */
                }

                Device (D007)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PD18) /* \_SB_.PD18 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PD1A) /* \_SB_.PD1A */
                }

                Device (D03D)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PD1C) /* \_SB_.PD1C */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1E) /* \_SB_.AR1E */
                    }

                    Return (PD1E) /* \_SB_.PD1E */
                }

                Device (D012)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD100000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1F) /* \_SB_.AR1F */
                    }

                    Return (PD1F) /* \_SB_.PD1F */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D021)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D022)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D023)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D019)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x11)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2C), 
                        CR2C,   8, 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            EXFG ()
                        }

                        ENFG (0x07)
                        Local0 = (0x10 | CR2C) /* \_SB_.PCI0.SBRG.SIO1.CR2C */
                        CR2C = Local0
                        EXFG ()
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PD12) /* \_SB_.PD12 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (PX11)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (PX12)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (RLAN)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x18, 0x04))
                            }
                        }
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PDID, PCI_Config, Zero, 0x04)
                        Field (PDID, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x02), 
                            XDID,   16
                        }

                        Name (PT4, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E
                        })
                        Name (PT2, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12
                        })
                        Name (PT1, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12, 
                            0x13
                        })
                        Name (USBV, Package (0x16)
                        {
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (USBP, Package (0x16){})
                        Method (UPGP, 0, Serialized)
                        {
                            Local0 = 0x16
                            If (((XDID == 0x43B9) || (XDID == 0x43D0)))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT4 [Local0])
                                }
                            }
                            ElseIf (((XDID == 0x43BB) || (XDID == 0x43D5)))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT2 [Local0])
                                }
                            }
                            ElseIf ((XDID == 0x43BC))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT1 [Local0])
                                }
                            }
                        }

                        Method (GPLD, 2, Serialized)
                        {
                            Name (PCKG, Package (0x01)
                            {
                                Buffer (0x14){}
                            })
                            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                            REV = 0x02
                            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                            VISI = Arg0
                            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                            GPOS = Arg1
                            Return (PCKG) /* \_SB_.PCI0.GPP1.PTXH.RHUB.GPLD.PCKG */
                        }

                        Method (GUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            PCKG [Zero] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.GPP1.PTXH.RHUB.GUPC.PCKG */
                        }

                        Method (TUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                One, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            PCKG [One] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.GPP1.PTXH.RHUB.TUPC.PCKG */
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x02]), DerefOf (USBP [0x02])))
                            }
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0A]), DerefOf (USBP [0x0A])))
                            }
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x03]), DerefOf (USBP [0x03])))
                            }
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0B]), DerefOf (USBP [0x0B])))
                            }
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x04]), DerefOf (USBP [0x04])))
                            }
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0C]), DerefOf (USBP [0x0C])))
                            }
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x05]), DerefOf (USBP [0x05])))
                            }
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0D]), DerefOf (USBP [0x0D])))
                            }
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [Zero]), DerefOf (USBP [Zero])))
                            }
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x08]), DerefOf (USBP [0x08])))
                            }
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [One]), DerefOf (USBP [One])))
                            }
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x09]), DerefOf (USBP [0x09])))
                            }
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x06]), DerefOf (USBP [0x06])))
                            }
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0E]), DerefOf (USBP [0x0E])))
                            }
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x07]), DerefOf (USBP [0x07])))
                            }
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0F]), DerefOf (USBP [0x0F])))
                            }
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x10]), DerefOf (USBP [0x10])))
                            }
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x11]), DerefOf (USBP [0x11])))
                            }
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x12]), DerefOf (USBP [0x12])))
                            }
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x13]), DerefOf (USBP [0x13])))
                            }
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x14]), DerefOf (USBP [0x14])))
                            }
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x15]), DerefOf (USBP [0x15])))
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0.X161, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT24.PX11, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PT02.PT26.PX12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.PT02.PT27.RLAN, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0), SPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    OperationRegion (DBGB, SystemIO, 0x80, One)
    Field (DBGB, ByteAcc, NoLock, Preserve)
    {
        P80B,   8
    }

    OperationRegion (DBGW, SystemIO, 0x80, 0x02)
    Field (DBGW, WordAcc, NoLock, Preserve)
    {
        P80W,   16
    }

    OperationRegion (DBGD, SystemIO, 0x80, 0x04)
    Field (DBGD, DWordAcc, NoLock, Preserve)
    {
        P80D,   32
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            SPIE,   1, 
            P80E,   1, 
                ,   2, 
            NI2C,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            SDMC,   1, 
                ,   2, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA306C), 
            RAR2,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1, 
            Offset (0xA30D0), 
                ,   13, 
            LCLK,   2
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            IM17,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FMIS, SystemMemory, 0xFED80E00, 0x0100)
        Field (FMIS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   13, 
            I24M,   1
        }

        OperationRegion (FGIO, SystemMemory, 0xFED81500, 0x0300)
        Field (FGIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA8), 
                ,   22, 
            O042,   1, 
            Offset (0x164), 
                ,   22, 
            O089,   1
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x62), 
            AMTD,   2, 
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        OperationRegion (SPIM, SystemMemory, 0xFEC10000, 0x0100)
        Field (SPIM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x1D), 
            ASCE,   2, 
            Offset (0x22), 
            SSSC,   16, 
            Offset (0xFC), 
            STRN,   1, 
                ,   2, 
            BOWS,   1, 
            DOWS,   1
        }

        Mutex (ASSM, 0x00)
        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        CreateWordField (SVBF, 0x14, RG22)
        CreateDWordField (SVBF, 0x18, SAR2)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }

            Return (Zero)
        }

        Method (OP80, 1, Serialized)
        {
            If (P80E)
            {
                P80D = Arg0
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (SPI1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (SPIE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC10000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.SPI1._CRS.RBUF */
            }

            Method (ASSC, 2, Serialized)
            {
                Acquire (ASSM, 0xFFFF)
                Local0 = Arg1
                Switch (ToInteger (Arg0))
                {
                    Case (0x03)
                    {
                        DOWS = One
                        STRN = One
                        While ((BOWS && STRN))
                        {
                            If (Arg1)
                            {
                                Stall (One)
                                Local0 -= One
                                If ((Local0 == Zero))
                                {
                                    Break
                                }
                            }
                        }

                        SAR2 = RAR2 /* \_SB_.RAR2 */
                        RAR2 = Zero
                        ASCE = 0x02
                        RG22 = SSSC /* \_SB_.SSSC */
                    }
                    Case (0x04)
                    {
                        SSSC = RG22 /* \_SB_.RG22 */
                        ASCE = Zero
                        RAR2 = SAR2 /* \_SB_.SAR2 */
                        Local0 = One
                        DOWS = Zero
                    }

                }

                Release (ASSM)
                Return (Local0)
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (RST, 0, NotSerialized)
            {
                Notify (GPIO, Zero) // Bus Check
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (UOL0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {5}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_ADR, One)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = 0xFF00
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (ECRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (MHID, "AMDI0041")
        Name (MCID, "AMDI0041")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCI\\CC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((EMMD == Zero))
                {
                    Return (AHID) /* \_SB_.AHID */
                }

                If ((EMMD == One))
                {
                    Return (SHID) /* \_SB_.SHID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MHID) /* \_SB_.MHID */
                }

                Return (Zero)
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If ((EMMD == Zero))
                {
                    Return (ACID) /* \_SB_.ACID */
                }

                If ((EMMD == One))
                {
                    Return (SCID) /* \_SB_.SCID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MCID) /* \_SB_.MCID */
                }

                Return (Zero)
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    If ((EMMD == One))
                    {
                        Return (DCRS) /* \_SB_.DCRS */
                    }

                    Return (ECRS) /* \_SB_.ECRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }

            Device (CARD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    If ((EMMD == One))
                    {
                        If ((SDMC == One))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER0 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y23)
                    IRQNoFlags (_Y24)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y23._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y23._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y24._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR0))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER1 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y25)
                    IRQNoFlags (_Y26)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y25._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y25._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y26._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR1))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER2 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y27)
                    IRQNoFlags (_Y28)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y27._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y27._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y28._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR2))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER3 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y29)
                    IRQNoFlags (_Y2A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y29._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y29._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2A._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR3))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.PCI0.GP17.VGA)
    {
        Device (CAMF)
        {
            Name (_ADR, 0x1000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O042 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O042 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O042 = Zero
            }
        }

        Device (CAMR)
        {
            Name (_ADR, 0x2000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O089 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O089 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O089 = Zero
            }
        }

        Method (RCPU, 0, NotSerialized)
        {
            O089 = One
        }

        Method (RCPD, 0, NotSerialized)
        {
            O089 = Zero
        }

        Method (FCPU, 0, NotSerialized)
        {
            O042 = One
        }

        Method (FCPD, 0, NotSerialized)
        {
            O042 = Zero
        }

        Method (ICLE, 0, NotSerialized)
        {
            I24M = Zero
        }

        Method (ICLD, 0, NotSerialized)
        {
            I24M = One
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2C)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2E)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2F,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2C._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2C._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2E._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2E._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2F._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2C._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y2F._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y2F._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,  // BC...GgF
                /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,  // .p...9..
                /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,  //  ..fBD..
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // r.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Name (CCAC, Zero)
            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (WMBC, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x43455053)
                    {
                        Return (SPEC (Arg2))
                    }
                    Case (0x50564544)
                    {
                        Return (DEVP (Arg2))
                    }
                    Case (0x50534453)
                    {
                        Return (SDSP (Arg2))
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (Arg2))
                    }
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x5446424B)
                    {
                        Return (KBFT (Arg2))
                    }
                    Case (0x59454B48)
                    {
                        Return (HKEY ())
                    }
                    Case (0x4C455252)
                    {
                        Return (LERR (Arg2))
                    }
                    Case (0x47424F44)
                    {
                        Return (GBOD (Arg2))
                    }
                    Case (0x53424F44)
                    {
                        Return (SBOD (Arg2))
                    }
                    Case (0x47424F4E)
                    {
                        Return (GBON (Arg2))
                    }
                    Case (0x53415057)
                    {
                        Return (SAPW (Arg2))
                    }
                    Case (0x53555057)
                    {
                        Return (SUPW (Arg2))
                    }
                    Case (0x53555058)
                    {
                        Return (GLBN (Arg2))
                    }
                    Case (0x53555059)
                    {
                        Return (ISLG (Arg2))
                    }
                    Case (0x53555060)
                    {
                        Return (GLBO (Arg2))
                    }
                    Case (0x53555061)
                    {
                        Return (SLBO (Arg2))
                    }
                    Case (0x53424F47)
                    {
                        Return (SBOG (Arg2))
                    }
                    Case (0x4C444654)
                    {
                        Return (LDFT ())
                    }
                    Case (0x53465442)
                    {
                        Return (SFTB (Arg2))
                    }
                    Case (0x53444654)
                    {
                        Return (SDFT (Arg2))
                    }
                    Case (0x5346544D)
                    {
                        Return (SFTM ())
                    }
                    Case (0x4443544C)
                    {
                        Return (DCTL (Arg2))
                    }
                    Case (0x4746414E)
                    {
                        Return (GFAN (Arg2))
                    }
                    Case (0x4446414E)
                    {
                        Return (SFAN (Arg2))
                    }
                    Case (0x47464356)
                    {
                        Return (GFCV (Arg2))
                    }
                    Case (0x44464356)
                    {
                        Return (SFCV (Arg2))
                    }
                    Case (0x43455057)
                    {
                        Return (CKPW (Arg2))
                    }
                    Case (0x47544F44)
                    {
                        Return (GTOD (Arg2))
                    }
                    Case (0x53544F44)
                    {
                        Return (STOD (Arg2))
                    }
                    Case (0x4F505945)
                    {
                        Return (EYPO ())
                    }
                    Case (0x54505945)
                    {
                        Return (EYPT ())
                    }
                    Case (0x45505945)
                    {
                        Return (EYPE ())
                    }
                    Case (0x56505945)
                    {
                        Return (EYPF ())
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Mutex (ASMX, 0x00)
            Method (RIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    Local0 = PT08 /* \AMW0.RIOB.PT08 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, B_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    PT08 = B_DT /* \AMW0.WIOB.B_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    Local0 = PT16 /* \AMW0.RIOW.PT16 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateWordField (Arg0, 0x02, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    PT16 = W_DT /* \AMW0.WIOW.W_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    Local0 = PT32 /* \AMW0.RIOD.PT32 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateDWordField (Arg0, 0x02, D_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    PT32 = D_DT /* \AMW0.WIOD.D_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    OperationRegion (TMMM, SystemMemory, ToInteger (W_MM), 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = MM08 /* \AMW0.RMEM.MM08 */
                        }
                        Case (0x02)
                        {
                            Local0 = MM16 /* \AMW0.RMEM.MM16 */
                        }
                        Case (0x04)
                        {
                            Local0 = MM32 /* \AMW0.RMEM.MM32 */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    CreateDWordField (Arg0, 0x08, W_DT)
                    OperationRegion (TMMM, SystemMemory, W_MM, 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, WordAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, DWordAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            MM08 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x02)
                        {
                            MM16 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x04)
                        {
                            MM32 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    Local0 = TBUS /* \AMW0.RPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.RPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.RPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.RPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = BCFG /* \AMW0.RPCI.BCFG */
                        }
                        Case (0x02)
                        {
                            Local0 = WCFG /* \AMW0.RPCI.WCFG */
                        }
                        Case (0x04)
                        {
                            Local0 = XCFG /* \AMW0.RPCI.XCFG */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    CreateDWordField (Arg0, 0x08, TDAT)
                    Local0 = TBUS /* \AMW0.WPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.WPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.WPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.WPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            BCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x02)
                        {
                            WCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x04)
                        {
                            XCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    Local0 = DATP /* \AMW0.RIDX.DATP */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    CreateByteField (Arg0, 0x03, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    DATP = W_DT /* \AMW0.WIDX.W_DT */
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (RGBF, Buffer (0x10){})
            CreateDWordField (RGBF, Zero, REAX)
            CreateDWordField (RGBF, 0x04, REBX)
            CreateDWordField (RGBF, 0x08, RECX)
            CreateDWordField (RGBF, 0x0C, REDX)
            Name (MRBF, Buffer (0x08){})
            CreateDWordField (MRBF, Zero, MEDX)
            CreateDWordField (MRBF, 0x04, MEAX)
            Method (RDMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GMSR (W_ID)
                    MEDX = REDX /* \AMW0.REDX */
                    MEAX = REAX /* \AMW0.REAX */
                    Release (ASMX)
                    Return (MRBF) /* \AMW0.MRBF */
                }

                Return (Ones)
            }

            Method (WRMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    CreateDWordField (Arg0, 0x04, W_HI)
                    CreateDWordField (Arg0, 0x08, W_LW)
                    RECX = W_ID /* \AMW0.WRMR.W_ID */
                    REDX = W_HI /* \AMW0.WRMR.W_HI */
                    REAX = W_LW /* \AMW0.WRMR.W_LW */
                    Local0 = \_SB.SMSR (RGBF)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RCID, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.PRID (W_ID)
                    Release (ASMX)
                    Return (RGBF) /* \AMW0.RGBF */
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \AMW0.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x24), 
                    ,   6, 
                HMSL,   2, 
                Offset (0xF3), 
                    ,   2, 
                ECLK,   1
            }

            Method (HMBS, 1, Serialized)
            {
                Switch (HMSL)
                {
                    Case (Zero)
                    {
                        Local0 = 0xF7000000
                    }
                    Case (One)
                    {
                        Local0 = 0xF7100000
                    }
                    Case (0x02)
                    {
                        Local0 = 0xF7200000
                    }
                    Case (0x03)
                    {
                        Local0 = 0xF7300000
                    }

                }

                Local1 = (Arg0 * 0x0100)
                Local2 = (Local0 + Local1)
                Return (Local2)
            }

            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = HMBS (W_BK)
                    Local1 = (Local0 + W_ID) /* \AMW0.RHWM.W_ID */
                    OperationRegion (HWMM, SystemMemory, Local1, 0x04)
                    Field (HWMM, ByteAcc, NoLock, Preserve)
                    {
                        BHWM,   8
                    }

                    Local0 = BHWM /* \AMW0.RHWM.BHWM */
                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = HMBS (W_BK)
                    Local1 = (Local0 + W_ID) /* \AMW0.WHWM.W_ID */
                    OperationRegion (HWMM, SystemMemory, Local1, 0x04)
                    Field (HWMM, ByteAcc, NoLock, Preserve)
                    {
                        BHWM,   8
                    }

                    BHWM = W_DT /* \AMW0.WHWM.W_DT */
                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ATOH, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= 0x61) && (Arg0 <= 0x66)))
                {
                    Local0 = (Arg0 - 0x57)
                }

                If (((Arg0 >= 0x41) && (Arg0 <= 0x46)))
                {
                    Local0 = (Arg0 - 0x37)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x39)))
                {
                    Local0 = (Arg0 - 0x30)
                }

                Return (Local0)
            }

            Method (HTOA, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= Zero) && (Arg0 <= 0x09)))
                {
                    Local0 = (Arg0 + 0x30)
                }

                If (((Arg0 >= 0x0A) && (Arg0 <= 0x0F)))
                {
                    Local0 = (Arg0 - 0x0A)
                    Local0 += 0x41
                }

                Return (Local0)
            }

            Name (STRB, Buffer (0x0100){})
            Name (HEXB, Buffer (0x0100){})
            Method (STOH, 1, Serialized)
            {
                STRB = Arg0
                CreateByteField (Arg0, Zero, DCNT)
                DCNT >>= 0x02
                Local0 = Zero
                While ((Local0 < DCNT))
                {
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    Local3 = ATOH (DerefOf (STRB [Local1]))
                    Local3 <<= 0x04
                    Local3 += ATOH (DerefOf (STRB [Local2]))
                    HEXB [Local0] = Local3
                    Local0++
                }

                Return (HEXB) /* \AMW0.HEXB */
            }

            Method (HTOS, 2, Serialized)
            {
                HEXB = Arg0
                STRB [Zero] = (Arg1 << 0x02)
                STRB [One] = Zero
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    Local3 = DerefOf (HEXB [Local0])
                    Local4 = (Local3 >> 0x04)
                    Local4 &= 0x0F
                    Local3 &= 0x0F
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    STRB [Local1] = HTOA (Local4)
                    Local1++
                    STRB [Local1] = Zero
                    STRB [Local2] = HTOA (Local3)
                    Local2++
                    STRB [Local2] = Zero
                    Local0++
                }

                Return (STRB) /* \AMW0.STRB */
            }

            Name (IDBF, Buffer (0x60){})
            Name (OSBF, Buffer (0x82){})
            Name (ODBF, Buffer (0x20){})
            Name (B_CT, Zero)
            Name (B_BK, Zero)
            Name (B_ID, Zero)
            Name (B_DT, Zero)
            Method (BRIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        ODBF [Local1] = \_SB.PCI0.SBRG.SIO1.DATA
                        Local1++
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = B_DT /* \AMW0.B_DT */
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (IMRD, 2, Serialized)
            {
                OperationRegion (TMMM, SystemMemory, Arg0, 0x04)
                Field (TMMM, ByteAcc, NoLock, Preserve)
                {
                    MM08,   8
                }

                Field (TMMM, WordAcc, NoLock, Preserve)
                {
                    MM16,   16
                }

                Field (TMMM, DWordAcc, NoLock, Preserve)
                {
                    MM32,   32
                }

                Switch (Arg1)
                {
                    Case (One)
                    {
                        Local0 = MM08 /* \AMW0.IMRD.MM08 */
                    }
                    Case (0x02)
                    {
                        Local0 = MM16 /* \AMW0.IMRD.MM16 */
                    }
                    Case (0x04)
                    {
                        Local0 = MM32 /* \AMW0.IMRD.MM32 */
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (IMWR, 3, Serialized)
            {
                OperationRegion (TMMM, SystemMemory, Arg0, 0x04)
                Field (TMMM, ByteAcc, NoLock, Preserve)
                {
                    MM08,   8
                }

                Field (TMMM, WordAcc, NoLock, Preserve)
                {
                    MM16,   16
                }

                Field (TMMM, DWordAcc, NoLock, Preserve)
                {
                    MM32,   32
                }

                Switch (Arg1)
                {
                    Case (One)
                    {
                        MM08 = Arg2
                    }
                    Case (0x02)
                    {
                        MM16 = Arg2
                    }
                    Case (0x04)
                    {
                        MM32 = Arg2
                    }
                    Default
                    {
                    }

                }
            }

            Method (BRHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        Local2 = HMBS (B_BK)
                        Local3 = (Local2 + B_ID) /* \AMW0.B_ID */
                        ODBF [Local1] = IMRD (Local3, One)
                        Local1++
                    }

                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        Local2 = HMBS (B_BK)
                        Local3 = (Local2 + B_ID) /* \AMW0.B_ID */
                        IMWR (Local3, One, B_DT)
                    }

                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (ECBK, Zero)
            Method (BREC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (BWEC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x52494F42)
                    {
                        Return (RIOB (Arg2))
                    }
                    Case (0x57494F42)
                    {
                        Return (WIOB (Arg2))
                    }
                    Case (0x52494F57)
                    {
                        Return (RIOW (Arg2))
                    }
                    Case (0x57494F57)
                    {
                        Return (WIOW (Arg2))
                    }
                    Case (0x52494F44)
                    {
                        Return (RIOD (Arg2))
                    }
                    Case (0x57494F44)
                    {
                        Return (WIOD (Arg2))
                    }
                    Case (0x524D454D)
                    {
                        Return (RMEM (Arg2))
                    }
                    Case (0x574D454D)
                    {
                        Return (WMEM (Arg2))
                    }
                    Case (0x52504349)
                    {
                        Return (RPCI (Arg2))
                    }
                    Case (0x57504349)
                    {
                        Return (WPCI (Arg2))
                    }
                    Case (0x52494458)
                    {
                        Return (RIDX (Arg2))
                    }
                    Case (0x57494458)
                    {
                        Return (WIDX (Arg2))
                    }
                    Case (0x52444D52)
                    {
                        Return (RDMR (Arg2))
                    }
                    Case (0x57524D52)
                    {
                        Return (WRMR (Arg2))
                    }
                    Case (0x52434944)
                    {
                        Return (RCID (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x5253494F)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x5753494F)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x5248574D)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x5748574D)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x4252494F)
                    {
                        Return (BRIO (Arg2))
                    }
                    Case (0x4257494F)
                    {
                        Return (BWIO (Arg2))
                    }
                    Case (0x4252484D)
                    {
                        Return (BRHM (Arg2))
                    }
                    Case (0x4257484D)
                    {
                        Return (BWHM (Arg2))
                    }
                    Case (0x42524543)
                    {
                        Return (BREC (Arg2))
                    }
                    Case (0x42574543)
                    {
                        Return (BWEC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \AMW0.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (AMW0, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x1C5F)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x4F, 0x1C, 0x00, 0x00, 0x82, 0xDA, 0x00, 0x00,  // O.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x29, 0xA7, 0x00, 0x01, 0x06, 0x18, 0x42,  // .).....B
                /* 0020 */  0x10, 0x07, 0x10, 0x0A, 0x2A, 0x9A, 0x42, 0x04,  // ....*.B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  // ...8.`0.
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  // <..F..eC
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  // .d@.....
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,  // .......M
                /* 0088 */  0x80, 0xB8, 0x61, 0xC8, 0xDA, 0x00, 0x04, 0x55,  // ..a....U
                /* 0090 */  0x98, 0x00, 0x5B, 0x30, 0x42, 0xA9, 0x0D, 0x46,  // ..[0B..F
                /* 0098 */  0x28, 0x8D, 0x21, 0x68, 0x18, 0x46, 0x89, 0x78,  // (.!h.F.x
                /* 00A0 */  0x48, 0x9D, 0xC1, 0x0A, 0x25, 0x62, 0x98, 0x10,  // H...%b..
                /* 00A8 */  0x11, 0x2A, 0xC3, 0x20, 0xC3, 0x0A, 0x15, 0x2D,  // .*. ...-
                /* 00B0 */  0x6E, 0x84, 0xF6, 0x07, 0x41, 0xA2, 0xAD, 0x58,  // n...A..X
                /* 00B8 */  0x43, 0x75, 0xA4, 0xD1, 0xA0, 0x86, 0x97, 0xE0,  // Cu......
                /* 00C0 */  0x70, 0x3D, 0xD4, 0x73, 0xEC, 0x5C, 0x80, 0x74,  // p=.s.\.t
                /* 00C8 */  0x60, 0x81, 0x04, 0x3F, 0x8B, 0x3A, 0xC7, 0x49,  // `..?.:.I
                /* 00D0 */  0x40, 0x12, 0x18, 0xEB, 0xF8, 0xD9, 0xC0, 0xF1,  // @.......
                /* 00D8 */  0xAE, 0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0,  // ..5..e..
                /* 00E0 */  0x50, 0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21,  // PC.@...!
                /* 00E8 */  0x32, 0x40, 0xCF, 0xE9, 0x68, 0x30, 0x07, 0x00,  // 2@..h0..
                /* 00F0 */  0x3B, 0x9C, 0x8C, 0xEE, 0x01, 0xA5, 0x0A, 0x30,  // ;......0
                /* 00F8 */  0x3B, 0x66, 0x59, 0x04, 0xD2, 0x78, 0x0C, 0x7D,  // ;fY..x.}
                /* 0100 */  0xBA, 0xE7, 0x73, 0xC2, 0x09, 0x2C, 0x7F, 0x10,  // ..s..,..
                /* 0108 */  0xA8, 0x91, 0x19, 0xDA, 0x06, 0xA7, 0x25, 0xCC,  // ......%.
                /* 0110 */  0x90, 0x87, 0x7F, 0x58, 0x4C, 0x2C, 0x84, 0x3E,  // ...XL,.>
                /* 0118 */  0x08, 0x1E, 0x0F, 0xBC, 0xFF, 0xFF, 0x78, 0xC0,  // ......x.
                /* 0120 */  0xA3, 0xF8, 0x4C, 0x20, 0x84, 0x57, 0x82, 0xD8,  // ..L .W..
                /* 0128 */  0x1E, 0xD0, 0x73, 0x82, 0x81, 0xB1, 0x03, 0xB2,  // ..s.....
                /* 0130 */  0x5F, 0x01, 0x08, 0xC1, 0xCB, 0x1C, 0x91, 0x9C,  // _.......
                /* 0138 */  0x22, 0x68, 0x4C, 0xC6, 0x68, 0x15, 0x42, 0x43,  // "hL.h.BC
                /* 0140 */  0x08, 0x6D, 0x88, 0xB3, 0x8B, 0x7F, 0xF0, 0x86,  // .m......
                /* 0148 */  0x39, 0x77, 0x13, 0x14, 0x39, 0x02, 0x94, 0x98,  // 9w..9...
                /* 0150 */  0x11, 0xA0, 0x8E, 0x01, 0xD1, 0x43, 0x9F, 0x4D,  // .....C.M
                /* 0158 */  0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4, 0x33,  // ...r...3
                /* 0160 */  0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20, 0x9A,  // ....{H .
                /* 0168 */  0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02, 0x13,  // ....9...
                /* 0170 */  0xC4, 0xF3, 0x3C, 0x41, 0xA2, 0x2C, 0x55, 0x36,  // ..<A.,U6
                /* 0178 */  0x96, 0xEA, 0x41, 0x50, 0x41, 0x40, 0x9A, 0xBB,  // ..APA@..
                /* 0180 */  0x21, 0x4E, 0xDA, 0xC8, 0x81, 0x63, 0x54, 0x3F,  // !N...cT?
                /* 0188 */  0x6C, 0x2A, 0x02, 0x4E, 0x87, 0x0D, 0x8F, 0xDB,  // l*.N....
                /* 0190 */  0xF1, 0x49, 0x14, 0x7D, 0x40, 0x14, 0xCE, 0x61,  // .I.}@..a
                /* 0198 */  0xCF, 0x1C, 0x14, 0xC4, 0x80, 0x4E, 0x02, 0x21,  // .....N.!
                /* 01A0 */  0x27, 0x47, 0x01, 0x94, 0x96, 0x71, 0x92, 0x71,  // 'G...q.q
                /* 01A8 */  0x9D, 0xDA, 0x9B, 0x80, 0xA7, 0xF5, 0x58, 0x70,  // ......Xp
                /* 01B0 */  0x18, 0xC7, 0x75, 0xD6, 0x7E, 0x7E, 0xF8, 0xC6,  // ..u.~~..
                /* 01B8 */  0xE0, 0xF9, 0xF8, 0x2E, 0xC0, 0x35, 0x40, 0x68,  // .....5@h
                /* 01C0 */  0x46, 0x86, 0xB7, 0x1A, 0x40, 0x0A, 0xC6, 0x4F,  // F...@..O
                /* 01C8 */  0x02, 0x8F, 0x00, 0x26, 0xB0, 0xAE, 0x03, 0x01,  // ...&....
                /* 01D0 */  0xF4, 0xCB, 0x86, 0x87, 0xEF, 0x13, 0xC6, 0xE3,  // ........
                /* 01D8 */  0x45, 0x82, 0xFA, 0xEE, 0x03, 0xA0, 0x00, 0xF2,  // E.......
                /* 01E0 */  0x01, 0xC0, 0x4A, 0xEF, 0x00, 0x74, 0x0C, 0x21,  // ..J..t.!
                /* 01E8 */  0xC2, 0x44, 0x33, 0x3A, 0x97, 0xB0, 0x52, 0xFD,  // .D3:..R.
                /* 01F0 */  0xFF, 0x47, 0xCB, 0x0F, 0x2A, 0x1E, 0xAD, 0x41,  // .G..*..A
                /* 01F8 */  0x3C, 0x5A, 0x07, 0x1A, 0x2D, 0xFA, 0x98, 0x61,  // <Z..-..a
                /* 0200 */  0x85, 0xA3, 0x92, 0xCF, 0x09, 0x68, 0xB8, 0x30,  // .....h.0
                /* 0208 */  0x08, 0x0A, 0x3F, 0x70, 0x40, 0x03, 0x3C, 0xBD,  // ..?p@.<.
                /* 0210 */  0x37, 0x03, 0xCF, 0xC4, 0x70, 0x9E, 0x2F, 0x87,  // 7...p./.
                /* 0218 */  0xF3, 0x7C, 0xF9, 0x70, 0x7C, 0xA0, 0x80, 0x3F,  // .|.p|..?
                /* 0220 */  0x60, 0x2C, 0x41, 0x81, 0x13, 0x06, 0x39, 0x3C,  // `,A...9<
                /* 0228 */  0x46, 0xF0, 0x60, 0xA9, 0xAC, 0x71, 0xA1, 0xEE,  // F.`..q..
                /* 0230 */  0x07, 0x3E, 0xD1, 0x30, 0xEC, 0x43, 0x3D, 0x9A,  // .>.0.C=.
                /* 0238 */  0xB7, 0x84, 0x33, 0x7C, 0x9B, 0x38, 0xA8, 0x77,  // ..3|.8.w
                /* 0240 */  0x0F, 0x3B, 0x15, 0x6A, 0xD1, 0x21, 0xAC, 0x47,  // .;.j.!.G
                /* 0248 */  0xCA, 0x61, 0x8D, 0x16, 0xF6, 0x80, 0x9F, 0x3B,  // .a.....;
                /* 0250 */  0x7C, 0xCF, 0xE0, 0x57, 0x1A, 0x1F, 0x43, 0xE8,  // |..W..C.
                /* 0258 */  0x2A, 0x74, 0xAA, 0xE0, 0xA2, 0x20, 0x14, 0x6F,  // *t... .o
                /* 0260 */  0x2D, 0x1A, 0xFE, 0x59, 0x78, 0x5C, 0xAF, 0x18,  // -..Yx\..
                /* 0268 */  0xBE, 0x02, 0x3C, 0x9C, 0xF8, 0x0C, 0x10, 0x3F,  // ..<....?
                /* 0270 */  0xD0, 0x11, 0xBC, 0x88, 0xF8, 0xEC, 0xE3, 0xCB,  // ........
                /* 0278 */  0x8B, 0x0F, 0x19, 0xEC, 0x64, 0xC1, 0x43, 0x50,  // ....d.CP
                /* 0280 */  0x28, 0xC6, 0xE1, 0x00, 0x25, 0x1C, 0x46, 0x70,  // (...%.Fp
                /* 0288 */  0x06, 0xF1, 0xF0, 0x1C, 0xE4, 0x70, 0x80, 0x3E,  // .....p.>
                /* 0290 */  0x07, 0x79, 0x20, 0x6C, 0x10, 0x06, 0x39, 0x8F,  // .y l..9.
                /* 0298 */  0x97, 0x1F, 0x76, 0xB1, 0xC0, 0xFF, 0xFF, 0x2F,  // ..v..../
                /* 02A0 */  0x16, 0xC0, 0x2B, 0xCD, 0xA0, 0xD0, 0x7A, 0x06,  // ..+...z.
                /* 02A8 */  0x05, 0x01, 0xE3, 0xF9, 0xC1, 0xE3, 0xF5, 0x6C,  // .......l
                /* 02B0 */  0x3D, 0x2D, 0xF0, 0x8E, 0xD8, 0xE7, 0x0F, 0xE0,  // =-......
                /* 02B8 */  0x1C, 0xFE, 0xF0, 0x82, 0x8A, 0x3B, 0x24, 0x0A,  // .....;$.
                /* 02C0 */  0xE2, 0xB3, 0x81, 0xA3, 0x8C, 0x17, 0x3D, 0x13,  // ......=.
                /* 02C8 */  0x1F, 0x86, 0x7C, 0x5C, 0x78, 0xBA, 0xC1, 0x1C,  // ..|\x...
                /* 02D0 */  0x3E, 0xC0, 0x3D, 0x12, 0x1F, 0x3E, 0x80, 0xC7,  // >.=..>..
                /* 02D8 */  0xFF, 0xFF, 0xF0, 0x01, 0xFC, 0x24, 0x5A, 0xD4,  // .....$Z.
                /* 02E0 */  0x2A, 0xF4, 0xF0, 0x01, 0xAE, 0x20, 0x27, 0x24,  // *.... '$
                /* 02E8 */  0xB4, 0x9C, 0xC3, 0x07, 0x72, 0x22, 0x61, 0xA2,  // ....r"a.
                /* 02F0 */  0xFB, 0x8C, 0xF4, 0xE2, 0x61, 0x09, 0x07, 0x0F,  // ....a...
                /* 02F8 */  0x54, 0x78, 0x12, 0xC5, 0x3F, 0x15, 0xA0, 0x02,  // Tx..?...
                /* 0300 */  0x9F, 0x0A, 0x28, 0x88, 0x01, 0x7D, 0xA8, 0x80,  // ..(..}..
                /* 0308 */  0x33, 0x83, 0x67, 0x2F, 0xCC, 0x3C, 0x60, 0x9C,  // 3.g/.<`.
                /* 0310 */  0x91, 0x00, 0x5B, 0x87, 0x0A, 0xF0, 0xFE, 0xFF,  // ..[.....
                /* 0318 */  0x0F, 0x15, 0xC0, 0xE1, 0x80, 0x04, 0xC8, 0x92,  // ........
                /* 0320 */  0x78, 0x41, 0x7A, 0xA8, 0x00, 0xD7, 0x81, 0xD3,  // xAz.....
                /* 0328 */  0x87, 0x0A, 0x7E, 0x92, 0xB3, 0x28, 0x20, 0x1D,  // ..~..( .
                /* 0330 */  0xF1, 0x7C, 0xA8, 0x80, 0x71, 0x11, 0x32, 0xFC,  // .|..q.2.
                /* 0338 */  0x2F, 0xDD, 0xB1, 0x3C, 0x87, 0x91, 0x73, 0x05,  // /..<..s.
                /* 0340 */  0x3A, 0xF6, 0xC1, 0x00, 0x15, 0x74, 0xF4, 0x14,  // :....t..
                /* 0348 */  0xC4, 0x80, 0x4E, 0x71, 0x30, 0x40, 0xEB, 0x38,  // ..Nq0@.8
                /* 0350 */  0x57, 0xA0, 0x8E, 0x71, 0xC0, 0xEF, 0xFF, 0x7F,  // W..q....
                /* 0358 */  0xA6, 0x00, 0x4E, 0x22, 0x8E, 0x56, 0xA8, 0xE1,  // ..N".V..
                /* 0360 */  0x7A, 0xAC, 0x06, 0xF1, 0x58, 0x7D, 0x0C, 0xF5,  // z...X}..
                /* 0368 */  0x58, 0x71, 0xDF, 0x00, 0x1F, 0x01, 0xF0, 0x47,  // Xq.....G
                /* 0370 */  0x27, 0x1C, 0xD8, 0x73, 0x05, 0x60, 0xDA, 0xE3,  // '..s.`..
                /* 0378 */  0xB9, 0x02, 0x74, 0xD2, 0xCE, 0x3E, 0xE8, 0x80,  // ..t..>..
                /* 0380 */  0x6B, 0xD5, 0x49, 0x0C, 0x7F, 0x8E, 0x63, 0x04,  // k.I...c.
                /* 0388 */  0x43, 0x1D, 0xDE, 0x28, 0x84, 0xE3, 0x50, 0x28,  // C..(..P(
                /* 0390 */  0xCC, 0xC9, 0x80, 0xFE, 0xFF, 0x8F, 0xB0, 0x04,  // ........
                /* 0398 */  0x8E, 0x82, 0x78, 0x68, 0x0E, 0x73, 0x86, 0x03,  // ..xh.s..
                /* 03A0 */  0xCD, 0xB1, 0x00, 0xDE, 0xAD, 0x82, 0x1D, 0x0B,  // ........
                /* 03A8 */  0x60, 0x13, 0xF8, 0x58, 0x00, 0xBE, 0x38, 0xC3,  // `..X..8.
                /* 03B0 */  0x42, 0x8F, 0xD6, 0xF7, 0x3F, 0xDC, 0xFD, 0x21,  // B...?..!
                /* 03B8 */  0xCA, 0x4B, 0xB1, 0x0F, 0x39, 0x70, 0xC7, 0x05,  // .K..9p..
                /* 03C0 */  0x8E, 0xD3, 0x03, 0xE0, 0xEA, 0x20, 0x26, 0xA7,  // ..... &.
                /* 03C8 */  0xA7, 0x07, 0x70, 0x25, 0x39, 0x3D, 0xA0, 0x06,  // ..p%9=..
                /* 03D0 */  0xEC, 0xFF, 0xBF, 0x1E, 0x20, 0x9D, 0x13, 0xB0,  // .... ...
                /* 03D8 */  0x17, 0x6D, 0x06, 0x71, 0xA2, 0xCF, 0x23, 0x56,  // .m.q..#V
                /* 03E0 */  0x70, 0xC4, 0x41, 0x65, 0x27, 0x51, 0xF2, 0x23,  // p.Ae'Q.#
                /* 03E8 */  0x0E, 0x2A, 0xEB, 0xD8, 0x29, 0x88, 0x01, 0x7D,  // .*..)..}
                /* 03F0 */  0xA2, 0x04, 0x7C, 0xDC, 0x71, 0x80, 0xC5, 0x46,  // ..|.q..F
                /* 03F8 */  0x3D, 0x59, 0x1E, 0x79, 0xB2, 0x14, 0xC4, 0x93,  // =Y.y....
                /* 0400 */  0xF5, 0xA5, 0x02, 0x38, 0xDC, 0x70, 0x80, 0xFD,  // ...8.p..
                /* 0408 */  0xFF, 0xFF, 0x52, 0x01, 0x94, 0x1C, 0x4A, 0xBD,  // ..R...J.
                /* 0410 */  0x54, 0x80, 0x4C, 0xDE, 0x0D, 0x07, 0x1D, 0x72,  // T.L....r
                /* 0418 */  0xAD, 0xBA, 0xD7, 0xB1, 0x63, 0xAB, 0xC7, 0xED,  // ....c...
                /* 0420 */  0x9B, 0x34, 0x26, 0xD8, 0x0D, 0x07, 0x15, 0x89,  // .4&.....
                /* 0428 */  0x42, 0x81, 0xCE, 0x05, 0xA8, 0x08, 0x70, 0x14,  // B.....p.
                /* 0430 */  0xC4, 0x43, 0xF3, 0xB9, 0xC0, 0x4A, 0xCE, 0x05,  // .C...J..
                /* 0438 */  0x68, 0xEF, 0x17, 0x0A, 0x32, 0x38, 0xDF, 0x0B,  // h...28..
                /* 0440 */  0x0C, 0x53, 0xFC, 0x50, 0x74, 0xEF, 0xF1, 0xB9,  // .S.Pt...
                /* 0448 */  0x00, 0xDC, 0x57, 0x1C, 0x70, 0x19, 0x13, 0xA0,  // ..W.p...
                /* 0450 */  0x0D, 0x92, 0xDC, 0xC3, 0x3D, 0x2E, 0xDC, 0x38,  // ....=..8
                /* 0458 */  0x3C, 0xAA, 0x63, 0x8A, 0xF9, 0x1C, 0x17, 0xE4,  // <.c.....
                /* 0460 */  0x39, 0xCE, 0xF3, 0xC2, 0x9D, 0x1F, 0x80, 0xDB,  // 9.......
                /* 0468 */  0xFF, 0x7F, 0x60, 0xB0, 0x2E, 0x5C, 0x40, 0x5C,  // ..`..\@\
                /* 0470 */  0xA8, 0x49, 0x89, 0xE7, 0x07, 0x70, 0xDD, 0xBA,  // .I...p..
                /* 0478 */  0x7D, 0x2F, 0xC4, 0x49, 0xB9, 0xBB, 0xA2, 0x30,  // }/.I...0
                /* 0480 */  0x5E, 0x49, 0x62, 0xF8, 0x9E, 0x6A, 0x6C, 0xC3,  // ^Ib..jl.
                /* 0488 */  0x1C, 0xC0, 0xA9, 0x18, 0x27, 0xC1, 0xE0, 0x67,  // ....'..g
                /* 0490 */  0x07, 0x3A, 0x2E, 0x47, 0x26, 0xD1, 0x6D, 0xDF,  // .:.G&.m.
                /* 0498 */  0x47, 0x08, 0x1E, 0x73, 0xF4, 0x14, 0xC4, 0x80,  // G..s....
                /* 04A0 */  0xCE, 0x70, 0x52, 0x41, 0xAB, 0x00, 0xD1, 0x14,  // .pRA....
                /* 04A8 */  0x30, 0x37, 0x57, 0xC0, 0xDF, 0xFF, 0xFF, 0xE6,  // 07W.....
                /* 04B0 */  0x0A, 0xB0, 0xC2, 0xA5, 0x42, 0x8D, 0x52, 0x8F,  // ....B.R.
                /* 04B8 */  0x14, 0xE0, 0xBA, 0x03, 0xFA, 0x16, 0x86, 0x93,  // ........
                /* 04C0 */  0x04, 0xA4, 0x2B, 0xEB, 0x69, 0x3C, 0x00, 0xF8,  // ..+.i<..
                /* 04C8 */  0x4A, 0x01, 0xE3, 0xE2, 0xC9, 0x8E, 0x38, 0xFC,  // J.....8.
                /* 04D0 */  0x76, 0xED, 0x63, 0x01, 0x30, 0xFF, 0xFF, 0x5F,  // v.c.0.._
                /* 04D8 */  0x09, 0xC1, 0x7A, 0x2C, 0x00, 0xDE, 0x22, 0x5D,  // ..z,.."]
                /* 04E0 */  0x5A, 0x34, 0x7B, 0x3F, 0x06, 0xD9, 0xB1, 0x00,  // Z4{?....
                /* 04E8 */  0x2D, 0x0A, 0x48, 0x1E, 0x67, 0x41, 0x86, 0xF6,  // -.H.gA..
                /* 04F0 */  0x58, 0xF6, 0xAA, 0xE7, 0x51, 0x3D, 0x03, 0x44,  // X...Q=.D
                /* 04F8 */  0x38, 0x91, 0x10, 0x09, 0x2C, 0xE3, 0x58, 0x80,  // 8...,.X.
                /* 0500 */  0xA2, 0xF0, 0x25, 0x1E, 0xEE, 0xCD, 0x13, 0xCE,  // ..%.....
                /* 0508 */  0x1C, 0x30, 0x53, 0x7E, 0x71, 0xE1, 0xE7, 0x02,  // .0S~q...
                /* 0510 */  0xC0, 0xCE, 0xFF, 0xFF, 0x5C, 0x00, 0x4C, 0x94,  // ....\.L.
                /* 0518 */  0x2A, 0xB5, 0x28, 0xF3, 0x7E, 0x0B, 0xDE, 0x01,  // *.(.~...
                /* 0520 */  0xFB, 0x7E, 0xEB, 0x73, 0x01, 0x53, 0x38, 0x0B,  // .~.s.S8.
                /* 0528 */  0x21, 0x04, 0xE9, 0xF3, 0x08, 0xA0, 0x13, 0x80,  // !.......
                /* 0530 */  0xCF, 0x05, 0xEC, 0xB0, 0xE6, 0x73, 0x01, 0x3F,  // .....s.?
                /* 0538 */  0x8C, 0x38, 0xCA, 0x79, 0x0D, 0x25, 0x1E, 0x8E,  // .8.y.%..
                /* 0540 */  0x82, 0xF8, 0x82, 0x0B, 0xEF, 0x5C, 0x00, 0x38,  // .....\.8
                /* 0548 */  0x18, 0x96, 0x81, 0xF9, 0xB0, 0xF8, 0x5C, 0xE1,  // ......\.
                /* 0550 */  0x1C, 0x85, 0x80, 0xDF, 0x55, 0xE1, 0xC9, 0xD2,  // ....U...
                /* 0558 */  0xE3, 0xF2, 0xFF, 0xFF, 0x30, 0xF7, 0xEC, 0x08,  // ....0...
                /* 0560 */  0xE4, 0x7D, 0x2A, 0xF4, 0x78, 0x7A, 0x00, 0x57,  // .}*.xz.W
                /* 0568 */  0x8E, 0xD3, 0x03, 0x5A, 0x0D, 0x90, 0x26, 0xF4,  // ...Z..&.
                /* 0570 */  0xF4, 0x00, 0x33, 0xFF, 0x51, 0x0D, 0x95, 0xFC,  // ..3.Q...
                /* 0578 */  0x7E, 0x0B, 0x8A, 0x73, 0x01, 0x38, 0x2E, 0x6B,  // ~..s.8.k
                /* 0580 */  0xC0, 0xEC, 0x56, 0x80, 0xBD, 0xAC, 0x01, 0x8B,  // ..V.....
                /* 0588 */  0x0B, 0x0E, 0xFC, 0xFF, 0xFF, 0xCD, 0x03, 0xF8,  // ........
                /* 0590 */  0x5D, 0x6F, 0x01, 0x59, 0x77, 0x8A, 0xD7, 0x5B,  // ]o.Yw..[
                /* 0598 */  0x90, 0x49, 0x5B, 0x85, 0xEE, 0x93, 0xB8, 0x80,  // .I[.....
                /* 05A0 */  0x6B, 0xD1, 0x05, 0x07, 0x0F, 0xFF, 0x80, 0xCB,  // k.......
                /* 05A8 */  0x75, 0x5E, 0x99, 0xC9, 0x21, 0xC0, 0x71, 0x4E,  // u^..!.qN
                /* 05B0 */  0xE1, 0xA8, 0x20, 0x14, 0x8A, 0x7D, 0x32, 0x40,  // .. ..}2@
                /* 05B8 */  0x05, 0x1D, 0x3D, 0x05, 0x31, 0xA0, 0x53, 0x5C,  // ..=.1.S\
                /* 05C0 */  0x5D, 0xD1, 0x3A, 0x6E, 0x5C, 0x9E, 0x82, 0x06,  // ].:n\...
                /* 05C8 */  0x71, 0x46, 0x67, 0xE5, 0x43, 0x05, 0xF8, 0xFF,  // qFg.C...
                /* 05D0 */  0xFF, 0xB7, 0x56, 0x30, 0x1D, 0x2A, 0x80, 0xC5,  // ..V0.*..
                /* 05D8 */  0xE5, 0x18, 0xEE, 0xA1, 0x02, 0xF0, 0x12, 0xE9,  // ........
                /* 05E0 */  0xDA, 0x82, 0xFE, 0x2C, 0xF8, 0xA2, 0x00, 0x7B,  // ...,...{
                /* 05E8 */  0x64, 0x60, 0x3F, 0x2E, 0xF8, 0x82, 0x04, 0x3C,  // d`?....<
                /* 05F0 */  0xFF, 0xFF, 0xA7, 0x0F, 0xF0, 0xEB, 0xBC, 0x20,  // ....... 
                /* 05F8 */  0x81, 0x4E, 0xDB, 0xE9, 0x03, 0x9D, 0xF0, 0x82,  // .N......
                /* 0600 */  0x84, 0x18, 0x55, 0xC8, 0x23, 0x31, 0xF0, 0x91,  // ..U.#1..
                /* 0608 */  0x3D, 0x17, 0x1A, 0xE1, 0xDD, 0xFC, 0x71, 0xC1,  // =.....q.
                /* 0610 */  0xE8, 0x26, 0x98, 0xE7, 0xF4, 0x81, 0x4A, 0x42,  // .&....JB
                /* 0618 */  0xA1, 0x24, 0x47, 0x08, 0x94, 0xF6, 0x23, 0x04,  // .$G...#.
                /* 0620 */  0x05, 0xF1, 0x75, 0x9D, 0x1F, 0x0E, 0xF0, 0x43,  // ..u....C
                /* 0628 */  0x7E, 0x1C, 0x78, 0x85, 0xF0, 0xA0, 0xD8, 0x44,  // ~.x....D
                /* 0630 */  0x60, 0xDC, 0x92, 0x80, 0xE7, 0x1D, 0xD5, 0xE3,  // `.......
                /* 0638 */  0xC2, 0x0D, 0xC6, 0xC7, 0x87, 0xB3, 0x3A, 0xA5,  // ......:.
                /* 0640 */  0xA3, 0x02, 0x1E, 0x53, 0xF6, 0xA8, 0xC0, 0xF4,  // ...S....
                /* 0648 */  0xFF, 0xBF, 0x4A, 0x01, 0x26, 0x6F, 0x1F, 0xE0,  // ..J.&o..
                /* 0650 */  0xB8, 0x4A, 0x01, 0x1E, 0xBC, 0x0A, 0x35, 0x78,  // .J....5x
                /* 0658 */  0x95, 0x02, 0x99, 0xB2, 0xDB, 0x07, 0x8A, 0xC3,  // ........
                /* 0660 */  0xF9, 0x6E, 0x1F, 0x08, 0xAB, 0x87, 0x7D, 0x72,  // .n....}r
                /* 0668 */  0x02, 0x78, 0x7F, 0x80, 0x71, 0xF9, 0x00, 0xCB,  // .x..q...
                /* 0670 */  0xFF, 0xFF, 0xF2, 0x01, 0xF0, 0xFF, 0xFF, 0x7F,  // ........
                /* 0678 */  0xF9, 0x00, 0x4C, 0x59, 0xBD, 0x7C, 0x80, 0x4C,  // ..LY.|.L
                /* 0680 */  0xE0, 0xE5, 0x03, 0x35, 0x52, 0xC7, 0x3C, 0x17,  // ...5R.<.
                /* 0688 */  0x22, 0x86, 0x16, 0xE3, 0x09, 0xE1, 0xF5, 0xA1,  // ".......
                /* 0690 */  0x63, 0x01, 0xE6, 0x8F, 0x86, 0x00, 0x05, 0xFE,  // c.......
                /* 0698 */  0xFF, 0x47, 0x43, 0x80, 0xE7, 0x62, 0x0F, 0x20,  // .GC..b. 
                /* 06A0 */  0xD0, 0xFE, 0xFF, 0x07, 0x10, 0x78, 0xC2, 0x8E,  // .....x..
                /* 06A8 */  0x86, 0xE8, 0x78, 0x6B, 0x11, 0xF0, 0xB3, 0xD0,  // ..xk....
                /* 06B0 */  0xFB, 0x07, 0x9C, 0x63, 0xC8, 0xEB, 0x82, 0x07,  // ...c....
                /* 06B8 */  0xFF, 0x0C, 0xE0, 0x30, 0xA7, 0x0F, 0x54, 0x8C,  // ...0..T.
                /* 06C0 */  0xD3, 0x07, 0xA0, 0x3B, 0xCE, 0xE9, 0x03, 0x15,  // ...;....
                /* 06C8 */  0xE0, 0xF4, 0x41, 0x41, 0x7C, 0xFA, 0x00, 0xDC,  // ..AA|...
                /* 06D0 */  0xFC, 0xFF, 0x03, 0x0D, 0x05, 0x35, 0x2C, 0x8F,  // .....5,.
                /* 06D8 */  0xC3, 0x47, 0x05, 0xFC, 0x41, 0x01, 0x77, 0xF8,  // .G..A.w.
                /* 06E0 */  0x00, 0x7E, 0x8A, 0x4F, 0x11, 0xE4, 0xBE, 0xE0,  // .~.O....
                /* 06E8 */  0x23, 0x83, 0x0F, 0x1F, 0xC0, 0xDC, 0xEC, 0xE1,  // #.......
                /* 06F0 */  0x03, 0x74, 0xE2, 0x0E, 0x1F, 0x28, 0x51, 0x10,  // .t...(Q.
                /* 06F8 */  0x8A, 0x78, 0x98, 0x82, 0x7E, 0xB8, 0xF3, 0xF1,  // .x..~...
                /* 0700 */  0xD0, 0xC7, 0x07, 0x72, 0x94, 0x02, 0xEA, 0xFF,  // ...r....
                /* 0708 */  0xFF, 0xA3, 0x14, 0xC0, 0xA3, 0x9B, 0x02, 0xFC,  // ........
                /* 0710 */  0xA3, 0x14, 0xE0, 0xE5, 0xFF, 0x7F, 0xFC, 0x00,  // ........
                /* 0718 */  0x3E, 0x82, 0x8F, 0x52, 0xA0, 0x3E, 0x7E, 0xF8,  // >..R.>~.
                /* 0720 */  0x28, 0xE5, 0x6B, 0x2E, 0x3B, 0x7E, 0x80, 0x21,  // (.k.;~.!
                /* 0728 */  0xCA, 0xF1, 0x03, 0x15, 0x82, 0x42, 0x21, 0xCE,  // .....B!.
                /* 0730 */  0x10, 0x28, 0xD9, 0x67, 0x08, 0x0A, 0xE2, 0xE1,  // .(.g....
                /* 0738 */  0xF9, 0xF8, 0x01, 0x98, 0x38, 0x0B, 0xC3, 0x19,  // ....8...
                /* 0740 */  0x2B, 0xFC, 0x63, 0x2E, 0x30, 0xFB, 0xFF, 0x1F,  // +.c.0...
                /* 0748 */  0x73, 0x01, 0xFE, 0x19, 0x3E, 0x7C, 0x80, 0x2E,  // s...>|..
                /* 0750 */  0xD4, 0x3A, 0x74, 0xF8, 0xC0, 0x49, 0x3B, 0x7C,  // .:t..I;|
                /* 0758 */  0x20, 0x8E, 0x0F, 0x30, 0x90, 0x9E, 0xCF, 0xB0,  //  ..0....
                /* 0760 */  0x32, 0x0E, 0x1F, 0x28, 0x0A, 0x42, 0xA3, 0xFF,  // 2..(.B..
                /* 0768 */  0xFF, 0xD1, 0x80, 0x47, 0x3E, 0x1A, 0x50, 0x10,  // ...G>.P.
                /* 0770 */  0xB3, 0x39, 0xCF, 0xCD, 0x02, 0xAD, 0xE8, 0x0C,  // .9......
                /* 0778 */  0x8A, 0x9C, 0x08, 0xBC, 0x53, 0x3B, 0xF0, 0x3C,  // ....S;.<
                /* 0780 */  0x5A, 0x00, 0x16, 0xCF, 0x53, 0xE0, 0x3C, 0x5A,  // Z...S.<Z
                /* 0788 */  0x00, 0x9F, 0xFF, 0xFF, 0xD1, 0x02, 0x3C, 0x1E,  // ......<.
                /* 0790 */  0x7D, 0x2A, 0x3C, 0x5A, 0x80, 0xEC, 0xCC, 0xE9,  // }*<Z....
                /* 0798 */  0xA3, 0x05, 0x1F, 0xB0, 0x45, 0x01, 0x69, 0x62,  // ....E.ib
                /* 07A0 */  0x07, 0xF1, 0xA4, 0x13, 0xF1, 0x7C, 0x83, 0xD6,  // .....|..
                /* 07A8 */  0x8C, 0xA2, 0x71, 0x86, 0x0F, 0xFD, 0x2C, 0x99,  // ..q...,.
                /* 07B0 */  0xC0, 0x32, 0x0E, 0x47, 0x14, 0xC2, 0x14, 0x3E,  // .2.G...>
                /* 07B8 */  0x17, 0x00, 0xFF, 0xE3, 0x3B, 0x3F, 0x17, 0x00,  // ....;?..
                /* 07C0 */  0x8E, 0xA4, 0x6A, 0x94, 0x28, 0xF3, 0x5C, 0x00,  // ..j.(.\.
                /* 07C8 */  0xAE, 0x0C, 0x27, 0x18, 0xD4, 0xFF, 0x1F, 0xD6,  // ..'.....
                /* 07D0 */  0x4A, 0x4E, 0x30, 0x08, 0x8D, 0xB7, 0x02, 0x1D,  // JN0.....
                /* 07D8 */  0x0A, 0x9E, 0x61, 0x30, 0x04, 0xD3, 0x1F, 0x0B,  // ..a0....
                /* 07E0 */  0xE8, 0xA0, 0x9C, 0x9B, 0x44, 0xB9, 0x8F, 0x05,  // ....D...
                /* 07E8 */  0xA8, 0xA4, 0xC7, 0x02, 0x0A, 0xE2, 0xC3, 0x32,  // .......2
                /* 07F0 */  0x81, 0x90, 0x91, 0x63, 0x01, 0xEA, 0x30, 0xE6,  // ...c..0.
                /* 07F8 */  0x61, 0x30, 0xAD, 0xC3, 0xD0, 0x98, 0x0E, 0xFE,  // a0......
                /* 0800 */  0xAD, 0xC0, 0xD7, 0x85, 0x27, 0x17, 0xF0, 0x8E,  // ....'...
                /* 0808 */  0xD4, 0x87, 0x02, 0x70, 0x88, 0xBB, 0xB8, 0x00,  // ...p....
                /* 0810 */  0x54, 0xF9, 0xFF, 0xDF, 0x28, 0x80, 0x89, 0xC2,  // T...(...
                /* 0818 */  0x1F, 0xC5, 0x8B, 0x0B, 0xC8, 0x04, 0x5D, 0xE4,  // ......].
                /* 0820 */  0xD1, 0xB1, 0x6E, 0x14, 0x88, 0x83, 0x54, 0xE8,  // ..n...T.
                /* 0828 */  0x18, 0x47, 0x72, 0x1C, 0x91, 0x9F, 0x5D, 0xB0,  // .Gr...].
                /* 0830 */  0x04, 0xBE, 0x2A, 0xFA, 0x52, 0xC1, 0xE5, 0x53,  // ..*.R..S
                /* 0838 */  0x48, 0xFE, 0x0D, 0x0B, 0x25, 0xF8, 0x6E, 0x41,  // H...%.nA
                /* 0840 */  0x41, 0x3C, 0x3A, 0x27, 0xB9, 0x61, 0xA1, 0xB5,  // A<:'.a..
                /* 0848 */  0x80, 0x68, 0x1E, 0x38, 0x9D, 0xD3, 0xD0, 0xB4,  // .h.8....
                /* 0850 */  0x7C, 0xBD, 0x02, 0xA6, 0x21, 0x6E, 0x0F, 0x68,  // |...!n.h
                /* 0858 */  0x19, 0x20, 0xBA, 0x77, 0xE0, 0xAE, 0x8A, 0xC0,  // . .w....
                /* 0860 */  0xEC, 0xE8, 0x80, 0x3D, 0x78, 0xF0, 0xFF, 0xFF,  // ...=x...
                /* 0868 */  0x55, 0x11, 0x60, 0xDA, 0xCD, 0x48, 0x57, 0x45,  // U.`..HWE
                /* 0870 */  0xB0, 0x5D, 0xC0, 0x50, 0x57, 0x45, 0x02, 0xA4,  // .].PWE..
                /* 0878 */  0x9B, 0x11, 0xE6, 0xEA, 0x1A, 0xE4, 0x11, 0xC0,  // ........
                /* 0880 */  0x07, 0xC2, 0xE3, 0x0A, 0xF5, 0x74, 0xE4, 0xC9,  // .....t..
                /* 0888 */  0xBC, 0x04, 0xF0, 0x3B, 0x18, 0xB8, 0xFE, 0xFF,  // ...;....
                /* 0890 */  0x77, 0x30, 0x80, 0x11, 0x36, 0x8F, 0x38, 0x40,  // w0..6.8@
                /* 0898 */  0xE4, 0x7C, 0x63, 0xED, 0x23, 0xD1, 0xD9, 0x20,  // .|c.#.. 
                /* 08A0 */  0xC8, 0x23, 0x80, 0xC1, 0x7D, 0x0B, 0xF0, 0x10,  // .#..}...
                /* 08A8 */  0x1E, 0x71, 0x80, 0xC3, 0x3C, 0x70, 0x47, 0x1C,  // .q..<pG.
                /* 08B0 */  0x30, 0xFF, 0xFF, 0x8F, 0x38, 0x00, 0xFF, 0xFF,  // 0...8...
                /* 08B8 */  0xFF, 0x07, 0x0F, 0x30, 0xCA, 0x94, 0xEA, 0x50,  // ...0...P
                /* 08C0 */  0xE2, 0xC1, 0x03, 0x5C, 0x12, 0x25, 0x5C, 0x59,  // ...\.%\Y
                /* 08C8 */  0xB1, 0x41, 0x57, 0xA2, 0xD3, 0xF3, 0x23, 0x0E,  // .AW...#.
                /* 08D0 */  0x87, 0x3D, 0xB0, 0x97, 0x0E, 0x1F, 0x31, 0x7C,  // .=....1|
                /* 08D8 */  0xC6, 0x49, 0xE0, 0x68, 0x80, 0x3A, 0x76, 0xF0,  // .I.h.:v.
                /* 08E0 */  0x50, 0x30, 0x8A, 0x7D, 0x2E, 0x40, 0x05, 0x3D,  // P0.}.@.=
                /* 08E8 */  0x17, 0x50, 0x10, 0x03, 0x3A, 0xC5, 0x65, 0x12,  // .P..:.e.
                /* 08F0 */  0x3D, 0x64, 0xCF, 0x82, 0x4D, 0xF5, 0x1C, 0x4E,  // =d..M..N
                /* 08F8 */  0xEA, 0x61, 0x12, 0xF0, 0x15, 0x6E, 0x95, 0x1A,  // .a...n..
                /* 0900 */  0x2B, 0x8F, 0x73, 0x70, 0xA1, 0x20, 0xB6, 0x70,  // +.sp. .p
                /* 0908 */  0xA4, 0x00, 0x62, 0xFF, 0xFF, 0xC3, 0x24, 0x30,  // ..b...$0
                /* 0910 */  0x08, 0x72, 0xAE, 0x41, 0x5F, 0x59, 0x7C, 0xA6,  // .r.A_Y|.
                /* 0918 */  0xC2, 0x1D, 0x3B, 0x80, 0xDF, 0xB1, 0x06, 0x3B,  // ..;....;
                /* 0920 */  0x74, 0x58, 0xD7, 0x69, 0x7B, 0xC7, 0x10, 0xE6,  // tX.i{...
                /* 0928 */  0x53, 0x86, 0x8F, 0x90, 0x6C, 0x58, 0xE0, 0x86,  // S...lX..
                /* 0930 */  0xF2, 0xD0, 0xC1, 0x17, 0x65, 0xE8, 0x68, 0x68,  // ....e.hh
                /* 0938 */  0xA3, 0xBE, 0x1F, 0xF8, 0x62, 0x11, 0xF5, 0xF9,  // ....b...
                /* 0940 */  0xC3, 0xA3, 0x02, 0xFB, 0x4F, 0x44, 0x63, 0x07,  // ....ODc.
                /* 0948 */  0xE1, 0x09, 0xE6, 0xFF, 0xFF, 0x04, 0x03, 0xAC,  // ........
                /* 0950 */  0x75, 0x1A, 0xD4, 0xE8, 0xF1, 0x04, 0x03, 0x2E,  // u.......
                /* 0958 */  0x51, 0x27, 0x18, 0xF4, 0xC9, 0xC5, 0x67, 0x3E,  // Q'....g>
                /* 0960 */  0xCC, 0x09, 0x06, 0x46, 0x98, 0x13, 0x0C, 0x2A,  // ...F...*
                /* 0968 */  0x06, 0x8C, 0x62, 0x1C, 0x43, 0x50, 0xC2, 0x8F,  // ..b.CP..
                /* 0970 */  0x21, 0x14, 0xC4, 0xC7, 0x10, 0x9F, 0x60, 0x00,  // !.....`.
                /* 0978 */  0x13, 0x19, 0x2E, 0x0E, 0x68, 0x15, 0x57, 0x10,  // ....h.W.
                /* 0980 */  0xE4, 0x25, 0x0C, 0x58, 0xFD, 0xFF, 0x6F, 0x0D,  // .%.X..o.
                /* 0988 */  0x30, 0x72, 0x1C, 0x40, 0xD0, 0x37, 0x74, 0x1F,  // 0r.@.7t.
                /* 0990 */  0x40, 0x60, 0xCC, 0x09, 0xAC, 0x87, 0x02, 0x1F,  // @`......
                /* 0998 */  0xD4, 0xC0, 0x76, 0x8A, 0xF7, 0xED, 0x03, 0xFE,  // ..v.....
                /* 09A0 */  0x98, 0xC0, 0x8A, 0xE4, 0x69, 0x83, 0xED, 0x2C,  // ....i..,
                /* 09A8 */  0x07, 0x58, 0x3C, 0xBA, 0x60, 0xFF, 0xFF, 0x67,  // .X<.`..g
                /* 09B0 */  0x39, 0xC0, 0xCE, 0xD1, 0x45, 0x67, 0x39, 0x90,  // 9...Eg9.
                /* 09B8 */  0xE9, 0xFF, 0x27, 0xE8, 0x4C, 0x8A, 0x53, 0x01,  // ..'.L.S.
                /* 09C0 */  0xA4, 0xB3, 0x1C, 0x1B, 0xC7, 0x4B, 0x8A, 0x87,  // .....K..
                /* 09C8 */  0xF9, 0x62, 0xE9, 0x7B, 0x0A, 0x1B, 0x5F, 0x9C,  // .b.{.._.
                /* 09D0 */  0xA7, 0x80, 0x17, 0xD0, 0x87, 0x00, 0x67, 0x7E,  // ......g~
                /* 09D8 */  0xB2, 0xE8, 0xF0, 0xC2, 0xD3, 0xC2, 0x48, 0xF9,  // ......H.
                /* 09E0 */  0x99, 0x14, 0xA5, 0xF5, 0x4C, 0x4A, 0x41, 0x3C,  // ....LJA<
                /* 09E8 */  0x3A, 0x1F, 0x5E, 0x00, 0x9B, 0xFF, 0xFF, 0xC3,  // :.^.....
                /* 09F0 */  0x0B, 0x30, 0xB8, 0x75, 0x00, 0x0B, 0xC9, 0xBF,  // .0.u....
                /* 09F8 */  0x0A, 0x5D, 0x06, 0xB8, 0x48, 0x18, 0x0D, 0xC9,  // .]..H...
                /* 0A00 */  0x20, 0x06, 0xF4, 0x85, 0x14, 0xF0, 0x72, 0xDD,  //  .....r.
                /* 0A08 */  0xF3, 0x95, 0x01, 0x7F, 0xF5, 0x61, 0xA7, 0x72,  // .....a.r
                /* 0A10 */  0xDF, 0x2C, 0x4C, 0xF0, 0xAC, 0xEC, 0x9B, 0x1C,  // .,L.....
                /* 0A18 */  0xB8, 0x0F, 0x0D, 0xE0, 0x1A, 0x14, 0xCC, 0x41,  // .......A
                /* 0A20 */  0x9C, 0x8B, 0xCF, 0x5D, 0x1E, 0x14, 0xFE, 0xFF,  // ...]....
                /* 0A28 */  0x7F, 0x7D, 0x01, 0xDF, 0xA0, 0xC0, 0x0F, 0x1B,  // .}......
                /* 0A30 */  0xF0, 0xDD, 0xE0, 0xC0, 0x81, 0xC5, 0xFD, 0xCC,  // ........
                /* 0A38 */  0x83, 0x02, 0x16, 0x03, 0x07, 0x16, 0x37, 0x10,  // ......7.
                /* 0A40 */  0x0F, 0x0A, 0x5C, 0x97, 0x46, 0x0F, 0x0A, 0x77,  // ..\.F..w
                /* 0A48 */  0xCC, 0xB0, 0x48, 0x40, 0xDD, 0x42, 0x9E, 0x4F,  // ..H@.B.O
                /* 0A50 */  0x4E, 0x1C, 0x33, 0x2A, 0xB0, 0x7B, 0x18, 0x15,  // N.3*.{..
                /* 0A58 */  0xF4, 0xFF, 0xFF, 0xA8, 0xC0, 0x35, 0x73, 0xCC,  // .....5s.
                /* 0A60 */  0xA8, 0xC0, 0x0E, 0xE3, 0x51, 0x81, 0xEB, 0x3E,  // ....Q..>
                /* 0A68 */  0x05, 0xBC, 0xB5, 0x3A, 0xBC, 0x59, 0x82, 0x4D,  // ...:.Y.M
                /* 0A70 */  0xEB, 0x7D, 0x0A, 0x9D, 0xF8, 0x61, 0xA1, 0x9B,  // .}...a..
                /* 0A78 */  0x25, 0xBB, 0x4F, 0xC1, 0xCE, 0x77, 0x9F, 0x42,  // %.O..w.B
                /* 0A80 */  0x25, 0x83, 0x51, 0xB2, 0x33, 0x0F, 0x2A, 0xCB,  // %.Q.3.*.
                /* 0A88 */  0x99, 0x87, 0x82, 0xD8, 0xC4, 0x7D, 0x0A, 0x28,  // .....}.(
                /* 0A90 */  0xFD, 0xFF, 0xEF, 0x53, 0x80, 0xBF, 0x41, 0xC3,  // ...S..A.
                /* 0A98 */  0x39, 0x11, 0xE1, 0x07, 0x0D, 0xD6, 0xAB, 0x03,  // 9.......
                /* 0AA0 */  0x1F, 0x34, 0x78, 0xA6, 0x04, 0xF3, 0xF8, 0x81,  // .4x.....
                /* 0AA8 */  0x99, 0x12, 0x58, 0x8F, 0x4C, 0xE0, 0x9B, 0x12,  // ..X.L...
                /* 0AB0 */  0x9C, 0xE3, 0x10, 0x7E, 0x4A, 0xFC, 0xFF, 0x3F,  // ...~J..?
                /* 0AB8 */  0x25, 0xB0, 0x5D, 0x98, 0xC0, 0x37, 0x25, 0x98,  // %.]..7%.
                /* 0AC0 */  0xA3, 0x06, 0xFF, 0x79, 0x09, 0x7C, 0x47, 0x58,  // ...y.|GX
                /* 0AC8 */  0x4F, 0x09, 0x77, 0xCB, 0xF5, 0x59, 0x08, 0xC6,  // O.w..Y..
                /* 0AD0 */  0x98, 0xC0, 0x7A, 0x5C, 0x02, 0xDF, 0x98, 0xE0,  // ..z\....
                /* 0AD8 */  0x0E, 0x1B, 0xFC, 0x87, 0x25, 0xF0, 0xFD, 0xFF,  // ....%...
                /* 0AE0 */  0x4F, 0xB9, 0x80, 0x45, 0x18, 0x9F, 0x72, 0x01,  // O..E..r.
                /* 0AE8 */  0x4F, 0xB7, 0x28, 0x9D, 0x72, 0x41, 0x96, 0x66,  // O.(.rA.f
                /* 0AF0 */  0x1D, 0x3A, 0xEF, 0xE3, 0x34, 0x01, 0x69, 0x64,  // .:..4.id
                /* 0AF8 */  0x27, 0x11, 0xF1, 0x5D, 0xBF, 0xEB, 0x79, 0xE9,  // '..]..y.
                /* 0B00 */  0xBC, 0xD4, 0x39, 0x82, 0x6E, 0x32, 0xEF, 0x00,  // ..9.n2..
                /* 0B08 */  0x86, 0xB6, 0x8A, 0x83, 0x3E, 0x1D, 0x95, 0xF3,  // ....>...
                /* 0B10 */  0x93, 0x28, 0xFF, 0xB9, 0x00, 0x95, 0xF8, 0x5C,  // .(.....\
                /* 0B18 */  0x40, 0x41, 0x0C, 0xE8, 0x38, 0x02, 0xFE, 0xFF,  // @A..8...
                /* 0B20 */  0x27, 0x24, 0xEC, 0x4E, 0x7C, 0xAD, 0x62, 0x08,  // '$.N|.b.
                /* 0B28 */  0x87, 0xC4, 0x06, 0x02, 0xE3, 0x9A, 0x04, 0x56,  // .......V
                /* 0B30 */  0x02, 0xDF, 0xC5, 0x01, 0xE7, 0x83, 0xF1, 0xB5,  // ........
                /* 0B38 */  0x02, 0x70, 0xF3, 0xFF, 0xBF, 0x56, 0xE0, 0xBC,  // .p...V..
                /* 0B40 */  0x0A, 0xB5, 0xE8, 0xF0, 0x5A, 0x01, 0x2E, 0x41,  // ....Z..A
                /* 0B48 */  0xAB, 0xD0, 0xB5, 0x02, 0x17, 0x6B, 0x2D, 0xBA,  // .....k-.
                /* 0B50 */  0x8B, 0x33, 0x9F, 0xD0, 0xC2, 0x38, 0x92, 0xE3,  // .3...8..
                /* 0B58 */  0x88, 0x7C, 0xC8, 0x2F, 0x10, 0x61, 0x42, 0x3C,  // .|./.aB<
                /* 0B60 */  0x90, 0xEA, 0x5A, 0x81, 0x8A, 0x40, 0xA1, 0xE8,  // ..Z..@..
                /* 0B68 */  0xE7, 0x02, 0x54, 0xD8, 0xB1, 0x53, 0x10, 0x03,  // ..T..S..
                /* 0B70 */  0x3A, 0xC9, 0xB5, 0x02, 0xAD, 0x05, 0x44, 0xB3,  // :.....D.
                /* 0B78 */  0xC0, 0xE9, 0x9C, 0x84, 0x26, 0xE5, 0x43, 0x05,  // ....&.C.
                /* 0B80 */  0xE0, 0x2B, 0xC6, 0x35, 0x1E, 0x25, 0xFC, 0x1A,  // .+.5.%..
                /* 0B88 */  0x4F, 0x41, 0x3C, 0x31, 0x1F, 0x2A, 0x80, 0xF3,  // OA<1.*..
                /* 0B90 */  0xFF, 0xFF, 0xA8, 0x0D, 0x9E, 0x61, 0xE1, 0x64,  // .....a.d
                /* 0B98 */  0xDC, 0x70, 0x7C, 0xC6, 0x24, 0xA8, 0x8F, 0xE3,  // .p|.$...
                /* 0BA0 */  0xC0, 0xF9, 0xE0, 0x01, 0xBC, 0x25, 0xFA, 0x94,  // .....%..
                /* 0BA8 */  0x7A, 0x68, 0x05, 0x99, 0x98, 0x83, 0x07, 0x3A,  // zh.....:
                /* 0BB0 */  0xD2, 0x5A, 0x74, 0x68, 0x65, 0x07, 0x0F, 0x58,  // .Zthe..X
                /* 0BB8 */  0x21, 0x0E, 0x1E, 0x28, 0xF9, 0x14, 0x92, 0x7F,  // !..(....
                /* 0BC0 */  0x76, 0x40, 0x09, 0x3E, 0x3B, 0x50, 0x10, 0x8F,  // v@.>;P..
                /* 0BC8 */  0xCD, 0x07, 0x0F, 0xE0, 0xF1, 0xFF, 0x3F, 0x78,  // ......?x
                /* 0BD0 */  0x00, 0x93, 0x10, 0x37, 0x07, 0xE8, 0x97, 0x56,  // ...7...V
                /* 0BD8 */  0x60, 0x76, 0x70, 0xC0, 0x1E, 0x9F, 0x00, 0x8B,  // `vp.....
                /* 0BE0 */  0xC7, 0x0E, 0xE0, 0xF9, 0xFF, 0x3F, 0x76, 0x00,  // .....?v.
                /* 0BE8 */  0x0D, 0xA7, 0xC7, 0x0E, 0x70, 0xC5, 0x79, 0x03,  // ....p.y.
                /* 0BF0 */  0xE8, 0xD8, 0x81, 0x13, 0x05, 0xA4, 0xE3, 0x13,  // ........
                /* 0BF8 */  0x1B, 0xD3, 0x13, 0xB6, 0x41, 0x1E, 0x1F, 0x30,  // ....A..0
                /* 0C00 */  0xC6, 0x00, 0x25, 0xE3, 0xBC, 0x41, 0x21, 0x4C,  // ..%..A!L
                /* 0C08 */  0xE1, 0x73, 0x01, 0x18, 0x67, 0x81, 0x3F, 0x17,  // .s..g.?.
                /* 0C10 */  0x80, 0x9D, 0xC0, 0xE7, 0x02, 0xC0, 0x93, 0x45,  // .......E
                /* 0C18 */  0xB3, 0x42, 0x7D, 0x9E, 0x0B, 0xE0, 0xFE, 0xFF,  // .B}.....
                /* 0C20 */  0xCF, 0x05, 0xE0, 0x9E, 0xA6, 0xCF, 0x05, 0x00,  // ........
                /* 0C28 */  0x7D, 0xA4, 0x9E, 0x0B, 0x80, 0xD7, 0x38, 0x9F,  // }.....8.
                /* 0C30 */  0x0B, 0xC0, 0xF2, 0xFF, 0x3F, 0x17, 0x00, 0xD4,  // ....?...
                /* 0C38 */  0xB0, 0x78, 0x2E, 0x00, 0x5E, 0xD2, 0xCE, 0x05,  // .x..^...
                /* 0C40 */  0x80, 0x8A, 0xFF, 0xFF, 0xB9, 0x00, 0xD0, 0xA6,  // ........
                /* 0C48 */  0xF5, 0x5C, 0x00, 0x2E, 0xF1, 0xAB, 0xA0, 0xA1,  // .\......
                /* 0C50 */  0x21, 0x24, 0x17, 0x06, 0x25, 0x61, 0xEC, 0x50,  // !$..%a.P
                /* 0C58 */  0x46, 0x73, 0x30, 0xC7, 0x10, 0x9C, 0x49, 0x82,  // Fs0...I.
                /* 0C60 */  0x43, 0x0D, 0xD4, 0x53, 0x7F, 0x1A, 0x38, 0x8D,  // C..S..8.
                /* 0C68 */  0xC7, 0x40, 0xCF, 0xEA, 0x79, 0x3C, 0x24, 0x3B,  // .@..y<$;
                /* 0C70 */  0x23, 0x78, 0x88, 0xFC, 0x58, 0xE0, 0xB1, 0xBE,  // #x..X...
                /* 0C78 */  0xB1, 0x59, 0x3B, 0xA2, 0x4E, 0x6C, 0x86, 0x49,  // .Y;.Nl.I
                /* 0C80 */  0xE0, 0x21, 0x32, 0x34, 0x4E, 0x70, 0x66, 0xA1,  // .!24Npf.
                /* 0C88 */  0x31, 0x37, 0x3F, 0xDF, 0xFF, 0x5E, 0x03, 0x3C,  // 17?..^.<
                /* 0C90 */  0x37, 0x13, 0x74, 0x3F, 0x74, 0x29, 0x44, 0xD0,  // 7.t?t)D.
                /* 0C98 */  0x09, 0xE0, 0x9D, 0xA0, 0x46, 0x01, 0xDE, 0xAE,  // ....F...
                /* 0CA0 */  0x02, 0xB2, 0x25, 0x40, 0xDC, 0xE8, 0x85, 0xF5,  // ..%@....
                /* 0CA8 */  0xCA, 0x15, 0x25, 0x44, 0x84, 0xA0, 0x51, 0x8C,  // ..%D..Q.
                /* 0CB0 */  0x17, 0x21, 0x54, 0x88, 0x28, 0x51, 0x9B, 0x03,  // .!T.(Q..
                /* 0CB8 */  0x91, 0x36, 0x54, 0x81, 0x44, 0x0B, 0x66, 0x04,  // .6T.D.f.
                /* 0CC0 */  0x66, 0x7F, 0x10, 0x44, 0xFA, 0x33, 0x40, 0x77,  // f..D.3@w
                /* 0CC8 */  0x40, 0x47, 0x3A, 0x3C, 0xA2, 0x87, 0xEB, 0xA1,  // @G:<....
                /* 0CD0 */  0x9E, 0xE3, 0xFF, 0xFF, 0x35, 0xFD, 0x79, 0xD2,  // ....5.y.
                /* 0CD8 */  0x20, 0x07, 0x79, 0x6E, 0x4F, 0x8F, 0x18, 0x70,  //  .ynO..p
                /* 0CE0 */  0x9D, 0x21, 0xA0, 0x5D, 0xE6, 0x03, 0x9E, 0xF1,  // .!.]....
                /* 0CE8 */  0x03, 0x33, 0x85, 0x43, 0x0D, 0xD1, 0xA7, 0x77,  // .3.C...w
                /* 0CF0 */  0x4F, 0xE0, 0x10, 0x19, 0xA0, 0x0F, 0x11, 0xF0,  // O.......
                /* 0CF8 */  0xC7, 0xE3, 0x03, 0x24, 0xE6, 0xB0, 0xA9, 0x41,  // ...$...A
                /* 0D00 */  0xA0, 0x46, 0x66, 0x68, 0x8F, 0xF4, 0xB4, 0x9E,  // .Ffh....
                /* 0D08 */  0x32, 0x3D, 0xFC, 0xC3, 0x62, 0x62, 0xCF, 0x0E,  // 2=..bb..
                /* 0D10 */  0x74, 0x3C, 0xE0, 0x57, 0x7C, 0x26, 0x10, 0xC2,  // t<.W|&..
                /* 0D18 */  0xC3, 0x83, 0xE7, 0xEB, 0x43, 0xB5, 0x4E, 0x22,  // ....C.N"
                /* 0D20 */  0x68, 0x68, 0x83, 0x9E, 0x8D, 0xCF, 0x10, 0xBE,  // hh......
                /* 0D28 */  0x79, 0xB0, 0xA3, 0x05, 0x17, 0x75, 0xB4, 0x40,  // y....u.@
                /* 0D30 */  0x9D, 0x16, 0x7C, 0x50, 0x60, 0x47, 0x54, 0x7E,  // ..|P`GT~
                /* 0D38 */  0xB2, 0x60, 0x47, 0x61, 0x70, 0xCA, 0x3B, 0x84,  // .`Gap.;.
                /* 0D40 */  0x80, 0x02, 0xC4, 0x27, 0x0B, 0x36, 0x2F, 0x0C,  // ...'.6/.
                /* 0D48 */  0x81, 0x45, 0xC2, 0xA3, 0x0E, 0x1D, 0x86, 0xE7,  // .E......
                /* 0D50 */  0xA7, 0x84, 0xC7, 0x11, 0x86, 0xFD, 0x46, 0xE2,  // ......F.
                /* 0D58 */  0x29, 0x1C, 0x8E, 0x8F, 0x14, 0x46, 0x08, 0x5E,  // )....F.^
                /* 0D60 */  0xEE, 0xD4, 0xF4, 0xFF, 0x9F, 0x40, 0xCD, 0xA3,  // .....@..
                /* 0D68 */  0xD3, 0x94, 0x4E, 0xF9, 0x10, 0xD8, 0x50, 0x3D,  // ..N...P=
                /* 0D70 */  0x04, 0x7E, 0x5E, 0xF0, 0x10, 0xF8, 0x00, 0x5A,  // .~^....Z
                /* 0D78 */  0x9D, 0x1D, 0x39, 0x9F, 0x9C, 0x13, 0x6E, 0xBC,  // ..9...n.
                /* 0D80 */  0x7C, 0x4C, 0xD8, 0x01, 0xF0, 0x94, 0xAF, 0x5C,  // |L.....\
                /* 0D88 */  0x9F, 0x45, 0x68, 0x8C, 0xE5, 0xFB, 0x38, 0x02,  // .Eh...8.
                /* 0D90 */  0xC8, 0x99, 0xC4, 0x13, 0x48, 0x84, 0x97, 0x91,  // ....H...
                /* 0D98 */  0x20, 0x21, 0x8E, 0xE5, 0x35, 0xC4, 0x20, 0x31,  //  !..5. 1
                /* 0DA0 */  0x8E, 0xE1, 0x64, 0x1E, 0x47, 0x38, 0xCC, 0x33,  // ..d.G8.3
                /* 0DA8 */  0x89, 0xE1, 0x1E, 0x0E, 0x5E, 0x45, 0x5E, 0x48,  // ....^E^H
                /* 0DB0 */  0x0C, 0xF3, 0x28, 0xE2, 0xF3, 0x41, 0x0C, 0x63,  // ..(..A.c
                /* 0DB8 */  0x86, 0x8A, 0x76, 0x02, 0x3E, 0x8E, 0xB0, 0x48,  // ..v.>..H
                /* 0DC0 */  0x0F, 0x06, 0x0D, 0xD5, 0xC7, 0x11, 0xC0, 0xCF,  // ........
                /* 0DC8 */  0xFF, 0xFF, 0x38, 0x02, 0xFC, 0x8F, 0x08, 0xB8,  // ..8.....
                /* 0DD0 */  0xD3, 0x06, 0xDC, 0xFB, 0x44, 0x88, 0x27, 0x8D,  // ....D.'.
                /* 0DD8 */  0x97, 0x84, 0x67, 0x0D, 0xE0, 0xA2, 0x8A, 0xB9,  // ..g.....
                /* 0DE0 */  0x00, 0x43, 0x20, 0x4A, 0x73, 0x34, 0x47, 0x71,  // .C Js4Gq
                /* 0DE8 */  0x58, 0x13, 0x90, 0x86, 0xC9, 0x19, 0xCF, 0xFD,  // X.......
                /* 0DF0 */  0xB9, 0xE0, 0xEC, 0x62, 0x07, 0x09, 0x13, 0xE4,  // ...b....
                /* 0DF8 */  0x89, 0xE0, 0x35, 0xCA, 0xA7, 0x20, 0x41, 0xEA,  // ..5.. A.
                /* 0E00 */  0x6C, 0xCE, 0xD3, 0x53, 0x48, 0xF7, 0xD9, 0x1C,  // l..SH...
                /* 0E08 */  0xA5, 0xF4, 0x9C, 0x46, 0x41, 0x7C, 0x46, 0xF0,  // ...FA|F.
                /* 0E10 */  0xB5, 0x1B, 0xCE, 0x1C, 0xCE, 0xE8, 0x40, 0xDE,  // ......@.
                /* 0E18 */  0x03, 0xD8, 0xC5, 0x1C, 0x98, 0x5D, 0x64, 0xB0,  // .....]d.
                /* 0E20 */  0x27, 0x1D, 0x3C, 0xBA, 0xFF, 0xFF, 0x37, 0x85,  // '.<...7.
                /* 0E28 */  0xF3, 0x7C, 0x3F, 0xF0, 0xBD, 0x1C, 0xB0, 0x15,  // .|?.....
                /* 0E30 */  0xE2, 0x2E, 0x80, 0x92, 0x7D, 0x17, 0xA0, 0x20,  // ....}.. 
                /* 0E38 */  0x9E, 0x98, 0xA3, 0x5C, 0x91, 0xA0, 0xE0, 0x3F,  // ...\...?
                /* 0E40 */  0x0A, 0xBC, 0x0C, 0xBC, 0x2E, 0x60, 0xAE, 0xE5,  // .....`..
                /* 0E48 */  0xC0, 0x37, 0xC8, 0x85, 0x01, 0xCA, 0x6D, 0xE0,  // .7....m.
                /* 0E50 */  0xE1, 0x89, 0x0D, 0x0A, 0xFC, 0x50, 0xBE, 0x1E,  // .....P..
                /* 0E58 */  0x82, 0xF9, 0xFF, 0x7F, 0x3D, 0x04, 0xB6, 0x4A,  // ....=..J
                /* 0E60 */  0x9D, 0xDA, 0x54, 0x78, 0x3D, 0x04, 0x57, 0x94,  // ..Tx=.W.
                /* 0E68 */  0x6B, 0x09, 0xEA, 0xD6, 0x64, 0x41, 0x40, 0xF2,  // k...dA@.
                /* 0E70 */  0x7E, 0xBE, 0x21, 0x98, 0x3E, 0x97, 0xC0, 0xBB,  // ~.!.>...
                /* 0E78 */  0x83, 0x6A, 0x55, 0xBA, 0x97, 0xF0, 0xE0, 0x14,  // .jU.....
                /* 0E80 */  0x8A, 0x7E, 0x78, 0x40, 0x85, 0x3D, 0x3C, 0x50,  // .~x@.=<P
                /* 0E88 */  0x10, 0x5F, 0x8C, 0x7C, 0x2F, 0x01, 0xEC, 0xFF,  // ._.|/...
                /* 0E90 */  0xFF, 0x47, 0x84, 0xCD, 0x30, 0x22, 0xB4, 0x8A,  // .G..0"..
                /* 0E98 */  0xA3, 0x05, 0x72, 0x46, 0x60, 0x3D, 0x11, 0xF8,  // ..rF`=..
                /* 0EA0 */  0xE4, 0x02, 0x9C, 0xC3, 0x5F, 0x82, 0x51, 0x71,  // ...._.Qq
                /* 0EA8 */  0xE7, 0x4C, 0x41, 0x3C, 0x28, 0x9F, 0x5C, 0x80,  // .LA<(.\.
                /* 0EB0 */  0xDF, 0xA9, 0x04, 0x30, 0xF5, 0xFF, 0x07, 0xD3,  // ...0....
                /* 0EB8 */  0xA9, 0x04, 0x74, 0x77, 0x2F, 0x30, 0x5D, 0x4D,  // ..tw/0]M
                /* 0EC0 */  0xCE, 0x24, 0x5A, 0x70, 0xDF, 0xBD, 0x00, 0x66,  // .$Zp...f
                /* 0EC8 */  0xFE, 0xFF, 0xEF, 0x5E, 0x00, 0x3D, 0xBD, 0xDE,  // ...^.=..
                /* 0ED0 */  0xBD, 0x80, 0xD7, 0xB9, 0x84, 0xFF, 0xFF, 0xEF,  // ........
                /* 0ED8 */  0x5E, 0x00, 0xFF, 0xFF, 0xFF, 0x77, 0x2F, 0x80,  // ^....w/.
                /* 0EE0 */  0x32, 0xA7, 0x12, 0x90, 0x65, 0x3B, 0x95, 0xA0,  // 2...e;..
                /* 0EE8 */  0x15, 0x9E, 0xA3, 0xA1, 0x4E, 0xE0, 0x50, 0x9E,  // ....N.P.
                /* 0EF0 */  0x30, 0x5E, 0xD5, 0x13, 0x58, 0xCF, 0xE5, 0x0B,  // 0^..X...
                /* 0EF8 */  0xA5, 0x04, 0x46, 0x97, 0x2F, 0xE0, 0xF5, 0xFF,  // ..F./...
                /* 0F00 */  0xBF, 0x7C, 0x01, 0xAC, 0x08, 0x74, 0x17, 0x40,  // .|...t.@
                /* 0F08 */  0x45, 0xB8, 0x0B, 0x50, 0x10, 0x5F, 0xBE, 0x00,  // E..P._..
                /* 0F10 */  0x2F, 0xA1, 0x20, 0x64, 0xE4, 0x26, 0x41, 0x2F,  // /. d.&A/
                /* 0F18 */  0x5F, 0x70, 0x2E, 0x0E, 0xBE, 0x1F, 0x79, 0x50,  // _p....yP
                /* 0F20 */  0x30, 0xFE, 0xFF, 0x83, 0x82, 0x39, 0x98, 0xF3,  // 0....9..
                /* 0F28 */  0x2E, 0xF6, 0xA4, 0x48, 0xAF, 0x27, 0x70, 0xEF,  // ...H.'p.
                /* 0F30 */  0x1C, 0x1E, 0x1B, 0x38, 0xC4, 0x5D, 0xC1, 0x80,  // ...8.]..
                /* 0F38 */  0xBD, 0xCB, 0xDB, 0x09, 0xB8, 0xB4, 0xAD, 0x5D,  // .......]
                /* 0F40 */  0xB7, 0x13, 0x5C, 0xC2, 0xE3, 0x34, 0xE4, 0xE3,  // ..\..4..
                /* 0F48 */  0x09, 0x26, 0xCF, 0xED, 0x04, 0x95, 0x04, 0x46,  // .&.....F
                /* 0F50 */  0x59, 0x48, 0x74, 0x84, 0xE0, 0xEA, 0x6F, 0x62,  // YHt...ob
                /* 0F58 */  0x14, 0xC4, 0x16, 0x6E, 0x27, 0x80, 0x88, 0xFF,  // ...n'...
                /* 0F60 */  0xFF, 0xED, 0x04, 0xB0, 0x30, 0x66, 0x38, 0x23,  // ....0f8#
                /* 0F68 */  0x7A, 0xAF, 0x30, 0xA4, 0xCF, 0x60, 0xC0, 0x34,  // z.0..`.4
                /* 0F70 */  0xD0, 0x11, 0x04, 0x7D, 0x49, 0xC3, 0x26, 0xB8,  // ...}I.&.
                /* 0F78 */  0x81, 0xD0, 0x19, 0xC1, 0xBB, 0x80, 0xC0, 0x9D,  // ........
                /* 0F80 */  0x18, 0xAC, 0x03, 0x08, 0xF8, 0xCE, 0x6A, 0xC0,  // ......j.
                /* 0F88 */  0xE8, 0xFF, 0x7F, 0x56, 0x03, 0xBE, 0x07, 0x00,  // ...V....
                /* 0F90 */  0x9F, 0xD5, 0x00, 0x55, 0xB7, 0x17, 0x90, 0x5D,  // ...U...]
                /* 0F98 */  0x53, 0x7C, 0x7B, 0xE1, 0x03, 0xB6, 0x06, 0x20,  // S|{.... 
                /* 0FA0 */  0x1D, 0x1F, 0x4E, 0xFF, 0x38, 0x8E, 0xE2, 0xBC,  // ..N.8...
                /* 0FA8 */  0x4E, 0xE3, 0x05, 0x26, 0x46, 0xCD, 0xA7, 0x0C,  // N..&F...
                /* 0FB0 */  0x32, 0xE1, 0xDE, 0x00, 0x95, 0xFA, 0x1A, 0x45,  // 2......E
                /* 0FB8 */  0x47, 0xE5, 0xBC, 0x24, 0x4A, 0x7D, 0x2C, 0x40,  // G..$J},@
                /* 0FC0 */  0xE5, 0x3C, 0x16, 0x50, 0x10, 0x03, 0xFA, 0xE2,  // .<.P....
                /* 0FC8 */  0x61, 0x25, 0x17, 0x0F, 0xF4, 0x20, 0x4E, 0xF6,  // a%... N.
                /* 0FD0 */  0x0D, 0xD5, 0x17, 0x0F, 0x30, 0x13, 0xFC, 0xFF,  // ....0...
                /* 0FD8 */  0x5F, 0x3C, 0xC0, 0x64, 0xEC, 0xD6, 0xF3, 0x42,  // _<.d...B
                /* 0FE0 */  0x01, 0x44, 0x82, 0x4F, 0x15, 0x15, 0x75, 0xAA,  // .D.O..u.
                /* 0FE8 */  0x14, 0xC4, 0x53, 0x75, 0x8C, 0x13, 0x89, 0xA7,  // ..Su....
                /* 0FF0 */  0x8A, 0x3E, 0x09, 0x9D, 0xDB, 0x1B, 0x09, 0x3F,  // .>.....?
                /* 0FF8 */  0x0F, 0xBC, 0x4F, 0x80, 0x79, 0x28, 0x3E, 0x5C,  // ..O.y(>\
                /* 1000 */  0x01, 0x8E, 0x14, 0xFA, 0x34, 0xA9, 0xF4, 0x3A,  // ....4..:
                /* 1008 */  0x01, 0x2E, 0x41, 0xD7, 0x09, 0x74, 0xAC, 0xA5,  // ..A..t..
                /* 1010 */  0xEA, 0x3A, 0x01, 0x6F, 0x98, 0x0E, 0x72, 0x9D,  // .:.o..r.
                /* 1018 */  0xA0, 0x10, 0xFF, 0xFF, 0xC7, 0x3C, 0x16, 0xE0,  // .....<..
                /* 1020 */  0xB0, 0x87, 0x92, 0x0C, 0x47, 0x41, 0x3C, 0x36,  // ....GA<6
                /* 1028 */  0xDF, 0xC9, 0x7D, 0x9D, 0x80, 0x7B, 0x67, 0x81,  // ..}..{g.
                /* 1030 */  0x77, 0x9D, 0x60, 0x87, 0x02, 0xD8, 0x04, 0xBE,  // w.`.....
                /* 1038 */  0xB3, 0x80, 0xE7, 0x40, 0xC1, 0x0E, 0x0E, 0x60,  // ...@...`
                /* 1040 */  0x1E, 0x14, 0x38, 0x0E, 0x0E, 0x80, 0xAA, 0x1B,  // ..8.....
                /* 1048 */  0x2D, 0xC8, 0xF4, 0x1F, 0x1C, 0xD0, 0x2A, 0xAE,  // -.....*.
                /* 1050 */  0x35, 0x88, 0xFF, 0xFF, 0xC1, 0x01, 0x2F, 0xED,  // 5...../.
                /* 1058 */  0x34, 0x44, 0x72, 0x5F, 0x6B, 0x50, 0x89, 0xAF,  // 4Dr_kP..
                /* 1060 */  0x35, 0x80, 0xEC, 0xE8, 0x53, 0x45, 0x85, 0x9D,  // 5...SE..
                /* 1068 */  0x2A, 0x05, 0xF1, 0x54, 0x7D, 0xE5, 0x80, 0x75,  // *..T}..u
                /* 1070 */  0x9D, 0xC0, 0x1C, 0xBB, 0xC0, 0x3D, 0x14, 0x5F,  // .....=._
                /* 1078 */  0x39, 0xC0, 0x77, 0x9F, 0x00, 0x0E, 0xFF, 0xFF,  // 9.w.....
                /* 1080 */  0x63, 0x17, 0x48, 0xEF, 0x35, 0xA0, 0x93, 0x74,  // c.H.5..t
                /* 1088 */  0x9F, 0x40, 0x07, 0xBB, 0xD7, 0x40, 0xBC, 0x4F,  // .@...@.O
                /* 1090 */  0x3C, 0xAD, 0x3D, 0xD1, 0xE9, 0x5E, 0x83, 0x0A,  // <.=..^..
                /* 1098 */  0x41, 0xA1, 0x8B, 0x8D, 0x4F, 0x05, 0x5C, 0x34,  // A...O.\4
                /* 10A0 */  0x1C, 0x05, 0xF1, 0xBD, 0x06, 0x70, 0x72, 0x72,  // .....prr
                /* 10A8 */  0x00, 0xEF, 0xBD, 0x06, 0x3C, 0x27, 0x07, 0xE0,  // ....<'..
                /* 10B0 */  0xF3, 0xFF, 0x3F, 0x39, 0x00, 0xB5, 0x8B, 0x0D,  // ..?9....
                /* 10B8 */  0xC8, 0x12, 0x9C, 0x1C, 0xD0, 0x3A, 0x2E, 0x36,  // .....:.6
                /* 10C0 */  0x50, 0x11, 0x12, 0x4C, 0x7E, 0xB1, 0x41, 0x65,  // P..L~.Ae
                /* 10C8 */  0xBE, 0xD8, 0x00, 0xB2, 0xEF, 0xA7, 0xE0, 0xBB,  // ........
                /* 10D0 */  0x08, 0x3C, 0x50, 0xE0, 0x2E, 0x14, 0xF8, 0xFF,  // .<P.....
                /* 10D8 */  0xFF, 0xCD, 0x06, 0x98, 0xDD, 0x4F, 0x81, 0xBF,  // .....O..
                /* 10E0 */  0xC4, 0x9B, 0x0D, 0xE8, 0x44, 0x5D, 0x28, 0xD0,  // ....D](.
                /* 10E8 */  0xD1, 0x6E, 0x36, 0x50, 0xAD, 0x01, 0x2A, 0xCC,  // .n6P..*.
                /* 10F0 */  0xCD, 0x06, 0x15, 0x83, 0x42, 0x57, 0x1B, 0x1F,  // ....BW..
                /* 10F8 */  0x0B, 0xB8, 0x6C, 0x38, 0x0A, 0xE2, 0x9B, 0x0D,  // ..l8....
                /* 1100 */  0xE0, 0xE4, 0xE8, 0x80, 0xF9, 0xFF, 0x1F, 0x1D,  // ........
                /* 1108 */  0xC0, 0x78, 0xB5, 0x01, 0x3E, 0x47, 0x07, 0x40,  // .x..>G.@
                /* 1110 */  0xC1, 0xD5, 0x06, 0x64, 0x2A, 0x56, 0xA1, 0xA3,  // ...d*V..
                /* 1118 */  0x03, 0x2E, 0xCB, 0x4D, 0x19, 0xAA, 0x39, 0x40,  // ...M..9@
                /* 1120 */  0xDD, 0x9A, 0x7D, 0xB5, 0xE1, 0xBA, 0x29, 0xA4,  // ..}...).
                /* 1128 */  0xFC, 0xE8, 0x80, 0xD2, 0x7A, 0x74, 0xA0, 0x20,  // ....zt. 
                /* 1130 */  0x1E, 0x9B, 0x53, 0x1C, 0x0B, 0xD0, 0x3A, 0x8E,  // ..S...:.
                /* 1138 */  0x05, 0x74, 0xAE, 0x31, 0x22, 0x3C, 0x3B, 0x3C,  // .t.1"<;<
                /* 1140 */  0xDB, 0x00, 0xA3, 0xFF, 0xFF, 0xA1, 0x00, 0x5E,  // .......^
                /* 1148 */  0x86, 0x9B, 0x28, 0x94, 0x0B, 0x40, 0xC4, 0x33,  // ..(..@.3
                /* 1150 */  0x3A, 0x7F, 0x13, 0x9C, 0xE8, 0x21, 0x81, 0xF3,  // :....!..
                /* 1158 */  0x20, 0x0A, 0xBE, 0xCB, 0x0F, 0x60, 0x70, 0x24,  //  ....`p$
                /* 1160 */  0xBE, 0x72, 0x00, 0x6E, 0xFE, 0xFF, 0x57, 0x0E,  // .r.n..W.
                /* 1168 */  0x9C, 0x4D, 0x8B, 0x36, 0x2F, 0x3F, 0x20, 0x0B,  // .M.6/? .
                /* 1170 */  0x77, 0xF9, 0x41, 0x4B, 0xBC, 0x72, 0x40, 0x3C,  // w.AK.r@<
                /* 1178 */  0xCE, 0x1C, 0xB1, 0x2F, 0x42, 0xBE, 0xFC, 0x70,  // .../B..p
                /* 1180 */  0x39, 0x30, 0x12, 0x03, 0xA1, 0x63, 0x01, 0x8F,  // 90...c..
                /* 1188 */  0x7F, 0xE5, 0xA0, 0x20, 0x96, 0x70, 0x2C, 0x80,  // ... .p,.
                /* 1190 */  0x7A, 0xE5, 0xC0, 0xDC, 0x7E, 0x80, 0xE9, 0xB1,  // z...~...
                /* 1198 */  0x80, 0x5F, 0xA7, 0xE1, 0x9C, 0x3A, 0x70, 0xD7,  // ._...:p.
                /* 11A0 */  0x69, 0xE0, 0x7A, 0x41, 0x02, 0x1E, 0xFF, 0xFF,  // i.zA....
                /* 11A8 */  0xE3, 0x05, 0xA0, 0xF1, 0x82, 0x04, 0xB2, 0x18,  // ........
                /* 11B0 */  0x0F, 0x09, 0x1D, 0x2F, 0x70, 0x62, 0x80, 0x74,  // .../pb.t
                /* 11B8 */  0xBC, 0x80, 0x87, 0xF0, 0x54, 0xA1, 0x15, 0xE9,  // ....T...
                /* 11C0 */  0x82, 0xC4, 0x83, 0xC3, 0x28, 0xFA, 0xF1, 0x02,  // ....(...
                /* 11C8 */  0x15, 0xF6, 0x94, 0x41, 0x41, 0x7C, 0xD4, 0x71,  // ...AA|.q
                /* 11D0 */  0x82, 0x93, 0x03, 0x7A, 0x94, 0x56, 0x38, 0x06,  // ...z.V8.
                /* 11D8 */  0xCD, 0xE3, 0xE9, 0x07, 0xBC, 0x04, 0xBE, 0x36,  // .......6
                /* 11E0 */  0x80, 0x6B, 0x42, 0x70, 0x86, 0x70, 0xBE, 0xB5,  // .kBp.p..
                /* 11E8 */  0x4F, 0x08, 0xD2, 0xFF, 0xFF, 0x76, 0x04, 0x9C,  // O....v..
                /* 11F0 */  0x22, 0x4C, 0x08, 0xAD, 0x02, 0x44, 0x1A, 0x0F,  // "L...D..
                /* 11F8 */  0x01, 0xC4, 0xF1, 0x88, 0x40, 0x7C, 0x68, 0xE0,  // ....@|h.
                /* 1200 */  0x23, 0x02, 0xD7, 0x65, 0x10, 0x07, 0xEE, 0xA3,  // #..e....
                /* 1208 */  0xC4, 0x19, 0xF7, 0x7C, 0x02, 0x03, 0x31, 0x92,  // ...|..1.
                /* 1210 */  0x0F, 0xAB, 0x60, 0x3B, 0x81, 0x01, 0xAB, 0x7B,  // ..`;...{
                /* 1218 */  0x8F, 0x4F, 0x60, 0xC0, 0xE4, 0xFF, 0x7F, 0x02,  // .O`.....
                /* 1220 */  0x03, 0x1C, 0x59, 0x38, 0xD3, 0x00, 0xAA, 0x4C,  // ..Y8...L
                /* 1228 */  0x3A, 0x14, 0x7A, 0x02, 0x03, 0x99, 0xCC, 0x33,  // :.z....3
                /* 1230 */  0x0D, 0x3A, 0xEC, 0x4A, 0x74, 0xA6, 0x81, 0x37,  // .:.Jt..7
                /* 1238 */  0x4D, 0xC7, 0x3B, 0xD3, 0x50, 0x08, 0x07, 0x83,  // M.;.P...
                /* 1240 */  0x51, 0x2C, 0x08, 0x1D, 0x0B, 0x78, 0x10, 0x38,  // Q,...x.8
                /* 1248 */  0x0A, 0x62, 0x0F, 0xC7, 0x6D, 0x7A, 0xA6, 0x81,  // .b..mz..
                /* 1250 */  0x77, 0xB6, 0xE2, 0xFF, 0xFF, 0xF3, 0x17, 0x78,  // w......x
                /* 1258 */  0x2F, 0x14, 0xE0, 0x1A, 0x12, 0x9C, 0x4B, 0x0D,  // /.....K.
                /* 1260 */  0x3F, 0x7D, 0x01, 0xD7, 0x03, 0x1A, 0x9C, 0x63,  // ?}.....c
                /* 1268 */  0x0D, 0x66, 0x4C, 0x60, 0x3F, 0xD8, 0x80, 0x6F,  // .fL`?..o
                /* 1270 */  0x4C, 0x3E, 0xD8, 0xC0, 0x3B, 0x9E, 0x81, 0x1B,  // L>..;...
                /* 1278 */  0xCA, 0x77, 0x66, 0x70, 0xFD, 0xFF, 0x8F, 0x79,  // .wfp...y
                /* 1280 */  0xC0, 0xEF, 0x6E, 0x03, 0xBE, 0x63, 0x1E, 0xF0,  // ..n..c..
                /* 1288 */  0x3B, 0xC3, 0x00, 0xBA, 0xAE, 0xD5, 0x40, 0xEB,  // ;.....@.
                /* 1290 */  0xBA, 0x70, 0x9C, 0xAF, 0xD5, 0xEC, 0xFF, 0x7F,  // .p......
                /* 1298 */  0xAD, 0xC6, 0xA9, 0xBF, 0x56, 0xA3, 0xF4, 0x1E,  // ....V...
                /* 12A0 */  0x4A, 0x29, 0x88, 0xC7, 0xE6, 0x24, 0x87, 0x0B,  // J)...$..
                /* 12A8 */  0xB4, 0x96, 0x0B, 0x3E, 0x99, 0xD3, 0x31, 0x9C,  // ...>..1.
                /* 12B0 */  0xCF, 0x09, 0x15, 0x7F, 0xC6, 0x47, 0x5D, 0xAC,  // .....G].
                /* 12B8 */  0x81, 0xE1, 0x3D, 0x0C, 0xE6, 0xA0, 0x30, 0x17,  // ..=...0.
                /* 12C0 */  0x6B, 0xC0, 0x56, 0xF0, 0x7B, 0x18, 0x2A, 0xEA,  // k.V.{.*.
                /* 12C8 */  0x8C, 0x28, 0x88, 0xAF, 0x05, 0xBE, 0x97, 0xC0,  // .(......
                /* 12D0 */  0xB9, 0x73, 0xE0, 0xEE, 0x25, 0xF0, 0xEE, 0xD5,  // .s..%...
                /* 12D8 */  0x60, 0xF9, 0xFF, 0xCF, 0x15, 0x6C, 0x57, 0x0E,  // `....lW.
                /* 12E0 */  0xE0, 0x2D, 0x56, 0xA2, 0xC9, 0x6B, 0x35, 0x10,  // .-V..k5.
                /* 12E8 */  0x93, 0x76, 0xAD, 0x06, 0x5D, 0x9C, 0x2B, 0x07,  // .v..].+.
                /* 12F0 */  0x7A, 0x4C, 0xBE, 0x72, 0xC0, 0xBA, 0x58, 0x03,  // zL.r..X.
                /* 12F8 */  0xD3, 0x2B, 0x12, 0xDC, 0x53, 0x07, 0xEE, 0xEC,  // .+..S...
                /* 1300 */  0x00, 0xE3, 0xFF, 0x7F, 0x17, 0x03, 0xB6, 0xC7,  // ........
                /* 1308 */  0x0B, 0x70, 0xDC, 0xC5, 0x80, 0xD3, 0xF1, 0x02,  // .p......
                /* 1310 */  0xA8, 0x5F, 0x90, 0x40, 0xA6, 0xE5, 0x82, 0x84,  // ._.@....
                /* 1318 */  0x4E, 0x74, 0xBC, 0x80, 0x6A, 0xED, 0xC4, 0xE3,  // Nt..j...
                /* 1320 */  0x0B, 0x12, 0xEA, 0x8E, 0xE4, 0xD4, 0x47, 0x18,  // ......G.
                /* 1328 */  0x54, 0xCE, 0xD3, 0x01, 0x05, 0x31, 0xA0, 0x6F,  // T....1.o
                /* 1330 */  0x84, 0xBE, 0x86, 0xE1, 0xCE, 0x0D, 0xEC, 0xFF,  // ........
                /* 1338 */  0x7F, 0x6E, 0xC0, 0x1C, 0x8F, 0x80, 0xE1, 0x21,  // .n.....!
                /* 1340 */  0x8C, 0x5D, 0x7E, 0x80, 0x45, 0x8C, 0xB3, 0x15,  // .]~.E...
                /* 1348 */  0x4A, 0xF8, 0xC5, 0x84, 0x82, 0x78, 0x62, 0x3E,  // J....xb>
                /* 1350 */  0xC1, 0xC1, 0xB9, 0x4E, 0x70, 0x91, 0x63, 0xD2,  // ...Np.c.
                /* 1358 */  0xA1, 0x16, 0xFC, 0x63, 0xF1, 0x09, 0x0E, 0x7C,  // ...c...|
                /* 1360 */  0xA3, 0x82, 0x3B, 0xDC, 0xB3, 0x39, 0x2A, 0xF0,  // ..;..9*.
                /* 1368 */  0x5F, 0x14, 0x7C, 0xCC, 0x03, 0xE7, 0xFF, 0xFF,  // _.|.....
                /* 1370 */  0xD6, 0x01, 0x9C, 0x95, 0xDA, 0x94, 0x78, 0x47,  // ......xG
                /* 1378 */  0x02, 0x59, 0xBC, 0x3B, 0x12, 0x5A, 0xE4, 0xAD,  // .Y.;.Z..
                /* 1380 */  0x03, 0xEA, 0x91, 0xC7, 0xB2, 0xEE, 0x48, 0x28,  // ......H(
                /* 1388 */  0x41, 0x30, 0xBA, 0x24, 0xF9, 0xEC, 0xC0, 0x97,  // A0.$....
                /* 1390 */  0x66, 0x30, 0x83, 0xF8, 0x8E, 0xE4, 0x20, 0xB7,  // f0.... .
                /* 1398 */  0x0E, 0xE8, 0x17, 0x24, 0xE0, 0x79, 0x74, 0x00,  // ...$.yt.
                /* 13A0 */  0xC7, 0xF9, 0x02, 0xFE, 0x0D, 0x09, 0x3C, 0xA3,  // ......<.
                /* 13A8 */  0xC2, 0xFD, 0xFF, 0xCF, 0x17, 0xC0, 0xEF, 0x8E,  // ........
                /* 13B0 */  0x04, 0x9E, 0xF3, 0x05, 0x60, 0x4A, 0xE9, 0x25,  // ....`J.%
                /* 13B8 */  0x09, 0x64, 0x7A, 0x0E, 0xEA, 0xE8, 0x54, 0x07,  // .dz...T.
                /* 13C0 */  0x75, 0xA8, 0xDE, 0x00, 0x95, 0xE3, 0x84, 0x4E,  // u......N
                /* 13C8 */  0x47, 0xE5, 0x04, 0x30, 0xBA, 0x24, 0x01, 0xBF,  // G..0.$..
                /* 13D0 */  0xFF, 0xFF, 0x25, 0x09, 0x30, 0x11, 0xE5, 0x66,  // ..%.0..f
                /* 13D8 */  0x82, 0x12, 0x7F, 0x33, 0xA1, 0x20, 0xBE, 0x1C,  // ...3. ..
                /* 13E0 */  0xFB, 0x0C, 0xE7, 0xA9, 0xE2, 0xA0, 0x3D, 0x80,  // ......=.
                /* 13E8 */  0x47, 0x80, 0x17, 0x13, 0xB8, 0x57, 0x24, 0xE0,  // G....W$.
                /* 13F0 */  0x35, 0x26, 0x58, 0x8A, 0xC7, 0x04, 0x04, 0x6E,  // 5&X....n
                /* 13F8 */  0x1C, 0xE0, 0x1C, 0x13, 0xAC, 0x3B, 0xFE, 0x31,  // .....;.1
                /* 1400 */  0x81, 0xE9, 0xFF, 0x7F, 0x83, 0x07, 0x06, 0x63,  // .......c
                /* 1408 */  0x82, 0x7D, 0xA6, 0x38, 0x26, 0xF0, 0xDF, 0x8C,  // .}.8&...
                /* 1410 */  0x7C, 0x6F, 0x01, 0x3C, 0xFD, 0x15, 0x3B, 0xBC,  // |o.<..;.
                /* 1418 */  0x66, 0x81, 0xEC, 0xA0, 0xE1, 0x7B, 0x0B, 0x4E,  // f....{.N
                /* 1420 */  0xC2, 0x35, 0x0B, 0xE2, 0x30, 0x1F, 0x31, 0x1D,  // .5..0.1.
                /* 1428 */  0xFA, 0xAA, 0x47, 0x47, 0xE5, 0xB8, 0x24, 0x0A,  // ..GG..$.
                /* 1430 */  0x7D, 0x6F, 0x41, 0xC5, 0x3C, 0x64, 0x50, 0x10,  // }oA.<dP.
                /* 1438 */  0x03, 0xFA, 0xE0, 0x0D, 0x96, 0xFF, 0xFF, 0xBD,  // ........
                /* 1440 */  0x05, 0x9C, 0x07, 0x6F, 0xC0, 0xF4, 0x69, 0x17,  // ...o..i.
                /* 1448 */  0x7C, 0xC7, 0x09, 0xE0, 0xED, 0xD0, 0xE2, 0x25,  // |......%
                /* 1450 */  0x10, 0x6C, 0x97, 0x3E, 0x1F, 0x27, 0xD8, 0xFF,  // .l.>.'..
                /* 1458 */  0x7F, 0xBC, 0x2C, 0xD4, 0x52, 0x75, 0x9C, 0x80,  // ..,.Ru..
                /* 1460 */  0x67, 0xEE, 0x2E, 0x4A, 0x2F, 0x81, 0x3C, 0x00,  // g..J/.<.
                /* 1468 */  0x85, 0xE4, 0xDF, 0x47, 0x51, 0x82, 0xE1, 0x28,  // ...GQ..(
                /* 1470 */  0x88, 0xC7, 0xE6, 0x13, 0x35, 0x70, 0xBB, 0x4F,  // ....5p.O
                /* 1478 */  0x80, 0xEF, 0x44, 0x0D, 0xDC, 0xCE, 0x0D, 0x80,  // ..D.....
                /* 1480 */  0xA9, 0xCB, 0x1D, 0xDC, 0xFF, 0xFF, 0xB9, 0x01,  // ........
                /* 1488 */  0x46, 0xFA, 0x73, 0x03, 0xFA, 0x24, 0xED, 0xCB,  // F.s..$..
                /* 1490 */  0x1D, 0xBC, 0x73, 0x83, 0x55, 0x9F, 0xA8, 0x51,  // ..s.U..Q
                /* 1498 */  0x7A, 0x29, 0xA4, 0xFA, 0xDC, 0x80, 0xD2, 0x79,  // z).....y
                /* 14A0 */  0x6E, 0xA0, 0x20, 0x1E, 0x9B, 0x13, 0x1C, 0x0A,  // n. .....
                /* 14A8 */  0xD0, 0xA3, 0xF4, 0x7C, 0x1F, 0x02, 0xEA, 0x3C,  // ...|...<
                /* 14B0 */  0xD4, 0x00, 0xD1, 0x5B, 0x0F, 0xB0, 0x3A, 0x33,  // ...[..:3
                /* 14B8 */  0x80, 0xEF, 0xD6, 0x03, 0x98, 0xF8, 0xFF, 0x5F,  // ......._
                /* 14C0 */  0xED, 0xC0, 0x7B, 0xDD, 0x00, 0x1C, 0xF9, 0x34,  // ..{....4
                /* 14C8 */  0xE9, 0xF4, 0xD6, 0x03, 0xB2, 0x48, 0xD7, 0x0D,  // .....H..
                /* 14D0 */  0xB4, 0xB0, 0x3B, 0x19, 0xD4, 0x4B, 0x9D, 0xA5,  // ..;..K..
                /* 14D8 */  0x1C, 0xA5, 0x51, 0x22, 0x0E, 0xD1, 0xBE, 0x60,  // ..Q"...`
                /* 14E0 */  0xA2, 0xAE, 0x66, 0x1C, 0xC4, 0x17, 0x3C, 0x9F,  // ..f...<.
                /* 14E8 */  0x4D, 0x7D, 0xDD, 0x80, 0x77, 0xE9, 0x01, 0xEE,  // M}..w...
                /* 14F0 */  0xFF, 0xFF, 0x7B, 0x11, 0x70, 0xB9, 0x71, 0x80,  // ..{.p.q.
                /* 14F8 */  0xEF, 0x5E, 0x04, 0xDC, 0x4E, 0x16, 0x80, 0xAA,  // .^..N...
                /* 1500 */  0x7B, 0x11, 0xC8, 0xE2, 0x9F, 0x2C, 0xD0, 0x21,  // {....,.!
                /* 1508 */  0x4E, 0x16, 0x50, 0x0F, 0x46, 0x4F, 0x00, 0xBA,  // N.P.FO..
                /* 1510 */  0x17, 0xA1, 0x04, 0x53, 0x48, 0xF6, 0xBD, 0x08,  // ...SH...
                /* 1518 */  0x25, 0x14, 0x46, 0xFF, 0x7F, 0x38, 0x83, 0x78,  // %.F..8.x
                /* 1520 */  0x6C, 0x8E, 0x70, 0x28, 0x40, 0xAB, 0x00, 0x91,  // l.p(@...
                /* 1528 */  0xC2, 0x79, 0x68, 0x0C, 0x5D, 0x1F, 0x8C, 0x00,  // .yh.]...
                /* 1530 */  0x62, 0xFF, 0xFF, 0xCF, 0x1B, 0xC0, 0xDD, 0xA6,  // b.......
                /* 1538 */  0x57, 0x91, 0x07, 0x23, 0x90, 0x85, 0x3A, 0x6F,  // W..#..:o
                /* 1540 */  0xA0, 0xA5, 0x9D, 0x37, 0xA0, 0x1E, 0x99, 0x2D,  // ...7...-
                /* 1548 */  0xE6, 0x60, 0x84, 0x92, 0x01, 0xA3, 0x93, 0x91,  // .`......
                /* 1550 */  0x0F, 0x05, 0x3C, 0xF6, 0x79, 0x83, 0x82, 0xF8,  // ..<.y...
                /* 1558 */  0x60, 0xE4, 0x43, 0x01, 0x9C, 0xF3, 0x06, 0xE6,  // `.C.....
                /* 1560 */  0x64, 0x04, 0x98, 0xFD, 0xFF, 0x9F, 0x8C, 0x00,  // d.......
                /* 1568 */  0x8E, 0x1C, 0x2D, 0x74, 0x32, 0x02, 0x59, 0x96,  // ..-t2.Y.
                /* 1570 */  0xA3, 0x05, 0x5A, 0xD1, 0xD1, 0x02, 0xA2, 0x34,  // ..Z....4
                /* 1578 */  0x01, 0xDA, 0x8E, 0x36, 0x3E, 0x19, 0xA1, 0xD2,  // ...6>...
                /* 1580 */  0x93, 0x28, 0xFD, 0xF1, 0x05, 0x95, 0xF7, 0x74,  // .(.....t
                /* 1588 */  0x40, 0x41, 0x0C, 0xE8, 0x30, 0x43, 0x44, 0x41,  // @A..0CDA
                /* 1590 */  0x7A, 0x20, 0x9E, 0xEF, 0xE9, 0x1C, 0xC3, 0x8B,  // z ......
                /* 1598 */  0x03, 0x66, 0xBA, 0x95, 0x23, 0x68, 0x32, 0xCD,  // .f..#h2.
                /* 15A0 */  0xC3, 0x69, 0x2E, 0x0F, 0x3F, 0xB0, 0xFF, 0xFF,  // .i..?...
                /* 15A8 */  0xB7, 0x23, 0x98, 0xBA, 0xAE, 0x05, 0xD0, 0x4F,  // .#.....O
                /* 15B0 */  0x01, 0x47, 0x7B, 0x26, 0x87, 0x60, 0xCF, 0x97,  // .G{&.`..
                /* 15B8 */  0x1F, 0x20, 0x12, 0x7F, 0xBA, 0xA8, 0xC0, 0xD3,  // . ......
                /* 15C0 */  0xA5, 0x20, 0x9E, 0x2E, 0x1C, 0x29, 0x57, 0x0A,  // . ...)W.
                /* 15C8 */  0xD4, 0x64, 0x71, 0xB7, 0x82, 0x87, 0x75, 0xB0,  // .dq...u.
                /* 15D0 */  0x5F, 0x13, 0x3D, 0x5C, 0x30, 0x5D, 0xDF, 0x80,  // _.=\0]..
                /* 15D8 */  0xBB, 0x52, 0x85, 0xB7, 0x0A, 0x70, 0xC5, 0x5A,  // .R...p.Z
                /* 15E0 */  0xA7, 0x6E, 0x15, 0x38, 0x71, 0xA7, 0x75, 0xF2,  // .n.8q.u.
                /* 15E8 */  0xFF, 0xBF, 0x55, 0xC0, 0xF2, 0x06, 0xE9, 0xD3,  // ..U.....
                /* 15F0 */  0x3A, 0x4A, 0x08, 0x85, 0x64, 0x5C, 0xDF, 0x50,  // :J..d\.P
                /* 15F8 */  0xD7, 0x2C, 0x83, 0x19, 0xC4, 0xA3, 0x73, 0xA8,  // .,....s.
                /* 1600 */  0x73, 0x01, 0x5A, 0xD2, 0xAD, 0x02, 0xCA, 0xD9,  // s.Z.....
                /* 1608 */  0x00, 0x5C, 0xB7, 0x20, 0xF0, 0x9C, 0x0D, 0x00,  // .\. ....
                /* 1610 */  0x53, 0x5E, 0xCF, 0x06, 0x20, 0x0B, 0x73, 0x81,  // S^.. .s.
                /* 1618 */  0x41, 0x4B, 0xBA, 0x6A, 0x41, 0x75, 0x76, 0x9F,  // AK.jAuv.
                /* 1620 */  0xA5, 0x17, 0x18, 0x1E, 0x9F, 0x44, 0x47, 0x10,  // .....DG.
                /* 1628 */  0xB8, 0x69, 0xCE, 0x06, 0xC8, 0xFF, 0x3F, 0x41,  // .i....?A
                /* 1630 */  0x3D, 0x57, 0x2D, 0xD4, 0x09, 0x06, 0xE0, 0xBB,  // =W-.....
                /* 1638 */  0x4D, 0x91, 0xFF, 0xFF, 0x13, 0x0C, 0xD8, 0x82,  // M.......
                /* 1640 */  0x9D, 0x60, 0xD0, 0xF2, 0x4E, 0x30, 0x10, 0x8F,  // .`..N0..
                /* 1648 */  0x15, 0x6F, 0x30, 0x09, 0x0A, 0x3A, 0xC1, 0xA0,  // .o0..:..
                /* 1650 */  0xA4, 0x50, 0xE8, 0x08, 0xE3, 0x73, 0x01, 0x8F,  // .P...s..
                /* 1658 */  0x0E, 0x46, 0x41, 0x3C, 0x3A, 0xC7, 0x3A, 0x17,  // .FA<:.:.
                /* 1660 */  0xA0, 0x45, 0x1D, 0x2B, 0x20, 0xDD, 0x0D, 0xE0,  // .E.+ ...
                /* 1668 */  0x1C, 0x61, 0x00, 0xD3, 0x87, 0x83, 0x47, 0x18,  // .a....G.
                /* 1670 */  0xE0, 0xF3, 0xFF, 0x3F, 0x1C, 0x60, 0xAC, 0x1D,  // ...?.`..
                /* 1678 */  0x61, 0x00, 0xD2, 0xFF, 0xFF, 0x8F, 0x15, 0xC0,  // a.......
                /* 1680 */  0xC2, 0xA1, 0xC5, 0x23, 0x0C, 0x30, 0xBB, 0x78,  // ...#.0.x
                /* 1688 */  0xFA, 0x08, 0x03, 0xF0, 0xE9, 0x70, 0xF0, 0x08,  // .....p..
                /* 1690 */  0xC3, 0xFF, 0xFF, 0x87, 0x03, 0xB0, 0x28, 0xB4,  // ......(.
                /* 1698 */  0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A,  // .S.Q..ej
                /* 16A0 */  0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C,  // .iP.O...
                /* 16A8 */  0x95, 0x78, 0x0C, 0x28, 0x06, 0x84, 0xC6, 0xE2,  // .x.(....
                /* 16B0 */  0xD3, 0x8B, 0x41, 0xAC, 0x9B, 0x42, 0x57, 0x67,  // ..A..BWg
                /* 16B8 */  0x87, 0x00, 0x11, 0x90, 0x65, 0xFF, 0xC2, 0x05,  // ....e...
                /* 16C0 */  0x44, 0x40, 0x04, 0x64, 0x21, 0x9F, 0x14, 0x01,  // D@.d!...
                /* 16C8 */  0x59, 0x15, 0x88, 0x80, 0x9C, 0x0A, 0x88, 0x46,  // Y......F
                /* 16D0 */  0x04, 0xA2, 0x71, 0x3C, 0x00, 0xB1, 0x70, 0x20,  // ..q<..p 
                /* 16D8 */  0x02, 0xB2, 0x3A, 0x13, 0x40, 0x4C, 0x2A, 0x88,  // ..:.@L*.
                /* 16E0 */  0x80, 0x2C, 0x4B, 0x05, 0x10, 0x13, 0x09, 0x22,  // .,K...."
                /* 16E8 */  0x20, 0x67, 0x5C, 0x9F, 0x80, 0x1C, 0x18, 0x44,  //  g\....D
                /* 16F0 */  0x40, 0x0E, 0xF9, 0xAD, 0x16, 0x90, 0x23, 0x83,  // @.....#.
                /* 16F8 */  0x08, 0xC8, 0x82, 0x75, 0x00, 0x31, 0xF9, 0x20,  // ...u.1. 
                /* 1700 */  0x02, 0x72, 0x7C, 0x20, 0x2A, 0xC6, 0x07, 0x10,  // .r| *...
                /* 1708 */  0x8B, 0xF2, 0x18, 0x10, 0x90, 0x73, 0x81, 0x08,  // .....s..
                /* 1710 */  0xC8, 0x39, 0x68, 0x04, 0xE4, 0x54, 0x14, 0x02,  // .9h..T..
                /* 1718 */  0xB2, 0x2A, 0x27, 0x40, 0x4C, 0x23, 0x88, 0x80,  // .*'@L#..
                /* 1720 */  0x9C, 0x12, 0x88, 0x66, 0x06, 0xA2, 0x82, 0xAD,  // ...f....
                /* 1728 */  0x00, 0x31, 0xF5, 0x20, 0x02, 0xB2, 0x52, 0x2D,  // .1. ..R-
                /* 1730 */  0x40, 0x4C, 0x37, 0x88, 0x80, 0x9C, 0xDA, 0x0B,  // @L7.....
                /* 1738 */  0x10, 0xD3, 0xF0, 0x0E, 0x10, 0x90, 0x33, 0x98,  // ......3.
                /* 1740 */  0x01, 0x62, 0x89, 0x40, 0x04, 0x64, 0x45, 0x6E,  // .b.@.dEn
                /* 1748 */  0x80, 0x98, 0x3E, 0x10, 0x01, 0x39, 0x1D, 0x10,  // ..>..9..
                /* 1750 */  0xCD, 0x0A, 0x44, 0x95, 0xDA, 0x01, 0x62, 0xB2,  // ..D...b.
                /* 1758 */  0x41, 0x04, 0x64, 0x91, 0x0F, 0x21, 0x01, 0x59,  // A.d..!.Y
                /* 1760 */  0x32, 0x88, 0x80, 0x9C, 0xD8, 0x0F, 0x10, 0x8B,  // 2.......
                /* 1768 */  0x0F, 0x22, 0x20, 0x87, 0x3D, 0x84, 0x08, 0xC8,  // ." .=...
                /* 1770 */  0xD1, 0x41, 0x04, 0x64, 0xF9, 0x86, 0x80, 0x58,  // .A.d...X
                /* 1778 */  0x18, 0x10, 0x01, 0x59, 0x94, 0x23, 0x20, 0xA6,  // ...Y.# .
                /* 1780 */  0x10, 0x44, 0x40, 0x8E, 0x07, 0x44, 0xFE, 0xFF,  // .D@..D..
                /* 1788 */  0x83, 0x11, 0x10, 0x4D, 0xF6, 0x3A, 0x15, 0x90,  // ...M.:..
                /* 1790 */  0x73, 0x82, 0x08, 0xC8, 0x6A, 0x35, 0x01, 0x31,  // s...j5.1
                /* 1798 */  0xE9, 0x20, 0x02, 0x72, 0x6E, 0x20, 0x2A, 0xC2,  // . .rn *.
                /* 17A0 */  0x13, 0x10, 0x8B, 0x0C, 0xA2, 0x6B, 0x3B, 0x79,  // .....k;y
                /* 17A8 */  0x88, 0x08, 0xC8, 0x29, 0x4C, 0x01, 0xB1, 0x48,  // ...)L..H
                /* 17B0 */  0x20, 0x02, 0x72, 0x00, 0x55, 0x40, 0x2C, 0x0E,  //  .r.U@,.
                /* 17B8 */  0x88, 0x80, 0x2C, 0xC9, 0x15, 0x10, 0x13, 0x08,  // ..,.....
                /* 17C0 */  0x22, 0x20, 0xE7, 0x7B, 0x50, 0x08, 0xC8, 0x61,  // " .{P..a
                /* 17C8 */  0x41, 0x04, 0xE4, 0x68, 0xB6, 0x80, 0x58, 0x50,  // A..h..XP
                /* 17D0 */  0x10, 0x01, 0x59, 0xEA, 0x6B, 0x49, 0x40, 0x16,  // ..Y.kI@.
                /* 17D8 */  0x0E, 0x22, 0x20, 0x27, 0xF7, 0x05, 0xC4, 0x64,  // ." '...d
                /* 17E0 */  0xBC, 0x44, 0x04, 0xE4, 0xD0, 0x20, 0x02, 0xB2,  // .D... ..
                /* 17E8 */  0x04, 0x63, 0x40, 0x2C, 0x06, 0x88, 0x80, 0x1C,  // .c@,....
                /* 17F0 */  0x0A, 0x88, 0xAA, 0x7A, 0x76, 0x0A, 0xC8, 0x12,  // ...zv...
                /* 17F8 */  0x41, 0x74, 0x78, 0x20, 0x40, 0x34, 0x30, 0x10,  // Atx @40.
                /* 1800 */  0x8D, 0xF7, 0xB0, 0xD3, 0x80, 0x08, 0x88, 0x0E,  // ........
                /* 1808 */  0x18, 0xE4, 0x29, 0xA3, 0xC3, 0x05, 0x01, 0x11,  // ..).....
                /* 1810 */  0x90, 0x25, 0xBF, 0x78, 0x05, 0xE4, 0x00, 0x20,  // .%.x... 
                /* 1818 */  0x3A, 0x85, 0x10, 0x73, 0x40, 0x4C, 0x0E, 0x88,  // :..s@L..
                /* 1820 */  0x80, 0x9C, 0x44, 0x1D, 0x10, 0x8B, 0x05, 0xA2,  // ..D.....
                /* 1828 */  0x83, 0x02, 0x71, 0x77, 0x50, 0xA0, 0x20, 0x3A,  // ..qwP. :
                /* 1830 */  0x0C, 0x10, 0x7B, 0x87, 0x01, 0x0A, 0x22, 0x20,  // ..{..." 
                /* 1838 */  0x07, 0x03, 0xA2, 0x29, 0x81, 0x68, 0xA6, 0x9F,  // ...).h..
                /* 1840 */  0x95, 0x80, 0x9C, 0x10, 0x44, 0x40, 0xD6, 0xF9,  // ....D@..
                /* 1848 */  0x66, 0x11, 0x90, 0x55, 0x83, 0x08, 0xC8, 0xC1,  // f..U....
                /* 1850 */  0xFF, 0x2A, 0x81, 0x88, 0x8A, 0xF7, 0x4D, 0x20,  // .*....M 
                /* 1858 */  0x22, 0x1E, 0x44, 0x40, 0x4E, 0x02, 0x44, 0x75,  // ".D@N.Du
                /* 1860 */  0xBF, 0x5C, 0x02, 0x91, 0x14, 0x20, 0x02, 0xB2,  // .\... ..
                /* 1868 */  0x82, 0x87, 0x8C, 0x06, 0x46, 0x40, 0x04, 0xE4,  // ....F@..
                /* 1870 */  0xEC, 0x40, 0x54, 0x89, 0xC6, 0x81, 0x51, 0x10,  // .@T...Q.
                /* 1878 */  0x0D, 0x8C, 0x00, 0x51, 0x3D, 0x1E, 0x81, 0xFC,  // ...Q=...
                /* 1880 */  0xFF, 0x3F, 0x8A, 0x08, 0x44, 0x07, 0x06, 0x02,  // .?..D...
                /* 1888 */  0x44, 0x73, 0x02, 0x51, 0x8D, 0x8F, 0x96, 0x40,  // Ds.Q...@
                /* 1890 */  0x44, 0x30, 0x88, 0x0E, 0x1C, 0x04, 0x88, 0x46,  // D0.....F
                /* 1898 */  0x06, 0xA2, 0x62, 0x55, 0x02, 0x31, 0xE5, 0x20,  // ..bU.1. 
                /* 18A0 */  0x3A, 0x34, 0x10, 0x20, 0x9A, 0x1F, 0x88, 0xA6,  // :4. ....
                /* 18A8 */  0x75, 0x09, 0xC4, 0xB2, 0x83, 0x08, 0xC8, 0xDA,  // u.......
                /* 18B0 */  0x7F, 0x34, 0x81, 0x48, 0x10, 0x10, 0x01, 0x39,  // .4.H...9
                /* 18B8 */  0x3D, 0x10, 0x95, 0xA2, 0x73, 0xB0, 0x14, 0x44,  // =...s..D
                /* 18C0 */  0x07, 0x05, 0xE2, 0x13, 0x88, 0x45, 0x00, 0x11,  // .....E..
                /* 18C8 */  0x90, 0x03, 0x01, 0x51, 0x29, 0x2F, 0x9E, 0x40,  // ...Q)/.@
                /* 18D0 */  0x44, 0x18, 0x88, 0x80, 0x1C, 0x09, 0x88, 0x06,  // D.......
                /* 18D8 */  0x04, 0xA2, 0xD2, 0x8C, 0x02, 0x31, 0xA1, 0x20,  // .....1. 
                /* 18E0 */  0x3A, 0xB4, 0x10, 0x20, 0x1A, 0x19, 0x88, 0xCA,  // :.. ....
                /* 18E8 */  0x7D, 0xFD, 0x04, 0x22, 0xE2, 0x41, 0x04, 0xE4,  // }..".A..
                /* 18F0 */  0xE8, 0x1F, 0x20, 0x01, 0x59, 0xC7, 0x23, 0xE8,  // .. .Y.#.
                /* 18F8 */  0x41, 0x80, 0x81, 0xE8, 0x20, 0x40, 0x80, 0xA8,  // A... @..
                /* 1900 */  0x04, 0xAB, 0x40, 0x4C, 0x0F, 0x88, 0x0E, 0x2E,  // ..@L....
                /* 1908 */  0x04, 0x88, 0x86, 0x02, 0xA2, 0x62, 0xB4, 0x02,  // .....b..
                /* 1910 */  0x31, 0x65, 0x20, 0x02, 0x72, 0x22, 0x20, 0x1A,  // 1e .r" .
                /* 1918 */  0x0F, 0x88, 0xEA, 0x7A, 0x0F, 0x3D, 0xDC, 0x30,  // ...z.=.0
                /* 1920 */  0x10, 0x1D, 0x54, 0x08, 0x10, 0x8D, 0x0A, 0x44,  // ..T....D
                /* 1928 */  0x73, 0x89, 0x3D, 0x34, 0x50, 0x10, 0x1D, 0x56,  // s.=4P..V
                /* 1930 */  0x88, 0xDA, 0xC3, 0x0A, 0x05, 0xD1, 0x61, 0x85,  // ......a.
                /* 1938 */  0xB8, 0x3D, 0xAC, 0x50, 0x10, 0x1D, 0x56, 0x88,  // .=.P..V.
                /* 1940 */  0xDC, 0xC3, 0x0A, 0x05, 0xD1, 0x61, 0x85, 0xD8,  // .....a..
                /* 1948 */  0x3D, 0xAC, 0x50, 0x10, 0x01, 0x59, 0xB4, 0x5E,  // =.P..Y.^
                /* 1950 */  0x20, 0x16, 0x01, 0x44, 0x87, 0x06, 0xF2, 0x6A,  //  ..D...j
                /* 1958 */  0xD2, 0xA1, 0x81, 0x80, 0xE8, 0x60, 0x42, 0x80,  // .....`B.
                /* 1960 */  0x68, 0x24, 0x20, 0x1A, 0xE0, 0xB5, 0x15, 0x48,  // h$ ....H
                /* 1968 */  0xFF, 0xFF, 0x83, 0x89, 0x40, 0x74, 0xDA, 0x22,  // ....@t."
                /* 1970 */  0x8E, 0x81, 0x98, 0x38, 0x10, 0x01, 0x39, 0xDC,  // ...8..9.
                /* 1978 */  0x7B, 0x49, 0x83, 0x23, 0x20, 0x3A, 0x94, 0x90,  // {I.# :..
                /* 1980 */  0x47, 0xD9, 0x43, 0x09, 0x03, 0xD1, 0xE1, 0x80,  // G.C.....
                /* 1988 */  0x7C, 0xB0, 0x74, 0x38, 0x20, 0xBF, 0x44, 0x1D,  // |.t8 .D.
                /* 1990 */  0x04, 0x88, 0xEA, 0x61, 0x51, 0x10, 0x2A, 0xF7,  // ...aQ.*.
                /* 1998 */  0x2F, 0x16, 0x84, 0x44, 0xFD, 0x43, 0x05, 0x21,  // /..D.C.!
                /* 19A0 */  0x42, 0x3F, 0x60, 0x3A, 0x1E, 0x90, 0x1F, 0x55,  // B?`:...U
                /* 19A8 */  0x70, 0x92, 0x0F, 0x44, 0x47, 0x0F, 0xF2, 0x1A,  // p..DG...
                /* 19B0 */  0xD3, 0xD1, 0x83, 0x80, 0x08, 0xC8, 0x6A, 0x8C,  // ......j.
                /* 19B8 */  0x03, 0x31, 0x6D, 0x20, 0x3A, 0x3A, 0x11, 0x20,  // .1m ::. 
                /* 19C0 */  0x9A, 0x11, 0x88, 0x2A, 0xFC, 0xB9, 0x05, 0x22,  // ...*..."
                /* 19C8 */  0x72, 0x41, 0x74, 0x4C, 0x21, 0x40, 0x34, 0x30,  // rAtL!@40
                /* 19D0 */  0x10, 0x95, 0xF9, 0x0C, 0x14, 0x90, 0x35, 0x83,  // ......5.
                /* 19D8 */  0x08, 0xC8, 0xFA, 0x7E, 0x70, 0x81, 0x88, 0x5A,  // ...~p..Z
                /* 19E0 */  0x10, 0x01, 0x39, 0xA9, 0x76, 0x20, 0x16, 0x1B,  // ..9.v ..
                /* 19E8 */  0x44, 0x40, 0xD6, 0xFA, 0x96, 0x3B, 0x4C, 0x06,  // D@...;L.
                /* 19F0 */  0xA2, 0xE3, 0x00, 0x79, 0xB7, 0x3D, 0x0E, 0x30,  // ...y.=.0
                /* 19F8 */  0x10, 0x0D, 0x92, 0x00, 0xD1, 0xE8, 0x40, 0x54,  // ......@T
                /* 1A00 */  0xB8, 0xFA, 0xE3, 0x08, 0x05, 0xD1, 0x11, 0x82,  // ........
                /* 1A08 */  0x00, 0x51, 0x1D, 0xEE, 0x81, 0x98, 0x7A, 0x10,  // .Q....z.
                /* 1A10 */  0x01, 0x39, 0x0A, 0x10, 0x95, 0x2D, 0xFF, 0x18,  // .9...-..
                /* 1A18 */  0x43, 0x41, 0x74, 0x8C, 0x20, 0xFA, 0x8F, 0x11,  // CAt. ...
                /* 1A20 */  0x14, 0x44, 0x40, 0x0E, 0x01, 0x44, 0x13, 0x01,  // .D@..D..
                /* 1A28 */  0x51, 0xF5, 0xFE, 0x81, 0x58, 0x16, 0x10, 0x01,  // Q...X...
                /* 1A30 */  0x59, 0x53, 0x80, 0x81, 0x53, 0x10, 0x1D, 0x21,  // YS..S..!
                /* 1A38 */  0x48, 0x81, 0x63, 0x01, 0x05, 0xD1, 0x40, 0x49,  // H.c...@I
                /* 1A40 */  0x02, 0x20, 0x26, 0x16, 0x44, 0x83, 0x26, 0x40,  // . &.D.&@
                /* 1A48 */  0x34, 0x30, 0x10, 0x15, 0xDD, 0x00, 0x88, 0x25,  // 40.....%
                /* 1A50 */  0x00, 0xD1, 0xF1, 0x84, 0x44, 0x38, 0x26, 0x51,  // ....D8&Q
                /* 1A58 */  0x10, 0x01, 0xFD, 0xFF, 0x1F, 0x81, 0x54, 0x01,  // ......T.
                /* 1A60 */  0x88, 0x29, 0xC8, 0x00, 0xC4, 0xB2, 0x82, 0x08,  // .)......
                /* 1A68 */  0xC8, 0xC9, 0x81, 0xA8, 0xE6, 0x10, 0x03, 0xA0,  // ........
                /* 1A70 */  0x20, 0x3A, 0xC6, 0x10, 0x20, 0xAA, 0xA4, 0x04,  //  :.. ...
                /* 1A78 */  0x10, 0x4B, 0x90, 0xE2, 0x08, 0x41, 0x41, 0x34,  // .K...AA4
                /* 1A80 */  0x70, 0xD2, 0x02, 0x88, 0xC5, 0x00, 0xD1, 0x60,  // p......`
                /* 1A88 */  0x49, 0x0D, 0x20, 0x26, 0x08, 0x44, 0xC7, 0x31,  // I. &.D.1
                /* 1A90 */  0x02, 0x44, 0x83, 0x01, 0x51, 0x49, 0x3D, 0x8E,  // .D..QI=.
                /* 1A98 */  0x5C, 0x14, 0x44, 0x40, 0xD6, 0x12, 0xE4, 0x18,  // \.D@....
                /* 1AA0 */  0x42, 0x41, 0x74, 0x60, 0x20, 0x45, 0x0E, 0x0C,  // BAt` E..
                /* 1AA8 */  0x14, 0x44, 0x83, 0x25, 0x49, 0x0E, 0x09, 0x14,  // .D.%I...
                /* 1AB0 */  0x44, 0x40, 0x0E, 0xDA, 0x04, 0x88, 0xA5, 0x06,  // D@......
                /* 1AB8 */  0xD1, 0x40, 0x49, 0x94, 0x63, 0x0D, 0x05, 0xD1,  // .@I.c...
                /* 1AC0 */  0x21, 0x81, 0x54, 0x39, 0x24, 0x50, 0x10, 0x01,  // !.T9$P..
                /* 1AC8 */  0x39, 0x70, 0x96, 0x23, 0x08, 0x05, 0xD1, 0xE0,  // 9p.#....
                /* 1AD0 */  0x48, 0x97, 0xC1, 0x51, 0x10, 0x1D, 0x95, 0xC8,  // H..Q....
                /* 1AD8 */  0x3B, 0x55, 0xC7, 0x0F, 0x02, 0xA2, 0x63, 0x14,  // ;U....c.
                /* 1AE0 */  0x29, 0x03, 0xC4, 0x32, 0x81, 0x08, 0xC8, 0x3A,  // )..2...:
                /* 1AE8 */  0x9E, 0xBB, 0x02, 0xB2, 0x28, 0x10, 0x1D, 0x99,  // ....(...
                /* 1AF0 */  0x08, 0x10, 0x8D, 0x05, 0x44, 0xA5, 0xB4, 0x01,  // ....D...
                /* 1AF8 */  0x62, 0xBA, 0x40, 0x74, 0xCC, 0x23, 0x40, 0x34,  // b.@t.#@4
                /* 1B00 */  0x1B, 0x10, 0x8D, 0x11, 0xE7, 0x08, 0x43, 0x41,  // ......CA
                /* 1B08 */  0x74, 0x1C, 0x21, 0x79, 0x8E, 0x23, 0x14, 0x44,  // t.!y.#.D
                /* 1B10 */  0x07, 0x0F, 0x02, 0x44, 0x03, 0x02, 0x51, 0x61,  // ...D..Qa
                /* 1B18 */  0x7D, 0x80, 0x98, 0x4C, 0x10, 0x1D, 0x4B, 0x08,  // }..L..K.
                /* 1B20 */  0x10, 0x8D, 0x0A, 0x44, 0x45, 0x06, 0x1A, 0x28,  // ...DE..(
                /* 1B28 */  0x05, 0xD1, 0xE1, 0x82, 0x00, 0xD1, 0xE8, 0x40,  // .......@
                /* 1B30 */  0x54, 0x79, 0xA2, 0x81, 0x52, 0x10, 0x1D, 0x87,  // Ty..R...
                /* 1B38 */  0x08, 0x10, 0x95, 0xD2, 0x08, 0xC8, 0xFF, 0xFF,  // ........
                /* 1B40 */  0x43, 0x9E, 0x40, 0x74, 0x60, 0x20, 0x91, 0x0E,  // C.@t` ..
                /* 1B48 */  0x09, 0xB4, 0x12, 0x10, 0xCB, 0x03, 0x22, 0x20,  // ......" 
                /* 1B50 */  0x2B, 0xC9, 0x34, 0x48, 0x0A, 0x22, 0x20, 0xE7,  // +.4H." .
                /* 1B58 */  0x01, 0xA2, 0xE9, 0x80, 0xA8, 0xAA, 0x50, 0x47,  // ......PG
                /* 1B60 */  0x31, 0x0A, 0xA2, 0x41, 0x92, 0x52, 0x83, 0xA4,  // 1..A.R..
                /* 1B68 */  0x20, 0x3A, 0x6E, 0x11, 0x20, 0x1A, 0x13, 0x88,  //  :n. ...
                /* 1B70 */  0x4A, 0x6C, 0x75, 0x8C, 0xA2, 0x20, 0x1A, 0x1C,  // Jlu.. ..
                /* 1B78 */  0x01, 0xA2, 0xD1, 0x81, 0xA8, 0xEC, 0x07, 0xAA,  // ........
                /* 1B80 */  0x0E, 0x1F, 0x04, 0x44, 0xC7, 0x43, 0x52, 0x0B,  // ...D.CR.
                /* 1B88 */  0x88, 0x69, 0xC9, 0x35, 0x38, 0x0A, 0xA2, 0xC1,  // .i.58...
                /* 1B90 */  0x91, 0x5E, 0x03, 0xA5, 0x20, 0x02, 0x72, 0x0E,  // .^.. .r.
                /* 1B98 */  0x20, 0x9A, 0x1F, 0x88, 0xAA, 0x09, 0x76, 0xDC,  //  .....v.
                /* 1BA0 */  0xA1, 0x20, 0x3A, 0x20, 0x10, 0x20, 0xAA, 0x26,  // . : . .&
                /* 1BA8 */  0x19, 0x10, 0x93, 0x06, 0x22, 0x20, 0x6B, 0x68,  // ...." kh
                /* 1BB0 */  0x06, 0xC4, 0x14, 0x81, 0x08, 0xC8, 0x59, 0xA2,  // ......Y.
                /* 1BB8 */  0x01, 0xB1, 0x64, 0x20, 0x3A, 0x1A, 0x92, 0x6A,  // ..d :..j
                /* 1BC0 */  0x07, 0x0B, 0x0A, 0xA2, 0x43, 0x05, 0xC9, 0x76,  // ....C..v
                /* 1BC8 */  0xBC, 0xA4, 0x20, 0x3A, 0x18, 0x90, 0x6E, 0x40,  // .. :..n@
                /* 1BD0 */  0x4C, 0x25, 0x88, 0x06, 0x4C, 0xC2, 0x0D, 0x98,  // L%..L...
                /* 1BD8 */  0x82, 0x08, 0xC8, 0xA1, 0xCA, 0x01, 0x53, 0x10,  // ......S.
                /* 1BE0 */  0x1D, 0xAD, 0x48, 0xBA, 0xA3, 0x15, 0x05, 0x11,  // ..H.....
                /* 1BE8 */  0x90, 0x03, 0x02, 0xD1, 0xB8, 0x40, 0x54, 0x65,  // .....@Te
                /* 1BF0 */  0xBC, 0x43, 0x02, 0x05, 0xD1, 0x41, 0x83, 0x00,  // .C...A..
                /* 1BF8 */  0xD1, 0xD4, 0x40, 0x34, 0x5E, 0xBD, 0xE3, 0x1D,  // ..@4^...
                /* 1C00 */  0x05, 0xD1, 0x61, 0x87, 0xF4, 0x03, 0x62, 0xA2,  // ..a...b.
                /* 1C08 */  0x41, 0x74, 0x08, 0x20, 0x40, 0x34, 0x3A, 0x10,  // At. @4:.
                /* 1C10 */  0x95, 0x1C, 0xF0, 0x88, 0x47, 0x41, 0x74, 0xD0,  // ....GAt.
                /* 1C18 */  0x20, 0x09, 0x07, 0x4E, 0x41, 0x04, 0xF4, 0xFF,  //  ..NA...
                /* 1C20 */  0x7F, 0x48, 0x11, 0x10, 0x55, 0xD2, 0xF0, 0x88,  // .H..U...
                /* 1C28 */  0x45, 0x23, 0x1E, 0x8C, 0x28, 0x88, 0x0E, 0x07,  // E#..(...
                /* 1C30 */  0x24, 0x23, 0x10, 0xD3, 0x0B, 0xA2, 0x63, 0x29,  // $#....c)
                /* 1C38 */  0xE9, 0x08, 0xC4, 0xB4, 0x82, 0xE8, 0xA8, 0x49,  // .......I
                /* 1C40 */  0x42, 0x1E, 0x35, 0x69, 0xC9, 0x83, 0x06, 0x4D,  // B.5i...M
                /* 1C48 */  0x79, 0x18, 0xA0, 0x20, 0x3A, 0x44, 0x90, 0x96,  // y.. :D..
                /* 1C50 */  0x87, 0x08, 0x0A, 0x22, 0x20, 0x2B, 0xAB, 0x09,  // ..." +..
                /* 1C58 */  0xC4, 0x74, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .t.....
            })
            Name (EPY1, 0x6BAFC8F1)
            Name (EPY2, 0x81F1749A)
            Name (EPY3, 0xAF5A253E)
            Name (EPY4, 0x1138A274)
            Method (EYPO, 0, Serialized)
            {
                Return (EPY1) /* \AMW0.EPY1 */
            }

            Method (EYPT, 0, Serialized)
            {
                Return (EPY2) /* \AMW0.EPY2 */
            }

            Method (EYPE, 0, Serialized)
            {
                Return (EPY3) /* \AMW0.EPY3 */
            }

            Method (EYPF, 0, Serialized)
            {
                Return (EPY4) /* \AMW0.EPY4 */
            }

            Method (SPEC, 1, Serialized)
            {
                Return (AMWV) /* \AMWV */
            }

            Method (DEVP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If ((PARA == One))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF |= One
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF |= 0x02
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF |= 0x04
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF |= 0x08
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF |= 0x10
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF |= 0x20
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF |= 0x40
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF |= 0x80
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF |= 0x0100
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF |= 0x0200
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF |= 0x0400
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF |= 0x0800
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF |= 0x1000
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF |= 0x2000
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF |= 0x4000
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF |= 0x8000
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF |= 0x00010000
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF |= 0x00020000
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF |= 0x00040000
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF |= 0x00080000
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF |= 0x00100000
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((PARA == Zero))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFE
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFD
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFB
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFF7
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFEF
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFDF
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFBF
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFF7F
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFEFF
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFDFF
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFBFF
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFF7FF
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFEFFF
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFDFFF
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFBFFF
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFF7FFF
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFEFFFF
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFDFFFF
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFBFFFF
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFF7FFFF
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFEFFFFF
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Return (One)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = One
                    }
                    Case (0xA0000002)
                    {
                        Local0 = One
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (Zero)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }

            Name (RAMA, 0xCA8D6018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\RAMX, SystemMemory, RAMA, 0x0100)
            Field (RAMX, ByteAcc, NoLock, Preserve)
            {
                WFUN,   32, 
                WSIZ,   32, 
                Offset (0x10), 
                IDAT,   896, 
                ODAT,   1024
            }

            Mutex (WMTX, 0x00)
            Name (LSTF, Buffer (0x04){})
            Name (LSTI, Buffer (0x70){})
            Name (CURF, Buffer (0x04){})
            Name (CURI, Buffer (0x70){})
            Method (WMII, 0, Serialized)
            {
                CURF = WFUN /* \AMW0.WFUN */
                CURI = IDAT /* \AMW0.IDAT */
                If (((CURF == LSTF) && (CURI == LSTI)))
                {
                    Return (Zero)
                }
                Else
                {
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    LSTF = WFUN /* \AMW0.WFUN */
                    LSTI = IDAT /* \AMW0.IDAT */
                }
            }

            Method (LERR, 1, Serialized)
            {
                WBUF = ODAT /* \AMW0.ODAT */
                Return (DerefOf (WBUF [Zero]))
            }

            Method (GBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000001
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000002
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GBON, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000003
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000006
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (ISLG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000007
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000008
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000009
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SAPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000004
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SUPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000005
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SBOG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000A
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (LDFT, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000B
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFTB, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000C
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SDFT, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000D
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFTM, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000E
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (DCTL, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000F
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000010
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000011
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000012
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000013
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (CKPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000014
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GTOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000015
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (STOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000016
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0xCAD4A018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            DSAF,   32, 
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        OperationRegion (IOB2, SystemIO, SMIP, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMPT,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMPT = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (_SB)
    {
        OperationRegion (WPBR, SystemMemory, 0xCAD5B000, 0x0001)
        Field (WPBR, AnyAcc, NoLock, Preserve)
        {
            CTRL,   8
        }
    }

    Scope (\)
    {
        Device (ABAW)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AsusBACKUPWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x19, 0x56, 0x48, 0xA0, 0x07, 0x3E, 0xBE, 0x4A,  // .VH..>.J
                /* 0008 */  0xBE, 0x6B, 0x0A, 0xB6, 0x7E, 0x2A, 0x92, 0xE6,  // .k..~*..
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x41424145)
                    {
                        Return (EABA ())
                    }
                    Case (0x41424147)
                    {
                        Return (GABA ())
                    }
                    Case (0x53425544)
                    {
                        Return (SBUD (Arg2))
                    }
                    Case (0x47425544)
                    {
                        Return (GBUD (Arg2))
                    }
                    Case (0x53595343)
                    {
                        Return (SYSC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (WQMO, Buffer (0x03F5)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE5, 0x03, 0x00, 0x00, 0x06, 0x0F, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x50, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // .P.....B
                /* 0020 */  0x20, 0x74, 0x01, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  t....!.
                /* 0028 */  0x46, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // F..F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x9C, 0xA0, 0x6C, 0x68, 0x94, 0x0C, 0x08,  // h..lh...
                /* 0078 */  0x79, 0x16, 0x60, 0x1D, 0x98, 0x10, 0xD8, 0xBD,  // y.`.....
                /* 0080 */  0x00, 0x83, 0x02, 0x84, 0xCD, 0x42, 0xE2, 0x04,  // .....B..
                /* 0088 */  0x58, 0x13, 0xA0, 0x4D, 0x80, 0x31, 0x01, 0xE6,  // X..M.1..
                /* 0090 */  0x04, 0xD8, 0x12, 0xE0, 0x4C, 0x80, 0x45, 0x28,  // ....L.E(
                /* 0098 */  0x79, 0x43, 0x11, 0x58, 0xBC, 0x0A, 0x71, 0x84,  // yC.X..q.
                /* 00A0 */  0x12, 0xC3, 0x80, 0x31, 0xA2, 0x44, 0x0B, 0x65,  // ...1.D.e
                /* 00A8 */  0x98, 0x80, 0x91, 0x2A, 0x83, 0x11, 0x72, 0x8C,  // ...*..r.
                /* 00B0 */  0x70, 0xB6, 0x3F, 0x08, 0x12, 0x6C, 0xC1, 0x1A,  // p.?..l..
                /* 00B8 */  0xAA, 0x23, 0x8D, 0x06, 0x35, 0xBC, 0x04, 0x87,  // .#..5...
                /* 00C0 */  0xEB, 0xA1, 0x9E, 0x63, 0xE7, 0x02, 0xA4, 0x4F,  // ...c...O
                /* 00C8 */  0x52, 0x20, 0x07, 0x79, 0x6E, 0x75, 0x8E, 0x93,  // R .ynu..
                /* 00D0 */  0x80, 0x24, 0x30, 0x56, 0x82, 0x0E, 0x06, 0x0E,  // .$0V....
                /* 00D8 */  0xC5, 0x35, 0xA0, 0x66, 0x7C, 0xBC, 0x4C, 0x10,  // .5.f|.L.
                /* 00E0 */  0x1C, 0x6A, 0x88, 0x1E, 0x68, 0xB8, 0x13, 0x38,  // .j..h..8
                /* 00E8 */  0x44, 0x06, 0xE8, 0x69, 0x1D, 0x0D, 0xE6, 0x00,  // D..i....
                /* 00F0 */  0x60, 0x87, 0x93, 0xD1, 0x3D, 0xA0, 0x54, 0x01,  // `...=.T.
                /* 00F8 */  0x66, 0xC7, 0xAC, 0x89, 0x25, 0x38, 0x1E, 0x43,  // f...%8.C
                /* 0100 */  0x9F, 0xEE, 0xF9, 0x9C, 0x70, 0x02, 0xCB, 0x1F,  // ....p...
                /* 0108 */  0x04, 0x6A, 0x64, 0x86, 0xF6, 0x20, 0x4F, 0x2B,  // .jd.. O+
                /* 0110 */  0x66, 0xC8, 0xC3, 0x3F, 0x2C, 0x26, 0x16, 0x42,  // f..?,&.B
                /* 0118 */  0x1F, 0x04, 0x8F, 0x07, 0xDE, 0xFF, 0x7F, 0x3C,  // .......<
                /* 0120 */  0xE0, 0x51, 0x7C, 0x26, 0x10, 0xC2, 0x2B, 0x41,  // .Q|&..+A
                /* 0128 */  0x6C, 0x0F, 0x28, 0x41, 0x81, 0xC0, 0xE8, 0x01,  // l.(A....
                /* 0130 */  0xD9, 0xAF, 0x00, 0x84, 0xE0, 0x65, 0x8E, 0x48,  // .....e.H
                /* 0138 */  0x4E, 0x11, 0x34, 0x26, 0x4F, 0xEE, 0xD5, 0x20,  // N.4&O.. 
                /* 0140 */  0xC4, 0xBB, 0x40, 0xE8, 0xB3, 0x3A, 0xE5, 0x30,  // ..@..:.0
                /* 0148 */  0x85, 0x9F, 0x13, 0x28, 0x41, 0x91, 0x03, 0x40,  // ...(A..@
                /* 0150 */  0x89, 0x19, 0x00, 0xEA, 0x14, 0x10, 0xFB, 0x70,  // .......p
                /* 0158 */  0x4E, 0xE6, 0x00, 0x0E, 0x27, 0xCA, 0x39, 0x1C,  // N...'.9.
                /* 0160 */  0x8F, 0x8F, 0x0C, 0x46, 0x38, 0xCB, 0x72, 0x4F,  // ...F8.rO
                /* 0168 */  0x0E, 0x44, 0xF3, 0x1C, 0x34, 0x85, 0x53, 0x7A,  // .D..4.Sz
                /* 0170 */  0x19, 0x30, 0xC1, 0x04, 0xAB, 0x94, 0x05, 0x10,  // .0......
                /* 0178 */  0x05, 0x3A, 0x1E, 0xC8, 0xC6, 0x4A, 0x4D, 0xA0,  // .:...JM.
                /* 0180 */  0x23, 0x85, 0x65, 0x01, 0x69, 0x38, 0xB8, 0x33,  // #.e.i8.3
                /* 0188 */  0x45, 0x98, 0xD7, 0x03, 0x0F, 0xDC, 0xE7, 0x03,  // E.......
                /* 0190 */  0xCF, 0x2A, 0xC2, 0x93, 0x01, 0x01, 0xD5, 0x71,  // .*.....q
                /* 0198 */  0x83, 0xC7, 0x87, 0x50, 0xF8, 0x31, 0x51, 0x38,  // ...P.1Q8
                /* 01A0 */  0xC7, 0x05, 0xA3, 0x20, 0x3E, 0x01, 0x38, 0x0A,  // ... >.8.
                /* 01A8 */  0x84, 0x9C, 0x1C, 0x06, 0xD0, 0x43, 0x3B, 0x0B,  // .....C;.
                /* 01B0 */  0x43, 0x1C, 0xAA, 0x09, 0x3C, 0x95, 0x47, 0x06,  // C...<.G.
                /* 01B8 */  0x58, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86, 0xE1,  // X..xr...
                /* 01C0 */  0x0C, 0x69, 0x38, 0x7E, 0x15, 0x38, 0xAF, 0x04,  // .i8~.8..
                /* 01C8 */  0xFC, 0x48, 0x00, 0xFF, 0xBA, 0xE1, 0x03, 0xC1,  // .H......
                /* 01D0 */  0x29, 0x3C, 0x69, 0xBC, 0x5D, 0x24, 0xF0, 0x91,  // )<i.]$..
                /* 01D8 */  0x00, 0x1C, 0x40, 0xBE, 0x03, 0x58, 0xE9, 0x39,  // ..@..X.9
                /* 01E0 */  0x80, 0xCE, 0x21, 0x44, 0x98, 0x68, 0x26, 0xF8,  // ..!D.h&.
                /* 01E8 */  0xFF, 0x87, 0xE7, 0x82, 0x47, 0x4A, 0x65, 0x8D,  // ....GJe.
                /* 01F0 */  0x0B, 0x75, 0x2C, 0xF0, 0xE1, 0x80, 0x61, 0x9F,  // .u,...a.
                /* 01F8 */  0xFC, 0xD1, 0x14, 0x3D, 0x43, 0x5D, 0x08, 0x0E,  // ...=C]..
                /* 0200 */  0xEA, 0xED, 0xC1, 0x16, 0x0D, 0x2A, 0x34, 0x08,  // .....*4.
                /* 0208 */  0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0,  // ..rX..=.
                /* 0210 */  0x27, 0x07, 0xDF, 0x3A, 0x3C, 0x33, 0x63, 0x84,  // '..:<3c.
                /* 0218 */  0xF5, 0x68, 0x1D, 0xE9, 0x60, 0x80, 0x12, 0x35,  // .h..`..5
                /* 0220 */  0x54, 0x03, 0xC9, 0xE3, 0x2C, 0xC8, 0xCD, 0x00,  // T...,...
                /* 0228 */  0xCE, 0xDC, 0x4E, 0xE5, 0x50, 0xD9, 0xC9, 0x00,  // ..N.P...
                /* 0230 */  0x38, 0x0C, 0xE3, 0x48, 0xCE, 0xE3, 0xF1, 0x21,  // 8..H...!
                /* 0238 */  0xC2, 0x8B, 0x0C, 0x3B, 0x19, 0x00, 0x9E, 0x3D,  // ...;...=
                /* 0240 */  0x9E, 0x0C, 0x40, 0xF1, 0xFF, 0x3F, 0x19, 0xE0,  // ..@..?..
                /* 0248 */  0xA2, 0xAC, 0x42, 0x27, 0x03, 0x3E, 0x60, 0x0B,  // ..B'.>`.
                /* 0250 */  0x02, 0xD2, 0x84, 0xDE, 0x6F, 0x1E, 0x67, 0x0C,  // ....o.g.
                /* 0258 */  0xEC, 0xC1, 0x1D, 0x47, 0xE4, 0x37, 0x80, 0x63,  // ...G.7.c
                /* 0260 */  0x79, 0xA0, 0x61, 0x12, 0x00, 0x75, 0x1E, 0xF0,  // y.a..u..
                /* 0268 */  0xA8, 0x1C, 0x9E, 0x42, 0xE1, 0x69, 0x74, 0x2C,  // ...B.it,
                /* 0270 */  0x40, 0x9C, 0x0E, 0x28, 0x88, 0x0F, 0x41, 0x8E,  // @..(..A.
                /* 0278 */  0x70, 0x2C, 0x40, 0x8F, 0xD2, 0xE3, 0x38, 0x05,  // p,@...8.
                /* 0280 */  0x36, 0xBA, 0x83, 0x64, 0x03, 0xF3, 0xD8, 0xB8,  // 6..d....
                /* 0288 */  0x06, 0x08, 0xDD, 0x00, 0x8C, 0x6B, 0x35, 0x83,  // .....k5.
                /* 0290 */  0x45, 0x81, 0xF9, 0x4C, 0x80, 0xD1, 0x75, 0x25,  // E..L..u%
                /* 0298 */  0x00, 0x59, 0x86, 0x11, 0xA1, 0x55, 0x80, 0x48,  // .Y...U.H
                /* 02A0 */  0x23, 0xA4, 0xEE, 0x48, 0x9E, 0x11, 0x78, 0x0F,  // #..H..x.
                /* 02A8 */  0x5F, 0x64, 0x46, 0x20, 0x8B, 0x71, 0xB1, 0x80,  // _dF .q..
                /* 02B0 */  0x72, 0xDC, 0xE0, 0x93, 0x06, 0xFB, 0x91, 0xC0,  // r.......
                /* 02B8 */  0x63, 0x02, 0x9B, 0x3E, 0x01, 0xFF, 0xFF, 0x6B,  // c..>...k
                /* 02C0 */  0x05, 0xB8, 0xD1, 0xF9, 0xA9, 0xC4, 0xC7, 0x05,  // ........
                /* 02C8 */  0x1E, 0x78, 0xD4, 0x14, 0xC4, 0x83, 0x72, 0x98,  // .x....r.
                /* 02D0 */  0xB9, 0xA2, 0x4F, 0x6B, 0x1E, 0xC0, 0x1B, 0xC9,  // ..Ok....
                /* 02D8 */  0x53, 0x92, 0x21, 0x5E, 0x22, 0x7C, 0x4A, 0xF2,  // S.!^"|J.
                /* 02E0 */  0xA9, 0x04, 0xEC, 0x50, 0x3E, 0x95, 0x00, 0x9E,  // ...P>...
                /* 02E8 */  0x1C, 0x3A, 0x35, 0xEB, 0xF4, 0x54, 0x02, 0x2E,  // .:5..T..
                /* 02F0 */  0x49, 0xEB, 0xD0, 0xA9, 0x04, 0x77, 0xB0, 0xF3,  // I....w..
                /* 02F8 */  0x84, 0x1E, 0x7F, 0xD8, 0x29, 0x07, 0x73, 0x80,  // ....).s.
                /* 0300 */  0xE0, 0x27, 0x14, 0x9D, 0x7D, 0x50, 0x21, 0x28,  // .'..}P!(
                /* 0308 */  0x14, 0xE1, 0x54, 0x82, 0x12, 0x0D, 0x47, 0x41,  // ..T...GA
                /* 0310 */  0x3C, 0x36, 0x07, 0x81, 0xD0, 0xFF, 0xFF, 0x5C,  // <6.....\
                /* 0318 */  0x80, 0x3B, 0xB6, 0xF9, 0xA4, 0xE7, 0x4B, 0x81,  // .;....K.
                /* 0320 */  0xC5, 0x9F, 0x0A, 0xA0, 0xDE, 0x28, 0xD8, 0xD1,  // .....(..
                /* 0328 */  0x07, 0x18, 0x0D, 0x0A, 0xCE, 0x34, 0xF9, 0x18,  // .....4..
                /* 0330 */  0x3C, 0x28, 0x70, 0x0F, 0xD7, 0x27, 0x07, 0xC0,  // <(p..'..
                /* 0338 */  0x93, 0x44, 0xAB, 0x0A, 0x4F, 0x0E, 0x20, 0xD3,  // .D..O. .
                /* 0340 */  0x7F, 0x72, 0x40, 0xAB, 0x00, 0xD2, 0x39, 0x8C,  // .r@...9.
                /* 0348 */  0x9F, 0x1C, 0xE0, 0xE4, 0x3E, 0x32, 0xD0, 0x51,  // ....>2.Q
                /* 0350 */  0xF9, 0xFF, 0x9F, 0x98, 0x44, 0xA9, 0x0F, 0x28,  // ....D..(
                /* 0358 */  0xA8, 0x9C, 0x63, 0xA7, 0x20, 0x06, 0x74, 0x88,  // ..c. .t.
                /* 0360 */  0x93, 0x03, 0xF4, 0xF3, 0x11, 0xF0, 0xBC, 0xDA,  // ........
                /* 0368 */  0x00, 0x8B, 0xE8, 0x53, 0x45, 0x85, 0x9D, 0x2A,  // ...SE..*
                /* 0370 */  0x05, 0xF1, 0x54, 0x7D, 0x9F, 0x80, 0x7B, 0xAB,  // ..T}..{.
                /* 0378 */  0x7C, 0xB1, 0x01, 0xFB, 0x7D, 0x02, 0x30, 0xF3,  // |...}.0.
                /* 0380 */  0xFF, 0xBF, 0x4F, 0x40, 0xF2, 0x78, 0x9F, 0x00,  // ..O@.x..
                /* 0388 */  0x97, 0x42, 0x9B, 0x3E, 0x35, 0x1A, 0xB5, 0x6A,  // .B.>5..j
                /* 0390 */  0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5, 0xFA, 0x54,  // P.F....T
                /* 0398 */  0x6A, 0xCC, 0x98, 0x96, 0x93, 0x96, 0x2F, 0x32,  // j...../2
                /* 03A0 */  0x54, 0xC4, 0x72, 0x04, 0x62, 0xE9, 0x14, 0x32,  // T.r.b..2
                /* 03A8 */  0x72, 0x12, 0x30, 0x88, 0xEE, 0x0E, 0xE4, 0x73,  // r.0....s
                /* 03B0 */  0x2A, 0x20, 0x4B, 0x03, 0x11, 0x90, 0x23, 0x7D,  // * K...#}
                /* 03B8 */  0x1B, 0x04, 0xE4, 0x7C, 0x20, 0x02, 0xB2, 0x2A,  // ...| ..*
                /* 03C0 */  0x0F, 0x40, 0x4C, 0x22, 0x88, 0x80, 0x9C, 0x0D,  // .@L"....
                /* 03C8 */  0x88, 0x06, 0x05, 0xA2, 0xB1, 0xD6, 0x29, 0x20,  // ......) 
                /* 03D0 */  0x87, 0x04, 0x11, 0x90, 0x05, 0x7E, 0xD1, 0x04,  // .....~..
                /* 03D8 */  0x64, 0xB9, 0x20, 0x02, 0x72, 0x50, 0x20, 0x1A,  // d. .rP .
                /* 03E0 */  0x1B, 0x88, 0x0A, 0x7E, 0x23, 0x08, 0xC8, 0xEA,  // ...~#...
                /* 03E8 */  0x41, 0x04, 0x64, 0x9D, 0x36, 0x80, 0x98, 0x6A,  // A.d.6..j
                /* 03F0 */  0x10, 0x01, 0xF9, 0xFF, 0x0F                     // .....
            })
            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (EABA, 0, Serialized)
            {
                ISMI (0x95)
                Return (Zero)
            }

            Method (GABA, 0, Serialized)
            {
                Return (ABAP) /* \ABAW.ABAP */
            }

            Method (SYSC, 1, Serialized)
            {
                SYSD = Arg0
                ISMI (0x95)
                Return (ERCO) /* \ABAW.ERCO */
            }

            Method (SBUD, 1, Serialized)
            {
                IDAT = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (SBTB, SystemMemory, Local1, 0x04)
                Field (SBTB, ByteAcc, NoLock, Preserve)
                {
                    TDAT,   32
                }

                TDAT = DAT0 /* \ABAW.DAT0 */
                Return (Zero)
            }

            Method (GBUD, 1, Serialized)
            {
                INDX = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (GBTB, SystemMemory, Local1, 0x04)
                Field (GBTB, ByteAcc, NoLock, Preserve)
                {
                    RDAT,   32
                }

                Return (RDAT) /* \ABAW.GBUD.RDAT */
            }

            Name (ABAP, 0xCAD6D018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\ABAX, SystemMemory, ABAP, 0x00010000)
            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SIGN,   32, 
                WFUN,   32, 
                DSIG,   32, 
                BUDA,   1024, 
                ERCO,   32, 
                IDAT,   96
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x90), 
                INDX,   32, 
                DAT0,   32
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SYSD,   96
            }
        }
    }

    Scope (\)
    {
        Device (ACCE)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSCONTROLCENTER")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x15, 0xB1, 0x2B, 0xB8, 0xAE, 0x43, 0x35, 0x4B,  // ..+..C5K
                /* 0008 */  0xB7, 0x9D, 0xBD, 0x64, 0x16, 0xAB, 0xC3, 0x81,  // ...d....
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x41504631)
                    {
                        Return (APF1 (Arg2))
                    }
                    Case (0x41505057)
                    {
                        Return (APPW (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (WQMO, Buffer (0x0298)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x88, 0x02, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xC9, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x20, 0x82, 0x00, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x43, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // C..F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x9C, 0xA0, 0x6C, 0x68, 0x94, 0x0C, 0x08,  // h..lh...
                /* 0078 */  0x79, 0x16, 0x60, 0x1D, 0x98, 0x10, 0xD8, 0xBD,  // y.`.....
                /* 0080 */  0x00, 0x85, 0x02, 0xC4, 0x09, 0x50, 0x86, 0x21,  // .....P.!
                /* 0088 */  0x84, 0xC6, 0x10, 0x64, 0x4D, 0x80, 0xAD, 0x91,  // ...dM...
                /* 0090 */  0xC8, 0x99, 0x00, 0x83, 0x02, 0x2C, 0xA2, 0x10,  // .....,..
                /* 0098 */  0xAC, 0x30, 0xA1, 0x0C, 0xD2, 0x9B, 0x00, 0x73,  // .0.....s
                /* 00A0 */  0x93, 0x12, 0x8A, 0x31, 0x6A, 0x43, 0x13, 0x6C,  // ...1jC.l
                /* 00A8 */  0x8C, 0x98, 0x71, 0x3A, 0x44, 0xD4, 0x04, 0xE2,  // ..q:D...
                /* 00B0 */  0xB4, 0x3F, 0x08, 0x12, 0x69, 0xC1, 0x1A, 0xAA,  // .?..i...
                /* 00B8 */  0x23, 0x8D, 0x06, 0x35, 0xBC, 0x04, 0x87, 0xEB,  // #..5....
                /* 00C0 */  0xA1, 0x9E, 0x63, 0xE7, 0x02, 0xA4, 0x4F, 0x52,  // ..c...OR
                /* 00C8 */  0x20, 0x07, 0x79, 0x6E, 0x75, 0x8E, 0x93, 0x80,  //  .ynu...
                /* 00D0 */  0x24, 0x30, 0x56, 0x82, 0x0E, 0x06, 0x0E, 0xC5,  // $0V.....
                /* 00D8 */  0x35, 0xA0, 0x66, 0x7C, 0xBC, 0x4C, 0x10, 0x1C,  // 5.f|.L..
                /* 00E0 */  0x6A, 0x88, 0x1E, 0x68, 0xB8, 0x13, 0x38, 0x44,  // j..h..8D
                /* 00E8 */  0x06, 0x68, 0x61, 0xA3, 0x41, 0x1D, 0x00, 0x3C,  // .ha.A..<
                /* 00F0 */  0xAD, 0x93, 0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9,  // ..y.(U..
                /* 00F8 */  0x31, 0x6B, 0x8E, 0x09, 0x8E, 0xC7, 0xD0, 0xA7,  // 1k......
                /* 0100 */  0x7B, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // {>'.....
                /* 0108 */  0x1A, 0x99, 0xA1, 0x3D, 0xC9, 0xD3, 0x8A, 0x19,  // ...=....
                /* 0110 */  0xF2, 0xF0, 0x0F, 0x8B, 0x89, 0x85, 0xD0, 0x07,  // ........
                /* 0118 */  0xC1, 0xE3, 0x81, 0xF7, 0xFF, 0x1F, 0x0F, 0x78,  // .......x
                /* 0120 */  0x14, 0x9F, 0x09, 0x84, 0xF0, 0x4A, 0x10, 0xDB,  // .....J..
                /* 0128 */  0x03, 0x7A, 0x44, 0xC0, 0x02, 0x7B, 0x40, 0xF6,  // .zD..{@.
                /* 0130 */  0x2B, 0x00, 0x21, 0x78, 0x99, 0x23, 0x92, 0x53,  // +.!x.#.S
                /* 0138 */  0x04, 0x8D, 0xC9, 0x38, 0x11, 0xE2, 0x3F, 0x39,  // ...8..?9
                /* 0140 */  0x70, 0x91, 0xD0, 0x28, 0x31, 0xD0, 0xA8, 0x23,  // p..(1..#
                /* 0148 */  0x40, 0xD4, 0x88, 0x41, 0x43, 0x1F, 0x4B, 0x68,  // @..AC.Kh
                /* 0150 */  0x0F, 0xC6, 0xE7, 0x05, 0x23, 0x9C, 0x62, 0xB9,  // ....#.b.
                /* 0158 */  0xC7, 0x06, 0xA2, 0x79, 0x36, 0x3A, 0x2D, 0x9C,  // ...y6:-.
                /* 0160 */  0xCF, 0x9B, 0x80, 0x09, 0x06, 0x7F, 0x18, 0x68,  // .......h
                /* 0168 */  0x94, 0x96, 0x4E, 0x21, 0x1B, 0xCB, 0xF4, 0x88,  // ..N!....
                /* 0170 */  0x28, 0x95, 0x47, 0x10, 0x37, 0xE6, 0x19, 0x14,  // (.G.7...
                /* 0178 */  0x0E, 0xAD, 0x53, 0x42, 0x58, 0x1D, 0x12, 0x74,  // ..SBX..t
                /* 0180 */  0xCA, 0x30, 0xB0, 0x23, 0x93, 0xE8, 0x88, 0xE1,  // .0.#....
                /* 0188 */  0xE1, 0x98, 0xD7, 0x31, 0x0F, 0x1B, 0x14, 0xC4,  // ...1....
                /* 0190 */  0x80, 0xCE, 0x00, 0x21, 0x27, 0x87, 0x00, 0x94,  // ...!'...
                /* 0198 */  0x0A, 0x10, 0xCD, 0xE0, 0x6C, 0x8E, 0xE7, 0x61,  // ....l..a
                /* 01A0 */  0xC0, 0xA2, 0x2F, 0x0A, 0x74, 0x7A, 0xBE, 0x02,  // ../.tz..
                /* 01A8 */  0x70, 0x0D, 0x10, 0x3A, 0x14, 0x18, 0xD8, 0x6A,  // p..:...j
                /* 01B0 */  0x00, 0x29, 0x18, 0x9F, 0xEC, 0xA3, 0x44, 0x02,  // .)....D.
                /* 01B8 */  0xA6, 0xEB, 0x1C, 0x00, 0xFD, 0x8E, 0xE1, 0x11,  // ........
                /* 01C0 */  0x9C, 0xDD, 0x23, 0xC5, 0x23, 0x46, 0x82, 0xFA,  // ..#.#F..
                /* 01C8 */  0xAE, 0x01, 0xA0, 0x00, 0xF2, 0xD8, 0xAD, 0x74,  // .......t
                /* 01D0 */  0xFA, 0x74, 0x0C, 0x21, 0xC2, 0x44, 0x33, 0x3A,  // .t.!.D3:
                /* 01D8 */  0x0F, 0x3F, 0x54, 0x54, 0xDC, 0xA1, 0x52, 0x10,  // .?TT..R.
                /* 01E0 */  0x0F, 0xD5, 0x51, 0x86, 0x8A, 0xFA, 0xFF, 0x1F,  // ..Q.....
                /* 01E8 */  0x1F, 0xF8, 0xA1, 0xC1, 0x07, 0x89, 0x27, 0x01,  // ......'.
                /* 01F0 */  0xCC, 0x01, 0xE0, 0x21, 0x03, 0xD6, 0xA9, 0x20,  // ...!... 
                /* 01F8 */  0x64, 0x44, 0x4F, 0xC3, 0x70, 0x9E, 0x2C, 0x87,  // dDO.p.,.
                /* 0200 */  0xF3, 0x64, 0xF9, 0x58, 0x7C, 0x88, 0x80, 0x3F,  // .d.X|..?
                /* 0208 */  0x5A, 0x2C, 0x41, 0x81, 0xB3, 0x05, 0x39, 0x3C,  // Z,A...9<
                /* 0210 */  0x46, 0xF0, 0x48, 0xA9, 0xAC, 0x71, 0xA1, 0x2E,  // F.H..q..
                /* 0218 */  0x07, 0x3E, 0xC5, 0x30, 0xEC, 0xF7, 0x06, 0x5F,  // .>.0..._
                /* 0220 */  0x11, 0xCE, 0xF0, 0x2D, 0xE2, 0xA0, 0xDE, 0x37,  // ...-...7
                /* 0228 */  0x6C, 0x4C, 0xA3, 0x50, 0x83, 0xB0, 0x1E, 0x29,  // lL.P...)
                /* 0230 */  0x87, 0x35, 0x5A, 0xD8, 0x03, 0x7E, 0xD6, 0xF0,  // .5Z..~..
                /* 0238 */  0x3D, 0xC5, 0x33, 0x33, 0x46, 0x58, 0x8F, 0xD6,  // =.33FX..
                /* 0240 */  0xA7, 0x09, 0xD8, 0x08, 0xBD, 0x9F, 0x26, 0x00,  // ......&.
                /* 0248 */  0x5D, 0xFF, 0xFF, 0xD3, 0x04, 0xC0, 0x39, 0xAF,  // ].....9.
                /* 0250 */  0x42, 0x4F, 0x13, 0x60, 0x53, 0x68, 0xD3, 0xA7,  // BO.`Sh..
                /* 0258 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                /* 0260 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x3B, 0x39,  // .V.J..;9
                /* 0268 */  0x38, 0xC6, 0x62, 0x35, 0x16, 0x8B, 0x58, 0x8E,  // 8.b5..X.
                /* 0270 */  0x40, 0xAC, 0x92, 0x42, 0x46, 0x40, 0x24, 0x19,  // @..BF@$.
                /* 0278 */  0x44, 0x40, 0x96, 0x77, 0xF2, 0x11, 0x90, 0xC5,  // D@.w....
                /* 0280 */  0x82, 0x08, 0xC8, 0xF9, 0x2C, 0x00, 0xB1, 0xB0,  // ....,...
                /* 0288 */  0x20, 0x02, 0x72, 0xB0, 0xBF, 0x83, 0x80, 0xFC,  //  .r.....
                /* 0290 */  0xFF, 0x8F, 0x09, 0x22, 0x20, 0xFF, 0xFF, 0x01   // ..." ...
            })
            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (WMII, 0, Serialized)
            {
                ISMI (0x96)
            }

            Method (APF1, 1, Serialized)
            {
                WFUN = 0x80000004
                IDAT = Arg0
                WMII ()
                Return (WSTA) /* \ACCE.WSTA */
            }

            Method (APPW, 1, Serialized)
            {
                WFUN = 0x80000008
                IDAT = Arg0
                WMII ()
                Return (WSTA) /* \ACCE.WSTA */
            }

            Name (ACCB, 0xCAD5C018)
            OperationRegion (\ACCX, SystemMemory, ACCB, 0x0100)
            Field (ACCX, ByteAcc, NoLock, Preserve)
            {
                WSIZ,   32, 
                WFUN,   32, 
                WSTA,   32, 
                IDAT,   1952
            }
        }
    }

    Name (RV2I, One)
    Name (ISDS, One)
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1C, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD1 */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD1 */
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD1 */
                    }
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD1 */
                    }
                }
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1C, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.PLD1 */
                    }
                }
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.PLD1 */
                    }
                }
            }

            Device (PRT9)
            {
                Name (_ADR, 0x09)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RV2I)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRTA)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RV2I)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (RV2I)
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 3E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : CAF85000
[028h 0040   4]                 DSDT Address : CA8DB000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000CA8DB000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 3E 41 4C 41 53 4B 41  // FACP.....>ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 50 F8 CA 00 B0 8D CA 00 01 09 00  // .....P..........
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 B0 8D CA  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 102DD318
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 18 D3 2D 10 00 00 00 00  // FACS@.....-.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 16
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 16 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 35 31 33 39  // ....$FID.x.A5139
    0030: 00 00 00 00 F4 AC B9 6E 56 47 00 7E 01 5E DB 59  // .......nVG.~.^.Y
    0040: AF 03 BA 15 30 35 00 31 37 00 32 38 00 30 37 00  // ....05.17.28.07.
    0050: E5 07 02 01 15 25 21 FF FF 41 4C 41 53 4B 41 41  // .....%!..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 02
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 000000004A797000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 000000004A7B5000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 02 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 70 79 4A  // .............pyJ
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 50 7B 4A  // .............P{J
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : B8
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 05
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 06
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FEB80000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 004F77EF22294ADA
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                   Entry Type : 03
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 04
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1]                 Data Setting : 00

[0A8h 0168   1]                   Entry Type : 43
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1]                 Data Setting : 00
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A4
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                   Entry Type : 04
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1]                 Data Setting : 00

[0B4h 0180   1]                   Entry Type : 00
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1]                 Data Setting : 00

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : 00
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : D7
[0C4h 0196   1]                       Handle : 05
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                   Entry Type : 48
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1]                 Data Setting : 00
[0CCh 0204   1]                       Handle : 06
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 B8 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 05 A0 00 01  // H.......H.......
    0070: 48 00 00 00 06 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 4F 00 00 00 00 00 00 00 00 00  // .J)".wO.........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 05 A0 00 01 48 00 00 00 06 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x000011C6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Set VDDIO", 
                "Set VTT", 
                "Command Buffer Start", 
                "Command Buffer End"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x044C, 
                0x0514, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x0438, 
                0x0528, 
                0x04, 
                0x00030002, 
                0x021C, 
                0x0294, 
                0x04, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0xB5)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00030001, 
                0x3F, 
                0x0434, 
                0x0438, 
                0x043C, 
                0x0440, 
                0x0444, 
                0x0448, 
                0x044C, 
                0x0450, 
                0x0454, 
                0x0458, 
                0x045C, 
                0x0460, 
                0x0464, 
                0x0468, 
                0x046C, 
                0x0470, 
                0x0474, 
                0x0478, 
                0x047C, 
                0x0480, 
                0x0484, 
                0x0488, 
                0x048C, 
                0x0490, 
                0x0494, 
                0x0498, 
                0x049C, 
                0x04A0, 
                0x04A4, 
                0x04A8, 
                0x04AC, 
                0x04B0, 
                0x04B4, 
                0x04B8, 
                0x04BC, 
                0x04C0, 
                0x04C4, 
                0x04C8, 
                0x04CC, 
                0x04D0, 
                0x04D4, 
                0x04D8, 
                0x04DC, 
                0x04E0, 
                0x04E4, 
                0x04E8, 
                0x04EC, 
                0x04F0, 
                0x04F4, 
                0x04F8, 
                0x04FC, 
                0x0500, 
                0x0504, 
                0x0508, 
                0x050C, 
                0x0510, 
                0x0514, 
                0x0518, 
                0x051C, 
                0x0520, 
                0x0524, 
                0x0528, 
                0x052C, 
                0x00030002, 
                0x1F, 
                0x021C, 
                0x0220, 
                0x0224, 
                0x0228, 
                0x022C, 
                0x0230, 
                0x0234, 
                0x0238, 
                0x023C, 
                0x0240, 
                0x0244, 
                0x0248, 
                0x024C, 
                0x0250, 
                0x0254, 
                0x0258, 
                0x025C, 
                0x0260, 
                0x0264, 
                0x0268, 
                0x026C, 
                0x0270, 
                0x0274, 
                0x0278, 
                0x027C, 
                0x0280, 
                0x0284, 
                0x0288, 
                0x028C, 
                0x0290, 
                0x0294, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xCAF87018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "MYRTLE", 0x00000001)
{
    /*
     * iASL Warning: There were 21 external control methods found during
     * disassembly, but only 0 were resolved (21 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xCAF8A018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Name (M448, Package (0x02)
            {
                One, 
                One
            })
            Local0 = M04A (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08){}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                If ((M085 == 0x0E))
                {
                    If (CondRefOf (\_SB.ALIB))
                    {
                        Local3 = \_SB.ALIB (0x0C)
                        Local4
                    }
                }
                ElseIf (CondRefOf (\_SB.ALIB))
                {
                    Local3 = \_SB.ALIB (0x0C)
                    M448
                }

                If (CondRefOf (\_SB.APAD))
                {
                    If ((M085 == 0x0E))
                    {
                        \_SB.APAD.M446 [One] = Local4
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                    Else
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Local1 = M448 [Zero]
                        Local2 = M448 [One]
                        \_SB.APAD.M446 [One] = Local2
                        If ((Local1 == 0x02))
                        {
                            Notify (\_SB.APAD, 0x85) // Device-Specific
                        }
                        ElseIf ((Local1 == One))
                        {
                            Notify (\_SB.APAD, 0x84) // Reserved
                        }
                        Else
                        {
                            Notify (\_SB.APAD, 0x80) // Status Change
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "MYRTLEG2", 0x00000001)
{
    /*
     * iASL Warning: There were 33 external control methods found during
     * disassembly, but only 0 were resolved (33 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M087, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M105, IntObj)
    External (M106, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M378, IntObj)
    External (M379, IntObj)
    External (M380, IntObj)
    External (M381, IntObj)
    External (M382, IntObj)
    External (M383, IntObj)
    External (M384, IntObj)
    External (M385, IntObj)
    External (M386, IntObj)
    External (M387, IntObj)
    External (M388, IntObj)
    External (M389, IntObj)
    External (M390, IntObj)
    External (M391, IntObj)
    External (M392, IntObj)
    External (M444, IntObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            If ((Arg0 == 0x08))
            {
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
            }

            If ((Arg0 == 0x09))
            {
                ATC9 ()
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M207 = M100 (M160,  = \_SB.ALIB /* External reference */)
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB
                0xAA
                Local0
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "MYRTLE", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x05, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A014)
                CreateWordField (Arg1, 0x02, A015)
                CreateDWordField (Arg1, 0x04, A016)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateWordField (Local0, 0x02, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                CreateDWordField (Local0, 0x04, A019)
                A019 = A016 /* \_SB_.ALIB.A016 */
                A019 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A019 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A020 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A024 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A025 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A026 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A027)
                CreateDWordField (Local7, 0x04, A028)
                CreateDWordField (Local7, 0x08, A029)
                CreateDWordField (Local7, 0x0C, A030)
                CreateDWordField (Local7, 0x10, A031)
                CreateDWordField (Local7, 0x14, A032)
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A032 = 0x00
                A012 (0x51, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A006)
                CreateDWordField (Local6, 0x04, A007)
                CreateDWordField (Local6, 0x08, A008)
                CreateDWordField (Local6, 0x0C, A009)
                CreateDWordField (Local6, 0x10, A010)
                CreateDWordField (Local6, 0x14, A011)
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                A012 (0x52, Local6)
            }

            Return (0x00)
        }

        Method (A023, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A084 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A085 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A017)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A086)
            A017 = 0x04
            A034 = 0x00
            If ((Local2 == 0x00))
            {
                A086 = 0x00
            }
            Else
            {
                A086 = 0x01
            }

            Return (Local7)
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A079 (Arg1))
            }
        }

        Method (A085, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A080 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A020, 1, NotSerialized)
        {
            AD00 = Arg0
            A005 ()
        }

        Method (A024, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A025, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A033, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A017)
            A017 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A034 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A034 = 0x01
                Return (Local7)
            }

            A035 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A036 ()
            A034 = 0x02
            Return (Local7)
        }

        Method (A037, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A036 ()
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A039, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A040, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A041 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A036 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A042, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A035, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                If ((A043 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A044 (Local0)
                        A045 (Local0, Local1)
                    }
                    Else
                    {
                        A045 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A046, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A048, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A049 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            A048 ()
            A046 ()
            If ((AP02 != AP01))
            {
                A013 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                Local2 = A050 (Local0)
                If ((Local1 != Local2))
                {
                    A051 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A051 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A052 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A052 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A052 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A052 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A052 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A052 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A052 (Arg1))
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A053 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A053 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A053 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A053 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A053 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A053 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A053 ())
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A054 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A054 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A054 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A054 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A054 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A054 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A054 ())
            }
        }

        Method (A049, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A055 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A055 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A055 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A055 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A055 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A055 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A055 ())
            }
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A056 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A056 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A056 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A056 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A056 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A056 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A056 ())
            }
        }

        Method (A045, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A057 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A057 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A057 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A057 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A057 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A057 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A057 (Arg1))
            }
        }

        Method (A043, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }
        }

        Method (A041, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }
        }

        OperationRegion (A111, SystemMemory, AGRB, 0x1000)
        Field (A111, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A112,   32
        }

        BankField (A111, A112, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A111, A112, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A111, A112, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A071,   32
        }

        BankField (A111, A112, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A111, A112, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A111, A112, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A111, A112, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        BankField (A111, A112, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A111, A112, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A089,   32
        }

        BankField (A111, A112, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A090,   32
        }

        BankField (A111, A112, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A091,   32
        }

        BankField (A111, A112, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A092,   32
        }

        BankField (A111, A112, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A093,   32
        }

        BankField (A111, A112, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A111, A112, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A111, A112, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A067 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A067 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A067 (Arg1))
            }
        }

        Method (A088, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x000C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x000D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x000E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000F0300
                }

                Local1 = A089 /* \_SB_.A089 */
                Local1 &= 0xFF00FCFF
                A089 = (Local0 | Local1)
                Local1 = A089 /* \_SB_.A089 */
                A089 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0x00400000 | Local1)
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0x00400000 | Local1)
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0x00400000 | Local1)
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0x00400000 | Local1)
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0x00400000 | Local1)
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A004, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A087 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A088 (Local0, Arg0)
                    Break
                }

                Local0++
            }
        }

        Method (A012, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A097)
            CreateDWordField (Arg1, 0x04, A098)
            CreateDWordField (Arg1, 0x08, A099)
            CreateDWordField (Arg1, 0x0C, A100)
            CreateDWordField (Arg1, 0x10, A101)
            CreateDWordField (Arg1, 0x14, A102)
            A103 = 0x00
            While ((A103 != 0x00)){}
            A071 = A097 /* \_SB_.A012.A097 */
            A104 = A098 /* \_SB_.A012.A098 */
            A105 = A099 /* \_SB_.A012.A099 */
            A106 = A100 /* \_SB_.A012.A100 */
            A107 = A101 /* \_SB_.A012.A101 */
            A108 = A102 /* \_SB_.A012.A102 */
            A109 = Arg0
            While ((A103 == 0x00)){}
        }

        Method (A082, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg0
            A007 = Arg1
            A008 = Arg2
            A009 = Arg3
            A012 (0x0A, Local7)
        }

        Method (A026, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A110)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            Local0 = 0x02
            While ((Local0 < A110))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                If ((Local1 == 0x01))
                {
                    A006 = Local2
                    A012 (0x1E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A006 = Local2
                    A012 (0x1F, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A006 = Local2
                    A012 (0x1A, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A006 = Local2
                    A012 (0x1B, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A006 = Local2
                    A012 (0x1C, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A006 = Local2
                    A012 (0x1D, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A006 = Local2
                    A012 (0x26, Local7)
                }

                If ((Local1 == 0x0A))
                {
                    A006 = Local2
                    A012 (0x27, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A006 = Local2
                    A012 (0x20, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A006 = Local2
                    A012 (0x22, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A006 = Local2
                    A012 (0x24, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A006 = Local2
                    A012 (0x25, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A012 (0x2B, Local7)
                        }
                        Else
                        {
                            A012 (0x2A, Local7)
                        }
                    }
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR0.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR0.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR1.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR1.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR2.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR2.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR3.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR3.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR4.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR4.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR5.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR5.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR6.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR6.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A003, 0, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A113 (Local0)
                    Local0++
                }
            }
        }

        Method (A070, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg1
            A007 = Arg2
            A012 (Arg0, Local7)
        }

        Method (A113, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A068 ())
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            A003 ()
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A004 (Local0, Local1)
        }

        Method (A005, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            A011 = 0x00
            If ((AD00 == 0x00))
            {
                A012 (0x18, Local7)
            }
            Else
            {
                A012 (0x19, Local7)
            }
        }

        Method (A013, 2, NotSerialized)
        {
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "MYRTLEPX", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (Zero, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x0D86)
                        M112 (Local0, Zero)
                        M111 (Local0, One)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, One)
                        M000 (0x0D87)
                        HPOK = Zero
                        Sleep (0x14)
                        M201 = One
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            M023 (Zero, M091, M090)
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (Zero, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (Zero, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (Zero, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = Zero
                                    If ((M025 == Zero))
                                    {
                                        M091
                                        M090
                                        Zero
                                        Ones
                                        Local0 = One
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, One))
                                        M111 (M049, M133 (0x18, One))
                                        HPOK = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x0D88)
                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (Zero, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = Zero
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), 
                                                    M201 = Zero, \_SB.ALIB, 0x06), Local7, If ((M097 (Zero, 0x54 = M019 (
                                                    Zero, M091, M090), Local0, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (Zero, 0x10, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x0D89), Else
                                                                                {
                                                                                    M000 (0x0D8A)
                                                                                    M201 = Zero
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x0D8B)
                                                                                    M111 (M049, M133 (0x17, Zero))
                                                                                    M111 (M049, M133 (0x18, Zero))
                                                                                    M112 (Local0, Zero)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, Zero)
                                                                                    M023 (Zero, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (Zero, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = Zero
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x0D8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (Zero, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )){})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One))
            }
            Else
            {
                M111 (M049, M133 (0x17, Zero))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One))
            }
            Else
            {
                M111 (M049, M133 (0x18, Zero))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                 = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D484
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 54404 (0xD484)

    0000: 56 46 43 54 84 D4 00 00 01 F4 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 D8 15 00 00 00 00  // ................
    0060: 01 00 00 00 00 D4 00 00 55 AA 6A E9 FF 01 00 00  // ........U.j.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B0 01 00 00 00 00 49 42 4D 3F 5E 90 00 00 00 00  // ......IBM?^.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 86 01 00 00 00 00 00 00 31 31 2F 33 30 2F 32 30  // ........11/30/20
    00C0: 2C 30 30 3A 30 39 3A 30 34 00 00 00 E9 ED 02 00  // ,00:09:04.......
    00D0: E9 F7 02 00 00 00 70 00 31 31 33 2D 52 41 56 45  // ......p.113-RAVE
    00E0: 4E 32 2D 31 31 38 00 52 41 56 45 4E 32 00 50 43  // N2-118.RAVEN2.PC
    00F0: 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A 52 61  // I_EXPRESS.0...Ra
    0100: 76 65 6E 32 20 47 65 6E 65 72 69 63 20 56 42 49  // ven2 Generic VBI
    0110: 4F 53 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // OS              
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20  //           ..... 
    0150: 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31 30  // ...(C) 1988-2010
    0160: 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F  // , Advanced Micro
    0170: 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41  //  Devices, Inc..A
    0180: 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45  // TOMBIOSBK-AMD VE
    0190: 52 30 31 36 2E 30 30 32 2E 30 30 30 2E 30 31 32  // R016.002.000.012
    01A0: 2E 30 30 30 30 30 30 00 52 56 32 47 65 6E 65 72  // .000000.RV2Gener
    01B0: 69 63 56 62 00 32 32 31 32 35 39 38 20 00 35 34  // icVb.2212598 .54
    01C0: 32 38 35 38 20 20 00 20 20 20 20 20 20 20 20 00  // 2858  .        .
    01D0: 41 6D 64 52 61 76 65 6E 32 5F 47 65 6E 65 72 69  // AmdRaven2_Generi
    01E0: 63 5C 63 6F 6E 66 69 67 2E 68 00 00 00 90 28 00  // c\config.h....(.
    01F0: 02 02 41 54 4F 4D 00 C0 FF 02 40 01 D5 01 94 00  // ..ATOM....@.....
    0200: 32 03 00 00 00 00 02 10 02 10 B0 01 AA 93 50 94  // 2.............P.
    0210: 00 00 00 00 00 00 00 00 50 43 49 52 02 10 D8 15  // ........PCIR....
    0220: 00 00 18 00 00 00 00 03 6A 00 02 10 00 80 00 00  // ........j.......
    0230: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 AD A2 43  // AMD ATOMBIOS...C
    0240: BF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66  // ...............f
    0270: 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3  // PfQfRfSfUfVfW...
    0280: 14 00 8C 0E 08 00 B2 20 E8 6D 2F 0B C0 75 14 A2  // ....... .m/..u..
    0290: 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    02A0: 07 1F CB E8 87 30 E8 59 2E 32 D2 8D 3E 86 01 89  // .....0.Y.2..>...
    02B0: 55 16 E8 3C 11 E8 FF 10 E8 56 12 E8 AD 02 E8 72  // U..<.....V.....r
    02C0: 28 0B C0 74 0C E8 39 00 E8 4F 56 E8 FB 10 E8 9E  // (..t..9..OV.....
    02D0: 56 E8 A9 00 B4 80 E8 53 2E 8A C7 66 C1 E0 10 8A  // V......S...f....
    02E0: E3 B0 20 66 A3 5E 90 E8 AC 02 E8 0E 11 E8 62 30  // .. f.^........b0
    02F0: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0300: CB 2E 8B 1E 08 00 83 3E 11 03 00 75 04 89 1E 0F  // .......>...u....
    0310: 03 1E 2E 8E 1E 07 03 9C FA 66 C7 06 08 01 65 F0  // .........f....e.
    0320: 00 F0 C7 06 40 00 32 03 89 1E 42 00 C7 06 B4 01  // ....@.2...B.....
    0330: 32 03 89 1E B6 01 C7 06 7C 00 40 5E 89 1E 7E 00  // 2.......|.@^..~.
    0340: C7 06 0C 01 53 62 89 1E 0E 01 C7 06 A8 04 78 58  // ....Sb........xX
    0350: 89 1E AA 04 2E 8E 1E 0F 03 8B C3 A3 7A 58 A3 8A  // ............zX..
    0360: 58 A3 9C 58 9D 1F C3 50 4D 49 44 32 03 9E 48 00  // X..X...PMID2..H.
    0370: 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB 00 00  // ................
    0380: E8 61 10 66 C1 E8 10 A3 B6 01 BB 0B 00 E8 54 10  // .a.f..........T.
    0390: 8D 3E 86 01 66 89 45 18 C3 00 E8 90 2F 80 FC A0  // .>..f.E...../...
    03A0: 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 7D 44 EB  // u..=.....Ou..}D.
    03B0: 07 E8 D2 49 EB 02 B4 01 E8 97 2F CF E8 6E 2F E8  // ...I....../..n/.
    03C0: 20 00 EB 02 B4 01 E8 89 2F CB E8 60 2F 80 FC 4F  //  ......./..`/..O
    03D0: 75 05 E8 57 44 EB 07 E8 AC 49 EB 02 B4 01 E8 71  // u..WD....I.....q
    03E0: 2F CB 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // /...fPfQfRfSfUfV
    03F0: 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1 E0 10  // fW..<.u)....f...
    0400: 2E A1 18 00 8D 36 95 00 8A 3C 80 EF 30 B3 02 8B  // .....6...<..0...
    0410: EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 28  // ..^..F.f....F..(
    0420: 01 3C 05 75 18 E8 04 2D E8 D7 2C 2E A1 08 00 8B  // .<.u...-..,.....
    0430: EC 89 56 10 89 46 00 89 5E 04 E9 0C 01 3C 06 75  // ..V..F..^....<.u
    0440: 32 E8 88 0F 66 D1 E0 8B EC 89 46 14 BB 02 00 E8  // 2...f.....F.....
    0450: 92 0F 88 46 18 E8 7C 0F 66 89 46 0C BB 09 00 E8  // ...F..|.f.F.....
    0460: 82 0F 33 C0 66 89 46 00 2E 8B 16 B6 01 89 56 10  // ..3.f.F.......V.
    0470: E9 D6 00 3C 0B 75 24 0A DB 75 11 B9 80 00 BB 02  // ...<.u$..u......
    0480: 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00 8A C7 E8 D0  // ....^..N........
    0490: 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C 17 75 1D E8  // ..4........<.u..
    04A0: 2E 12 74 06 E8 8B 0D E8 16 17 E8 EE 09 E8 FA 0E  // ..t.............
    04B0: 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00 3C 18 75 45  // 3......N....<.uE
    04C0: 0A FF 75 10 E8 B5 11 8B EC 89 46 0C E8 3B 0A 89  // ..u.......F..;..
    04D0: 4E 10 EB 75 E8 F9 11 75 68 BB 00 1C E8 0A 2E 66  // N..u...uh......f
    04E0: 0B C0 74 5D 23 C9 74 59 E8 CD 11 BE 00 1C E8 20  // ..t]#.tY....... 
    04F0: 0F 74 4E BE 00 1C B0 40 E8 6F 0F E8 7E 11 8B EC  // .tN....@.o..~...
    0500: 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15 0A FF  // .F..D<.u....u...
    0510: 75 0A E8 C2 10 8B EC 89 46 14 EB 2D E8 8F 10 74  // u.......F..-...t
    0520: 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF 02 75  // ..&<.u....t....u
    0530: 08 80 C1 02 E8 E8 10 EB 10 8B EC C6 46 19 02 EB  // ............F...
    0540: 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19  // ....F....2....f.
    0550: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0560: C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 0A 2E C3 0C  // .Q.......Y......
    0570: 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42  // ..PQ...C.3.B...B
    0580: E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 36 29  // .a.....a......6)
    0590: E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76  // .aYX...V...>...v
    05A0: 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06  // ................
    05B0: 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4  // !..3.2..........
    05C0: 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8 2A 0C  // .&!.^...W..u..*.
    05D0: 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 52  // t%.$....t......R
    05E0: 25 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C  // %#.t.......t._.\
    05F0: 28 E8 4C 06 0B F6 C3 5F C3 50 E8 DF 0B E8 A4 24  // (.L...._.P.....$
    0600: E8 B2 24 0A C9 74 69 0A ED 74 10 8A CD B5 02 E8  // ..$..ti..t......
    0610: 37 28 B1 02 8D 9C 48 01 E8 72 2C E8 76 02 F6 C3  // 7(....H..r,.v...
    0620: 04 74 08 E8 F2 0C E8 15 23 74 45 8D 5C 28 E8 69  // .t......#tE.\(.i
    0630: 00 56 83 C6 08 E8 E1 22 5E 80 FD 02 75 11 51 E8  // .V....."^...u.Q.
    0640: 0E 18 59 80 FB 00 75 4D 51 B5 08 E8 E8 05 59 8A  // ..Y...uMQ.....Y.
    0650: DD 33 C9 E8 FF 16 0A C0 75 3B E8 37 02 8A EB 8D  // .3......u;.7....
    0660: 5C 28 80 CD 02 E8 3B 00 74 03 80 CD 04 E8 C6 05  // \(....;.t.......
    0670: 8D 9C A6 00 E8 72 2C 0A C0 74 1A 56 83 C6 08 E8  // .....r,..t.V....
    0680: 97 22 5E 8A DD B9 80 00 E8 CA 16 E8 D8 04 74 05  // ."^...........t.
    0690: 33 C9 E8 A1 05 E8 FC 01 58 C3 51 B9 49 00 E8 D4  // 3.......X.Q.I...
    06A0: 27 59 C3 51 E8 1A 00 75 14 E8 B9 01 3C 01 75 0D  // 'Y.Q...u....<.u.
    06B0: B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59  // . ..'.u......3.Y
    06C0: C3 53 E8 24 2C 66 3D 00 FF FF FF 75 0E 83 C3 04  // .S.$,f=....u....
    06D0: E8 16 2C 66 3D FF FF FF 00 75 00 5B C3 50 52 32  // ..,f=....u.[.PR2
    06E0: D2 E8 05 2C 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4  // ...,....f.......
    06F0: 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 DF 0A 8D 9C 4C  // .......ZX......L
    0700: 01 E8 39 01 E8 8D 01 B5 13 F6 C3 08 75 0C E8 07  // ..9.........u...
    0710: 0C 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C B8 02  // ......u...fP....
    0720: 66 33 C0 8A C5 E8 21 2B 66 58 A9 C8 0E 74 55 E8  // f3....!+fX...tU.
    0730: 62 01 F6 C3 08 74 0F E8 0F 05 8D 5C 28 E8 04 01  // b....t.....\(...
    0740: 75 04 E8 72 00 C3 B5 02 E8 23 01 E8 46 01 F6 C3  // u..r.....#..F...
    0750: 04 74 21 8D 5C 28 E8 49 01 E8 94 03 74 05 B5 03  // .t!.\(.I....t...
    0760: E8 0B 01 E8 68 04 E8 21 01 80 FD 00 75 48 B5 02  // ....h..!....uH..
    0770: E8 0D 01 C3 8D 9C 68 01 B8 00 55 E8 5B 11 B5 02  // ......h...U.[...
    0780: E8 FD 00 C3 A9 02 00 74 2D B5 04 E8 E0 00 E8 03  // .......t-.......
    0790: 01 F6 C3 08 74 03 E8 B0 04 8D 9C 68 01 56 E8 0F  // ....t......h.V..
    07A0: 29 8B F7 E8 68 04 5E E8 AC 28 E8 D3 00 8D 5C 28  // )...h.^..(....\(
    07B0: E8 CC 28 E8 18 04 C3 B5 01 E8 B2 00 B5 02 E8 BF  // ..(.............
    07C0: 00 E8 D0 00 F6 C3 04 75 10 8D 9C 68 01 B8 00 55  // .......u...h...U
    07D0: E8 06 11 B5 02 E8 17 00 C3 E8 C6 00 B5 02 8D 5C  // ...............\
    07E0: 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 E0 03 C3 8D  // (.n.u...........
    07F0: 9C B4 02 B1 02 E8 95 2A B5 02 E8 83 00 C3 8D 9C  // .......*........
    0800: 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D 5C 28  // L..8.......t#.\(
    0810: E8 8F 00 E8 9A 28 8D 9C 68 01 06 0E 07 B9 07 00  // .....(..h.......
    0820: E8 8C 26 07 E8 63 00 E8 EE 0A 8D 5C 28 E8 8B 28  // ..&..c.....\(..(
    0830: 8D 5C 28 E8 29 28 B8 02 00 E8 BE FE C3 B9 61 00  // .\(.)(........a.
    0840: E8 32 26 C3 53 81 C3 05 01 E8 9D 2A 24 06 3C 02  // .2&.S......*$.<.
    0850: 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 88  // [....=..u.S.....
    0860: 2A 5B A8 01 C3 53 83 C3 12 E8 7D 2A 5B C3 8D 9C  // *[...S....}*[...
    0870: B4 02 32 C9 E8 16 2A C3 8D 9C B4 02 E8 6A 2A C3  // ..2...*......j*.
    0880: 8D 9C B4 02 B1 01 E8 04 2A C3 8D 9C B4 02 B1 01  // ........*.......
    0890: E8 12 2A C3 66 50 8D 9C 48 01 E8 4C 2A 8A D8 66  // ..*.fP..H..L*..f
    08A0: 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9  // X.UWQ.........+.
    08B0: D1 E3 8D 58 4E E8 31 2A E8 E3 01 E2 EE 8D 5C 4B  // ...XN.1*......\K
    08C0: E8 26 2A B9 03 00 8B D0 BF 1A 09 85 55 06 74 17  // .&*.........U.t.
    08D0: 66 8B 05 8D 9A F4 01 E8 6F 29 8B 45 04 8D 9A F8  // f.......o).E....
    08E0: 01 E8 7D 29 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9  // ..}).........|^.
    08F0: 04 00 33 ED 8B DF E8 F0 29 0B C0 74 09 E8 5D 01  // ..3.....)..t..].
    0900: E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F  // ...........U2..o
    0910: FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8  // ..\(.N.=..u.....
    0920: C7 29 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6  // .)$p......T.]...
    0930: 00 E8 B5 29 0A C0 74 46 8D 9C A8 00 E8 AA 29 3C  // ...)..tF......)<
    0940: 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32  // .u;f...<.r3....2
    0950: E4 03 D8 8B FB B9 04 00 8B DF E8 8C 29 0B C0 74  // ............)..t
    0960: 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55  // .......u.......U
    0970: 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F  // X..ps....I..u.Y_
    0980: 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00  // ]. .X.<.......<.
    0990: 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 49 29  // ......<. .Q...I)
    09A0: 8D 9A 68 01 E8 BA 28 8D 5D 02 E8 3C 29 8D 9A 6A  // ..h...(.]..<)..j
    09B0: 01 E8 89 00 8D 5D 05 E8 2F 29 8D 9A 6E 01 E8 7C  // .....]../)..n..|
    09C0: 00 8D 5D 08 E8 22 29 8B C8 8A DC 66 C1 C8 10 8A  // ..]..")....f....
    09D0: D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC  // ................
    09E0: C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2  // ................
    09F0: 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74 01 E8  // ?............t..
    0A00: 5F 28 8D 9A 72 01 8B C1 E8 56 28 8D 9A 76 01 33  // _(..r....V(..v.3
    0A10: C0 8A C6 E8 4B 28 8D 9A 78 01 33 C0 8A C2 E8 40  // ....K(..x.3....@
    0A20: 28 8D 5D 0C E8 C2 28 8D 9A 7A 01 E8 0F 00 8D 5D  // (.]...(..z.....]
    0A30: 0F E8 B5 28 8D 9A 7E 01 E8 26 28 59 C3 8B C8 8A  // ...(..~..&(Y....
    0A40: D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B  // .f..............
    0A50: C1 E8 0D 28 83 C3 02 8B C2 E8 05 28 C3 8D 5D 11  // ...(.......(..].
    0A60: E8 86 28 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80  // ..(........t....
    0A70: 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03  // .....$.<.u...@<.
    0A80: 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74  // u.......t......t
    0A90: 03 80 E2 FB 8B C2 8D 9A 80 01 E8 C4 27 C3 3C 01  // ............'.<.
    0AA0: 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8 01 E8  // t=.....$?.<.....
    0AB0: AF 27 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4 01 E8  // .'..............
    0AC0: 9F 27 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 7A 0A  // .'............z.
    0AD0: 2E F7 B7 78 0A 8D 9A F6 01 E8 85 27 83 C5 08 C3  // ...x.......'....
    0AE0: 10 00 0A 00 04 00 03 00 05 00 04 00 10 00 09 00  // ................
    0AF0: 8D 9C A6 00 E8 F2 27 0A C0 74 1F 8D 9C A8 00 51  // ......'..t.....Q
    0B00: B1 03 E8 18 00 59 0B DB 74 10 E8 DC 27 32 C0 66  // .....Y..t...'2.f
    0B10: 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52  // =....u....3..fPR
    0B20: E8 C6 27 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10  // ..'<.u9...r4f...
    0B30: 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73  // 2.<.v*.......;.s
    0B40: 1F E8 A5 27 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC  // ...'........$.8.
    0B50: 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3  // t.2.........ZfX.
    0B60: 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 7B 27 0A C0  // 3.ZfX.Q.....{'..
    0B70: 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 69 27  // t..........t..i'
    0B80: 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A  // f......u.....2..
    0B90: C0 59 C3 66 50 52 E8 50 27 3C 70 75 2B 66 C1 E8  // .Y.fPR.P'<pu+f..
    0BA0: 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 38  // .2........;.s..8
    0BB0: 27 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8  // '8.t.f...2......
    0BC0: EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66  // ....ZfX.3.ZfX.Wf
    0BD0: 51 8D 9C 68 01 8B FB 8B DF E8 3D 00 0B C9 74 0B  // Q..h......=...t.
    0BE0: 66 8B D1 E8 A1 0F 83 C7 1C EB EC 66 59 5F C3 50  // f..........fY_.P
    0BF0: 53 51 B9 07 00 53 8B DA E8 EE 26 83 F8 00 5B 74  // SQ...S....&...[t
    0C00: 09 66 C1 E3 10 8B DA E8 80 22 59 5B 58 C3 51 53  // .f......."Y[X.QS
    0C10: B9 07 00 E8 8D 22 5B 59 C3 66 50 53 83 C3 06 E8  // ....."[Y.fPS....
    0C20: C7 26 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 B9 26  // .&[..f...S.....&
    0C30: 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 4E 26 C3  // ..[fX...H.2..N&.
    0C40: 57 B9 20 00 E8 68 22 5F C3 E8 83 01 66 8B CA 66  // W. ..h"_....f..f
    0C50: 52 E8 C4 06 E8 E7 1C 66 5A 74 10 E8 3A 06 B3 00  // R......fZt..:...
    0C60: E8 94 19 66 3B CA 73 03 66 8B D1 8D 9C D0 03 E8  // ...f;.s.f.......
    0C70: 77 26 0B C0 75 44 8D 9C 54 02 66 B8 48 3F 00 00  // w&..uD..T.f.H?..
    0C80: E8 C6 25 B5 01 66 81 FA 78 69 00 00 72 25 83 C3  // ..%..f..xi..r%..
    0C90: 04 66 B8 78 69 00 00 E8 AF 25 B5 02 66 81 FA F0  // .f.xi....%..f...
    0CA0: D2 00 00 72 0E 83 C3 04 66 B8 F0 D2 00 00 E8 98  // ...r....f.......
    0CB0: 25 B5 03 B1 03 E8 CF 01 EB 45 66 B9 08 00 00 00  // %........Ef.....
    0CC0: 66 33 D2 53 8D 9C 54 02 8B D3 5B E8 1B 26 0B C0  // f3.S..T...[..&..
    0CD0: 74 22 66 25 FF FF 00 00 66 D1 E0 53 8B DA E8 68  // t"f%....f..S...h
    0CE0: 25 5B 66 C1 CA 10 FE C2 66 C1 CA 10 83 C2 04 83  // %[f.....f.......
    0CF0: C3 02 E2 D7 66 C1 CA 10 8A EA B1 03 E8 88 01 E8  // ....f...........
    0D00: 38 06 A8 01 74 3F 8D 9C AE 03 E8 DC 25 3C 00 74  // 8...t?......%<.t
    0D10: 34 E8 CF 05 8A EB E8 5C 01 32 ED E8 63 01 E8 A2  // 4......\.2..c...
    0D20: 05 8D 9C BB 02 E8 C1 25 33 C9 8A C8 E8 28 01 66  // .......%3....(.f
    0D30: 3B C2 74 0E 51 E8 43 01 FE C5 E8 44 01 59 E2 EC  // ;.t.Q.C....D.Y..
    0D40: EB 03 B3 00 C3 8D 9C BB 02 E8 9D 25 FE C8 8A E8  // ...........%....
    0D50: E8 2E 01 8D 9C 40 03 B9 00 00 E8 30 25 E8 C2 02  // .....@.....0%...
    0D60: E8 D2 00 E8 0F 01 66 52 E8 AD 05 E8 D0 1B 66 5A  // ......fR......fZ
    0D70: 75 04 B3 00 EB 58 E8 F6 00 80 FD 01 77 07 E8 FA  // u....X......w...
    0D80: 00 0A ED 74 47 E8 1E 03 E8 32 11 80 FB 00 75 1D  // ...tG....2....u.
    0D90: E8 A7 05 A8 01 74 07 B1 0D E8 3D 19 EB 30 B5 01  // .....t....=..0..
    0DA0: E8 9E 05 E8 2F 0F B5 00 E8 96 05 EB 21 E8 BF 00  // ..../.......!...
    0DB0: 80 FD 01 76 07 D0 ED E8 BB 00 EB BA E8 76 00 E8  // ...v.........v..
    0DC0: B3 00 E8 B6 00 FE CD E8 B7 00 EB AA B3 08 C3 8D  // ................
    0DD0: 9C 29 01 E8 13 25 66 33 D2 8A D0 66 B8 8C 0A 00  // .)...%f3...f....
    0DE0: 00 66 F7 E2 E8 31 05 E8 54 1B 75 3D 66 50 8D 9C  // .f...1..T.u=fP..
    0DF0: 28 01 E8 F4 24 3C 14 66 58 72 2E 66 50 8D 9C D0  // (...$<.fXr.fP...
    0E00: 03 E8 E5 24 0B C0 66 58 74 1F B9 07 00 8D 9C D0  // ...$..fXt.......
    0E10: 03 8B C1 D1 E0 03 D8 E8 CF 24 0B C0 75 02 E2 ED  // .........$..u...
    0E20: 66 25 FF FF 00 00 66 D1 E0 66 0B C0 75 03 B8 48  // f%....f..f..u..H
    0E30: 3F 66 8B D0 C3 8D 9C 2A 01 E8 AD 24 24 0F 8A E8  // ?f.....*...$$...
    0E40: 0A ED 75 02 B5 01 C3 B5 00 8D 9C 31 01 E8 99 24  // ..u........1...$
    0E50: A8 01 74 02 B5 01 C3 53 51 E8 1F 00 32 E4 8A C5  // ..t....SQ...2...
    0E60: C1 E0 02 59 8D 9C 54 02 03 D8 E8 7C 24 5B C3 B1  // ...Y..T....|$[..
    0E70: 02 E8 1D 00 C3 B1 02 E8 0D 00 C3 B1 01 E8 11 00  // ................
    0E80: C3 B1 01 E8 01 00 C3 53 8D 9C B8 02 E8 FE 23 5B  // .......S......#[
    0E90: C3 53 8D 9C B8 02 E8 0C 24 5B C3 33 C9 E8 9F 20  // .S......$[.3... 
    0EA0: 75 3C 66 BA 37 F1 FF FF 66 33 C0 E8 E3 04 33 C0  // u<f.7...f3....3.
    0EB0: E8 47 03 74 1C A9 C8 0E 74 F6 E8 3C F7 F6 C3 04  // .G.t....t..<....
    0EC0: 75 05 F6 C3 18 74 E9 E8 30 00 50 E8 2C F8 58 EB  // u....t..0.P.,.X.
    0ED0: DF E8 1C 00 75 08 E8 31 00 8B C1 E8 1C F8 C3 8D  // ....u..1........
    0EE0: 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 9B 1F C3  // ](f....\(.I.....
    0EF0: 66 50 E8 B5 04 8B C8 66 58 C3 66 52 66 BA FF FF  // fP.....fX.fRf...
    0F00: FF FF 33 D0 E8 8A 04 66 5A C3 50 53 52 E8 E0 FF  // ..3....fZ.PSR...
    0F10: 75 09 33 C0 E8 E3 02 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    0F20: E8 2C 08 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .,....u....Z[X.V
    0F30: 66 33 C0 66 BA 00 F0 FF FF E8 4F 07 66 C1 E6 10  // f3.f......O.f...
    0F40: E8 C4 02 0B C0 74 03 E8 1C 00 E8 2F 07 5E C3 66  // .....t...../.^.f
    0F50: 52 66 8B D0 E8 DC 15 8D 9C 1C 03 E8 8B 23 8A C2  // Rf...........#..
    0F60: E8 E6 22 66 5A C3 50 51 E8 71 02 50 32 C0 E8 00  // .."fZ.PQ.q.P2...
    0F70: 04 E8 CC 01 E8 98 00 8D 9C 40 03 E8 6B 23 38 E8  // .........@..k#8.
    0F80: 74 0A 8A C5 E8 C2 22 B0 02 E8 E5 03 58 E8 CA 00  // t.....".....X...
    0F90: E8 A8 00 E8 8C 00 8D 9C 4C 01 E8 4C 23 8B C8 8B  // ........L..L#...
    0FA0: D3 8D 9C 00 03 E8 41 23 3B C1 74 05 B0 02 E8 C0  // ......A#;.t.....
    0FB0: 03 E8 3B FC 8D 9C 00 03 E8 55 15 8D 9C D8 02 E8  // ..;......U......
    0FC0: 87 22 E8 8A FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8  // ."...f.....f....
    0FD0: 95 00 E8 D1 00 E8 24 03 8A E9 8D 9C DC 02 32 C9  // ......$.......2.
    0FE0: E8 AA 22 E8 0D 03 66 25 FF 0F 00 00 59 58 66 BA  // .."...f%....YXf.
    0FF0: FF FF FF FF 33 D0 E8 92 06 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    1000: 9C D4 02 E8 E3 22 8A C4 E8 3E 22 66 58 5B C3 53  // ....."...>"fX[.S
    1010: 66 50 8D 9C D4 02 E8 D0 22 8A E0 E8 2B 22 66 58  // fP......"...+"fX
    1020: 5B C3 E8 73 02 E8 2E 02 8A DD E8 91 16 8A E9 8D  // [..s............
    1030: 9C 3C 03 32 C9 E8 55 22 0B DB C3 83 EC 08 8B EC  // .<.2..U"........
    1040: E8 55 02 E8 10 02 E8 17 16 8D 9C 4C 03 E8 99 22  // .U.........L..."
    1050: 8A 46 00 E8 F3 21 83 C4 08 C3 8D 9C D4 02 E8 88  // .F...!..........
    1060: 22 32 C0 E8 E3 21 C3 E8 0A 00 8D 9C D0 02 32 C9  // "2...!........2.
    1070: E8 1A 22 C3 B5 00 8D 1D E8 6E 22 66 8B D0 8D 9C  // .."......n"f....
    1080: 02 03 E8 64 22 0B C0 74 1C 51 8B C8 8D 9C 06 03  // ...d"..t.Q......
    1090: E8 56 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5  // .V"f.....Yf;.u..
    10A0: 00 EB 02 B5 02 C3 E8 2B 02 8D 9C 40 03 B1 03 E8  // .......+...@....
    10B0: DB 21 E8 D5 F7 8D 9C 40 03 B1 02 E8 CF 21 E8 95  // .!.....@.....!..
    10C0: 01 80 FD 00 75 14 E8 A6 FD E8 8E 02 E8 88 FD 66  // ....u..........f
    10D0: 8B D0 E8 77 02 E8 8E 02 EB 21 E8 4A 02 E8 6C 02  // ...w.....!.J..l.
    10E0: E8 73 01 80 FD 02 B5 04 75 0B 81 FA 74 40 76 05  // .s......u...t@v.
    10F0: B5 08 66 D1 EA E8 6E 02 E8 5F 02 E8 2B 00 C3 66  // ..f...n.._..+..f
    1100: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    1110: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    1120: 66 F7 F1 66 8B C8 66 5A C3 B5 00 E8 EA 01 E8 09  // f..f..fZ........
    1130: 18 75 03 E8 11 FD 8D 9C 48 03 32 C9 E8 4E 21 C3  // .u......H.2..N!.
    1140: 53 E8 5F 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02 E8  // S._.f....M......
    1150: 97 21 8A E8 8D 9C B4 02 E8 8E 21 8A C8 E8 B8 14  // .!........!.....
    1160: 8A EB 5B C3 57 53 53 E8 D6 FF E8 2B 01 5B E8 1D  // ..[.WSS....+.[..
    1170: 15 74 66 80 FD 00 75 29 53 E8 DB FC 66 8B D0 E8  // .tf...u)S...f...
    1180: 08 F7 8A CD 51 E8 E7 FC 8A FD 59 E8 71 FF 5B E8  // ....Q.....Y.q.[.
    1190: 57 21 66 25 FF FF 00 00 66 3B C8 73 39 32 DB EB  // W!f%....f;.s92..
    11A0: 38 80 FD 02 75 16 E8 6F 01 E8 9F 17 74 28 8D 1F  // 8...u..o....t(..
    11B0: E8 36 21 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75  // .6!=t@v.2......u
    11C0: 15 53 E8 D3 00 B3 03 E8 2D 14 5B E8 1B 21 3B C2  // .S......-.[..!;.
    11D0: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    11E0: 51 19 23 F0 74 09 8B C6 E8 F0 17 8B F3 0B DB 5B  // Q.#.t..........[
    11F0: C3 51 E8 15 FD E8 0F 00 59 C3 51 50 E8 34 19 8B  // .Q......Y.QP.4..
    1200: C8 58 E8 02 00 59 C3 57 53 E8 28 1B 0B C0 74 09  // .X...Y.WS.(...t.
    1210: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    1220: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    1230: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB  // _.3....t........
    1240: 00 E8 31 1C 83 C6 08 E8 99 18 EB E8 BB F0 16 B8  // ..1.............
    1250: 5A A5 E8 0C 20 C3 53 66 50 8D 9C 40 03 E8 89 20  // Z... .SfP..@... 
    1260: 8A E8 66 58 5B C3 8D 9C 69 03 E8 7C 20 C3 8D 9C  // ..fX[...i..| ...
    1270: 64 03 E8 74 20 0B C0 C3 53 66 50 8D 9C D4 02 E8  // d..t ...SfP.....
    1280: 67 20 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8  // g ..fX[.SfP.....
    1290: 57 20 8A C8 66 58 5B C3 53 8D 5C 14 E8 4A 20 8B  // W ..fX[.S.\..J .
    12A0: D0 5B C3 53 66 50 8D 5C 16 E8 3D 20 8B D0 66 58  // .[.SfP.\..= ..fX
    12B0: 5B C3 53 66 50 8D 9C 50 03 E8 2D 20 66 8B D0 66  // [.SfP..P..- f..f
    12C0: 58 5B C3 53 66 50 8D 9C 54 03 E8 1C 20 66 8B D0  // X[.SfP..T... f..
    12D0: 66 58 5B C3 53 66 50 8D 5C 10 E8 0C 20 8B C8 66  // fX[.SfP.\... ..f
    12E0: 58 5B C3 66 50 53 8D 9C 41 03 E8 FC 1F 5B 8A D8  // X[.fPS..A....[..
    12F0: 66 58 C3 53 8D 5C 08 E8 EF 1F 5B C3 53 50 8D 9C  // fX.S.\....[.SP..
    1300: 4C 03 E8 E4 1F 8A C8 58 5B C3 53 50 8D 9C 4D 03  // L......X[.SP..M.
    1310: E8 D6 1F 8A C8 58 5B C3 53 66 50 8D 5C 0C E8 C8  // .....X[.SfP.\...
    1320: 1F 8B D0 66 58 5B C3 53 66 50 8D 9C 00 03 E8 B8  // ...fX[.SfP......
    1330: 1F 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 A9 1F  // .f3...fX[..\....
    1340: C3 51 8D 5C 04 32 C9 E8 43 1F 59 C3 8D 9C 50 03  // .Q.\.2..C.Y...P.
    1350: E8 96 1F 66 8B C2 E8 F0 1E C3 53 8D 9C 40 03 B1  // ...f......S..@..
    1360: 01 E8 29 1F 5B C3 8D 9C 54 03 66 8B C2 E8 D9 1E  // ..).[...T.f.....
    1370: C3 53 51 8A E8 E8 C2 FF 24 FD 0A E8 E8 C2 FF 59  // .SQ.....$......Y
    1380: 5B C3 66 50 8D 9C D8 02 E8 5E 1F 66 8B D0 66 58  // [.fP.....^.f..fX
    1390: C3 53 66 50 51 66 8B C8 BB 00 00 E8 1E 16 23 C2  // .SfPQf........#.
    13A0: 0B C1 E8 20 16 59 66 58 5B C3 BB 00 00 E8 0C 16  // ... .YfX[.......
    13B0: 66 25 CA 0E 00 00 C3 E8 79 1A E8 F1 19 E8 CF 19  // f%......y.......
    13C0: 75 06 E8 80 17 E8 D3 19 C3 B0 01 C3 55 B3 01 E8  // u...........U...
    13D0: 0A 1D 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33  // ..].fSf........3
    13E0: C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 ED 1C 5D  // .f[.Uf.........]
    13F0: C3 E8 38 1B BB 0A 00 E8 CB 15 C3 BB 0A 00 E8 BB  // ..8.............
    1400: 15 66 8B C8 E8 25 1B BB 0A 00 66 2B C1 E8 B5 15  // .f...%....f+....
    1410: C3 E8 29 00 0B C9 74 22 E8 14 FB E8 2E 07 66 51  // ..)...t"......fQ
    1420: 66 8B C8 BB 07 00 E8 93 15 66 25 00 FE 00 00 66  // f........f%....f
    1430: 0B C1 E8 90 15 66 59 0C 01 C3 32 C0 C3 E8 68 02  // .....fY...2...h.
    1440: 0B C9 75 06 E8 C3 FA E8 6E 02 51 E8 BC FA 66 C1  // ..u.....n.Q...f.
    1450: E6 10 33 C0 E8 9A FD 74 09 E8 13 03 75 F6 33 C8  // ..3....t....u.3.
    1460: EB F2 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 ED  // ..X#.f......uc..
    1470: 06 66 C1 E6 10 33 C0 E8 80 FD 74 35 E8 5D FD 50  // .f...3....t5.].P
    1480: 51 8B C8 E8 F6 01 85 C1 59 58 74 0D 50 E8 AA FE  // Q.......YXt.P...
    1490: 24 03 3C 03 58 75 E0 EB 0C 50 E8 9D FE A8 01 58  // $.<.Xu...P.....X
    14A0: 74 D5 E8 6A FB 50 E8 D7 07 58 B5 00 E8 92 FE EB  // t..j.P...X......
    14B0: C6 E8 C8 01 E8 25 FD E8 31 01 B1 00 E8 4B 07 66  // .....%..1....K.f
    14C0: C1 EE 10 E8 91 06 A8 20 75 42 A8 40 75 03 E8 19  // ....... uB.@u...
    14D0: 0E E8 78 06 0A C0 75 07 32 C9 B5 01 E8 BC 0E E8  // ..x...u.2.......
    14E0: 9A 01 E8 F7 FC E8 30 FE E8 53 14 75 14 E8 5F 02  // ......0..S.u.._.
    14F0: 0A DB 74 0D E8 18 FB E8 86 07 B5 00 E8 42 FE EB  // ..t..........B..
    1500: 08 E8 63 07 B5 01 E8 38 FE E8 E3 00 C3 E8 23 16  // ..c....8......#.
    1510: C3 E8 1E FD E8 A9 06 33 C9 E8 9C 01 66 33 D2 66  // .......3....f3.f
    1520: 33 C0 E8 6C FE E8 4F 00 B1 FF E8 81 00 33 C0 E8  // 3..l..O......3..
    1530: C8 FC 74 0A E8 A5 FC 50 E8 CF 07 58 EB F1 32 C9  // ..t....P...X..2.
    1540: E8 C1 01 E8 ED 15 0B C0 C3 E8 E6 FC E8 71 06 66  // .............q.f
    1550: 33 C0 66 BA 00 F0 FF FF E8 30 01 51 B1 01 E8 89  // 3.f......0.Q....
    1560: 01 59 33 C0 E8 93 FC 74 0A E8 70 FC 50 E8 65 07  // .Y3....t..p.P.e.
    1570: 58 EB F1 E8 B1 0D C3 B8 02 00 E8 5F FC 74 2E B1  // X.........._.t..
    1580: 07 E8 F6 11 B8 02 00 E8 6F F0 F6 C3 04 75 12 E8  // ........o....u..
    1590: 1E 1B 83 3D 00 75 0A E8 99 15 83 E0 FD E8 9C 15  // ...=.u..........
    15A0: C3 66 B8 02 00 00 00 E8 E7 FD E8 51 F2 C3 E8 1D  // .f.........Q....
    15B0: 14 74 23 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A  // .t#8.v.....8.s..
    15C0: C8 BB 02 00 E8 F5 13 8A E1 E8 F9 13 B1 04 E8 A9  // ................
    15D0: 11 0C 01 C3 0C 01 C3 51 E8 F3 13 74 0C 8A CC BB  // .......Q...t....
    15E0: 02 00 E8 D7 13 8A C4 8A E1 59 C3 E8 FE 05 C3 E8  // .........Y......
    15F0: 09 06 C3 E8 49 19 75 18 E8 81 00 E8 DE FB 80 F9  // ....I.u.........
    1600: 01 75 0E 51 E8 60 06 B5 01 E8 35 FD 59 E8 DF FF  // .u.Q.`....5.Y...
    1610: C3 E8 D7 FF 51 E8 BD 06 B5 00 E8 24 FD 59 C3 B8  // ....Q......$.Y..
    1620: 02 00 E8 B7 FB 74 03 E8 50 11 C3 E8 BD 04 3B C1  // .....t..P.....;.
    1630: 7C 3A 8B C1 E8 FD 04 E8 C7 0E 8B C8 51 E8 2D 05  // |:..........Q.-.
    1640: E8 F1 04 59 E8 BA 0E 3B C8 72 02 8B C1 8D 5C 04  // ...Y...;.r....\.
    1650: E8 0E 1C 32 C9 B5 0F E8 05 0D E8 0F 18 FE C1 38  // ...2...........8
    1660: C1 72 F2 8D 5C 04 E8 80 1C 0B C0 C3 33 C0 C3 BB  // .r..\.......3...
    1670: 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00  // ..3.........S...
    1680: E8 39 13 66 25 FF 0F 00 00 5B C3 53 66 50 66 51  // .9.f%....[.SfPfQ
    1690: 66 8B C8 BB 03 00 E8 23 13 66 23 C2 66 0B C1 E8  // f......#.f#.f...
    16A0: 23 13 66 59 66 58 5B C3 66 50 BB 05 00 E8 0C 13  // #.fYfX[.fP......
    16B0: 25 FF 0F 8B C8 66 58 C3 E8 78 14 23 C8 66 50 BB  // %....fX..x.#.fP.
    16C0: 05 00 E8 F7 12 25 00 F0 0B C1 E8 F8 12 66 58 C3  // .....%.......fX.
    16D0: 66 50 53 BB 06 00 E8 E3 12 A8 10 75 09 BB F0 16  // fPS........u....
    16E0: E8 06 1C 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00  // ...=Z.[fX.fPS...
    16F0: E8 C9 12 80 F1 01 C0 E1 04 24 EF 0A C1 E8 C5 12  // .........$......
    1700: 5B 66 58 C3 53 66 50 BB F8 16 E8 DC 1B 8A C1 E8  // [fX.SfP.........
    1710: 37 1B 66 58 5B C3 53 BB F8 16 E8 CC 1B 83 E0 01  // 7.fX[.S.........
    1720: 5B C3 53 66 50 BB 07 00 E8 91 12 F6 C4 01 66 58  // [.SfP.........fX
    1730: B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8 7D 12 80  // ..t...[.S....}..
    1740: E4 FE 80 FD 06 74 03 80 CC 01 E8 78 12 5B C3 66  // .....t.....x.[.f
    1750: 50 BB 06 00 E8 65 12 24 40 C0 E8 06 8A D8 66 58  // P....e.$@.....fX
    1760: C3 B3 81 E8 6B 19 75 04 83 C8 01 C3 33 C0 C3 50  // ....k.u.....3..P
    1770: 66 51 E8 67 FA 83 EC 04 8B EC 66 33 C0 66 89 46  // fQ.g......f3.f.F
    1780: 00 33 D2 8D BC 68 01 8D 1D E8 5D 1B 0B C0 74 22  // .3...h....]...t"
    1790: 8B DF B0 00 E8 12 01 74 14 8B DF E8 7B F4 66 8B  // .......t....{.f.
    17A0: 46 00 66 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C  // F.f;.r...f.N....
    17B0: EB D5 0B D2 74 0A 8D 9C 4C 01 E8 32 F4 E9 88 00  // ....t...L..2....
    17C0: 66 33 C0 66 89 46 00 8D BC F4 01 33 D2 8D 1D E8  // f3.f.F.....3....
    17D0: 17 1B 0B C0 74 58 66 50 E8 9D F0 3C 01 66 58 74  // ....tXfP...<.fXt
    17E0: 05 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 F8  // .=@.sCfRf...]...
    17F0: 1A E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B  // ..]...fZt/V..L..
    1800: F1 E8 0A F4 5E B0 00 E8 9F 00 74 1D 8D 1D E8 D8  // ....^.....t.....
    1810: 1A 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46  // ....G.f....G.f;F
    1820: 00 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2  // .r...f.F........
    1830: 74 16 56 8D 9C 4C 01 8B F2 E8 D2 F3 5E 53 8D 9C  // t.V..L......^S..
    1840: 62 01 33 C0 E8 1A 1A 5B 83 C4 04 0B D2 66 59 58  // b.3....[.....fYX
    1850: C3 57 53 51 E8 04 15 3B 55 02 75 18 66 C1 CA 10  // .WSQ...;U.u.f...
    1860: 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A  // ..f...;].u...t.:
    1870: 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B  // E.t......3......
    1880: D2 59 5B 5F C3 51 66 52 E8 D0 14 3A 65 1A 75 09  // .Y[_.QfR...:e.u.
    1890: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF  // ..t.:E.t......3.
    18A0: EB 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66  // ....fZY..fQfRSSf
    18B0: C1 CE 10 8B DE 66 C1 CE 10 E8 2D 1A 5B 66 8B D0  // .....f....-.[f..
    18C0: E8 56 F3 3B CA 72 0A 66 3B CA 72 05 E8 95 F8 75  // .V.;.r.f;.r....u
    18D0: 02 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7  // .2.[fZfY.VW.....
    18E0: E8 2B F3 5F 5E C3 66 50 53 66 51 52 57 56 51 8B  // .+._^.fPSfQRWVQ.
    18F0: DE B9 08 00 E8 7E 15 59 8D 5C 08 8B C1 66 C1 E0  // .....~.Y.\...f..
    1900: 10 8A C2 E8 43 19 F6 C2 03 75 24 8B C1 24 7F BF  // ....C....u$..$..
    1910: C9 19 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45  // ...=.....:.u.f.E
    1920: 01 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6  // .f..............
    1930: C2 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A  // ..t%...p.....3..
    1940: CC 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00  // .....u..\.f%....
    1950: 66 C1 E0 08 E8 F2 18 EB B2 8A E1 8A CA 80 E1 0C  // f...............
    1960: C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A  // .............pr*
    1970: 80 FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02  // ..us%..p..2.P.0.
    1980: 8B D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8  // ..X8.r.3.....(..
    1990: 57 19 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F  // W.........2.....
    19A0: 84 85 00 8D 5C 16 8B 05 E8 B6 18 8B 45 06 66 C1  // ....\.......E.f.
    19B0: E0 10 8B 45 02 50 E8 48 0B 66 C1 E1 10 8B C8 58  // ...E.P.H.f.....X
    19C0: 8D 1C E8 84 18 66 50 8D 5C 04 66 8B C1 E8 79 18  // .....fP.\.f...y.
    19D0: 66 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1  // fXf...f......f..
    19E0: 66 50 8D 5C 06 E8 01 19 8B C8 66 58 66 D3 E0 66  // fP.\......fXf..f
    19F0: C1 E8 10 40 8D 5C 14 E8 67 18 BF 29 1A 83 F9 01  // ...@.\..g..)....
    1A00: 74 11 BF 31 1A 81 F9 01 01 74 08 BF 39 1A 83 F9  // t..1.....t..9...
    1A10: 02 75 15 8D 5C 0C 66 8B 05 E8 2D 18 8D 5C 10 66  // .u..\.f...-..\.f
    1A20: 8B 45 04 E8 23 18 0B DB 5E 5F 5A 66 59 5B 66 58  // .E..#...^_ZfY[fX
    1A30: C3 00 40 01 90 01 01 40 01 90 01 02 80 02 90 01  // ..@....@........
    1A40: 03 80 02 90 01 04 40 01 90 01 05 40 01 90 01 06  // ......@....@....
    1A50: 80 02 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80  // .......^..@.....
    1A60: 02 90 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02  // ......^....^....
    1A70: E0 01 12 80 02 E0 01 13 80 02 90 01 23 20 04 90  // ............# ..
    1A80: 01 32 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01  // .2 ...3 ...b....
    1A90: FF 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00  // ................
    1AA0: 00 08 10 08 08 08 00 00 00 56 E8 9A 15 80 E4 01  // .........V......
    1AB0: 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02  // ;.t......3....D.
    1AC0: 0B C0 5E C3 57 53 50 E8 7D 15 83 E9 0A E8 E0 00  // ..^.WSP.}.......
    1AD0: 83 F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6  // ...v............
    1AE0: 02 E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52  // .......X[_.fSQfR
    1AF0: E8 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8  // .A..w.f...f...f.
    1B00: 00 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 F1 09  // ....f..f3.f.....
    1B10: 66 5A 59 66 5B C3 53 66 50 BB 07 00 E8 9D 0E 0A  // fZYf[.SfP.......
    1B20: C0 66 58 5B C3 53 66 50 BB 07 00 E8 8E 0E A8 01  // .fX[.SfP........
    1B30: 66 58 5B C3 53 66 50 8D 5C 06 E8 AC 17 8A C8 66  // fX[.SfP.\......f
    1B40: 58 5B C3 51 B9 08 00 E8 40 13 59 C3 53 8D 5C 08  // X[.Q....@.Y.S.\.
    1B50: E8 96 17 24 03 5B C3 8D 5C 09 E8 8C 17 C3 51 53  // ...$.[..\.....QS
    1B60: B1 01 8A E8 8D 5C 08 E8 23 17 5B 59 C3 53 8D 1C  // .....\..#.[Y.S..
    1B70: E8 76 17 5B C3 53 8D 5C 04 E8 6D 17 5B C3 53 8D  // .v.[.S.\..m.[.S.
    1B80: 5C 16 E8 64 17 5B C3 53 66 52 33 C0 E8 C2 FC 66  // \..d.[.SfR3....f
    1B90: 5A 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73  // Zu..4.t....@...s
    1BA0: 0D E8 A5 16 48 E8 0F 00 66 8B C2 E8 9B 16 5B C3  // ....H...f.....[.
    1BB0: BB 00 1E E8 33 17 C3 BB 08 1E C1 E0 03 03 D8 C3  // ....3...........
    1BC0: BB 00 1E B9 32 00 E8 AC 12 C3 51 E8 E2 FF 0B C0  // ....2.....Q.....
    1BD0: 74 12 8B C8 BB 08 1E E8 0F 17 66 3B C2 74 07 83  // t.........f;.t..
    1BE0: C3 08 E2 F3 0B DB 59 C3 C3 00 C3 00 BB 20 DF E8  // ......Y...... ..
    1BF0: A5 36 E8 83 F6 B5 01 E8 E5 07 C3 BB 00 DF E8 96  // .6..............
    1C00: 36 E8 74 F6 B5 00 E8 D6 07 C3 80 F9 00 75 0A E8  // 6.t..........u..
    1C10: 60 12 8A C8 B5 02 E8 1D 09 0B F6 74 2E E8 58 F6  // `..........t..X.
    1C20: B5 01 51 E8 C0 07 59 E8 C3 07 56 33 F6 B5 00 E8  // ..Q...Y...V3....
    1C30: 2D 07 5E B5 01 E8 C4 F6 E8 FB 08 E8 B8 09 E8 37  // -.^............7
    1C40: F6 8D 9C 00 03 E8 AC 07 E8 F5 07 66 C1 CE 10 B5  // ...........f....
    1C50: 01 E8 0B 07 E8 00 FF A8 40 75 07 32 C0 B5 01 E8  // ........@u.2....
    1C60: 7E 08 66 C1 CE 10 C3 E8 0E F6 B5 01 E8 4B 07 B5  // ~.f..........K..
    1C70: 00 E8 79 07 E8 DC 07 B1 0F E8 5D 0A E8 26 00 C3  // ..y.......]..&..
    1C80: E8 52 00 E8 02 F6 B5 00 E8 2F 07 B5 00 E8 5D 07  // .R......./....].
    1C90: E8 77 F6 E8 DC 11 38 C1 74 0A 80 F9 0B 74 05 B5  // .w....8.t....t..
    1CA0: 03 E8 92 08 C3 B1 10 E8 2F 0A E8 A9 F5 80 FD 00  // ......../.......
    1CB0: 74 06 B1 01 E8 C3 0A C3 E8 A6 05 80 FD 01 75 07  // t.............u.
    1CC0: B5 02 E8 D5 05 EB 03 E8 F3 01 B1 0D E8 0A 0A B1  // ................
    1CD0: 03 E8 54 00 C3 E8 CB F5 0B D2 74 05 B1 00 E8 36  // ..T.......t....6
    1CE0: 0A B1 02 E8 42 00 E8 51 F6 A8 01 74 12 E8 66 F5  // ....B..Q...t..f.
    1CF0: 80 FD 00 75 0A B1 0C E8 DF 09 B0 02 E8 91 04 B1  // ...u............
    1D00: 00 E8 76 0A B1 0D E8 1F 00 C3 B1 07 E8 6B 0A E8  // ..v..........k..
    1D10: 91 F5 0B D2 75 0C E8 FF F5 E8 1E 0C 75 09 E8 11  // ....u.......u...
    1D20: 0B C3 B1 07 E8 F0 09 C3 E8 ED F5 E8 0C 0C 75 24  // ..............u$
    1D30: 51 E8 46 0A 59 80 F9 0C 75 1A 33 D2 56 83 C6 08  // Q.F.Y...u.3.V...
    1D40: E8 35 0C 5E 0A C0 75 0C B9 0A 00 E8 78 11 42 83  // .5.^..u.....x.B.
    1D50: FA 1E 75 E8 C3 80 FB 01 0F 84 C5 00 E8 A5 05 66  // ..u............f
    1D60: C1 E1 10 8D 9C 35 01 E8 7F 15 A8 01 74 05 51 E8  // .....5......t.Q.
    1D70: 2B 04 59 E8 5E F5 B0 04 E8 9C 05 66 BA 50 01 40  // +.Y.^......f.P.@
    1D80: 50 E8 76 05 E8 EB 0A 75 7E 66 BA 50 01 50 4F 8D  // P.v....u~f.P.PO.
    1D90: 9C 2D 01 E8 53 15 24 06 3C 02 75 02 B6 02 B0 05  // .-..S.$.<.u.....
    1DA0: E8 74 05 E8 54 05 8D 5C 28 03 D8 E8 C4 0A 75 57  // .t..T..\(.....uW
    1DB0: 0A FF 75 09 B0 0A E8 5E 05 32 DB EB 4A 51 33 C9  // ..u....^.2..JQ3.
    1DC0: 8A CF E8 35 05 03 C8 E8 3A 05 59 B0 07 E8 47 05  // ...5....:.Y...G.
    1DD0: 66 BA 50 01 10 30 33 DB E8 97 0A 74 0F 51 8A EB  // f.P..03....t.Q..
    1DE0: 8D 9C 44 01 B1 02 E8 A4 14 59 EB 61 E8 0B 05 66  // ..D......Y.a...f
    1DF0: C1 C9 10 2B C1 66 C1 C1 10 3D 80 00 0F 82 76 FF  // ...+.f...=....v.
    1E00: B0 08 E8 12 05 EB 43 51 8A EB 8D 9C 44 01 B1 02  // ......CQ....D...
    1E10: E8 7A 14 59 66 BA 50 01 10 30 33 DB E8 53 0A EB  // .z.Yf.P..03..S..
    1E20: 2C 8D 5C 28 03 D9 53 8A E9 B1 32 51 5F E8 A4 F4  // ,.\(..S...2Q_...
    1E30: 8A E9 B1 A0 BA 00 80 E8 0D 0A 80 FF 01 5B 74 0A  // .............[t.
    1E40: B1 A2 E8 02 0A 80 FF 01 75 03 B0 00 C3 B0 01 C3  // ........u.......
    1E50: 51 B1 0C E8 D2 FE 59 B0 01 E8 BB 04 56 83 C6 08  // Q.....Y.....V...
    1E60: E8 15 0B 5E 0A C0 75 04 B3 10 EB 3F B0 02 E8 A6  // ...^..u....?....
    1E70: 04 E8 38 00 74 11 B0 03 E8 9C 04 B0 01 E8 10 03  // ..8.t...........
    1E80: 75 29 E8 27 00 75 24 66 BA 0C 00 90 43 8D 9C 30  // u).'.u$f....C..0
    1E90: 01 E8 DE 09 66 BA 20 00 90 41 8D 9C 34 01 E8 D1  // ....f. ..A..4...
    1EA0: 09 E8 BD 03 B0 09 E8 6E 04 33 DB C3 E8 25 F4 66  // .......n.3...%.f
    1EB0: BA 00 00 90 47 8D 9C 28 01 E8 B6 09 C3 B1 0C E8  // ....G..(........
    1EC0: 66 FE B1 00 E8 B3 08 B1 01 E8 AE 08 8D 9C AC 03  // f...............
    1ED0: 66 B8 00 00 00 00 E8 70 13 B0 01 E8 B2 02 74 0A  // f......p......t.
    1EE0: B5 04 E8 CB 03 B3 08 E9 3F 01 B1 08 E8 EA 07 E8  // ........?.......
    1EF0: D2 02 B1 09 E8 E2 07 E8 C5 01 8D 9C B8 03 66 33  // ..............f3
    1F00: C0 E8 45 13 E8 60 01 B9 90 01 E8 AE 0F B0 01 E8  // ..E..`..........
    1F10: 63 02 B5 02 E8 8D 03 E8 74 01 E8 9F 03 E8 E0 01  // c.......t.......
    1F20: B5 03 E8 7F 03 33 C9 E8 00 01 F6 C5 01 75 34 B5  // .....3.......u4.
    1F30: 02 E8 70 03 E8 20 01 F6 C5 04 74 08 B5 01 E8 6F  // ..p.. ....t....o
    1F40: 03 E9 CC 00 8A FD 80 E7 03 E8 E8 00 80 E3 03 38  // ...............8
    1F50: FB 75 0D E8 4C 01 75 08 B5 02 E8 53 03 E9 B0 00  // .u..L.u....S....
    1F60: E8 67 01 FE C1 E8 7B F3 38 D9 75 BB 8D 9C AC 03  // .g....{.8.u.....
    1F70: E8 76 13 3C 03 74 05 E8 ED 00 EB 9B 8D 9C B0 03  // .v.<.t..........
    1F80: 66 33 C0 E8 C3 12 8D 9C 2A 01 E8 5C 13 A8 40 74  // f3......*..\..@t
    1F90: 0C B1 13 E8 43 07 B0 03 E8 DA 01 EB 0A B1 0A E8  // ....C...........
    1FA0: 37 07 B0 02 E8 CE 01 B5 04 E8 F8 02 E8 DF 00 E8  // 7...............
    1FB0: 0A 03 E8 4B 01 B5 05 E8 EA 02 33 C9 E8 6B 00 80  // ...K......3..k..
    1FC0: FD 07 75 05 E8 86 00 75 2E 51 B5 04 E8 D5 02 59  // ..u....u.Q.....Y
    1FD0: F6 C5 01 75 07 B5 03 E8 D6 02 EB 34 E8 78 00 8A  // ...u.......4.x..
    1FE0: D5 E8 E6 00 E8 70 00 38 EA 75 0C E8 B4 00 75 07  // .....p.8.u....u.
    1FF0: B5 02 E8 BB 02 EB 19 FE C1 E8 E7 F2 38 D9 75 BC  // ............8.u.
    2000: 8D 9C AC 03 E8 E2 12 3C 04 75 05 E8 59 00 EB 9C  // .......<.u..Y...
    2010: B0 00 E8 60 01 B1 0B E8 BF 06 8D 9C AD 03 E8 C8  // ...`............
    2020: 12 B3 00 0A C0 74 02 B3 08 C3 8D 9C C0 03 E8 0F  // .....t..........
    2030: 00 8A E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3  // ....S.......[...
    2040: 51 E8 A5 12 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2  // Q........$.Y....
    2050: 03 E8 95 12 A8 01 C3 8D 9C B8 03 E8 47 12 C3 8D  // ............G...
    2060: 9C B8 03 E8 27 12 C3 33 C9 33 D2 E8 E9 FF 38 D5  // ....'..3.3....8.
    2070: 76 02 8A D5 FE C1 E8 6A F2 38 D9 72 EE 33 C9 8A  // v......j.8.r.3..
    2080: EA 8D 9C 5C 03 E8 05 12 B1 0B E8 ED 06 C3 E8 43  // ...\...........C
    2090: F2 8D 9C B8 03 E8 51 12 66 BA 03 01 80 83 E8 D1  // ......Q.f.......
    20A0: 07 C3 51 53 8D 9C B0 03 E8 FA 11 FE C5 E8 DD 11  // ..QS............
    20B0: 80 FD 06 72 07 B5 02 E8 F6 01 33 C9 5B 59 C3 66  // ...r......3.[Y.f
    20C0: 33 C0 8D 9C B0 03 E8 80 11 C3 32 ED E8 65 FF 80  // 3.........2..e..
    20D0: E3 0C C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB  // .......*........
    20E0: 18 72 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02  // .r... .K....8.r.
    20F0: 8A DF 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3  // .....u.......`..
    2100: E8 D1 F1 8D 9C C0 03 66 BA 02 02 90 45 E8 62 07  // .......f....E.b.
    2110: C3 E8 C0 F1 66 BA 00 01 90 42 8D 9C B4 03 E8 51  // ....f....B.....Q
    2120: 07 E8 B0 F1 66 BA 03 01 90 45 8D 9C B8 03 E8 41  // ....f....E.....A
    2130: 07 E8 E4 F1 E8 07 08 75 3B E8 98 F1 66 BA 0A 01  // .......u;...f...
    2140: 90 40 8D 9C BF 03 E8 29 07 8D 9C 28 01 E8 99 11  // .@.....)...(....
    2150: 3C 14 72 20 E8 7D F1 66 BA 10 00 90 4F 8D 9C D0  // <.r .}.f....O...
    2160: 03 E8 0E 07 E8 6D F1 66 BA 15 01 90 40 8D 9C CC  // .....m.f....@...
    2170: 03 E8 FE 06 C3 E8 5C F1 66 BA 02 01 80 50 E8 F1  // ......\.f....P..
    2180: 06 C3 E8 3E F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3  // ...>...f3.......
    2190: E8 41 F1 66 BA 00 06 80 50 E8 D6 06 C3 E8 34 F1  // .A.f....P.....4.
    21A0: 66 BA 11 01 80 50 B0 04 E8 C7 06 C3 E8 25 F1 66  // f....P.......%.f
    21B0: BA 00 06 90 40 8D 9C C8 03 E8 B6 06 8D 9C C8 03  // ....@...........
    21C0: E8 26 11 C3 E8 BB FF 3C 06 74 0E 3C 0A 74 0A 3C  // .&.....<.t.<.t.<
    21D0: 14 74 06 3C 1E 74 02 33 C0 E8 07 F1 8A E3 80 CC  // .t.<.t.3........
    21E0: 80 50 E8 EF F0 58 66 BA 00 01 80 61 E8 83 06 33  // .P...Xf....a...3
    21F0: C9 E8 7A F0 0B C0 74 02 B5 10 8D 9C BC 03 E8 8C  // ..z...t.........
    2200: 10 8A C5 E8 CE F0 66 BA 07 01 80 50 E8 63 06 E8  // ......f....P.c..
    2210: 06 F1 E8 29 07 75 49 8D 9C 48 03 E8 CB 10 0A C0  // ...).uI..H......
    2220: 74 0E E8 AF F0 66 BA 0A 01 80 50 B0 01 E8 42 06  // t....f....P...B.
    2230: 8D 9C 28 01 E8 B2 10 3C 14 72 25 8D 9C D0 03 E8  // ..(....<.r%.....
    2240: A7 10 0B C0 74 1A E8 32 EC 32 C9 8D 9C CC 03 E8  // ....t..2.2......
    2250: 3B 10 8A C5 E8 7D F0 66 BA 15 01 80 50 E8 12 06  // ;....}.f....P...
    2260: C3 8D 9C B4 03 B9 0E 00 E8 0A 0C E8 A3 FE E8 8F  // ................
    2270: FE E8 38 FF 3C 01 75 1C E8 D2 FD 74 17 33 C9 E8  // ..8.<.u....t.3..
    2280: A8 FD 80 FD 07 75 0D FE C1 E8 57 F0 38 D9 75 EF  // .....u....W.8.u.
    2290: B5 01 EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02  // ................
    22A0: E8 EA 0F C3 51 8D 9C AC 03 32 C9 E8 DF 0F 59 C3  // ....Q....2....Y.
    22B0: 51 8D 9C AC 03 B1 01 E8 D3 0F 59 C3 8D 9C 32 01  // Q.........Y...2.
    22C0: E8 26 10 24 07 75 15 B9 64 00 8D 9C AC 03 E8 18  // .&.$.u..d.......
    22D0: 10 3C 02 74 03 B9 90 01 E8 E0 0B C3 32 E4 B1 04  // .<.t........2...
    22E0: 33 D2 F6 E1 8B C8 E8 DD 0B C3 51 8D 5C 14 E8 F8  // 3.........Q.\...
    22F0: 0F 66 C1 E0 10 E8 A4 01 59 C3 53 8D 9C 44 01 E8  // .f......Y.S..D..
    2300: E7 0F 5B C3 53 66 50 8D 9C 44 01 E8 DB 0F 8B C1  // ..[.SfP..D......
    2310: E8 36 0F 66 58 5B C3 53 51 8D 9C 44 01 8A E8 B1  // .6.fX[.SQ..D....
    2320: 03 E8 69 0F 59 5B C3 33 C9 E8 40 0B 38 C1 73 05  // ..i.Y[.3..@.8.s.
    2330: B5 00 E8 8C 00 B5 00 E8 80 00 FE C1 E8 30 0B 38  // .............0.8
    2340: C1 72 E6 B1 14 8A E9 E8 28 0B 38 C1 74 05 B5 03  // .r......(.8.t...
    2350: E8 E3 01 FE C1 E8 11 0B 04 14 38 C1 76 E7 C3 83  // ..........8.v...
    2360: EC 0C 8B EC 0B F6 74 1E E8 02 F8 66 C1 C8 10 66  // ......t....f...f
    2370: 89 46 00 8D 5C 04 E8 70 0F 66 89 46 04 8D 5C 08  // .F..\..p.f.F..\.
    2380: E8 66 0F 88 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B  // .f..F..N...f....
    2390: C4 BB 2B 00 E8 D7 09 83 C4 0C C3 83 EC 04 8B EC  // ..+.............
    23A0: B0 02 88 46 01 88 4E 00 8C D0 66 C1 E0 10 8B C4  // ...F..N...f.....
    23B0: BB 25 00 E8 B8 09 83 C4 04 C3 BB 23 00 E8 08 00  // .%.........#....
    23C0: C3 BB 17 00 E8 01 00 C3 83 EC 04 8B EC 89 4E 00  // ..............N.
    23D0: 8C D0 66 C1 E0 10 8B C4 E8 93 09 83 C4 04 C3 BB  // ..f.............
    23E0: 22 00 E8 E3 FF C3 BB 27 00 E8 DC FF C3 BB 2C 00  // "......'......,.
    23F0: E8 D5 FF C3 E8 F2 0E 66 A9 00 00 FF FF 74 40 83  // .......f.....t@.
    2400: EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 DA 0E 66  // ....UQ.........f
    2410: 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 C8  // .F..............
    2420: 0E 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0  // .f...f.F.Y].N...
    2430: 66 C1 E0 10 8B C4 BB 31 00 E8 32 09 83 C4 18 C3  // f......1..2.....
    2440: E8 35 EE 8D 9C D0 02 E8 9F 0E 8A E8 BB 21 00 E8  // .5...........!..
    2450: 76 FF C3 8D 9C 3C 03 E8 8F 0E 8A F8 E8 F7 ED 8A  // v....<..........
    2460: DD 53 8D 9C 42 03 E8 80 0E 8A E8 5B E8 09 EE E8  // .S..B......[....
    2470: A6 EE E8 C9 04 75 02 B3 01 83 EC 04 8B EC 88 4E  // .....u.........N
    2480: 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10  // ..~..^..n...f...
    2490: 8B C4 BB 2A 00 E8 D6 08 83 C4 04 C3 83 EC 10 8B  // ...*............
    24A0: EC 66 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66  // .f=....v.f.....f
    24B0: 8B C8 66 33 C0 66 89 46 04 66 89 46 00 66 89 46  // ..f3.f.F.f.F.f.F
    24C0: 08 66 B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0  // .f.....f..f.F...
    24D0: 66 C1 E0 10 8B C4 BB 35 00 E8 92 08 83 C4 10 C3  // f......5........
    24E0: 83 EC 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C  // ......N.f.V..^..
    24F0: D0 66 C1 E0 10 8B C4 BB 2D 00 E8 71 08 83 C4 08  // .f......-..q....
    2500: C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3  // .=..v.......?$..
    2510: 51 E8 D5 0D 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 C8  // Q...f3..........
    2520: 0D 03 C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8  // ...f%....Y=.'s..
    2530: 10 27 C3 32 D2 C3 80 FD 02 75 19 E8 44 EE 66 BB  // .'.2.....u..D.f.
    2540: 00 08 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00  // .......f3.f.....
    2550: E8 82 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33  // .......u.f3...f3
    2560: D2 66 BB FF 00 00 00 EB 36 51 33 D2 E8 E7 EC 8A  // .f......6Q3.....
    2570: D5 66 C1 E2 10 E8 20 ED 8A F2 8A D1 66 8B C2 66  // .f.... .....f..f
    2580: 0D 00 00 00 80 E8 5B ED 80 FB 04 76 06 66 0D 00  // ......[....v.f..
    2590: 00 00 08 E8 91 ED E8 DF EC 66 33 DB 8A D9 59 83  // .........f3...Y.
    25A0: EC 10 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66  // ....f.F.f.^.f..f
    25B0: 33 D2 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB  // 3.f.d...f..f.F..
    25C0: 0C 00 8C D0 66 C1 E0 10 8B C4 E8 A1 07 8B EC B3  // ....f...........
    25D0: 01 83 C4 10 C3 83 EC 10 8B EC 66 89 56 00 66 89  // ..........f.V.f.
    25E0: 5E 04 BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 7E 07  // ^......f......~.
    25F0: B3 01 83 C4 10 C3 C3 53 51 66 50 B9 68 74 80 FB  // .......SQfP.ht..
    2600: 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 78 69 66 33  // .t.......u..xif3
    2610: D2 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00  // ...fXY[.fR..f...
    2620: 00 FF FF 75 1A 80 FD 13 74 15 80 FD 14 74 10 B3  // ...u....t....t..
    2630: 01 80 FD 0E 74 09 B3 03 80 F9 03 74 02 B3 02 66  // ....t......t...f
    2640: 5A C3 B5 11 80 FA 23 74 07 80 FA 22 74 02 B5 00  // Z.....#t..."t...
    2650: C3 B5 02 80 FA 23 74 07 80 FA 22 74 02 B3 01 C3  // .....#t..."t....
    2660: 32 C9 80 FD 00 75 08 C7 46 00 0B 01 B1 01 C3 50  // 2....u..F......P
    2670: 33 C0 E8 9E 01 04 14 89 46 00 58 B1 01 C3 C3 8B  // 3.......F.X.....
    2680: DA B7 22 80 FE 21 74 02 B7 21 C3 0C 01 C3 E8 58  // .."..!t..!.....X
    2690: 0C 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 49 0C  // .f.....t.S....I.
    26A0: 5B 3D E0 01 72 0F 53 83 C3 18 E8 3C 0C 5B A8 80  // [=..r.S....<.[..
    26B0: 75 03 0C 01 C3 32 C0 C3 B5 0C C3 B5 02 C3 50 E8  // u....2........P.
    26C0: 51 01 B1 03 0A C0 74 04 B1 08 02 C8 58 C3 80 FA  // Q.....t.....X...
    26D0: 22 75 05 C7 46 00 78 69 C3 E8 1A 01 80 FD FF 74  // "u..F.xi.......t
    26E0: 35 83 EC 0C 8B EC 88 4E 01 88 6E 00 80 F9 0F 75  // 5......N..n....u
    26F0: 05 E8 4F 00 EB 0F 80 F9 10 75 0A 8D 9C 48 03 E8  // ..O......u...H..
    2700: E7 0B 88 46 02 8C D0 66 C1 E0 10 8B C4 BB 04 00  // ...F...f........
    2710: E8 5B 06 83 C4 0C C3 83 EC 10 8B EC 88 4E 01 E8  // .[...........N..
    2720: 81 EB 81 E2 00 07 FE CE C0 E6 04 88 76 00 E8 12  // ............v...
    2730: 00 8C D0 66 C1 E0 10 8B C4 BB 32 00 E8 2F 06 83  // ...f......2../..
    2740: C4 10 C3 66 53 E8 7B EB 66 8B C2 66 33 D2 66 BB  // ...fS.{.f..f3.f.
    2750: 8C 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C  // ....f..f[...n...
    2760: 40 03 E8 84 0B 88 46 02 88 66 03 66 C1 E8 10 88  // @.....F..f.f....
    2770: 46 08 E8 3D EB 66 89 56 04 C3 83 EC 20 8B EC 80  // F..=.f.V.... ...
    2780: F9 04 75 0A 88 4E 01 32 C0 88 46 00 EB 56 E8 07  // ..u..N.2..F..V..
    2790: EB E8 7F 00 88 46 00 88 4E 01 E8 7B EB 88 56 0A  // .....F..N..{..V.
    27A0: 80 F9 01 74 18 80 F9 0B 75 3A 8D 9C 5C 03 E8 38  // ...t....u:..\..8
    27B0: 0B 88 46 02 E8 FB EA 66 89 56 04 EB 27 E8 14 EB  // ..F....f.V..'...
    27C0: 88 6E 08 E8 EC EA 66 89 56 04 E8 16 EB 88 5E 03  // .n....f.V.....^.
    27D0: E8 83 EA 88 6E 02 51 E8 1C 00 8A CD B0 01 D2 E0  // ....n.Q.........
    27E0: 59 88 46 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8  // Y.F...f......L..
    27F0: 7C 05 83 C4 20 C3 8D 9C 3C 03 E8 EC 0A 32 ED 3C  // |... ...<....2.<
    2800: 03 74 0C 3C 09 72 09 3C 0E 77 05 2C 08 8A E8 C3  // .t.<.r.<.w.,....
    2810: B5 FF C3 52 32 C0 80 EE 21 80 FA 1E 74 10 B0 02  // ...R2...!...t...
    2820: 80 FA 20 74 09 B0 04 80 FA 21 74 02 B0 06 02 C6  // .. t.....!t.....
    2830: 5A C3 83 EC 08 8C D0 66 C1 E0 10 8B C4 BB 4B 00  // Z......f......K.
    2840: E8 2B 05 83 C4 08 C3 83 EC 08 8B EC 89 7E 00 89  // .+...........~..
    2850: 5E 02 89 56 04 89 4E 06 8C D0 66 C1 E0 10 8B C4  // ^..V..N...f.....
    2860: BB 36 00 E8 08 05 8B EC 8B 5E 02 8A 7E 01 83 C4  // .6.......^..~...
    2870: 08 C3 56 33 F6 66 F7 C2 00 00 80 00 75 0A 50 33  // ..V3.f......u.P3
    2880: C0 8A C6 8B F0 32 F6 58 53 BB 04 1F E8 BA 09 66  // .....2.XS......f
    2890: 8B C2 BB 00 1F E8 B1 09 5B 66 F7 C2 00 00 10 00  // ........[f......
    28A0: 75 02 33 DB 8B D3 66 C1 E2 10 BA 00 1F 83 EC 08  // u.3...f.........
    28B0: 8B EC 66 89 56 00 88 4E 04 8A C5 FE C8 88 46 07  // ..f.V..N......F.
    28C0: C6 46 05 00 C6 46 06 00 8C D0 66 C1 E0 10 8B C4  // .F...F....f.....
    28D0: BB 4E 00 E8 98 04 8B EC 8A 5E 05 8A 7E 06 83 C4  // .N.......^..~...
    28E0: 08 0A DB 74 32 51 B9 90 01 80 FB 20 74 05 80 FB  // ...t2Q..... t...
    28F0: 80 75 13 B9 0A 00 8B C6 0A C0 74 0A B9 90 01 3C  // .u........t....<
    2900: 01 74 03 B9 E8 03 E8 B2 05 59 8B C6 FE C4 8B F0  // .t.......Y......
    2910: 80 FC 06 76 98 0A DB 5E C3 8D 5C 04 E8 CA 09 8B  // ...v...^..\.....
    2920: D0 B5 02 E8 14 00 74 11 B5 01 80 FA 13 75 0A E8  // ......t......u..
    2930: 61 00 80 FA 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9  // a....u..........
    2940: FF 74 03 80 FA 0E C3 80 FA 05 C3 80 FA 02 74 03  // .t............t.
    2950: 80 FA 04 C3 80 FA 01 74 03 80 FA 02 C3 80 FA 02  // .......t........
    2960: 75 03 B2 01 C3 80 FA 04 75 03 B2 03 C3 C3 B5 08  // u.......u.......
    2970: E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8 6B 09 8A C8  // ...t.....\..k...
    2980: 0A C9 75 03 32 C0 C3 B5 02 E8 BD 04 8A C5 24 02  // ..u.2.........$.
    2990: D0 E8 C3 8D 5C 08 E8 50 09 8A D0 B6 01 83 EC 10  // ....\..P........
    29A0: 8B EC 89 56 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00  // ...V...f......O.
    29B0: E8 BB 03 8B EC 8A 56 04 83 C4 10 C3 53 83 C3 4C  // ......V.....S..L
    29C0: E8 F4 08 5B C3 53 83 C3 4C E8 46 08 5B C3 56 E8  // ...[.S..L.F.[.V.
    29D0: 59 03 8B 44 38 83 7D 20 00 5E C3 52 50 0F BC D8  // Y..D8.} .^.RP...
    29E0: 32 FF 80 FB 01 75 05 BB 00 24 EB 0C FE CB B8 00  // 2....u...$......
    29F0: 04 F7 E3 05 00 20 8B D8 58 5A C3 57 E8 56 00 74  // ..... ..XZ.W.V.t
    2A00: 0A 8B 5D 02 E8 08 00 0B DB 5F C3 33 DB 5F C3 52  // ..]......_.3._.R
    2A10: 51 0B DB 74 1B 56 E8 F9 02 03 DE 5E 33 C9 8A 4F  // Q..t.V.....^3..O
    2A20: 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB  // ..?.t.:.t.....3.
    2A30: 0B DB 59 5A C3 56 51 E8 D8 02 32 C9 8D 7C 08 3B  // ..YZ.VQ...2..|.;
    2A40: 5D 04 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF  // ].t......:L.r.3.
    2A50: 0B FF 59 5E C3 56 51 E8 B8 02 32 C9 8D 7C 08 3B  // ..Y^.VQ...2..|.;
    2A60: 1D 74 0C 83 C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B  // .t......:L.r.3..
    2A70: FF 59 5E C3 56 51 E8 99 02 32 C9 8D 7C 08 3B 45  // .Y^.VQ...2..|.;E
    2A80: 0C 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B  // .t......:L.r.3..
    2A90: FF 59 5E C3 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E  // .Y^.WP......]..n
    2AA0: FF 58 5F C3 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F  // .X_.S2......t..O
    2AB0: 02 0A C9 5B C3 53 32 ED B3 02 E8 D7 FF 74 03 8A  // ...[.S2......t..
    2AC0: 6F 02 0A ED 5B C3 50 57 8B DA E8 68 FF 75 04 33  // o...[.PW...h.u.3
    2AD0: DB EB 0D B0 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02  // ......]..4.t.._.
    2AE0: 5F 58 C3 66 50 53 51 57 8D 1C 66 25 FF FF 00 00  // _X.fPSQW..f%....
    2AF0: E8 56 07 8B D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B  // .V....;.#.t1.u..
    2B00: FF 74 2A 66 50 66 8B 45 04 8D 5C 0C E8 3A 07 66  // .t*fPf.E..\..:.f
    2B10: 33 C0 8B 05 8D 5C 04 E8 2F 07 66 58 E8 85 FF E8  // 3....\../.fX....
    2B20: 93 FF 8D 5C 08 66 33 C0 8B C1 E8 1C 07 5F 59 5B  // ...\.f3......_Y[
    2B30: 66 58 C3 56 E8 DB 01 8B 44 04 5E C3 56 E8 D2 01  // fX.V....D.^.V...
    2B40: 89 44 04 5E C3 E8 F8 01 8B F7 83 C6 38 BB 00 2C  // .D.^........8..,
    2B50: B9 23 00 E8 4D 03 E8 01 00 C3 51 66 57 56 E8 B1  // .#..M.....QfWV..
    2B60: 01 66 33 FF 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15  // .f3..|.3....2...
    2B70: B8 00 70 23 C2 3D 00 30 75 5A 80 FA 15 74 0B E8  // ..p#.=.0uZ...t..
    2B80: B1 FF 0B 45 0C E8 B4 FF EB 4A E8 64 00 89 45 0C  // ...E.....J.d..E.
    2B90: 0B C0 75 04 89 05 EB 3C E8 98 FF 0B 45 0C E8 9B  // ..u....<....E...
    2BA0: FF 83 7D 06 00 74 16 E8 50 00 89 45 06 0B C0 74  // ..}..t..P..E...t
    2BB0: 0C 83 7D 06 00 74 06 8B 5C 0A E8 C1 00 E8 46 00  // ..}..t..\.....F.
    2BC0: 89 05 8B 5D 02 E8 B6 00 8B 5D 02 E8 D1 00 8B 5D  // ...].....].....]
    2BD0: 08 E8 EF 00 83 C7 10 FE C1 3A 4C 06 72 90 5E 66  // .........:L.r.^f
    2BE0: 5F 59 C3 08 00 80 00 00 02 00 04 00 08 40 00 00  // _Y...........@..
    2BF0: 00 53 E8 58 00 E8 F1 06 5B C3 53 E8 4F 00 83 C3  // .S.X....[.S.O...
    2C00: 08 E8 E5 06 5B C3 53 57 52 E8 41 00 83 C3 04 E8  // ....[.SWR.A.....
    2C10: D7 06 8B D0 E8 34 FD 75 16 8B 5D 04 8B D3 E8 5E  // .....4.u..]....^
    2C20: FA 57 E8 10 FE 5F 75 07 8B D0 E8 30 FD 8B C2 5A  // .W..._u....0...Z
    2C30: 5F 5B C3 E8 D0 FF 66 C1 E8 10 B4 11 E8 25 00 C3  // _[....f......%..
    2C40: E8 C3 FF 66 C1 E8 18 B4 10 E8 18 00 C3 51 52 33  // ...f.........QR3
    2C50: C9 8A CE 80 E1 07 49 B8 10 00 F7 E1 BB 14 2C 03  // ......I.......,.
    2C60: D8 5A 59 C3 57 53 51 33 C9 8A C8 8A C4 BB 03 71  // .ZY.WSQ3.......q
    2C70: E8 88 FD 83 C3 02 03 D9 8A 07 59 5B 5F C3 50 53  // ..........Y[_.PS
    2C80: B0 01 E8 8A FD 74 15 E8 A9 FF 88 47 02 5B 53 B0  // .....t.....G.[S.
    2C90: 02 E8 7B FD 74 06 E8 A7 FF 88 47 02 5B 58 C3 51  // ..{.t.....G.[X.Q
    2CA0: 50 B0 17 E8 69 FD 74 18 53 E8 A1 FF 83 C3 0C E8  // P...i.t.S.......
    2CB0: 37 06 8B C8 5B F7 C1 00 04 74 05 66 83 4F 02 01  // 7...[....t.f.O..
    2CC0: 58 59 C3 51 50 B0 14 E8 45 FD 74 3A 53 E8 7D FF  // XY.QP...E.t:S.}.
    2CD0: 83 C3 0C E8 13 06 8B C8 5B F6 C1 01 74 05 66 83  // ........[...t.f.
    2CE0: 67 02 FD F6 C1 80 74 05 66 83 67 02 F7 F7 C1 00  // g.....t.f.g.....
    2CF0: 01 74 08 66 81 4F 02 00 01 00 00 F7 C1 00 02 74  // .t.f.O.........t
    2D00: 05 66 83 67 02 FB 58 59 C3 BF A6 01 8B 3D 8B 7D  // .f.g..XY.....=.}
    2D10: 0C C3 BE A6 01 8B 34 8B 74 30 C3 1E 0E 1F BF A6  // ......4.t0......
    2D20: 01 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE A6 01 8B 34  // ..=.}..........4
    2D30: 8B 74 10 C3 BF A6 01 8B 3D 8B 7D 26 83 C7 04 C3  // .t......=.}&....
    2D40: BF A6 01 8B 3D 8B 7D 40 C3 BE A6 01 8B 34 8B 74  // ....=.}@.....4.t
    2D50: 1A C3 BE A6 01 8B 34 8B 74 3A C3 BF A6 01 8B 3D  // ......4.t:.....=
    2D60: 8B 7D 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC  // .}..............
    2D70: 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02  // ....F.f3..F...F.
    2D80: 06 52 8A D3 8B C5 E8 84 17 5A 07 83 C4 06 C3 E8  // .R.......Z......
    2D90: 77 FF 66 F7 45 10 01 00 00 00 C3 50 E8 6A FF B8  // w.f.E......P.j..
    2DA0: 01 00 09 45 10 58 C3 E8 5F FF 88 45 10 C3 66 53  // ...E.X.._..E..fS
    2DB0: 83 EC 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66  // ..H..f.^.f.N...f
    2DC0: C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B  // .............Hf[
    2DD0: E8 81 01 E8 AA 01 83 EC 1C 8B EC C6 46 01 07 8C  // ............F...
    2DE0: D0 66 C1 E0 10 8B C4 BB 0D 00 E8 81 FF 83 C4 1C  // .f..............
    2DF0: 83 EC 1C 8B EC C6 46 01 08 8C D0 66 C1 E0 10 8B  // ......F....f....
    2E00: C4 BB 0D 00 E8 67 FF 83 C4 1C BB 04 00 E8 AC FB  // .....g..........
    2E10: 66 C1 E8 10 E8 90 FF C3 83 EC 54 8B EC 66 89 5E  // f.........T..f.^
    2E20: 00 8C D0 66 C1 E0 10 8B C4 BB 0A 00 E8 3F FF 83  // ...f.........?..
    2E30: C4 54 C3 E8 D3 FE 66 8B 5D 08 66 8B 4D 0C C3 56  // .T....f.].f.M..V
    2E40: E8 0F FF 66 8B 44 08 5E C3 83 EC 04 8B EC 89 4E  // ...f.D.^.......N
    2E50: 00 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8 0F FF 8B  // ...f......8.....
    2E60: EC 8A 6E 02 83 C4 04 C3 C3 B0 04 C3 B0 01 C3 B0  // ..n.............
    2E70: 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 CB 03 83 C3  // .....SfPf3......
    2E80: 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 5B 04 66 C1  // ...fX[.2....[.f.
    2E90: CB 10 E8 B4 03 66 C1 CB 10 66 81 C3 04 00 04 00  // .....f...f......
    2EA0: E2 E9 C3 FC 66 AD E8 A0 03 83 C3 04 E2 F6 C3 FC  // ....f...........
    2EB0: E8 36 04 66 AB 83 C3 04 E2 F6 C3 66 50 B8 64 00  // .6.f.......fP.d.
    2EC0: E8 10 00 66 58 C3 66 50 B8 50 C3 D1 E1 E8 03 00  // ...fX.fP.P......
    2ED0: 66 58 C3 52 F7 E1 8B CA E8 27 02 66 53 8B D9 66  // fX.R.....'.fS..f
    2EE0: C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2  // .....f.......f..
    2EF0: 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF  // .f3.f.f.......f.
    2F00: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    2F10: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    2F20: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8  // ;.r.....f[Z..B..
    2F30: 85 03 66 33 D2 66 BB 64 00 00 00 66 F7 F3 C3 66  // ..f3.f.d...f...f
    2F40: 50 53 BB 07 00 E8 74 FA 25 00 02 35 00 02 0B C0  // PS....t.%..5....
    2F50: 5B 66 58 C3 B3 01 E8 83 01 66 C1 E0 0A 66 83 E8  // [fX......f...f..
    2F60: 20 E8 E5 FD 66 89 44 04 C7 44 08 20 00 C3 56 1E  //  ...f.D..D. ..V.
    2F70: 0E 1F E8 D4 FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    2F80: E8 D1 FF 06 E8 B9 FD 0E 07 BB 00 78 E8 5A 03 66  // ...........x.Z.f
    2F90: 3B 05 75 19 B9 00 01 FC E8 14 FF BB 00 7C BF A6  // ;.u..........|..
    2FA0: 01 8B 3D 8B 7D 22 B9 00 01 FC E8 02 FF E8 90 FD  // ..=.}"..........
    2FB0: BE A6 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 6A  // ....4.t..E..D..j
    2FC0: FD 0B F6 74 4F 8B 45 28 89 44 20 8A 45 33 88 44  // ...tO.E(.D .E3.D
    2FD0: 38 F6 45 26 08 74 17 8A 45 26 C0 E8 04 88 44 24  // 8.E&.t..E&....D$
    2FE0: 80 64 24 FD F6 45 26 01 74 04 80 4C 24 02 57 83  // .d$..E&.t..L$.W.
    2FF0: C7 38 8A 85 87 00 88 44 3B 5F 66 8B 45 18 89 44  // .8.....D;_f.E..D
    3000: 28 B9 07 00 8D 5D 2C 8A 07 0A C0 74 03 88 44 2C  // (....],....t..D,
    3010: 43 46 E2 F3 E8 3B FD 8B 45 20 89 44 10 8B 45 22  // CF...;..E .D..E"
    3020: 89 44 12 8B 45 1C 89 44 14 8B 45 1E 89 44 16 BB  // .D..E..D..E..D..
    3030: 04 71 B0 09 E8 C4 F9 74 0C 57 83 C7 38 8A 85 85  // .q.....t.W..8...
    3040: 00 88 47 04 5F 07 C3 BE A6 01 8B 34 8B 74 1E 83  // ..G._......4.t..
    3050: C6 04 B9 1C 00 C3 56 E8 D1 FC 8A 6C 33 5E C3 56  // ......V....l3^.V
    3060: E8 C8 FC 53 81 C3 09 01 E8 7E 02 8A E8 5B 53 81  // ...S.....~...[S.
    3070: C3 00 01 E8 73 02 5B 8A C5 66 89 44 34 5E C3 56  // ....s.[..f.D4^.V
    3080: E8 A8 FC 66 8B 44 34 53 81 C3 08 01 B1 01 8A E8  // ...f.D4S........
    3090: E8 FA 01 5B 53 81 C3 00 01 B1 01 8A EC E8 ED 01  // ...[S...........
    30A0: 5B 53 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B 5E C3  // [S....f......[^.
    30B0: 56 E8 77 FC 8B FE 83 C7 04 5E C3 56 E8 6C FC 8A  // V.w......^.V.l..
    30C0: 44 24 80 FD 00 74 05 88 6C 33 0C 02 88 44 24 5E  // D$...t..l3...D$^
    30D0: C3 32 C0 C3 E8 69 FC 66 8B 45 08 C3 66 53 83 EC  // .2...i.f.E..fS..
    30E0: 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB  // .....f.....f.^..
    30F0: 06 00 E8 79 FC 8B EC 66 8B 46 00 83 C4 04 66 5B  // ...y...f.F....f[
    3100: C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A  // ..fP..=..u......
    3110: F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8  // ...t...S...... .
    3120: D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14  // ....[2.f.fX.....
    3130: 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8  // ....u.Kt.C;.w...
    3140: 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3  // ..+..........+..
    3150: 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9  // ;.r.u.;.w.+...+.
    3160: 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56  // +.....+.+.....UV
    3170: 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77  // +.......r.E;.r.w
    3180: 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B  // .;.v....Mx ....+
    3190: C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03  // ....r...Mx......
    31A0: C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B  // ...s............
    31B0: C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91  // .3.^]..P...t....
    31C0: 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66  // ..t.....X.....Rf
    31D0: 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA  // P....f.......$..
    31E0: F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3  // ..f.fXZ.R...f.Z.
    31F0: 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF  // R...f.Z..1......
    3200: E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF  // ......$.........
    3210: 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3  // ..RfSfP...fXf[Z.
    3220: 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 75 01 C3 66  // f...f.......u..f
    3230: 50 66 C1 E3 10 66 C1 EB 10 E8 32 FD 66 03 D8 66  // Pf...f....2.f..f
    3240: 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66  // ......fX.RfS...f
    3250: 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 45 01 66 58  // [Z.fP.......E.fX
    3260: C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0  // .RQfSfP.........
    3270: E1 03 E8 8D FE E8 B7 FF E8 0F 01 66 D3 C8 58 50  // ...........f..XP
    3280: 66 D3 C0 E8 1D 01 66 58 66 5B 59 5A C3 66 50 51  // f.....fXf[YZ.fPQ
    3290: C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8  // ....S.f....f....
    32A0: FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3  // .YfX.fPQ....;.f.
    32B0: C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1  // .Y..fX.._...D.f.
    32C0: E3 10 66 C1 EB 0E E8 C1 00 C3 E8 35 FE 66 C1 E3  // ..f........5.f..
    32D0: 02 E8 B6 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8  // .....RfS...f[Z..
    32E0: 20 FE E8 4A FF E8 A2 00 C3 51 66 52 8A EB 8A CB  //  ..J.....QfR....
    32F0: 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74  // ...............t
    3300: 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66  // .f...........f.f
    3310: 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66  // .....fZY.RfS...f
    3320: 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66 50 55  // [Z.RfS...f[Z.fPU
    3330: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD 2E A1  // RfP...V..V......
    3340: F5 01 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    3350: 5D C3 66 50 55 52 8B EC E8 A7 FD B2 00 66 8B 46  // ].fPUR.......f.F
    3360: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    3370: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 84 FD B2 18  // .Z]fXfX.fPR.....
    3380: 66 ED 2E A3 F5 01 5A 66 58 C3 66 81 FB FF 00 00  // f.....ZfX.f.....
    3390: 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04  // .w.....f....f...
    33A0: 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A  // f..f......w.....
    33B0: 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55  // f...f.f...f....U
    33C0: 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28  // ..SQ..&.\.&.L..(
    33D0: 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24  // ..f.Y[].SQ..&.\$
    33E0: 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26  // 3....Y[.U..SQ..&
    33F0: 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00  // .\.&.L...RVW....
    3400: 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01  // ...N.....&.|&.E.
    3410: 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA  // 2.. .+..........
    3420: D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1  // .....M.2........
    3430: D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C  // .......&!D.&!|..
    3440: D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B  // ...&.|&.M.2.. .+
    3450: C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC  // ...f.F........n.
    3460: D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3  // .^....M.2....V..
    3470: 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03  // .......#F.#V..M.
    3480: 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09  // 2.........&.D.&.
    3490: 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B  // T.._^Z.U..SQRWP.
    34A0: D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8  // .&..&.E.2.. .+..
    34B0: FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88  // .............M..
    34C0: 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1  // N..F.....N......
    34D0: D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A  // ...&.G.&....f._Z
    34E0: E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77  // ...SQRW......&.w
    34F0: 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF  // &.L.2.. .+......
    3500: 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D  // ..........&..&.M
    3510: 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // .2..............
    3520: D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B  // .&!G.&!W._...SV.
    3530: D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C  // .....&.w&.<.ts.<
    3540: 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26  // .uX.D.2.&....uL&
    3550: 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 92 91 26 01  // ;G.uF..k......&.
    3560: 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A  // G&....&.w&.<.t..
    3570: 04 32 E4 6B F0 03 8B C3 FF 94 90 91 26 8B 77 26  // .2.k........&.w&
    3580: 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47  // ..2....D.&)G&&.G
    3590: 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A  // &&.G.&.w...&.w&.
    35A0: 04 32 E4 6B F0 03 8A 84 92 91 26 01 47 26 E9 80  // .2.k......&.G&..
    35B0: FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8  // .3.3...^[.SQRV..
    35C0: 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00  // .w5&.T.&.W.&.G..
    35D0: 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54  // ...&.G 3.&.G.&.T
    35E0: 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80  // .....&.G/.....&.
    35F0: 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26  // .4.u"&.w.&.w.u.&
    3600: D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B  // .g.&.W.&.g.&.W..
    3610: C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00  // ..y....&.G42....
    3620: 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7  // .&.G.&.W........
    3630: 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0  // .SV...w5&.D.2...
    3640: 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F  // .&.7&.4..&.G.&._
    3650: 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8  // .&..&.\.^[.SRV..
    3660: 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21  // ...w5..&.T...@s!
    3670: 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26  // &.w.2....&.t...&
    3680: 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F  // .W.&.G.&..&.D...
    3690: 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89  // ...Au.&.G.&.W.&.
    36A0: 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47  // G.&.W..h..@u.&.G
    36B0: 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80  // .&.W.&.G.&.W..Q.
    36C0: FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA  // .Bu.&.G.&.G".B..
    36D0: 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46  // Cu.&.G.&.G3.3..F
    36E0: 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89  // u.&.W.&.G.&.W.&.
    36F0: 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47  // G.....Gu.&.G.&.G
    3700: 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20  // $....Hu.&.G.&.G 
    3710: 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ^Z[.SV...w5&.D.2
    3720: E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56  // .&.G.&.G...^[.SV
    3730: 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89  // ..&.w.&.t...2.&.
    3740: 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02  // G.&.G...&._.&.G.
    3750: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    3760: 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26  // 4&.w.&.G...&._.&
    3770: 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // .G..^[.SV..&.w.&
    3780: 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16  // .t....t.&.G.&.w.
    3790: 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B  // &._.&.G..^[.SRV.
    37A0: D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ..p...&.G.&.W...
    37B0: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    37C0: E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47  // .+..J.S..&._.&.G
    37D0: 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B  // .[.S..&._.&.G..[
    37E0: C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0  // .SV...k...&.W 3.
    37F0: 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E  // &.W.&.D.....&.G.
    3800: 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B  // 2....=..u.2.3.^[
    3810: C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26  // .&.G.2....=..t.&
    3820: 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A  // ..4.u..../.^[.&.
    3830: 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3  // G42.&.G.&.G.....
    3840: E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14  // ...^[.S.....&.G.
    3850: C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B  // ...&..&....&..&.
    3860: 57 02 5B C3 6A 38 5F 38 75 38 C4 38 7B 38 93 38  // W.[.j8_8u8.8{8.8
    3870: AD 38 B8 38 BE 38 53 51 56 8B D8 E8 B0 FE 8C D2  // .8.8.8SQV.......
    3880: 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B  // ..&....u"&...@s.
    3890: 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03  // &.w.&._....&.D..
    38A0: D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26  // .&..&.W..{.&.w.&
    38B0: 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C  // .G.......uq...wl
    38C0: 03 F6 2E FF A4 FC 37 26 8B 47 10 26 8B 57 12 E9  // ......7&.G.&.W..
    38D0: 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47  // T.&.G.&.W..I.&.G
    38E0: 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06  // ".K&.O32....3...
    38F0: D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32  // .........+.&.O32
    3900: ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ....3...........
    3910: F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05  // .....&.G.&.W....
    3920: 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2  // &.G$..&.G ..3.3.
    3930: E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18  // ...SV.......&.G.
    3940: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
    3950: 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2  // &.T......^[.3.3.
    3960: C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22  // .SV.....&.w.&.w"
    3970: 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04  // ...T.^[.S..&.G+.
    3980: E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8  // ...&.G.&.W.[.S..
    3990: 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47  // &.G+......S..&.G
    39A0: 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F  // +......S....5&._
    39B0: 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 20 91 5B  // .......2..... .[
    39C0: C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .SRV..&.G,2.....
    39D0: 8B C3 FF 94 3C 91 26 89 47 08 26 89 57 0A 26 8A  // ....<.&.G.&.W.&.
    39E0: 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 54 91 26 89  // G-2.........T.&.
    39F0: 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A  // G.&.W....SQV..&.
    3A00: 4F 2B 32 ED 8B F1 8A 8C 84 91 E3 0A 26 D1 6F 06  // O+2.........&.o.
    3A10: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3A20: 02 8B 8C 64 91 8B B4 66 91 26 21 4F 04 26 21 77  // ...d...f.&!O.&!w
    3A30: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 8C 91 E3 0A 26  // .&.O*2.........&
    3A40: D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77  // .g.&.W...&.O.&.w
    3A50: 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56  // .&.O.&.w....SQRV
    3A60: 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // W......&.G+2....
    3A70: E6 02 26 8A 47 2A 8B F8 8A 8D 8C 91 32 ED 8B 84  // ..&.G*......2...
    3A80: 64 91 8B 94 66 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // d...f...........
    3A90: F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    3AA0: 8B F0 8A 8C 8C 91 32 ED E3 0A 26 D1 6F 0A 26 D1  // ......2...&.o.&.
    3AB0: 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 64  // _...&.G+.......d
    3AC0: 91 8B 94 66 91 26 21 47 08 26 21 57 0A 26 8A 47  // ...f.&!G.&!W.&.G
    3AD0: 2A 32 E4 8B F0 8A 8C 8C 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3AE0: 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26  // .&.W...&.G.&.W.&
    3AF0: 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56  // .G.&.W._^ZY[.SQV
    3B00: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 84 91 E3 0A  // ..&.O+2.........
    3B10: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3B20: 8B F1 C1 E6 02 8B 8C 64 91 8B B4 66 91 26 21 4F  // .......d...f.&!O
    3B30: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 8C  // .&!w.&.O*2......
    3B40: 91 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    3B50: 2B 32 ED 8B F1 C1 E6 02 8B 8C 64 91 8B B4 66 91  // +2........d...f.
    3B60: 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8  // &!O.&!w....QRW..
    3B70: 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32  // ....&..+.t.&.G,2
    3B80: E4 8B F0 03 F0 8B C3 FF 94 3C 91 26 89 47 08 26  // .........<.&.G.&
    3B90: 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .W...&.G,2......
    3BA0: C3 FF 94 48 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // ...H.&.G-2......
    3BB0: C3 FF 94 54 91 26 89 47 04 26 89 57 06 8C D2 8E  // ...T.&.G.&.W....
    3BC0: C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0  // .&..+.tJ&.G+2...
    3BD0: C1 E6 02 26 8A 47 2A 8B F8 8A 8D 8C 91 32 ED 8B  // ...&.G*......2..
    3BE0: 84 64 91 8B 94 66 91 E3 06 D1 E0 D1 D2 E2 FA F7  // .d...f..........
    3BF0: D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD  // ...&!G.&!W......
    3C00: 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    3C10: EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89  // ..&.W.&.G.&.W.&.
    3C20: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3C30: 30 91 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47  // 0._ZY.SQRVW..&.G
    3C40: 2A 32 E4 8B F0 8A 8C 8C 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3C50: 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32  // .&.W.......&.G+2
    3C60: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 8C 91  // ......&.G*......
    3C70: 32 ED 8B 84 64 91 8B 94 66 91 E3 06 D1 E0 D1 D2  // 2...d...f.......
    3C80: E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B  // ......&.G.&.W.&.
    3C90: 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56  // G.&.W.&!G.&!W..V
    3CA0: FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B  // .U..QRP..&.G,2..
    3CB0: F0 03 F0 8B C3 FF 94 3C 91 26 89 47 08 26 89 57  // .......<.&.G.&.W
    3CC0: 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47  // .&.G+.F......&.G
    3CD0: 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B  // .&.W.&.O-2......
    3CE0: C3 FF 94 54 91 26 89 47 14 26 89 57 16 8B C3 E8  // ...T.&.G.&.W....
    3CF0: 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 84 91 E3 0A 26  // D..F.2.........&
    3D00: D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B  // .o.&._...&.W+2..
    3D10: F2 C1 E6 02 8B 84 64 91 8B 94 66 91 26 21 47 14  // ......d...f.&!G.
    3D20: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 8C 91  // &!W.&.G*2.......
    3D30: 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B  // 2...&.g.&.W...&.
    3D40: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A  // G.&.W.&.G.&.W.&.
    3D50: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 30 91 8D 66  // G,2.........0..f
    3D60: FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32  // .ZY].Q...V.&.O+2
    3D70: ED 8B F1 8A 8C 84 91 E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    3D80: 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1  // ........&.O,2...
    3D90: 03 F1 8B C3 FF 94 30 91 59 C3 8B D8 E8 22 FC 8B  // ......0.Y...."..
    3DA0: C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08  // ..U.&.G.&.w.&.G.
    3DB0: 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.w.&.G,2.......
    3DC0: FF 94 30 91 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28  // ..0..SV........(
    3DD0: FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77  // .&.G.&.w.&1G.&1w
    3DE0: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 30  // .&.G,2.........0
    3DF0: 91 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8  // .^[.SQV.........
    3E00: FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    3E10: F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1  // ....F.&.O,2.....
    3E20: 8B C3 FF 94 30 91 5E 59 5B C3 53 51 56 8B D8 E8  // ....0.^Y[.SQV...
    3E30: 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F  // .......&.O...&.o
    3E40: 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B  // .&._.....R...r..
    3E50: C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01  // ......&.G.&.W.&.
    3E60: 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32  // G.&.T......&.G,2
    3E70: E4 8B F0 03 F0 8B C3 FF 94 30 91 5A C3 52 8B D8  // .........0.Z.R..
    3E80: E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B  // .>....q...&.G.&.
    3E90: 57 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0  // W.&)G.&.T...QR..
    3EA0: E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A  // ......U.&.D.&.T.
    3EB0: 26 8B 5C 04 26 8B 4C 06 E8 FB F2 26 89 44 0C 26  // &.\.&.L....&.D.&
    3EC0: 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C  // .T.ZY.R........,
    3ED0: FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA  // ....\.Z.QRW.....
    3EE0: 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // .....&.D.&.T.&.\
    3EF0: 04 26 8B 4C 06 E8 3A F2 26 89 44 0C 26 89 54 0E  // .&.L..:.&.D.&.T.
    3F00: 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    3F10: 26 8B 4C 06 E8 1B F2 26 89 5C 10 26 89 4C 12 E9  // &.L....&.\.&.L..
    3F20: 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8  // ..R.............
    3F30: D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB  // ..Z.QR..........
    3F40: 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06  // ....&.G.&.W.&;W.
    3F50: 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3  // u.&;G.u.&.G0.ZY.
    3F60: 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B  // ..&.G.&;G.r.u.&;
    3F70: 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A  // W.s.3......&.G0Z
    3F80: 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03  // Y.QRW..&.G,2....
    3F90: F0 8B C3 FF 94 3C 91 26 89 47 08 26 89 57 0A 8C  // .....<.&.G.&.W..
    3FA0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    3FB0: 8A 8D 84 91 32 ED 8B 84 64 91 8B 94 66 91 E3 06  // ....2...d...f...
    3FC0: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    3FD0: 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8  // W..M.U..QRW.....
    3FE0: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 84  // &.G+2...........
    3FF0: 91 32 ED 8B 84 64 91 89 46 F4 8B 84 66 91 89 46  // .2...d..F...f..F
    4000: F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46  // ....f..V....~..F
    4010: F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // ..F.&.G,2.......
    4020: FF 94 3C 91 26 89 47 08 26 89 57 0A 8B C3 E8 47  // ..<.&.G.&.W....G
    4030: F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6  // .&.G.&.W......V.
    4040: F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89  // ..&#G.&#W.&.G.&.
    4050: 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D  // W.&!...F.&!G....
    4060: 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A  // w5..&.<.s.&.O...
    4070: 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04  // &.g.&.W.....&.O.
    4080: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08  // ..&.o.&._...&!..
    4090: 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26  // .F.&!G.&.W.&.G.&
    40A0: 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03  // .W.&.G.&.G,2....
    40B0: F0 8B C3 FF 94 30 91 8D 66 FA 5F E9 A3 FC 52 8B  // .....0..f._...R.
    40C0: D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57  // .......4.&.G.&.W
    40D0: 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00  // .&.W.u.&.G.t....
    40E0: EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B  // .....&.G0Z.SQRV.
    40F0: D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 54 91 26  // .&.O-2.......T.&
    4100: 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A  // .G.&.W.&.G+2....
    4110: 8C 84 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26  // .....&.o.&._...&
    4120: 8A 47 2B 8B F0 C1 E6 02 8B 84 64 91 8B 94 66 91  // .G+.......d...f.
    4130: 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA  // &!G.&!W....R....
    4140: FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57  // .&.G.&.W.&.G.&.W
    4150: 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B  // .Z.QR.........&.
    4160: 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02  // w.&.t..<ZZt[&.w.
    4170: 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44  // &.t..<cu.&.w.&.D
    4180: 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3  // ....!.&.G.&.W...
    4190: E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26  // ...&.G.&.W.....&
    41A0: 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57  // .W.&.G.&;G.u.&;W
    41B0: 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE  // .u.&.w.&..&.G...
    41C0: 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02  // &.G.ZY.&._.&.G..
    41D0: 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26  // ZY.RW......&.w.&
    41E0: 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00  // .t..T...u.&.G"..
    41F0: EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B  // ./...u.&.w.&.?&.
    4200: 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3  // 4&+u.&.w"..&....
    4210: 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47  // .....2.......&.G
    4220: 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26  // "&._.&.G.._Z...&
    4230: 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26  // .g/.&.w.&.t..D.&
    4240: 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26  // .G4&._.&.G.....&
    4250: 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3  // .w.&.t..t.&.w ..
    4260: 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9  // S..&.G,2.$.&.g/.
    4270: C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02  // ...&.G..O...&.w.
    4280: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    4290: 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02  // ......@.&._.&.G.
    42A0: 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // ....&.w.&.t..D.2
    42B0: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04  // .&.G.&.G........
    42C0: EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    42D0: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    42E0: 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    42F0: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    4300: 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02  // ......c.SV..&.w.
    4310: 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02  // ..&._.._....&.\.
    4320: 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02  // ^[.QR..&.w.&.D..
    4330: 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32  // &.......&.w(.D.2
    4340: E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28  // ........<.tO&.w(
    4350: 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B  // .T.2......&.G1&.
    4360: 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1  // w.&.4.D....2.$..
    4370: E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09  // ..2.$.&.g/....&.
    4380: 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26  // G.&.7&.G.......&
    4390: 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B  // ..&.G2.&.O(ZY.S.
    43A0: D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26  // .&.G2.[.W......&
    43B0: 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E  // ..,.t.&.G,&:G0u.
    43C0: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    43D0: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B  // t...&._.&.w._.&.
    43E0: 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6  // _.&.G.._.SVW....
    43F0: 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47  // ..&..0.t.&.G0&:G
    4400: 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // ,u &.w.&.t.&...&
    4410: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    4420: 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56  // ^[.&._.&.G....SV
    4430: 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3  // W......&..0.t...
    4440: 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74  // U..SQRW..&.w.&.t
    4450: 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D  // ...&.G=.....&..=
    4460: 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C  // .s &.w.&.W=2.&.|
    4470: 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47  // .........&.T5&.G
    4480: 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02  // =..&.....2......
    4490: 8A 94 B1 91 26 01 55 02 26 8B 7F 28 8A 55 01 80  // ....&.U.&..(.U..
    44A0: E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03  // ..&.W-&..(.U....
    44B0: 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA  // ...&.W+&..(.U...
    44C0: 06 26 88 57 2A 8A 94 B0 91 26 88 57 2C 8D 66 F8  // .&.W*....&.W,.f.
    44D0: 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6  // _ZY[].SV..&.w...
    44E0: 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0  // .tH.....t.......
    44F0: 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // .^[.SV..&.w....t
    4500: 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55  // H.....t .......U
    4510: 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3  // ..SQVW..@...F...
    4520: FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89  // ....F.&.E.._....
    4530: 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6  // ^..F........F.2.
    4540: 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03  // .F......2....^..
    4550: DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6  // ..?...e..F..f...
    4560: 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00  // F...F...f.F.....
    4570: C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C  // .F....F....<....
    4580: 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83  // ..V...2....^....
    4590: 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32  // ?.tu&.E......G.2
    45A0: E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07  // ......2.......t.
    45B0: D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0  // ..3.P.......F...
    45C0: 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B  // tA...&.G...2....
    45D0: 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07  // ^...&.E....^.&..
    45E0: 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA  // .^.&.....&.G..^.
    45F0: 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA  // .v.&.w..^..^..F.
    4600: 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA  // ....F.....F...F.
    4610: 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32  // 2.........f..F.2
    4620: E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B  // ..........^...&.
    4630: 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75  // _..^..^.&._..?[u
    4640: 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B  // J.F...^.&._..^..
    4650: 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32  // ^.&...G.2......2
    4660: ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC  // .......^..^...t.
    4670: 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &...G....2.$....
    4680: C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF  // ....^.&)....F...
    4690: FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02  // ....F......2....
    46A0: 8D 46 B8 FF 97 AE 91 E9 72 FF 83 7E F6 00 0F 85  // .F......r..~....
    46B0: C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D  // ...~..t..F...2..
    46C0: 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04  // f._^....SQ..&.O.
    46D0: 32 ED E8 E6 E7 59 5B C3 53 51 8B D8 26 8A 4F 04  // 2....Y[.SQ..&.O.
    46E0: 32 ED E8 E1 E7 59 5B C3 53 8B D8 26 8A 47 04 32  // 2....Y[.S..&.G.2
    46F0: E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ...[.SQ..&.O.2..
    4700: E8 D4 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // ..Y[.S..fPfRfQf&
    4710: 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1  // .G.f&.W.f&.O.f..
    4720: 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58  // f&.G.f&.W.fYfZfX
    4730: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    4740: 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89  // f&.O.f..f&.G.f&.
    4750: 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B  // W.fYfZfX[.SW..&.
    4760: 5F 14 E8 56 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53  // _..V...f...._[.S
    4770: 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // W..&.G.&.W.....f
    4780: C1 E3 10 8B DA C1 E3 02 E8 54 EB EB D8 53 52 57  // .........T...SRW
    4790: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    47A0: C2 26 8B 5F 14 E8 78 EA 5F 5A 5B C3 53 52 8B D8  // .&._..x._Z[.SR..
    47B0: 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    47C0: 8B 5F 26 8B 5F 01 E8 57 EA 5A 5B C3 53 52 56 8B  // ._&._..W.Z[.SRV.
    47D0: F0 26 8B 5C 26 8B 5F 01 E8 E0 EA 8B D0 66 C1 E8  // .&.\&._......f..
    47E0: 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51  // ..&.D.&.T.^Z[.SQ
    47F0: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    4800: 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87  // .....&.G.&.W....
    4810: D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 34 EA 5F  // .f...........4._
    4820: 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50  // ZY[...f.......fP
    4830: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    4840: 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9  // u.......<.u..7..
    4850: 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B  // ..<.u.._....<.u.
    4860: E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB  // ......^....<.u..
    4870: 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C  // }<.u.......V..q<
    4880: 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56  // .u.......^..N..V
    4890: 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03  // ..]<.u..U<.u....
    48A0: 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75  // ...~..I<.u..A<.u
    48B0: 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // ..e....N..~..F..
    48C0: 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC  // /<.u..'<.u..Z...
    48D0: 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8  // .^...<.u...<.u..
    48E0: 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // .....^....O...2.
    48F0: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    4900: 59 66 58 07 1F C3 50 1E 2E 8E 1E 0F 03 8C D8 A3  // YfX...P.........
    4910: 7A 58 A3 8A 58 A3 9C 58 2E 8E 1E 07 03 A3 AA 04  // zX..X..X........
    4920: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    4930: C8 01 00 00 01 00 00 00 00 00 00 00 00 03 02 10  // ................
    4940: EB 00 00 00 7F 00 00 00 BC 48 00 00 B9 3F 00 8B  // .........H...?..
    4950: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE C2 48  // .....f3..f.....H
    4960: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    4970: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 43  // .O..O .."......C
    4980: D1 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    4990: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    49A0: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45  // .E.@..E.@..E...E
    49B0: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    49C0: D7 17 8E DB E8 0D CA 66 0B C0 0F 84 E1 00 06 1F  // .......f........
    49D0: 66 89 45 28 8C C8 66 C1 E0 10 B8 7B 4C 66 89 45  // f.E(..f....{Lf.E
    49E0: 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E  // ..............S.
    49F0: DB BE 80 1C E8 EF CE 5B 06 1F 0F 84 B1 00 53 E8  // .......[......S.
    4A00: 6B D1 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 D8  // k.f.E..E....\...
    4A10: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 CA E8 66  // .f.E.f.E6.\....f
    4A20: 89 45 23 66 89 45 3A 8D 5C 08 E8 BC E8 0A C0 75  // .E#f.E:.\......u
    4A30: 03 5B EB 7B E8 36 D1 66 C1 E8 10 3D 58 02 74 0D  // .[.{.6.f...=X.t.
    4A40: 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17  // =^.t.w..E.....E.
    4A50: 0E 2E A1 09 03 89 45 08 8D 5C 04 E8 8B E8 66 8B  // ......E..\....f.
    4A60: C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2  // .f......E..E2...
    4A70: E0 88 45 19 8D 5C 14 E8 6F E8 5B 3D 00 03 77 2F  // ..E..\..o.[=..w/
    4A80: 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D  // S.....3...[...E.
    4A90: 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8 9D C9  // .E5.E4..WS......
    4AA0: 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4  // [_..u....%.2....
    4AB0: 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF  // ..O..^......th..
    4AC0: 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE  // u....!...ua.....
    4AD0: 20 1C E8 11 CE 74 55 E8 72 D0 0A C0 75 0E 66 C1  //  ....tU.r...u.f.
    4AE0: E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 E1 CB 74  // ...........:...t
    4AF0: 06 E8 55 CA E8 A4 C3 BE 20 1C E8 14 C9 74 2D E8  // ..U..... ....t-.
    4B00: A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 35 D0 BE 00  // ...,.f. ....5...
    4B10: 1C E8 38 D0 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74  // ..8.f.....2....t
    4B20: 02 B0 40 E8 44 C9 B0 4F 32 E4 EB 04 B0 4F B4 03  // ..@.D..O2....O..
    4B30: C3 56 06 33 C0 8E C0 BE 20 1C E8 30 D0 8B C8 66  // .V.3.... ..0...f
    4B40: C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04  // ........&..J....
    4B50: FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06  // ..&....&..Q..&..
    4B60: 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0  // P..&..I.b&..L...
    4B70: 26 C6 06 85 04 10 26 C7 06 0C 01 53 62 8C C8 26  // &.....&....Sb..&
    4B80: A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40  // ....^..........@
    4B90: 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    4BA0: 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9  // ................
    4BB0: 04 00 B4 01 BE 1E 4B AC 86 E0 EF 8A E0 FE C4 E2  // ......K.........
    4BC0: F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 22 4B  // ...........2.."K
    4BD0: 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9  // ....B.J.........
    4BE0: 14 00 BA C0 03 32 E4 BE 2B 4B 8A C4 EE AC EE FE  // .....2..+K......
    4BF0: C4 E2 F7 C3 BE 00 1C E8 52 CF 66 C1 E8 10 8B D8  // ........R.f.....
    4C00: E8 22 CF 75 05 E8 0E CF 75 04 B8 4F 00 C3 B8 4F  // .".u....u..O...O
    4C10: 03 C3 E8 10 CF 74 53 BE 00 1C 80 FB 00 74 18 80  // .....tS......t..
    4C20: FB 01 75 05 E8 4E CF EB 1D 80 FB 02 75 10 8B C1  // ..u..N......u...
    4C30: E8 01 CF D3 E8 8B C8 E8 F1 C9 74 2E EB 08 80 FB  // ..........t.....
    4C40: 03 75 24 E8 A5 CE E8 EB CE 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4C50: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4C60: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4C70: 0A DB 75 07 8A EF E8 BF CA EB 05 E8 A4 CA 8A F8  // ..u.............
    4C80: B0 4F 32 E4 C3 00 E8 9C CE 74 2C BE 00 1C E8 BB  // .O2......t,.....
    4C90: CE 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4CA0: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 09 E6 D1 E8  // ......u.........
    4CB0: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4CC0: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4CD0: 8B C2 BB 13 00 E8 3A E5 BB 12 00 E8 34 E5 66 58  // ......:.....4.fX
    4CE0: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4CF0: 66 56 66 57 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B  // fVfW...4.....S..
    4D00: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D10: 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 56 90 2E 8B  // ZfYfX.......V...
    4D20: 0E 54 90 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10  // .T..O.....u.....
    4D30: EB 26 80 FB 01 75 14 E8 96 C9 75 21 53 B1 01 0A  // .&...u....u!S...
    4D40: FF 74 02 B1 00 E8 AB C8 5B EB 0D 80 FB 02 75 0D  // .t......[.....u.
    4D50: E8 C3 C9 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03  // .........O2...O.
    4D60: C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 5F  // .......u......._
    4D70: C9 75 0E 33 C0 53 E8 4F B8 5B 74 05 B0 4F 32 E4  // .u.3.S.O.[t..O2.
    4D80: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    4D90: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4DA0: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 68 4D 66 5F  // P.......X...hMf_
    4DB0: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    4DC0: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 68 4D C3  // .P.......X...hM.
    4DD0: A2 4D BE 86 D7 86 F4 86 A1 4E F7 7D 29 7E 9C 7E  // .M.......N.})~.~
    4DE0: 1F 7F AD 80 B1 80 BA 83 8B 84 0E 85 75 85 10 87  // ............u...
    4DF0: 72 87 1B 8A BA 50 62 8E 56 4D 56 4D 56 4D 56 4D  // r....Pb.VMVMVMVM
    4E00: 56 4D 56 4D 32 8F 35 73 89 74 2E 8E 1E 07 03 80  // VMVM2.5s.t......
    4E10: 26 87 04 F3 50 8A E0 80 E4 7F 80 FC 03 74 07 80  // &...P........t..
    4E20: FC 12 74 02 58 C3 E8 C4 01 3B D3 75 02 58 C3 BA  // ..t.X....;.u.X..
    4E30: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    4E40: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    4E50: 53 E8 6A 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.jA..[u..&.....
    4E60: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    4E70: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    4E80: 04 18 C7 06 0C 01 40 5A 8C 0E 0E 01 CD 42 C3 80  // ......@Z.....B..
    4E90: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    4EA0: C8 E8 2C C8 74 06 E8 A0 C6 E8 EF BF B2 08 BE 40  // ..,.t..........@
    4EB0: 1C E8 32 CA BE 40 1C E8 57 C5 58 5B 0F 84 6E FF  // ..2..@..W.X[..n.
    4EC0: 2E 8E 1E 07 03 0E 07 E8 13 29 0E 1F 53 66 BB 40  // .........)..Sf.@
    4ED0: 1C 00 1C E8 6D CC BE 00 1C B0 20 E8 8C C5 5B 2E  // ....m..... ...[.
    4EE0: 8E 1E 07 03 0E 07 E8 1C 2E E8 24 00 E8 28 3D E8  // ..........$..(=.
    4EF0: D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00 1C B0 10 E8  // .......>........
    4F00: 68 C5 E8 F7 2D E8 EF 2D C3 8B EC C6 46 1B 00 C3  // h...-..-....F...
    4F10: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 5C 0A C3  // ./........R..\..
    4F20: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    4F30: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    4F40: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    4F50: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    4F60: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    4F70: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    4F80: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    4F90: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    4FA0: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    4FB0: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    4FC0: 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...I-..t........
    4FD0: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    4FE0: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB 78 52  // ..&.'.C....[..xR
    4FF0: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    5000: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    5010: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    5020: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    5030: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    5040: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    5050: C3 81 C3 00 05 C3 BF FA 4F BE 1B 50 33 C9 E8 4E  // ........O..P3..N
    5060: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    5070: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    5080: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    5090: E3 2E 8B 87 37 50 A2 65 04 88 26 66 04 5B C3 2C  // ....7P.e..&f.[.,
    50A0: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    50B0: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    50C0: 75 ED C3 1E 06 2E 8E 1E 07 03 F6 06 87 04 80 75  // u..............u
    50D0: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    50E0: 3E 0D 03 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >..&.G3.u.&.G..u
    50F0: 1B 2E 8B 3E 0B 03 EB 14 3C 06 7E 0B 2E 8B 3E 09  // ...>....<.~...>.
    5100: 03 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // .&.g7.@f3...f. .
    5110: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    5120: 1F C3 2E 8E 1E 07 03 80 FB 10 75 03 E9 7A 01 80  // ..........u..z..
    5130: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    5140: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    5150: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    5160: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    5170: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    5180: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    5190: 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.*>........X..u
    51A0: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    51B0: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    51C0: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    51D0: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    51E0: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    51F0: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    5200: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    5210: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    5220: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    5230: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    5240: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    5250: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    5260: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    5270: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    5280: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    5290: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    52A0: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    52B0: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    52C0: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    52D0: 12 C3 9C FA C7 06 14 00 22 78 8C 0E 16 00 9D C3  // ........"x......
    52E0: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    52F0: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    5300: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5310: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    5320: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    5330: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    5340: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5350: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    5360: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    5370: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    5380: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    5390: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    53A0: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    53B0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    53C0: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    53D0: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    53E0: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    53F0: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    5400: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5410: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5420: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    5430: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    5440: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    5450: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    5460: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    5470: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    5480: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    5490: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    54A0: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    54B0: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    54C0: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    54D0: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    54E0: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    54F0: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    5500: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    5510: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    5520: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    5530: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    5540: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    5550: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    5560: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    5570: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    5580: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    5590: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    55A0: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    55B0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    55C0: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    55D0: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    55E0: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    55F0: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    5600: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    5610: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    5620: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    5630: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    5640: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    5650: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    5660: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    5670: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    5680: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    5690: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    56A0: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    56B0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    56C0: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    56D0: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    56E0: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    56F0: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    5700: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5710: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5720: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    5730: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    5740: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5750: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    5760: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    5770: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    5780: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5790: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57A0: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    57B0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    57C0: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    57D0: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    57E0: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    57F0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    5800: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    5810: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    5820: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    5830: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    5840: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    5850: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    5860: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    5870: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    5880: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    5890: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    58A0: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    58B0: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    58C0: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    58D0: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    58E0: 78 52 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // xR..............
    58F0: 98 58 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .X..............
    5900: 1A 00 30 90 00 C0 00 00 00 00 00 00 00 00 00 00  // ..0.............
    5910: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    5920: 1E 07 03 E8 F8 36 E8 CF 36 E8 70 1A 1F C3 2E 8E  // .....6..6.p.....
    5930: 1E 07 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // .......`........
    5940: 04 0C 11 24 17 A2 89 04 B4 01 E8 6D 1E A0 89 04  // ...$.......m....
    5950: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    5960: 0E 1F E8 A5 B5 F7 C1 02 00 75 03 E8 2D B5 C3 1E  // .........u..-...
    5970: 2E 8E 1E 07 03 0E 07 EB 00 1F C3 F6 06 89 04 08  // ................
    5980: 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80  // t..S............
    5990: 3E 63 04 B4 75 2F BE F4 59 B9 40 00 33 DB 9C FA  // >c..u/..Y.@.3...
    59A0: 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05  // ................
    59B0: 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2  // B...E....E....J.
    59C0: DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31  // .....&.G+.....t1
    59D0: B9 F8 00 BF F8 53 3C 08 74 11 B9 40 00 BF 78 55  // .....S<.t..@..xU
    59E0: 3C 38 74 07 3C 3F 74 03 BF B8 55 33 DB 9C FA 8A  // <8t.<?t...U3....
    59F0: C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB  // .....B.....J....
    5A00: 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00  // I<.t%<8t.<?t*...
    5A10: 33 DB 51 E8 05 D3 B9 08 00 F7 C3 10 00 74 03 83  // 3.Q..........t..
    5A20: C7 18 E8 67 00 59 E2 EA EB 20 E8 EE D2 B9 00 01  // ...g.Y... ......
    5A30: 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00  // 3..W....@.3.Q.(.
    5A40: 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A  // ..../..Y..[..*.*
    5A50: 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F  // .*.*.?.?.?.?.*.?
    5A60: 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F  // .*.?.*.?........
    5A70: 2E 8A B5 E4 59 8B FB D1 EF 83 E7 0F 2E 8A AD E4  // ....Y...........
    5A80: 59 8B FB 83 E7 0F 2E 8A 8D E4 59 C3 9C 8A C3 FA  // Y.........Y.....
    5A90: EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE  // ....B.G....G....
    5AA0: 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00  // G..J............
    5AB0: 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00  // ~......~|.....|.
    5AC0: C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00  // ....|8...8|.|8..
    5AD0: 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00  // .8....8.8|..l.8.
    5AE0: 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF  // ..<~<...........
    5AF0: 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF  // ..<ff<..........
    5B00: 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18  // ...6x..x~..~.~..
    5B10: 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C  // .....p.`>>66.f..
    5B20: DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00  // .<f.f<..........
    5B30: 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00  // ...>.....<~.~<..
    5B40: 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00  // fffff.f...{;....
    5B50: 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00  // <f8ll8.x........
    5B60: 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00  // .<~.~<.~.<~.....
    5B70: 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00  // ....~<..........
    5B80: 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00  // .0p.p0..........
    5B90: 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00  // .$f.f$....8||...
    5BA0: 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00  // ..||8...........
    5BB0: 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00  // .<<.....lll.....
    5BC0: 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00  // ll.l.ll..~.|....
    5BD0: 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00  // ....0`..8l8v..v.
    5BE0: 18 18 30 00 00 00 00 00 18 30 60 60 60 30 18 00  // ..0......0```0..
    5BF0: 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00  // `0...0`...|.|...
    5C00: 00 18 18 7E 18 18 00 00 00 00 00 00 18 18 30 00  // ...~..........0.
    5C10: 00 00 00 FE 00 00 00 00 00 00 00 00 00 38 38 00  // .............88.
    5C20: 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00  // ...0`...|.....|.
    5C30: 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00  // .x....~.|...0f..
    5C40: 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00  // |..<..|...<l....
    5C50: FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00  // ......|.|.....|.
    5C60: FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00  // ........|..|..|.
    5C70: 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00  // |..~..|.........
    5C80: 00 18 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00  // .......0..0`0...
    5C90: 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00  // ........`0...0`.
    5CA0: 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00  // |.......|.....~.
    5CB0: 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00  // 8l.......ff|ff..
    5CC0: 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00  // <f...f<..lfffl..
    5CD0: FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00  // .........b`|``..
    5CE0: 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00  // |.....|.........
    5CF0: 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00  // <.....<.<.....p.
    5D00: C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00  // .........````b..
    5D10: C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00  // ................
    5D20: 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00  // |.....|..ff|``..
    5D30: 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00  // |.....|.........
    5D40: 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00  // |..|..|.~Z....<.
    5D50: C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00  // ......|.....l8..
    5D60: C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00  // .........l888l..
    5D70: 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00  // fff<..<.....0b..
    5D80: 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00  // |`````|..`0.....
    5D90: 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00  // |.....|..8l.....
    5DA0: 00 00 00 00 00 00 00 FF 30 30 18 00 00 00 00 00  // ........00......
    5DB0: 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00  // ..x.|.~..`|fff..
    5DC0: 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00  // ..|...|...|...~.
    5DD0: 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00  // ..|...|..60.00x.
    5DE0: 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00  // ..v..~.|.`|fff..
    5DF0: 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78  // ..8...<........x
    5E00: E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00  // .`flxl..........
    5E10: 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00  // ..l........ffff.
    5E20: 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0  // ..|...|....ff|`.
    5E30: 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00  // ..v..|.....f``..
    5E40: 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00  // ..|.|.|.00.006..
    5E50: 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00  // ......v.....l8..
    5E60: 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00  // ......l....l8l..
    5E70: 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00  // .....v.|....0d..
    5E80: 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18 18 00  // ...p............
    5E90: 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00  // p.....p.v.......
    5EA0: 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78  // ..88ll..<f.f<..x
    5EB0: 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00  // ......v...|...|.
    5EC0: 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00  // |.x.|.~...x.|.~.
    5ED0: E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00  // ..x.|.~.88x.|.~.
    5EE0: 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00  // ..|.|.l8|.|...|.
    5EF0: C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00  // ..|...|...|...|.
    5F00: 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00  // f.8...<.|.8...<.
    5F10: 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00  // ..8...<..8l.....
    5F20: 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00  // 88.|............
    5F30: 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00  // ..l.~.n.~.......
    5F40: 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00  // |..|..|....|..|.
    5F50: 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00  // ...|..|.|.....v.
    5F60: 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00  // ......v...<...<.
    5F70: C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00  // .8l..l8.......|.
    5F80: 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00  // ..~..~..8l`.f.l.
    5F90: C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C  // .f<~.<..>c8.c>..
    5FA0: 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00  // .>a<.|....x.|.~.
    5FB0: 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00  // ..8...<....|..|.
    5FC0: 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00  // ......v.....ff..
    5FD0: FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00  // ........>.>`gc=.
    5FE0: 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00  // >.v..~.|...0`f<.
    5FF0: 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00  // ...|``.....|....
    6000: C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C  // ...0|6.>...0l<~.
    6010: 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00  // ....<<...6l.l6..
    6020: 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88  // ..l6l...".".".".
    6030: 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77  // U.U.U.U..w.w.w.w
    6040: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    6050: 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36  // ........6666.666
    6060: 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18  // .....666........
    6070: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    6080: 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00  // .....66666......
    6090: 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00  // 6666............
    60A0: 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00  // ................
    60B0: 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18  // ................
    60C0: 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00  // ................
    60D0: 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    60E0: 36 36 36 36 37 36 36 36 36 36 37 30 3F 00 00 00  // 666676666670?...
    60F0: 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00  // ..?0766666......
    6100: 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36 36 36  // .....66666707666
    6110: 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36  // ........66...666
    6120: 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00  // ........6666....
    6130: 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36  // .............666
    6140: 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00  // 6666?...........
    6150: 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36  // ............?666
    6160: 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18  // 6666.666........
    6170: 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18  // ................
    6180: FF FF FF FF FF FF FF FF 00 00 00 00 FF FF FF FF  // ................
    6190: F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    61A0: FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00  // ..........f...f.
    61B0: 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00  // .x........b```..
    61C0: 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00  // ..lllll...`0`...
    61D0: 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00  // .~....p..ffff|..
    61E0: 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00  // .v....8..8l.l8..
    61F0: 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00  // 8l...l8.8l..ll..
    6200: 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00  // >`8f..x...~..~..
    6210: 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00  // .|...|..8`...`8.
    6220: 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00  // |...............
    6230: 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00  // ..~...~.0...0.~.
    6240: 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18  // ..0...~.........
    6250: 18 18 18 18 18 78 30 00 00 00 18 00 7E 00 18 00  // .....x0.....~...
    6260: 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00  // .v..v...|..|....
    6270: 00 00 00 18 18 00 00 00 00 00 00 00 18 00 00 00  // ................
    6280: 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00  // .....8...lll....
    6290: 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00  // p.0.......||||..
    62A0: 00 00 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF  // .............$f.
    62B0: 66 24 00 00 00 00 00 00 00 10 00 00 00 00 00 00  // f$..............
    62C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5  // .............~..
    62D0: 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE  // ......~......|..
    62E0: D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE  // ......|.......l.
    62F0: FE FE FE FE 7C 38 10 00 00 00 00 00 00 00 10 38  // ....|8.........8
    6300: 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00 10 38  // |.|8...........8
    6310: 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C  // 8.l.l.8.......8|
    6320: 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00 00 00  // |...l.8.........
    6330: 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF  // .<<<............
    6340: E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18  // ................
    6350: 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7  // <fff<...........
    6360: C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E  // ................
    6370: 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C 66 66  // 6x....x......<ff
    6380: 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E  // f<.~............
    6390: 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E  // ....x.p......>6>
    63A0: 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E  // 66v.f..........~
    63B0: 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0  // <ff<~...........
    63C0: F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E  // ................
    63D0: 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E  // >~.~>.........<~
    63E0: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66  // ....~<.......fff
    63F0: 66 66 66 66 00 66 66 00 00 00 00 00 00 7F DB DB  // ffff.ff.........
    6400: DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6  // ..{..........|..
    6410: 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00  // `|..|...|.......
    6420: 00 00 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E  // ..............<~
    6430: 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E  // ...~<.~.......<~
    6440: 18 18 18 18 18 18 18 00 00 00 00 00 00 18 18 18  // ................
    6450: 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00  // ....~<..........
    6460: 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    6470: 30 70 FE 70 30 00 00 00 00 00 00 00 00 00 00 00  // 0p.p0...........
    6480: 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    6490: 24 66 FF 66 24 00 00 00 00 00 00 00 00 00 10 38  // $f.f$..........8
    64A0: 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE  // 88||............
    64B0: 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00 00 00  // |||88...........
    64C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C  // ..............<<
    64D0: 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36 36 36  // <<..........6666
    64E0: 14 00 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C  // .............lll
    64F0: FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C  // .ll.lll........|
    6500: C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00  // ..x<..|.........
    6510: 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38  // bf..0f.......8l8
    6520: 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18  // 0v~...v.........
    6530: 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 18 30  // ...............0
    6540: 30 30 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C  // 00000........0..
    6550: 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00  // ......0.........
    6560: 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00 00 00  // l8.8l...........
    6570: 18 18 7E 18 18 00 00 00 00 00 00 00 00 00 00 00  // ..~.............
    6580: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    6590: 00 00 FE 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    65A0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00 02  // ................
    65B0: 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6  // ...0`........|..
    65C0: CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18  // ......|.......x.
    65D0: 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6  // ......~......|..
    65E0: 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06  // ...0`........|..
    65F0: 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C  // .<....|........<
    6600: 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0  // l...............
    6610: C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0  // ......|......|..
    6620: C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06  // ......|.........
    6630: 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6  // ..00000......|..
    6640: C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6  // .|....|......|..
    6650: C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00  // ..~...|.........
    6660: 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00  // ................
    6670: 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18  // ................
    6680: 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00 00 00  // 0`.`0...........
    6690: 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00 60 30  // ..............`0
    66A0: 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6  // .....0`......|..
    66B0: 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6  // .............|..
    66C0: C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6  // ......~......8l.
    66D0: C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66  // ..............ff
    66E0: 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2  // f|ffff.......<f.
    66F0: C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66  // .....f<.......lf
    6700: 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60  // fffffl........f`
    6710: 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60  // d|d``f........f`
    6720: 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // d|d```.......|..
    6730: C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6740: C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18  // .............<..
    6750: 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18  // ......<......<..
    6760: 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC  // ......p.........
    6770: D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60  // ..............``
    6780: 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE  // ````bf..........
    6790: EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6  // ................
    67A0: E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6  // .............|..
    67B0: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66  // ......|.......ff
    67C0: 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6  // ff|```.......|..
    67D0: C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66  // ......|.......ff
    67E0: 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0  // f|xlff.......|..
    67F0: C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18  // .p....|......~Z.
    6800: 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6  // ......<.........
    6810: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6  // ......|.........
    6820: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6  // ....l8..........
    6830: D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6  // ................
    6840: 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66  // l88l.........fff
    6850: 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86  // ff<...<.........
    6860: 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60  // ..0`.........|``
    6870: 60 60 60 60 60 60 7C 00 00 00 00 00 00 00 00 80  // ``````|.........
    6880: C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C  // .`0..........|..
    6890: 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6  // ......|......8l.
    68A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    68B0: 00 00 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C  // ................
    68C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    68D0: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60  // x.|...v.......``
    68E0: 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00 00 00  // |fffff..........
    68F0: 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C  // |.....|.........
    6900: 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00 00 00  // |.....~.........
    6910: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30  // |.....|.......60
    6920: 30 FC 30 30 30 30 78 00 00 00 00 00 00 00 00 00  // 0.0000x.........
    6930: 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60  // v....v..|.....``
    6940: 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18 18 00  // |fffff..........
    6950: 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00  // 8.....<.........
    6960: 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60  // ........x.....``
    6970: 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18  // fflxlf..........
    6980: 18 18 18 18 18 18 1C 00 00 00 00 00 00 00 00 00  // ................
    6990: 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00  // l...............
    69A0: DC 66 66 66 66 66 66 00 00 00 00 00 00 00 00 00  // .ffffff.........
    69B0: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00  // |.....|.........
    69C0: DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00  // .ffff|``........
    69D0: 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00  // v....|..........
    69E0: DC 66 60 60 60 60 F0 00 00 00 00 00 00 00 00 00  // .f````..........
    69F0: 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30  // |..|..|......000
    6A00: FC 30 30 30 30 36 1C 00 00 00 00 00 00 00 00 00  // .00006..........
    6A10: CC CC CC CC CC CC 76 00 00 00 00 00 00 00 00 00  // ......v.........
    6A20: C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00  // ....l8..........
    6A30: C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00  // ......l.........
    6A40: C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00  // ..l8l...........
    6A50: C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00  // .....v..|.......
    6A60: FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18  // ....0b..........
    6A70: 18 70 18 18 18 18 0E 00 00 00 00 00 00 18 18 18  // .p..............
    6A80: 18 00 18 18 18 18 18 00 00 00 00 00 00 70 18 18  // .............p..
    6A90: 18 0E 18 18 18 18 70 00 00 00 00 00 00 76 DC 00  // ......p......v..
    6AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6AB0: 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0  // .88ll........<f.
    6AC0: C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00  // ...f<...8.......
    6AD0: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00  // ......v.......0.
    6AE0: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6AF0: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00  // x.|...v.........
    6B00: 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30 18 00  // x.|...v.....`0..
    6B10: 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00  // x.|...v.....8l8.
    6B20: 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C  // x.|...v........|
    6B30: C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00  // ....|..l8...0x..
    6B40: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00  // |.....|.........
    6B50: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6B60: 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00  // |.....|......f..
    6B70: 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00  // 8.....<......<f.
    6B80: 38 18 18 18 18 18 3C 00 00 00 00 00 00 00 00 00  // 8.....<.........
    6B90: 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C  // 8.....<.......8l
    6BA0: C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38  // ...........8l8.8
    6BB0: 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE  // l............0..
    6BC0: 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66  // ``|```.........f
    6BD0: DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8  // ......v......~..
    6BE0: D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00  // ............0x..
    6BF0: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00  // |.....|.........
    6C00: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00  // |.....|.....0...
    6C10: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00  // |.....|.....0x..
    6C20: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00  // ......v.....`0..
    6C30: C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18  // ......v.......<.
    6C40: 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6  // ......<.......|.
    6C50: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6  // ......|.........
    6C60: C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C  // ......|........|
    6C70: C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60  // ....|.......8l``
    6C80: F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66  // .```f.l.....ffff
    6C90: 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63  // <.~.<........>cc
    6CA0: 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00  // 0..cc>..........
    6CB0: 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00  // >c8.c>........0.
    6CC0: 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00  // x.|...v.......0.
    6CD0: 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00  // 8.....<.......0.
    6CE0: 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00  // |.....|......0`.
    6CF0: CC CC CC CC CC DC 76 00 00 00 00 00 00 76 DC 00  // ......v......v..
    6D00: BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6  // .fffff......v...
    6D10: C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E  // ............!...
    6D20: 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B  // 3``gc3......B<.;
    6D30: 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00  // fff>.f<......00.
    6D40: 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00  // 000`..|.........
    6D50: 00 00 7E 60 60 60 00 00 00 00 00 00 00 00 00 00  // ..~```..........
    6D60: 00 00 7E 06 06 06 00 00 00 00 00 00 60 60 62 66  // ..~.........``bf
    6D70: 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66  // l.0`.6..>...``bf
    6D80: 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00  // l.6n.6~.........
    6D90: 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00  // ..<<<<..........
    6DA0: 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00 00 00  // 6l.l6...........
    6DB0: D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11 44 11  // .l6l........D.D.
    6DC0: 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA  // D.D.D.D.D.D.U.U.
    6DD0: 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD  // U.U.U.U.U.U.w.w.
    6DE0: 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18  // w.w.w.w.w.w.....
    6DF0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E00: 18 18 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E10: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6E20: 36 36 F6 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66.66666666.....
    6E30: 00 00 FE 36 36 36 36 36 36 36 36 00 00 00 00 00  // ...66666666.....
    6E40: F8 18 F8 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6E50: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6E60: 36 36 36 36 36 36 36 36 36 36 36 00 00 00 00 00  // 66666666666.....
    6E70: FE 06 F6 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6E80: F6 06 FE 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6E90: 36 36 FE 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66..............
    6EA0: F8 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6EB0: 00 00 F8 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6EC0: 18 18 1F 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6ED0: 18 18 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6EE0: 00 00 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6EF0: 18 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    6F00: 00 00 FF 00 00 00 00 00 00 00 00 18 18 18 18 18  // ................
    6F10: 18 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6F20: 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36 36 36  // ...........66666
    6F30: 36 36 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6676666666666666
    6F40: 37 30 3F 00 00 00 00 00 00 00 00 00 00 00 00 00  // 70?.............
    6F50: 3F 30 37 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?076666666666666
    6F60: F7 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6F70: FF 00 F7 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6F80: 37 30 37 36 36 36 36 36 36 36 36 00 00 00 00 00  // 70766666666.....
    6F90: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6FA0: F7 00 F7 36 36 36 36 36 36 36 36 18 18 18 18 18  // ...66666666.....
    6FB0: FF 00 FF 00 00 00 00 00 00 00 00 36 36 36 36 36  // ...........66666
    6FC0: 36 36 FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    6FD0: FF 00 FF 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    6FE0: 00 00 FF 36 36 36 36 36 36 36 36 36 36 36 36 36  // ...6666666666666
    6FF0: 36 36 3F 00 00 00 00 00 00 00 00 18 18 18 18 18  // 66?.............
    7000: 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7010: 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00 00 00  // ................
    7020: 00 00 3F 36 36 36 36 36 36 36 36 36 36 36 36 36  // ..?6666666666666
    7030: 36 36 FF 36 36 36 36 36 36 36 36 18 18 18 18 18  // 66.66666666.....
    7040: FF 18 FF 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7050: 18 18 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7060: 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF  // ................
    7070: FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    7080: 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0  // ................
    7090: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F  // ................
    70A0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF  // ................
    70B0: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 76  // ...............v
    70C0: DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC  // ......v......x..
    70D0: D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62  // ..............fb
    70E0: 60 60 60 60 60 60 60 00 00 00 00 00 00 00 00 00  // ```````.........
    70F0: FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62  // .llllll........b
    7100: 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00  // 0..0b...........
    7110: 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00 00 66  // ~.....p........f
    7120: 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00  // ffff|`..........
    7130: 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE 38 38  // v.............88
    7140: 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C  // l..l88........8l
    7150: C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6  // .....l8......8l.
    7160: C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60  // ...lll.......>``
    7170: 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00  // <f....x.........
    7180: 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C  // ~...~..........|
    7190: CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30  // ....|`.........0
    71A0: 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6  // ``|``0.......|..
    71B0: C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE  // ................
    71C0: 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00 00 18  // ................
    71D0: 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C  // .~....~......0..
    71E0: 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30  // ...0..~........0
    71F0: 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C  // `0....~.........
    7200: 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7210: 18 18 18 18 18 58 78 30 00 00 00 00 00 00 00 18  // .....Xx0........
    7220: 18 00 7E 00 18 18 00 00 00 00 00 00 00 00 00 00  // ..~.............
    7230: 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC  // .v..v........x..
    7240: 78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // x...............
    7250: 00 00 18 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7260: 00 00 00 18 00 00 00 00 00 00 00 00 00 1F 18 18  // ................
    7270: 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C  // .....x8.......ll
    7280: 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18  // lll..........p..
    7290: 30 60 F8 00 00 00 00 00 00 00 00 00 00 00 00 00  // 0`..............
    72A0: 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00  // ~~~~~~..........
    72B0: 00 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00  // ................
    72C0: 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00  // .$f.f$....../...
    72D0: 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00  // .....0`......0..
    72E0: 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00  // ~........~....M.
    72F0: 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54  // ...............T
    7300: 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00 00 00  // ...........<....
    7310: 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00  // V.........f<....
    7320: 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00  // .W...........f..
    7330: 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00  // ..X.....f<<f....
    7340: 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C  // ...Y......f<...<
    7350: 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03  // ....\.....`0....
    7360: 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB  // .....m.....f....
    7370: C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3  // ......v.........
    7380: 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB  // f<.....w........
    7390: DB DB FF 66 00 00 00 00 00 00 53 62 C3 0B DB 74  // ...f......Sb...t
    73A0: 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 20 90  // ..F.W2..@..._. .
    73B0: 26 89 1D 26 8C 4D 02 2E 8E 1E 07 03 57 BE 49 04  // &..&.M......W.I.
    73C0: B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7  // .........&..FG..
    73D0: 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45  // _.....&.E"...&.E
    73E0: 23 57 E8 D9 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E  // #W..._&.]%&.}&..
    73F0: 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3  // I....t......2...
    7400: 2E 8A 87 F8 8F 32 E4 0A C0 74 01 40 26 89 45 27  // .....2...t.@&.E'
    7410: 2E 8A 87 F9 8F 26 88 45 29 A1 85 04 8A 16 84 04  // .....&.E).......
    7420: FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01  // ......=..~...=^.
    7430: 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00  // ~...=..~...=..~.
    7440: 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80  // &.U*.&....$.....
    7450: E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0  // ............$...
    7460: E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A  // ......0.B.$.....
    7470: C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08  // ...&.E-..&.E1.w.
    7480: 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34  // ..2.........;.t4
    7490: 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77  // &.w.....t....&.w
    74A0: 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9  // .....t....&.w...
    74B0: 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74  // ..t....&.w.....t
    74C0: 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8  // ......&.U2......
    74D0: E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04  // ................
    74E0: 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B  // .%....&.E+...F..
    74F0: C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6  // ...t...t6..tV...
    7500: 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6  // F.... ....t...`.
    7510: C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83  // ..t...:...t.....
    7520: C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B  // .?......F..F....
    7530: FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74  // ... ...t.......t
    7540: 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46  // .......t.......F
    7550: 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6 C1  // ......t.....%...
    7560: 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC  // .t.......t......
    7570: 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD  // ...B....J....k..
    7580: C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA  // .....2.......B..
    7590: FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A  // ..J........ ..&.
    75A0: 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2  // ...GF...&.%.G...
    75B0: F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4  // .......&..G.....
    75C0: C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A  // ...QW..+.&......
    75D0: 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44  // ..&.D.&.TA...&.D
    75E0: 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2  // ....&.D....&.D..
    75F0: C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF  // ..&...........p.
    7600: 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9  // &........&.TA2..
    7610: 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32  // ...[.&.D..._...2
    7620: E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7  // .....I.&.D.._Y..
    7630: 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E  // `......+.&.G.QW.
    7640: 8E 1E 07 03 A0 10 04 24 30 AA BE 49 04 B9 1E 00  // .......$0..I....
    7650: F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4  // ................
    7660: BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C  // ........t......|
    7670: 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7  // ............_Y..
    7680: 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83  // :....&.?....Q...
    7690: C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07  // ................
    76A0: FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26  // .G..&.D........&
    76B0: 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8  // ...&.TA......2..
    76C0: E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC  // ..&.D.....&.D...
    76D0: B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE  // ..2..... ...2...
    76E0: E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F  // ...&.D..Y....&..
    76F0: 02 03 FB 06 51 2E 8E 1E 07 03 26 8A 05 80 26 10  // ....Q.....&...&.
    7700: 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE  // ......G.I.......
    7710: BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE  // ..............~.
    7720: BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE  // ......v..t....n.
    7730: BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE  // .|....f.......^.
    7740: 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6  // Y.......+.&.G...
    7750: 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26  // ....4.B.&......&
    7760: 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00  // .E.PJJ.&.E......
    7770: 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3  // .B2..BB....XJ...
    7780: 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE  // ..&.w....l....4.
    7790: 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83  // &......&.D..VBB.
    77A0: C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9  // ..2..B...&...F..
    77B0: 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE  // ^..&.D........$.
    77C0: 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00  // ................
    77D0: EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0  // .......... ..P..
    77E0: 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0  // ....&....&..$...
    77F0: 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C  // <.~.&.G3.u.<#t.<
    7800: 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02  // 2t.<3t...&.G..u.
    7810: B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6  // ...&I.........&.
    7820: 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04  // G..t....&.....c.
    7830: C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50  // ..N.....b......P
    7840: 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3  // .....3....&..2..
    7850: 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04  // J.&.G....&.G....
    7860: 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04  // &.G..L.&.G....`.
    7870: 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08  // X.R2.3.......)u.
    7880: 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E  // 2.3.....Z...`...
    7890: 07 03 2E 83 0E 11 03 00 75 6E 80 3E 00 05 01 74  // ........un.>...t
    78A0: 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB  // g.......b.2.....
    78B0: 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32  // ..P..>b.P2.....2
    78C0: ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75  // .AQ..J.2......)u
    78D0: 3D 51 52 89 95 50 04 B4 08 E8 AA D4 0A C0 75 02  // =QR..P........u.
    78E0: B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2  // . 3.2.....)u.Z..
    78F0: 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05  // Y....Y...w.2....
    7900: 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0  // X..P....a...ZYY.
    7910: FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 09  // ...R*.8.}.2.....
    7920: 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4  // .Z..............
    7930: 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6  // ........m...2...
    7940: 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00  // ........Ku.2..W.
    7950: C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35  // .S..b...u...t..5
    7960: 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A  // .[..+.......2...
    7970: C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B  // .2.+...t**..&...
    7980: C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06  // .R... .......Z..
    7990: 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8  // ...........Hu...
    79A0: 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24  // .............B.$
    79B0: FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3  // ....J....B...J..
    79C0: 1E 2E 8E 1E 07 03 8B 16 63 04 80 C2 06 1F C3 1E  // ........c.......
    79D0: 2E 8E 1E 07 03 8B 16 63 04 1F C3 50 BA CC 03 EC  // .......c...P....
    79E0: B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06  // ....u...X.......
    79F0: C3 1E 2E 8E 1E 07 03 80 3E 49 04 03 74 13 80 3E  // ........>I..t..>
    7A00: 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04  // I..t..>I..t..>I.
    7A10: 00 1F C3 50 2E 8E 06 0B 03 A0 10 04 24 30 3C 30  // ...P........$0<0
    7A20: 74 05 2E 8E 06 0D 03 58 0B C0 74 03 E8 E1 01 03  // t......X..t.....
    7A30: 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B  // .N.....+.2...J..
    7A40: F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A  // .............u..
    7A50: DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF  // .8.~............
    7A60: 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F  // ..:.J.t.........
    7A70: E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD  // .@..............
    7A80: 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32  // +.......S..*.2.2
    7A90: F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03  // .+.+............
    7AA0: FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB  // ...u.X. ........
    7AB0: 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5  // u..S..*.t.......
    7AC0: 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00  // X...... ........
    7AD0: 2E 8E 1E 0D 03 8A C3 22 DF D3 E3 A8 80 74 03 30  // .......".....t.0
    7AE0: 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8  // .....4".........
    7AF0: 0C 00 2E 8E 1E 0D 03 8A 04 D2 E8 22 C7 C3 B0 28  // ..........."...(
    7B00: F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80  // .....t..........
    7B10: FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3  // ................
    7B20: D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E  // ................
    7B30: 8E 06 0D 03 8B C1 E8 86 00 75 02 8A DE 03 F0 E8  // .........u......
    7B40: 24 00 C3 FC 8A D8 2E 8E 06 0D 03 8A C1 8A E6 E8  // $...............
    7B50: 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00  // m.u.............
    7B60: 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56  // +.......*..,Q..V
    7B70: 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81  // W..........+.+..
    7B80: C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F  // .. ... ........_
    7B90: 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1  // ^....Y........W.
    7BA0: E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1  // .........+.... .
    7BB0: E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8  // ......._....u...
    7BC0: B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1  // ......+.8.v.2.Q.
    7BD0: 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06  // .....Y2..P..>I..
    7BE0: 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3  // t............P..
    7BF0: 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8  // ...RS..2.....P..
    7C00: 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3  // ..P...L...[..[Z.
    7C10: 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3  // R...J...2.....Z.
    7C20: 8B E8 83 E5 0F 2E 8A A6 D0 7B 8B E8 C1 ED 04 83  // .........{......
    7C30: E5 0F 2E 8A 86 D0 7B C3 00 03 0C 0F 30 33 3C 3F  // ......{.....03<?
    7C40: C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80  // ........&.......
    7C50: F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56  // ...t........u..V
    7C60: 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0  // .E...c..........
    7C70: EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6  // ..R.....&J....2.
    7C80: 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1  // ..Z.S..2.....P..
    7C90: EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26  // ....[.R..2.R...&
    7CA0: 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C  // ...&J.Z....t...L
    7CB0: 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32  // ...u.Z.R...J...2
    7CC0: F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8  // .......N........
    7CD0: 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03  // ..Z....&J.......
    7CE0: F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80  // ...t...2..&L....
    7CF0: E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2  // ................
    7D00: C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E  // .. .......2....>
    7D10: A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95  // ..&.}......S....
    7D20: FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F  // ................
    7D30: 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC  // U......<.t....v.
    7D40: 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A  // <Ut.2.[.........
    7D50: E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F  // ......[....6....
    7D60: 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1  // ..t%..*.....R2..
    7D70: E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B  // ......+.Q....+.+
    7D80: F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6  // .Y..Z...........
    7D90: E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2  // .......2........
    7DA0: 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E  // ..+.....+.Nu....
    7DB0: 1E 07 03 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9  // .....`...$`. t..
    7DC0: 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E  // ...............>
    7DD0: 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08  // I..t....t.......
    7DE0: 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E  // t..B..6......8.~
    7DF0: 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74  // ...td.......\8.t
    7E00: 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49  // X.....|........I
    7E10: 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74  // ...~D..*...u.8.t
    7E20: 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80  // 8..8.t2....8.~..
    7E30: FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6  // ..~.........}...
    7E40: FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC  // ..8.t.........*.
    7E50: 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E  // ................
    7E60: 8E 1E 07 03 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3  // .....b.2....&L..
    7E70: 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02  // N....z.t..>I..w.
    7E80: D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE  // ...........P..'.
    7E90: C3 2E 8E 1E 07 03 8A 26 49 04 E8 79 9C 74 07 C7  // .......&I..y.t..
    7EA0: 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06  // .P.....H.t....t.
    7EB0: 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74  // w..w.........|.t
    7EC0: 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04  // ...N..........J.
    7ED0: 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3  // R.&........Z....
    7EE0: E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E  // .0......g....R..
    7EF0: 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A  // J.....&........Z
    7F00: E8 55 FE C3 2E 8E 1E 07 03 8A 26 49 04 E8 E1 FA  // .U........&I....
    7F10: 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53  // t....t.w@......S
    7F20: FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE  // ................
    7F30: C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04  // ....+>J....R.&..
    7F40: F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04  // .&J......+.Z..J.
    7F50: C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6  // ............|.t.
    7F60: C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52  // ...............R
    7F70: 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0  // ..J..&....+...+.
    7F80: 5A F7 DD E8 E9 F9 C3 2E 8E 1E 07 03 2E 8E 06 0D  // Z...............
    7F90: 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06  // ..].t..>I..|....
    7FA0: 0B 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B  // ..t.....I...&...
    7FB0: EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00  // ..F...P.........
    7FC0: 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A  // +....>I..u....&.
    7FD0: 04 88 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6  // ..F.E&... .F.E..
    7FE0: 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8  // P...............
    7FF0: 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB  // V.... .O........
    8000: E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83  // .+..>..2....u.&.
    8010: 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80  // }..u............
    8020: 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6  // t.GVW.._^t#.....
    8030: C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E  // ..t.G..u...t....
    8040: 07 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5  // ...>|.......2...
    8050: 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75  // .....F...>I..|.u
    8060: 02 EB 5A C3 2E 8E 06 09 03 E8 18 FC 8B F0 8B 1E  // ..Z.............
    8070: 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80  // ..+.............
    8080: 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7  // >I..r.....`u....
    8090: C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01  // ...u............
    80A0: EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A  // .Q..&.....F.E.6J
    80B0: 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06  // ...X....2..D....
    80C0: 09 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26  // ...P...2.R..2..&
    80D0: 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B  // J..&..Z........+
    80E0: E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9  // ...S.>J.O.......
    80F0: 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01  // ..2.&......t....
    8100: 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01  // F...f.E..Ku.[...
    8110: 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E 07  // 2....3..........
    8120: 03 2E 8E 06 0D 03 8A 26 49 04 E8 C4 F8 74 0F 2E  // .......&I....t..
    8130: 8E 06 0B 03 80 FC 07 74 05 7C 3D E9 0B 02 8A E3  // .......t.|=.....
    8140: 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A  // ....2.....P....J
    8150: 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0  // ...2.........t..
    8160: EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03  // ..L.....u.....u.
    8170: F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 0D 03 A1 50  // ....G...P......P
    8180: 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58  // .......P..&J...X
    8190: A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01  // ..t.$..6|....6..
    81A0: 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7  // ..2.........ti..
    81B0: 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50  // ...U...........P
    81C0: B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8  // .....u'..U.#....
    81D0: 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7  // N.#.&......N..u.
    81E0: 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8  // .....>.X.r......
    81F0: 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85  // ..#.&1...%.#.&1.
    8200: 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01  // . ..P..u......>.
    8210: 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74  // X.I......P.....t
    8220: 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA  // ..&0..&0.. ..P..
    8230: 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3  // .......?.X. ....
    8240: AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83  // ...&......O.....
    8250: EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38  // ....?.X........8
    8260: E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2  // .r.2............
    8270: 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F  // ..2...f...Q...f.
    8280: B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75  // ..J...du..h...Zu
    8290: 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2  // ..`.....u....R..
    82A0: 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF  // f...f...P.f..f..
    82B0: 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A  // ...f.......f...Z
    82C0: 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0  // ..J....P.P......
    82D0: 2E 8E 06 09 03 58 57 51 50 9C FC 8B CD E8 3B 00  // .....XWQP.....;.
    82E0: B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05  // .........s...&..
    82F0: 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83  // fG..u.f.....XY_.
    8300: C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA  // ....8.r.Q2...I..
    8310: 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E  // .....Y+.....R3..
    8320: C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 E8 97 74 16  // .f.....f......t.
    8330: 38 E0 74 12 0F B6 D0 E8 85 C9 8A E0 66 C1 C7 10  // 8.t.........f...
    8340: 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84  // ..f...Z.....|...
    8350: 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11  // ....b...........
    8360: 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3  // u.......PS..2...
    8370: 8B 97 50 04 5B 2E 8E 06 09 03 E8 07 F9 8B F8 8B  // ..P.[...........
    8380: 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04  // ...X2.R.6J.V.&..
    8390: C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4  // .6.....u..|..u..
    83A0: 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8  // .F.........um...
    83B0: 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD  // ...ZXPRJ..WQQW..
    83C0: 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32  // 2......_G..8.v.2
    83D0: E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4  // ...I..G..Y..Y_..
    83E0: 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A  // ......[KZQW...&.
    83F0: 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33  // %....._G+.B;.v.3
    8400: D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8  // ...I..G..Y......
    8410: 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF  // ................
    8420: EB BC 2E 8E 1E 07 03 80 3E 63 04 B4 74 0B BA CC  // ........>c..t...
    8430: 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75  // ....u..B.......u
    8440: 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8  // .......&f...&f..
    8450: 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5  // -...f... .......
    8460: 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66  // t..f.$....t.. .f
    8470: 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53  // .$......S...~..S
    8480: 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60  // P..............`
    8490: F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88  // .t......,...t.&.
    84A0: 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B  // ........t.&.].X[
    84B0: C3 8A E0 1E 2E 8E 1E 07 03 80 3E 49 04 33 1F 7F  // ..........>I.3..
    84C0: 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8  // ..........0.....
    84D0: 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B  // ................
    84E0: ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20  // .t.G&.......... 
    84F0: EE 9D C3 2E 8E 1E 07 03 8A 26 49 04 E8 F2 F4 74  // .........&I....t
    8500: 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C  // ....w.t........|
    8510: 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E  // .tL.............
    8520: 8E 1E 09 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A  // .......u........
    8530: 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE  // %.......%...%...
    8540: B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF  // ................
    8550: 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50  // .%...%.........P
    8560: 2E 8E 06 09 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B  // ......J.........
    8570: F8 58 26 88 05 C3 2E 8E 1E 07 03 8A 26 49 04 E8  // .X&.........&I..
    8580: 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC  // o.t....w.t.._...
    8590: 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A  // .F.....|.t)..5..
    85A0: CC 2E 8E 1E 09 03 BA CE 03 32 FF B8 04 03 EF D0  // .........2......
    85B0: E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC  // ...".t......}...
    85C0: 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8  // .~...J..........
    85D0: 2E 8E 1E 09 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E  // ..........F.....
    85E0: 07 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03  // ...>b.....2..P..
    85F0: F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 0D 03  // .....I.<.vJ.....
    8600: E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A  // ...u3..J........
    8610: CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9  // .......N........
    8620: 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A  // A..8.sY....c....
    8630: E5 EF 8A E1 FE C0 EF C3 2E 8E 06 0B 03 80 F9 07  // ................
    8640: 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A  // t....u.2...<.u.:
    8650: 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75  // 6..u...........u
    8660: 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04  // .........L..<.u.
    8670: E8 FF 7E C3 3C 08 75 83 0A D2 74 DE FE CA EB DA  // ..~.<.u...t.....
    8680: 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB  // 2.2.+.:6..t.....
    8690: EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE  // ......c.........
    86A0: C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B  // ..+.+.&.e.P.>N..
    86B0: F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5  // ................
    86C0: 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 B6 C6  // ..X. ...........
    86D0: FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89  // ..:.J.t....2.2..
    86E0: 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06  // .:6..t..........
    86F0: 0D 03 E8 FC F2 74 0E 2E 8E 06 0B 03 80 F9 07 74  // .....t.........t
    8700: 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B  // .2............O.
    8710: 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE  // .J...3..6....J..
    8720: CA B0 01 E9 70 F7 2E 8E 1E 07 03 F6 06 87 04 08  // ....p...........
    8730: 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E  // t..B..v....F....
    8740: 8E 1E 07 03 8A DF 32 FF D1 E3 89 97 50 04 D0 EB  // ......2.....P...
    8750: 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 07  // 8.b.u....\......
    8760: 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B  // ...2.....P...`..
    8770: EC 89 4E 16 89 56 12 C3 2E 8E 1E 07 03 A0 87 04  // ..N..V..........
    8780: 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08 75  // $...I..&J......u
    8790: 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A CC  // -.].t..>I...!Q..
    87A0: 8A 2E 84 04 BE 69 87 81 FE 72 87 74 10 2E 3B 0C  // .....i...r.t..;.
    87B0: 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A 3E  // t......$...D.Y.>
    87C0: 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12  // b....F..^..N..V.
    87D0: C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 07 03 3C  // ...#.+3.*2.....<
    87E0: 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08 80  // ...PR......ZXt..
    87F0: 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C  // >c..t...>c..u.<.
    8800: 73 F4 32 E4 8B E8 D1 E5 2E FF A6 A5 87 DD 87 FD  // s.2.............
    8810: 87 0F 88 44 88 8E 87 8E 87 8E 87 69 88 81 88 85  // ...D.......i....
    8820: 88 8E 87 8E 87 8E 87 8E 87 8E 87 8E 87 B3 88 8E  // ................
    8830: 87 B7 88 D2 88 8E 87 11 89 8E 87 1F 89 3A 89 41  // .............:.A
    8840: 89 4D 89 71 89 80 3E 49 04 13 74 15 E8 BF F4 8B  // .M.q..>I..t.....
    8850: C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26 88  // ....p...t...2.&.
    8860: 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74  // ...........D...t
    8870: F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8  // .&.}....>I..t...
    8880: 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2  // .....t..........
    8890: E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC  // ...2............
    88A0: EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01 77  // ...............w
    88B0: B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26 65  // ..C....0...$..&e
    88C0: 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE EB  // .....t.....e. ..
    88D0: 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20  // ............... 
    88E0: EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8  // ....N..x........
    88F0: 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC  // .....2........B.
    8900: 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE  // &....J..G.......
    8910: 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B  // B..&......Z.....
    8920: FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8  // .Q..&.5&.m.&.M..
    8930: CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6  // .....CY.....u...
    8940: F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02 0C  // ....0.n.$....t..
    8950: 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3 B2  // ..0.p.....u.....
    8960: C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4 34  // ..0.P....u.....4
    8970: 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC  // ...Q............
    8980: 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26  // .N..v....Q.....&
    8990: 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2  // .5&.m.&.M....CY.
    89A0: E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B  // .............2..
    89B0: EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A  // ..F...?....4....
    89C0: F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00 C0  // ...0.......u....
    89D0: EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8  // .....^...Q...s..
    89E0: 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04  // *....R.CY.......
    89F0: 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04  // .t.......9......
    8A00: 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6  // .t..........P...
    8A10: E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03  // .P.;..P....Y..Y.
    8A20: C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8  // ..d....2|.......
    8A30: 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C  // ..X.R.9.ZS......
    8A40: FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8  // ..B..........[..
    8A50: 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00  // ..S......BB.....
    8A60: EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B  // ...............[
    8A70: C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9  // .PQ.........u...
    8A80: 59 58 C3 2E 8E 1E 07 03 8B F8 24 0F 81 E7 F0 00  // YX........$.....
    8A90: C1 EF 03 83 FF 06 7F 18 2E FF A5 35 8A 3D 8A 52  // ...........5.=.R
    8AA0: 8A F0 8A 4C 8B 3C 03 74 08 3C 04 7F 03 E8 CF 01  // ...L.<.t.<......
    8AB0: C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53  // ..........<.w.PS
    8AC0: 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80  // PR..c...........
    8AD0: E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3  // ...@t.........@.
    8AE0: 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04 A1  // .........t......
    8AF0: 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01 73  // ....=..s....=..s
    8B00: 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73  // ....=|.s..^.=J.s
    8B10: 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF E8  // ........ZX......
    8B20: 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01  // ].[X..2...t...<.
    8B30: 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9  // t...<.t.........
    8B40: 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04 53  // .....~.........S
    8B50: E8 5B F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A  // .[.[......t...t.
    8B60: FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C  // ..t8..t<..t@...|
    8B70: 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07  // ...~..........t.
    8B80: 32 FF 2E 8A 97 30 8B 89 0E 85 04 88 16 84 04 89  // 2....0..........
    8B90: 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9  // ...........*....
    8BA0: 0E 00 EB D6 BD 40 5A B9 08 00 EB CA BD 53 62 B9  // .....@Z......Sb.
    8BB0: 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04  // ......u.........
    8BC0: 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E  // ...w5...w...u...
    8BD0: 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C  // |..&..... ...u..
    8BE0: CD 8E C5 2E 8B 2E 32 73 EB 10 0E 07 8A DF 32 FF  // ......2s......2.
    8BF0: 80 EB 02 D1 E3 2E 8B AF A3 8B 8B C5 8B EC 89 4E  // ...............N
    8C00: 16 89 56 12 89 46 0A 8C 46 1E C3 53 62 40 5A 40  // ..V..F..F..Sb@Z@
    8C10: 5E 40 62 53 62 53 72 53 06 8A 26 49 04 E8 CD C3  // ^@bSbSrS..&I....
    8C20: 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD 53 62  // &.G.&.g3...t".Sb
    8C30: 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD  // <.}..q.....<.}..
    8C40: 40 5A 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4  // @Z............-.
    8C50: 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C  // .<.}...<.t.....<
    8C60: 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80  // .t......&.G..t..
    8C70: E4 7F 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B  // ....2........[..
    8C80: F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF B2  // ................
    8C90: C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24  // ..............P$
    8CA0: 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07  // ...t"..3....<.u.
    8CB0: B7 10 BD 53 62 EB 10 FE C8 75 07 B7 0E E8 E8 01  // ...Sb....u......
    8CC0: EB 05 B7 08 BD 40 5A E8 2D 00 58 A8 80 74 00 BA  // .....@Z.-.X..t..
    8CD0: C4 03 B8 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8  // ................
    8CE0: 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32  // ..u.....P.X....2
    8CF0: C0 EE B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E  // ..........u.....
    8D00: 75 0A 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E  // u.&.~..u........
    8D10: 8E 06 09 03 8B FA C1 E7 05 B0 40 53 80 E3 03 F6  // ..........@S....
    8D20: E3 5B F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B  // .[...t.. .......
    8D30: F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46  // ..(2...2.Q...t.F
    8D40: 8B CB F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA  // ...... t.. .+...
    8D50: 59 F6 C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49  // Y...t.F..u....&I
    8D60: 04 50 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF  // .P.W.>..&.}.....
    8D70: 74 30 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0  // t0.....&..<.t$8.
    8D80: 74 03 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26  // t.G....&.......&
    8D90: 8B 45 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06  // .E....&.}..>....
    8DA0: 0E 01 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E  // .._.X.&.G3.t....
    8DB0: A8 04 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26  // ..&._.....t....&
    8DC0: 8A 01 3C FF 74 15 47 38 06 49 04 75 F2 26 8A 07  // ..<.t.G8.I.u.&..
    8DD0: 32 E4 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04  // 2.............c.
    8DE0: 8A 26 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B  // .&............t.
    8DF0: B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC  // ...B.$....J...B.
    8E00: 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2  // $...............
    8E10: 80 3E 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2  // .>...u..........
    8E20: F6 C1 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04  // ...t...H......c.
    8E30: EF A0 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00  // ..J..&..........
    8E40: 01 A3 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04  // ..L...&I.P.W.>..
    8E50: 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26  // &.}.....tJ.....&
    8E60: 8A 05 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26  // ..<.t>8.t.G....&
    8E70: 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A  // .=&.].&.M.&.U.&.
    8E80: 45 0A 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26  // E.<.t...P......&
    8E90: 85 04 A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32  // .....X...&.}...2
    8EA0: C0 E8 DB FD 5F 07 58 C3 50 53 51 52 2E A1 11 03  // ...._.X.PSQR....
    8EB0: 0B C0 74 09 2E 8B 2E 32 73 0E 07 EB 08 B8 30 11  // ..t....2s.....0.
    8EC0: B7 02 E8 C1 BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3  // .....ZY[X.<.|...
    8ED0: FD 53 2E 8E 1E 07 03 86 FB 32 FF D1 E3 8B FB 81  // .S.......2......
    8EE0: C7 50 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46  // .P..5[..V..QS&.F
    8EF0: 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32  // .E<...u.2..@<.t2
    8F00: 3C 07 75 05 E8 6B 76 EB 62 3C 08 75 08 0A D2 74  // <.u..kv.b<.u...t
    8F10: 5A FE CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45  // Z...'....t.&.^.E
    8F20: B9 01 00 B4 09 E8 5E BE FE C2 3A 16 4A 04 72 0C  // ......^...:.J.r.
    8F30: 32 D2 89 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B  // 2...:6..s......+
    8F40: 50 E8 AD EA 75 08 B8 00 08 E8 3A BE EB 09 80 3E  // P...u.....:....>
    8F50: 49 04 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8  // I..t.2..>b.S..U.
    8F60: 25 00 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A  // %.][.>b.X..[Y..Z
    8F70: F7 C6 01 00 75 02 89 15 8B 05 3A 3E 62 04 75 03  // ....u.....:>b.u.
    8F80: E8 34 ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A  // .4...d.3..6....J
    8F90: 04 FE CA B8 01 06 E8 ED BD C3 2E 8E 1E 07 03 0A  // ................
    8FA0: C0 75 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3  // .u.......^..F...
    8FB0: 3C 01 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A  // <.u..A....F.....
    8FC0: 04 BF 30 90 2E 3A 05 72 04 BB FF FF C3 32 E4 D1  // ..0..:.r.....2..
    8FD0: E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3  // .....]...t...u..
    8FE0: 86 FB C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01 75  // ......$0<0t....u
    8FF0: EF C3 F6 C3 01 74 E9 C3 BF 30 90 2E 8A 0D 32 C0  // .....t...0....2.
    9000: 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83  // ....;.t....;.t..
    9010: C7 02 FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08  // ....8.~.........
    9020: 00 F6 06 89 04 02 74 0E BB 07 00 BA CC 03 EC A8  // ......t.........
    9030: 01 74 18 BB 08 00 BA B4 03 E8 DF EC 74 21 B7 01  // .t..........t!..
    9040: E8 8C E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8 CA  // ......t.........
    9050: EC 74 0C B7 02 E8 77 E9 80 FA B4 74 02 86 FB C3  // .t....w....t....
    9060: 0F 08 0F 08 0F 08 0F 08 03 01 03 01 01 01 00 08  // ................
    9070: 01 01 01 01 01 01 01 01 0F 01 0F 08 0F 04 00 02  // ................
    9080: 0F 02 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07  // ................
    9090: 02 08 FF 0E 00 00 3F 00 10 01 08 00 00 00 00 01  // ......?.........
    90A0: 00 02 02 01 00 04 04 01 00 05 02 05 00 06 01 06  // ................
    90B0: 05 06 00 08 01 08 00 07 02 07 06 07 CA 00 34 00  // ..............4.
    90C0: 90 00 96 00 00 00 00 00 00 00 5F 57 C3 90 50 66  // .........._W..Pf
    90D0: 52 E8 F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66  // R..............f
    90E0: BA F8 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A  // ....f....2.f..fZ
    90F0: 58 C3 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75  // X.f.O.fRfVSWP..u
    9100: 44 E8 C8 FF FF FF 66 33 F6 66 BB 53 00 E8 48 00  // D.....f3.f.S..H.
    9110: 00 00 C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66  // .......@u+f....f
    9120: D1 E2 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13  // ..f..f@...f..f..
    9130: 00 E8 30 00 00 00 66 BB 12 00 E8 27 00 00 00 66  // ..0...f....'...f
    9140: 58 32 E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8  // X2.fPX_[f^fZ..f.
    9150: 4F 03 C3 90 66 B8 4F 03 C3 90 66 52 E8 11 00 00  // O...f.O...fR....
    9160: 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A  // ..fZ..fR......fZ
    9170: C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0  // ..f..P3.f..f....
    9180: 02 EF 66 83 C2 04 58 C3 32 39 25 39 25 39 25 39  // ..f...X.29%9%9%9
    9190: 10 39 10 39 10 39 10 39 52 35 C9 35 F3 35 34 37  // .9.9.9.9R5.5.547
    91A0: 33 37 33 37 79 37 DE 37 0E 38 CB 38 F4 38 F4 38  // 3737y7.7.8.8.8.8
    91B0: 6B 37 5E 37 5E 37 5E 37 5E 37 5E 37 79 37 DE 37  // k7^7^7^7^7^7y7.7
    91C0: 0E 38 CB 38 F9 38 3F 39 F4 38 F4 38 FF FF FF FF  // .8.8.8?9.8.8....
    91D0: FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00  // ................
    91E0: FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10  // ................
    91F0: 00 08 10 18 00 08 10 18 56 33 01 56 33 02 64 47  // ........V3.V3.dG
    9200: 03 44 47 03 7B 34 03 2F 34 03 57 33 04 70 33 04  // .DG.{4./4.W3.p3.
    9210: 80 33 04 56 33 03 00 00 00 00 03 3B 00 02 03 3B  // .3.V3......;...;
    9220: 01 02 03 3B 02 02 03 3B 03 02 03 3B 04 02 03 3B  // ...;...;...;...;
    9230: 05 02 FD 3C 00 02 FD 3C 01 02 FD 3C 02 02 FD 3C  // ...<...<...<...<
    9240: 03 02 FD 3C 04 02 FD 3C 05 02 32 3D 00 02 32 3D  // ...<...<..2=..2=
    9250: 01 02 32 3D 02 02 32 3D 03 02 32 3D 04 02 32 3D  // ..2=..2=..2=..2=
    9260: 05 02 6D 3F 00 02 6D 3F 01 02 6D 3F 02 02 6D 3F  // ..m?..m?..m?..m?
    9270: 03 02 6D 3F 04 02 6D 3F 05 02 6D 3F 00 02 6D 3F  // ..m?..m?..m?..m?
    9280: 01 02 6D 3F 02 02 6D 3F 03 02 6D 3F 04 02 6D 3F  // ..m?..m?..m?..m?
    9290: 05 02 34 3E 00 02 34 3E 01 02 34 3E 02 02 34 3E  // ..4>..4>..4>..4>
    92A0: 03 02 34 3E 04 02 34 3E 05 02 70 3E 00 02 70 3E  // ..4>..4>..p>..p>
    92B0: 01 02 70 3E 02 02 70 3E 03 02 70 3E 04 02 70 3E  // ..p>..p>..p>..p>
    92C0: 05 02 E1 3D 00 02 E1 3D 01 02 E1 3D 02 02 E1 3D  // ...=...=...=...=
    92D0: 03 02 E1 3D 04 02 E1 3D 05 02 15 3E 00 02 15 3E  // ...=...=...>...>
    92E0: 01 02 15 3E 02 02 15 3E 03 02 15 3E 04 02 15 3E  // ...>...>...>...>
    92F0: 05 02 C5 41 00 00 F8 41 01 00 F8 41 02 00 E5 41  // ...A...A...A...A
    9300: 00 00 D3 40 00 02 CC 3E 00 02 CC 3E 01 02 CC 3E  // ...@...>...>...>
    9310: 02 02 CC 3E 03 02 CC 3E 04 02 CC 3E 05 02 EB 40  // ...>...>...>...@
    9320: 00 02 40 43 05 00 40 43 01 00 40 43 00 00 40 43  // ..@C..@C..@C..@C
    9330: 02 00 81 43 00 00 81 43 02 00 C6 43 00 00 56 40  // ...C...C...C..V@
    9340: 00 02 56 40 01 02 56 40 02 02 56 40 03 02 56 40  // ..V@..V@..V@..V@
    9350: 04 02 56 40 05 02 12 42 00 00 3A 42 00 00 BB 42  // ..V@...B..:B...B
    9360: 00 00 36 43 00 00 1A 3F 00 02 1A 3F 01 02 1A 3F  // ..6C...?...?...?
    9370: 02 02 1A 3F 03 02 1A 3F 04 02 1A 3F 05 02 35 43  // ...?...?...?..5C
    9380: 00 01 35 43 00 01 39 3C 00 02 39 3C 01 02 39 3C  // ..5C..9<..9<..9<
    9390: 02 02 39 3C 03 02 39 3C 04 02 39 3C 05 02 5A 42  // ..9<..9<..9<..ZB
    93A0: 00 00 36 43 00 00 36 43 00 00 36 43 00 00 6B 41  // ..6C..6C..6C..kA
    93B0: 00 00 5D 3D 00 02 5D 3D 01 02 5D 3D 02 02 5D 3D  // ..]=..]=..]=..]=
    93C0: 03 02 5D 3D 04 02 5D 3D 05 02 8C 3D 00 02 8C 3D  // ..]=..]=...=...=
    93D0: 01 02 8C 3D 02 02 8C 3D 03 02 8C 3D 04 02 8C 3D  // ...=...=...=...=
    93E0: 05 02 C2 3D 00 02 C2 3D 01 02 C2 3D 02 02 C2 3D  // ...=...=...=...=
    93F0: 03 02 C2 3D 04 02 C2 3D 05 02 7D 42 00 00 A0 42  // ...=...=..}B...B
    9400: 00 00 5E 3E 01 02 5E 3E 02 02 BA 3E 01 02 BA 3E  // ..^>..^>...>...>
    9410: 02 02 A6 00 02 01 40 A4 00 00 00 00 00 00 16 C3  // ......@.........
    9420: 00 00 AE A4 00 00 00 00 76 AD 00 00 00 00 40 AE  // ........v.....@.
    9430: 5E B3 00 00 00 00 00 00 00 00 00 00 FA A4 32 B6  // ^.............2.
    9440: 4E A5 A0 A5 D8 AC 54 AD 6C AD 8A A4 00 00 00 00  // N.....T.l.......
    9450: 00 00 00 00 00 00 00 00 BE B6 30 B7 70 B7 00 00  // ..........0.p...
    9460: B4 B7 00 00 24 BB 00 00 84 B8 5E BA F0 BB 42 BD  // ....$.....^...B.
    9470: 84 BD FC CF 00 00 00 00 9C BD 62 BF C4 CD 00 00  // ..........b.....
    9480: 30 CF 6C BF 00 00 8E C1 00 00 00 00 00 00 D4 C1  // 0.l.............
    9490: 0E C3 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    94A0: 00 00 00 00 00 00 00 00 00 00 00 00 0A D2 52 C6  // ..............R.
    94B0: 98 C7 24 CB 68 CD 00 00 4A 00 02 01 00 00 00 00  // ..$.h...J.......
    94C0: 00 00 9A 94 62 95 AA 95 AE 98 E0 A2 F8 A3 00 00  // ....b...........
    94D0: 00 00 0A 99 16 9D 7A 9D 14 A4 EE 9D 00 00 EE A1  // ......z.........
    94E0: 00 00 00 00 00 00 00 00 02 A2 A2 A2 00 00 00 00  // ................
    94F0: 00 00 A8 A2 00 00 00 00 16 99 00 00 00 00 00 00  // ................
    9500: 00 00 C8 00 02 01 D6 09 80 02 A0 00 E0 01 2D 00  // ..............-.
    9510: 10 00 60 00 0A 00 02 00 00 00 00 00 08 08 06 00  // ..`.............
    9520: 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00  // .<.. ...X...(...
    9530: 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19  // ............j<d.
    9540: 00 04 40 01 00 03 26 00 18 00 88 00 03 00 06 00  // ..@...&.........
    9550: 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02  // ........U<0*....
    9560: C0 03 28 00 60 00 70 00 01 00 03 00 00 00 00 00  // ..(.`.p.........
    9570: 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00  // .....<0*......*.
    9580: 30 00 70 00 01 00 03 00 00 00 00 00 00 00 00 00  // 0.p.............
    9590: EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00  // .<./x.....'.X...
    95A0: 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F  // .............<H?
    95B0: 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00  // @.0...2.@.......
    95C0: 00 00 00 00 00 00 00 00 EC 3C 48 00 03 01 0C 00  // .........<H.....
    95D0: 02 10 20 4E 00 00 20 4E 00 00 01 00 00 00 02 2D  // .. N.. N.......-
    95E0: 00 00 4C 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..L.............
    95F0: 00 00 F4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9610: 00 00 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00  // ...........*.*..
    9620: 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15  // ***..*.**..***..
    9630: 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F  // ...?.?..???..?.?
    9640: 3F 3F 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B  // ??.???..........
    9650: 0B 0B 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C  // ................
    9660: 1C 20 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32  // .   $$$(((---222
    9670: 38 38 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // 888???..?..?..?/
    9680: 00 3F 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00  // .??.??./?..?..?.
    9690: 00 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00  // .?..?..?/.??./?.
    96A0: 1F 3F 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00  // .?..?..?..?..?..
    96B0: 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F  // ?/.??./?..?..?..
    96C0: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37  // ?'.?/.?7.??.??.7
    96D0: 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F  // ?./?.'?..?'.?/.?
    96E0: 37 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F  // 7.??.7?./?.'?..?
    96F0: 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F  // ..?'.?/.?7.??.7?
    9700: 1F 2F 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // ./?.'?--?1-?6-?:
    9710: 2D 3F 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D  // -??-??-:?-6?-1?-
    9720: 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D  // -?1-?6-?:-??-:?-
    9730: 36 3F 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D  // 6?-1?--?--?1-?6-
    9740: 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00  // ?:-??-:?-6?-1?..
    9750: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15  // ................
    9760: 1C 00 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C  // ................
    9770: 15 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C  // ................
    9780: 00 00 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C  // ................
    9790: 00 0E 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    97A0: 0E 1C 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E  // ................
    97B0: 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E  // ................
    97C0: 15 1C 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E  // ................
    97D0: 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14  // ................
    97E0: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A  // ................
    97F0: 1C 14 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C  // ................
    9800: 1A 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C  // ................
    9810: 14 14 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C  // ................
    9820: 14 18 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C  // ................
    9830: 00 10 10 00 10 10 00 0C 10 00 08 10 00 04 10 00  // ................
    9840: 00 10 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00  // ................
    9850: 08 10 00 04 10 00 00 10 00 00 10 04 00 10 08 00  // ................
    9860: 10 0C 00 10 10 00 0C 10 00 08 10 00 04 10 08 08  // ................
    9870: 10 0A 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E  // ................
    9880: 10 08 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10  // ................
    9890: 0E 08 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10  // ................
    98A0: 08 08 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10  // ................
    98B0: 08 0C 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    98C0: 0B 10 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B  // ................
    98D0: 0B 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B  // ................
    98E0: 0D 10 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B  // ................
    98F0: 10 0F 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00  // ................
    9900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9910: 00 00 00 00 00 00 5C 00 02 01 00 00 00 00 00 00  // ......\.........
    9920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9930: 00 00 06 00 00 00 C8 00 00 00 00 00 34 21 00 00  // ............4!..
    9940: B8 0B 00 00 00 00 7D 00 00 01 00 00 00 00 00 FF  // ......}.........
    9950: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9970: 00 00 0C 00 02 01 00 00 00 00 00 00 00 00 00 04  // ................
    9980: 01 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9990: 00 00 77 01 00 00 00 00 00 00 00 00 00 00 00 00  // ..w.............
    99A0: 00 00 10 00 00 00 C8 00 1A 02 00 00 00 00 00 00  // ................
    99B0: 00 00 00 00 00 00 8C 00 01 01 00 00 00 00 00 00  // ................
    99C0: 00 00 00 00 00 00 00 00 00 00 80 00 20 02 0C 32  // ............ ..2
    99D0: 00 00 00 00 E4 00 00 00 00 00 00 02 30 02 03 33  // ............0..3
    99E0: 01 01 00 00 E4 00 00 00 00 00 08 00 10 02 13 31  // ...............1
    99F0: 03 03 00 00 E4 00 00 01 00 00 00 00 00 00 00 00  // ................
    9A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A60: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    9A70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF 0F 00  // ................
    9AA0: 05 00 00 00 02 19 00 00 80 08 34 29 00 80 09 1C  // ..........4)....
    9AB0: 29 00 80 10 14 42 00 80 18 00 4C 00 9F FF 00 00  // )....B....L.....
    9AC0: 00 00 FF 00 00 00 00 FF 00 00 00 00 FF 00 00 00  // ................
    9AD0: 00 FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9BD0: 00 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C00: FF FF FF FF FF FF 00 00 00 00 00 00 FF FF FF FF  // ................
    9C10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00 00  // ................
    9C40: 00 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C70: FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00  // ................
    9C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64 00  // ..............d.
    9D80: 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08  // ...].......]....
    9D90: 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14  // ...].......]....
    9DA0: 04 00 B5 5D 00 00 1A 18 05 00 B5 5D 00 00 1C 1C  // ...].......]....
    9DB0: 06 00 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08  // ...].......]....
    9DC0: 91 00 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08  // ...].......]....
    9DD0: 93 00 A1 5D 00 00 08 08 94 00 A5 5D 00 00 08 08  // ...].......]....
    9DE0: 95 00 74 00 01 01 10 01 06 12 11 01 16 12 13 01  // ..t.............
    9DF0: 06 6A 14 01 16 6A 16 01 06 55 17 01 16 55 19 01  // .j...j...U...U..
    9E00: 06 EA 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01  // ......e...f...!.
    9E10: 0A 12 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01  // .."..j#..U$...E.
    9E20: 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01  // ..F...u...v.....
    9E30: 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01  // .p...p...q...q..
    9E40: 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01  // .r...r...s...s..
    9E50: 16 74 F6 01 0A 74 00 04 09 01 00 00 00 00 00 00  // .t...t..........
    9E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A250: 00 00 00 00 00 00 14 00 02 01 02 00 08 00 80 00  // ................
    A260: 00 02 00 04 00 08 40 00 FF FF 9F 00 01 04 88 02  // ......@.........
    A270: 04 00 0C 32 48 00 1E 21 00 00 75 00 00 00 80 00  // ...2H..!..u.....
    A280: 00 00 03 33 57 00 1E 22 00 00 7C 00 00 00 00 02  // ...3W.."..|.....
    A290: 00 00 13 31 66 00 20 21 00 00 83 00 00 00 08 00  // ...1f. !........
    A2A0: 00 00 03 71 8A 00 00 00 00 00 00 00 00 00 00 00  // ...q............
    A2B0: 00 00 01 04 90 00 02 04 01 00 17 06 00 00 00 00  // ................
    A2C0: FF 01 04 91 00 02 04 02 00 17 06 00 00 00 00 FF  // ................
    A2D0: 01 04 92 00 02 04 03 00 17 06 00 00 00 00 FF 14  // ................
    A2E0: 06 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F  // ................
    A2F0: 01 00 00 FF 10 0A 01 02 04 03 00 00 00 00 11 0A  // ................
    A300: 90 91 93 92 00 00 00 00 FF 00 05 00 01 01 00 00  // ................
    A310: 38 00 04 02 04 00 00 00 60 EA 00 00 C0 12 60 09  // 8.......`.....`.
    A320: 00 00 00 00 00 00 00 00 7C 01 4E 0C 01 01 00 00  // ........|.N.....
    A330: 55 00 00 00 C0 12 00 00 00 01 04 01 00 04 04 00  // U...............
    A340: 00 00 00 00 00 00 00 00 18 01 03 02 0A 00 34 00  // ..............4.
    A350: 04 01 0C 00 FF FF FF 00 02 0F 00 00 00 5F 00 08  // ............._..
    A360: 40 9C 00 00 03 0F 00 00 00 5F 00 08 FF FF FF 00  // @........_......
    A370: 03 0F 00 00 2A 57 20 10 00 00 00 00 0F 00 05 00  // ....*W .........
    A380: CE 00 00 4B 00 00 80 01 3A 00 00 80 02 1B 00 00  // ...K....:.......
    A390: 80 03 00 00 00 80 08 34 25 00 80 09 1C 25 00 80  // .......4%....%..
    A3A0: 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00 9F 18  // .......?....8...
    A3B0: 00 4A 00 9F 00 4B 00 00 80 01 3A 00 00 80 02 1B  // .J...K....:.....
    A3C0: 00 00 80 03 00 00 00 80 08 34 25 00 80 09 1C 25  // .........4%....%
    A3D0: 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00  // .........?....8.
    A3E0: 9F 18 00 4A 00 9F 00 4B 00 00 80 01 3A 00 00 80  // ...J...K....:...
    A3F0: 02 1B 00 00 80 03 00 00 00 80 08 34 25 00 80 09  // ...........4%...
    A400: 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01  // .%.........?....
    A410: 38 00 9F 18 00 4A 00 9F 00 4B 00 00 80 01 3A 00  // 8....J...K....:.
    A420: 00 80 02 1B 00 00 80 03 00 00 00 80 08 34 25 00  // .............4%.
    A430: 80 09 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80  // ...%.........?..
    A440: 11 01 38 00 9F 18 00 4A 00 9F 00 00 00 01 02 03  // ..8....J........
    A450: 01 00 01 02 03 01 00 01 02 03 01 00 01 02 03 01  // ................
    A460: 1C 00 03 01 00 0A 00 00 00 00 00 00 77 01 35 0C  // ............w.5.
    A470: 10 27 00 00 FF 00 FF 00 FF 00 00 00 2C 00 02 02  // .'..........,...
    A480: 00 09 01 02 08 01 02 02 64 C0 00 00 65 C0 00 00  // ........d...e...
    A490: 66 C0 00 00 67 C0 00 00 E8 C0 00 00 A0 21 00 00  // f...g........!..
    A4A0: 42 EC 00 00 10 27 00 00 4A 00 02 01 00 08 37 00  // B....'..J.....7.
    A4B0: 00 4B E5 00 04 49 43 00 4A 05 53 00 00 02 00 00  // .K...IC.J.S.....
    A4C0: 49 42 00 52 1A 52 19 52 16 52 18 52 3D 02 05 02  // IB.R.R.R.R.R=...
    A4D0: 00 02 00 00 52 0D 02 05 02 00 04 00 00 55 00 03  // ....R........U..
    A4E0: 52 15 0D 05 53 00 00 02 00 00 5B 52 16 52 18 52  // R...S.....[R.R.R
    A4F0: 3D 5B 24 00 01 01 00 00 37 00 00 03 00 41 E3 0D  // =[$.....7....A..
    A500: 33 05 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41  // 3.A......A.....A
    A510: 0D 25 1F 0E 03 5B 4B 00 01 01 00 00 37 00 00 42  // .%...[K.....7..B
    A520: 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02  // !.c...c.9.c.?.c.
    A530: 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00  // E.ZZ[..@....-.@.
    A540: 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02  // ..@.....@.....[.
    A550: 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D  // ....[.....[.....
    A560: 5B 00 54 00 01 02 00 00 37 00 00 01 05 00 00 9B  // [.T.....7.......
    A570: 62 01 00 54 00 01 00 01 05 00 00 93 62 01 00 01  // b..T........b...
    A580: 01 01 00 01 56 00 41 03 09 41 00 01 05 00 00 83  // ....V.A..A......
    A590: 62 01 00 01 02 01 00 41 01 05 00 00 9B 62 01 00  // b......A.....b..
    A5A0: 3C 25 01 00 00 44 36 00 01 05 00 00 93 62 01 00  // <%...D6......b..
    A5B0: 02 00 01 01 00 5B 52 00 02 01 08 08 37 00 00 3D  // .....[R.....7..=
    A5C0: 25 00 00 44 14 00 55 38 00 5B 01 05 00 00 61 60  // %..D..U8.[....a`
    A5D0: 01 00 3C E5 01 00 FF 44 10 00 4A E5 01 00 80 44  // ..<....D..J....D
    A5E0: 24 00 01 05 00 00 62 60 01 00 01 01 01 00 01 56  // $.....b`.......V
    A5F0: 00 40 03 A9 40 00 01 05 00 00 61 60 01 00 01 02  // .@..@.....a`....
    A600: 01 00 40 02 E5 00 01 5B 37 07 01 01 00 00 37 00  // ..@....[7.....7.
    A610: 00 02 05 00 01 00 00 00 52 06 01 05 80 29 00 F4  // ........R....)..
    A620: 00 00 01 05 00 00 2C A8 01 00 01 05 01 00 00 F4  // ......,.........
    A630: 00 00 1A 05 00 04 2C 05 00 FF F3 00 00 01 01 81  // ......,.........
    A640: 29 00 01 05 00 00 2D A8 01 00 01 01 01 00 00 01  // ).....-.........
    A650: 05 85 29 00 00 3D 00 01 05 00 00 31 A8 01 00 01  // ..)..=.....1....
    A660: 05 01 00 00 00 3D 00 14 05 00 06 0E 0D 00 3F 00  // .....=........?.
    A670: 2C 05 00 01 00 00 00 01 01 86 29 00 01 05 00 00  // ,.........).....
    A680: 32 A8 01 00 01 01 01 00 00 01 05 50 28 EB 0F E4  // 2..........P(...
    A690: 60 01 05 00 00 90 A6 01 00 01 05 01 00 EB 0F E4  // `...............
    A6A0: 60 01 05 6E 29 00 00 00 00 01 05 00 00 1A A8 01  // `..n)...........
    A6B0: 00 01 05 01 00 00 00 00 00 01 05 59 28 FF 21 10  // ...........Y(.!.
    A6C0: 00 01 05 00 00 99 A6 01 00 01 05 01 00 FF 21 10  // ..............!.
    A6D0: 00 01 05 5A 28 FF 25 10 00 01 05 00 00 9A A6 01  // ...Z(.%.........
    A6E0: 00 01 05 01 00 FF 25 10 00 01 05 58 28 05 00 00  // ......%....X(...
    A6F0: 00 01 05 00 00 98 A6 01 00 01 05 01 00 05 00 00  // ................
    A700: 00 01 05 72 29 FF FF 0F 00 01 05 00 00 1E A8 01  // ...r)...........
    A710: 00 01 05 01 00 FF FF 0F 00 01 05 73 29 02 00 00  // ...........s)...
    A720: 00 01 05 00 00 10 A8 01 00 01 00 64 29 01 00 01  // ...........d)...
    A730: 05 00 00 11 A8 01 00 01 00 65 29 01 00 01 05 00  // .........e).....
    A740: 00 12 A8 01 00 01 00 66 29 01 00 01 05 00 00 13  // .......f).......
    A750: A8 01 00 01 00 67 29 01 00 01 05 00 00 14 A8 01  // .....g).........
    A760: 00 01 00 68 29 01 00 01 05 00 00 15 A8 01 00 01  // ...h)...........
    A770: 00 69 29 01 00 01 05 00 00 16 A8 01 00 01 00 6A  // .i)............j
    A780: 29 01 00 01 05 00 00 17 A8 01 00 01 00 6B 29 01  // )............k).
    A790: 00 03 00 40 01 00 01 02 74 29 40 01 05 00 00 20  // ...@....t)@.... 
    A7A0: A8 01 00 01 02 01 00 40 03 00 41 81 29 33 00 41  // .......@..A.)3.A
    A7B0: 80 29 2D 02 40 41 01 02 75 29 40 01 05 00 00 21  // .)-.@A..u)@....!
    A7C0: A8 01 00 01 02 01 00 40 01 05 F2 2A BF 3F 3F 3F  // .......@...*.???
    A7D0: 01 05 FA 2A F0 BF E0 0D 01 05 F9 2A 1F 00 00 00  // ...*.......*....
    A7E0: 01 05 1A 27 01 00 00 00 01 05 0F 2A 24 0F 00 00  // ...'.......*$...
    A7F0: 01 05 EF 2A 00 F0 00 00 01 05 0A 2A 04 06 08 20  // ...*.......*... 
    A800: 01 05 48 2A 00 F0 3F FF 66 FF 2D 0D 42 CB 05 03  // ..H*..?.f.-.B...
    A810: 04 40 00 00 3E 05 40 00 00 00 00 44 2A 02 01 04  // .@..>.@....D*...
    A820: 00 00 00 00 01 04 01 00 04 00 2D 0D 42 08 00 43  // ..........-.B..C
    A830: 07 02 01 05 17 74 11 01 03 00 03 00 40 26 74 01  // .....t......@&t.
    A840: 05 17 74 15 01 03 00 03 00 41 26 74 4C 05 40 01  // ..t......A&tL.@.
    A850: 00 00 00 44 B0 02 4C 05 41 FF 00 00 00 49 B0 02  // ...D..L.A....I..
    A860: 4C 05 40 F0 00 00 00 44 89 02 01 02 34 2A 40 01  // L.@....D....4*@.
    A870: 02 35 2A 41 01 05 00 00 34 A1 01 00 01 02 01 00  // .5*A....4.......
    A880: 40 01 05 00 00 35 A1 01 00 01 02 01 00 41 43 33  // @....5.......AC3
    A890: 03 01 02 36 2A 40 01 02 37 2A 41 01 05 00 00 36  // ...6*@..7*A....6
    A8A0: A1 01 00 01 02 01 00 40 01 05 00 00 37 A1 01 00  // .......@....7...
    A8B0: 01 02 01 00 41 43 33 03 01 05 17 74 19 01 03 00  // ....AC3....t....
    A8C0: 03 00 40 26 74 01 05 17 74 1D 01 03 00 03 00 41  // ..@&t...t......A
    A8D0: 26 74 4C 05 40 01 00 00 00 44 AC 03 4C 05 41 FF  // &tL.@....D..L.A.
    A8E0: 00 00 00 49 AC 03 4C 05 40 F0 00 00 00 44 0F 03  // ...I..L.@....D..
    A8F0: 01 02 34 2A 40 01 02 35 2A 41 01 05 00 00 34 A1  // ..4*@..5*A....4.
    A900: 01 00 01 02 01 00 40 01 05 00 00 35 A1 01 00 01  // ......@....5....
    A910: 02 01 00 41 43 33 03 01 02 36 2A 40 01 02 37 2A  // ...AC3...6*@..7*
    A920: 41 01 05 00 00 36 A1 01 00 01 02 01 00 40 01 05  // A....6.......@..
    A930: 00 00 37 A1 01 00 01 02 01 00 41 01 00 38 2A 6D  // ..7.......A..8*m
    A940: 70 03 00 40 41 70 09 05 40 01 00 00 00 75 05 40  // p..@Ap..@....u.@
    A950: 00 00 00 00 6F 05 40 00 00 00 00 5C 02 43 2A FE  // ....o.@....\.C*.
    A960: FF FF FF 40 01 05 00 00 43 A1 01 00 5C 02 01 00  // ...@....C...\...
    A970: FE FF FF FF 40 03 05 40 00 01 00 00 03 00 41 41  // ....@..@......AA
    A980: 70 75 05 41 18 00 00 00 33 02 40 41 21 05 40 02  // pu.A....3.@A!.@.
    A990: 00 00 00 6F 05 40 07 00 00 00 5C 02 43 2A 7F 00  // ...o.@....\.C*..
    A9A0: FF FF 40 01 05 00 00 43 A1 01 00 5C 02 01 00 7F  // ..@....C...\....
    A9B0: 00 FF FF 40 66 FF 2D 0D 42 BF 04 03 04 40 00 00  // ...@f.-.B....@..
    A9C0: 3E 05 40 00 00 00 00 44 10 04 3E 05 40 00 00 02  // >.@....D..>.@...
    A9D0: 00 45 DD 03 15 05 40 02 01 02 0C 00 40 03 00 41  // .E....@.....@..A
    A9E0: 0D 00 43 E8 03 01 04 00 00 00 00 03 00 41 01 00  // ..C..........A..
    A9F0: 03 04 40 04 00 01 02 00 00 40 01 02 01 00 41 2D  // ..@......@....A-
    AA00: 05 40 00 77 01 00 01 02 00 00 40 01 02 01 00 41  // .@.w......@....A
    AA10: 2D 0D 42 08 00 43 B3 03 01 05 00 00 80 40 01 00  // -.B..C.......@..
    AA20: 03 00 40 01 00 09 05 40 00 01 00 00 75 05 40 08  // ..@....@....u.@.
    AA30: 00 00 00 03 00 41 48 2A 01 02 57 00 41 09 05 41  // .....AH*..W.A..A
    AA40: 00 01 00 00 01 02 58 00 41 75 05 41 08 00 00 00  // ......X.Au.A....
    AA50: 01 02 59 00 41 2D 02 41 40 01 02 5A 00 41 03 A2  // ..Y.A-.A@..Z.A..
    AA60: 40 41 01 02 5B 00 40 5C 02 47 2A FF FF FE FF 40  // @A..[.@\.G*....@
    AA70: 01 05 00 00 47 A1 01 00 5C 02 01 00 FF FF FE FF  // ....G...\.......
    AA80: 40 03 00 40 48 2A 09 05 40 01 00 00 00 75 05 40  // @..@H*..@....u.@
    AA90: 00 00 00 00 21 05 40 05 00 00 00 2D 05 40 02 00  // ....!.@....-.@..
    AAA0: 00 00 6F 05 40 0A 00 00 00 5C 02 47 2A FF E3 FF  // ..o.@....\.G*...
    AAB0: FF 40 01 05 00 00 47 A1 01 00 5C 02 01 00 FF E3  // .@....G...\.....
    AAC0: FF FF 40 5B 7A 78 02 00 40 01 00 5D 2A 00 00 00  // ..@[zx..@..]*...
    AAD0: 40 05 00 75 2A 00 00 01 40 01 00 5E 2A 00 00 01  // @..u*...@..^*...
    AAE0: 40 05 00 76 2A 00 00 04 40 01 00 61 2A 00 00 04  // @..v*...@..a*...
    AAF0: 40 05 00 79 2A 00 00 05 40 01 00 62 2A 00 00 05  // @..y*...@..b*...
    AB00: 40 05 00 7A 2A 00 00 08 40 01 00 65 2A 00 00 0A  // @..z*...@..e*...
    AB10: 40 01 00 67 2A 00 00 0C 40 01 00 69 2A 00 00 10  // @..g*...@..i*...
    AB20: 40 01 00 6B 2A 00 00 14 40 01 00 6D 2A 00 00 15  // @..k*...@..m*...
    AB30: 40 01 00 6F 2A 00 00 1C 40 01 00 71 2A 00 00 1E  // @..o*...@..q*...
    AB40: 40 01 00 73 2A 00 00 08 40 05 00 7D 2A 00 00 0A  // @..s*...@..}*...
    AB50: 40 05 00 7F 2A 00 00 0C 40 05 00 81 2A 00 00 10  // @...*...@...*...
    AB60: 40 05 00 83 2A 00 00 14 40 05 00 85 2A 00 00 15  // @...*...@...*...
    AB70: 40 05 00 87 2A 00 00 1C 40 05 00 89 2A 00 00 1E  // @...*...@...*...
    AB80: 40 05 00 8B 2A 00 00 32 40 01 00 49 2A 00 00 33  // @...*..2@..I*..3
    AB90: 40 01 00 4A 2A 00 00 34 40 01 00 4B 2A 00 00 35  // @..J*..4@..K*..5
    ABA0: 40 01 00 4C 2A 00 00 36 40 01 00 4D 2A 00 00 3A  // @..L*..6@..M*..:
    ABB0: 40 01 00 50 2A 00 00 3B 40 01 00 51 2A 00 00 38  // @..P*..;@..Q*..8
    ABC0: 40 01 00 4E 2A 00 00 39 40 01 00 4F 2A 00 00 00  // @..N*..9@..O*...
    ABD0: 00 00 00 31 A0 01 00 81 F0 2F FF 34 A0 01 00 81  // ...1...../.4....
    ABE0: F0 2F FF 04 A0 01 00 0A E0 5F FE 05 A0 01 00 6A  // ./......._.....j
    ABF0: E6 5F FE 0D A0 01 00 F0 E0 5F FE 13 A0 01 00 FB  // ._......._......
    AC00: E0 5F FE 02 A0 01 00 A8 EA 5F FE 1B A0 01 00 09  // ._......._......
    AC10: E0 5F FE 03 A0 01 00 A8 EA 5F FE 06 A0 01 00 68  // ._......._.....h
    AC20: E6 5F FE 07 A0 01 00 68 E6 5F FE 08 A0 01 00 68  // ._.....h._.....h
    AC30: E6 5F FE 4A A0 01 00 6B E6 5F FE 4B A0 01 00 6B  // ._.J...k._.K...k
    AC40: E6 5F FE 4C A0 01 00 6B E6 5F FE 4F A0 01 00 CB  // ._.L...k._.O....
    AC50: EC 5F FE 50 A0 01 00 CB EC 5F FE 51 A0 01 00 6B  // ._.P....._.Q...k
    AC60: E6 5F FE 42 A0 01 00 A8 EA 5F FE 44 A0 01 00 0A  // ._.B....._.D....
    AC70: E0 5F 0A 47 A0 01 00 6A E6 5F FE 48 A0 01 00 C8  // ._.G...j._.H....
    AC80: EC 5F FE 49 A0 01 00 C8 EC 5F FE 4E A0 01 00 68  // ._.I....._.N...h
    AC90: E6 5F FE 5B A0 01 00 09 E0 5F FE 43 A0 01 00 A8  // ._.[....._.C....
    ACA0: EA 5F FE 45 A0 01 00 FA E0 5F FE 46 A0 01 00 69  // ._.E....._.F...i
    ACB0: E6 5F FE 83 A0 01 00 70 60 60 60 48 A1 01 00 00  // ._.....p```H....
    ACC0: 00 3E FF F2 A1 01 00 BF 3F 3F 00 F5 A1 01 00 01  // .>......??......
    ACD0: 00 00 00 F6 A1 01 00 02 20 00 80 F7 A1 01 00 01  // ........ .......
    ACE0: 00 00 00 F8 A1 01 00 02 20 00 80 00 A1 01 00 05  // ........ .......
    ACF0: 0A 54 51 01 A1 01 00 D5 55 55 55 02 A1 01 00 05  // .TQ.....UUU.....
    AD00: 9A F0 C7 03 A1 01 00 5F 55 55 55 EF A1 01 00 07  // ......._UUU.....
    AD10: E0 0C E0 EC A1 01 00 20 0F 11 00 F3 A1 01 00 01  // ....... ........
    AD20: 00 00 00 82 A3 01 00 00 00 01 00 80 A3 01 00 C9  // ................
    AD30: 09 00 00 93 A3 01 00 00 08 01 00 00 00 00 00 00  // ................
    AD40: 7B 00 02 01 00 00 37 00 00 3D 65 00 01 44 7A 00  // {.....7..=e..Dz.
    AD50: 56 00 40 03 21 40 00 21 25 40 C4 03 0A 48 40 01  // V.@.!@.!%@...H@.
    AD60: 05 29 3A 00 01 00 00 5C 05 A1 3A CF FF FF FF 20  // .):....\..:.... 
    AD70: 00 00 00 5C 05 B4 3A CF FF FF FF 20 00 00 00 56  // ...\..:.... ...V
    AD80: 00 40 03 21 40 00 21 0D 40 1B 01 03 0A 48 40 5C  // .@.!@.!.@....H@\
    AD90: 05 5F 41 FC FF FF FF 00 00 00 08 56 00 40 03 21  // ._A........V.@.!
    ADA0: 40 00 21 25 40 80 03 0A 48 40 5C 05 01 50 FF FC  // @.!%@...H@\..P..
    ADB0: FF FF 00 03 00 00 3A 00 00 5B 5B 00 17 00 02 01  // ......:..[[.....
    ADC0: 00 00 01 05 60 0F 00 00 00 F4 01 05 62 0F 00 00  // ....`.......b...
    ADD0: 00 00 5B 00 0A 00 02 01 00 00 37 00 00 5B CA 00  // ..[.......7..[..
    ADE0: 02 01 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A  // ....7..f...A..-.
    ADF0: 41 42 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D  // AB-.B..=$...D1.-
    AE00: 0D 42 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56  // .B..>.BAE..U .[V
    AE10: 00 43 03 24 43 05 00 03 04 46 00 00 33 05 46 01  // .C.$C....F..3.F.
    AE20: 00 00 00 01 02 00 00 46 03 00 00 01 00 0D 02 01  // .......F........
    AE30: 00 44 2D 05 46 02 00 00 00 01 02 00 00 46 03 24  // .D-.F........F.$
    AE40: 43 04 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D  // C..K...I......E-
    AE50: 05 46 01 00 00 00 01 02 00 00 46 4A 02 01 00 44  // .F........FJ...D
    AE60: 44 90 00 03 29 43 00 0E A2 00 44 43 98 00 03 29  // D...)C....DC...)
    AE70: 43 00 08 A2 00 45 33 05 46 03 00 00 00 01 02 00  // C....E3.F.......
    AE80: 00 46 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00  // .F.....[....D...
    AE90: 00 00 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43  // ...=...D......EC
    AEA0: C9 00 0D 02 01 00 44 5B 1D 05 01 07 0C 08 37 00  // ......D[......7.
    AEB0: 00 3D 25 01 FF 44 F7 04 3D 25 01 17 46 F3 04 3D  // .=%..D..=%..F..=
    AEC0: 25 01 02 47 F3 04 3D 25 01 14 45 F7 04 3D 05 00  // %..G..=%..E..=..
    AED0: 00 00 00 00 44 C3 02 4B E5 01 30 44 3D 00 08 E5  // ....D..K..0D=...
    AEE0: 01 CF 43 42 00 5D E5 01 CF 10 66 1B 56 00 02 3D  // ..CB.]....f.V..=
    AEF0: A5 01 02 49 54 00 56 08 40 43 66 00 3D A5 01 03  // ...IT.V.@Cf.=...
    AF00: 49 61 00 56 08 40 43 66 00 03 0C 40 18 00 3E 0D  // Ia.V.@Cf...@..>.
    AF10: 40 00 00 44 75 00 03 0A 02 40 43 79 00 0E E5 01  // @..Du....@Cy....
    AF20: 80 4B E5 01 02 49 87 00 02 A9 02 02 55 28 02 66  // .K...I......U(.f
    AF30: FF 2D 0D 42 09 05 03 39 40 01 09 0D 40 30 00 1B  // .-.B...9@...@0..
    AF40: 0D 40 04 21 0D 40 05 00 2D 0A 42 40 03 04 40 00  // .@.!.@..-.B@..@.
    AF50: 00 27 05 40 10 27 00 00 02 A2 03 40 02 E4 03 04  // .'.@.'.....@....
    AF60: 00 56 00 00 56 00 01 02 0D 03 40 01 02 65 01 01  // .V..V.....@..e..
    AF70: 20 05 00 0A 00 00 00 03 02 46 40 3D 05 00 80 8D  //  ........F@=....
    AF80: 5B 00 47 EF 00 3D A5 03 64 45 E8 00 02 65 03 03  // [.G..=..dE...e..
    AF90: 0E E5 01 08 55 28 01 4B E5 01 08 44 FA 00 1B 05  // ....U(.K...D....
    AFA0: 46 01 3E 05 46 A0 2F C5 01 48 0F 01 2C 65 01 01  // F.>.F./..H..,e..
    AFB0: 15 05 46 01 43 FA 00 14 2D 01 05 3D A5 01 00 44  // ..F.C...-..=...D
    AFC0: 30 01 4B E5 01 80 49 30 01 3D A5 03 64 45 30 01  // 0.K...I0.=..dE0.
    AFD0: 0E 25 03 01 15 05 46 01 03 05 01 00 00 01 00 4B  // .%....F........K
    AFE0: E5 01 80 44 92 01 27 04 46 00 00 3E 05 41 00 00  // ...D..'.F..>.A..
    AFF0: 00 00 44 A4 01 03 04 40 00 00 03 02 00 41 27 02  // ..D....@.....A'.
    B000: 40 41 03 02 40 00 3E 05 41 00 00 00 00 49 52 01  // @A..@.>.A....IR.
    B010: 7C 05 00 00 00 01 00 7E 04 40 00 00 7C 04 40 00  // |......~.@..|.@.
    B020: 00 7E 02 40 00 03 02 01 40 3E 05 01 33 F3 00 00  // .~.@....@>..3...
    B030: 48 92 01 03 05 01 00 00 01 00 27 04 46 00 00 7C  // H.........'.F..|
    B040: 02 01 41 7E 04 40 00 00 03 0A 00 40 27 04 46 00  // ..A~.@.....@'.F.
    B050: 00 03 8A 00 40 56 18 01 4B E5 01 80 49 2F 02 7C  // ....@V..K...I/.|
    B060: 02 02 00 7E 05 40 A0 86 01 00 03 01 41 03 09 05  // ...~.@......A...
    B070: 41 03 00 00 00 6F 02 40 41 7C 05 40 4E 0C 00 00  // A....o.@A|.@N...
    B080: 7E 04 40 00 00 27 05 40 05 00 00 00 3E 05 40 00  // ~.@..'.@....>.@.
    B090: 00 00 00 49 F2 01 03 25 40 01 03 8A 01 40 21 05  // ...I...%@....@!.
    B0A0: 40 05 00 00 00 7C 04 40 00 00 7E 05 40 4E 0C 00  // @....|.@..~.@N..
    B0B0: 00 03 01 41 03 09 05 41 03 00 00 00 75 02 40 41  // ...A...A....u.@A
    B0C0: 3D A5 01 00 44 27 02 1B 05 40 01 2D 02 00 40 03  // =...D'...@.-..@.
    B0D0: 02 02 00 33 02 02 40 66 FF 2D 0D 42 01 05 56 00  // ...3..@f.-.B..V.
    B0E0: 40 03 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42  // @.!@.3%@..%@.-.B
    B0F0: 40 03 0C 48 00 00 4A 65 0A 5E 10 44 5D 03 03 39  // @..H..Je.^.D]..9
    B100: 41 01 09 0D 41 30 00 1B 0D 41 04 3C 22 86 5E 41  // A...A0...A.<".^A
    B110: 49 A2 02 3C 21 4B 5E 03 49 A2 02 3C 29 4D 5E 03  // I..<!K^.I..<)M^.
    B120: 49 A2 02 03 20 41 87 5E 09 25 41 E0 3E 29 41 01  // I... A.^.%A.>)A.
    B130: 49 A2 02 4B E5 01 40 49 55 03 3C 02 48 5E 00 49  // I..K..@IU.<.H^.I
    B140: A2 02 3C 0A 4A 5E 01 44 A6 02 0E E5 01 01 3A 00  // ..<.J^.D......:.
    B150: 00 4B E5 01 01 44 CB 04 4B E5 01 02 49 C3 02 3D  // .K...D..K...I..=
    B160: 25 02 03 46 C3 02 55 28 02 52 23 56 00 40 03 21  // %..F..U(.R#V.@.!
    B170: 40 01 33 25 40 14 03 0A 48 40 07 25 60 01 FE 66  // @.3%@...H@.%`..f
    B180: FF 2D 0D 42 01 05 56 00 40 03 21 40 01 33 25 40  // .-.B..V.@.!@.3%@
    B190: 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 07 65  // ..%@.-.B@..H...e
    B1A0: 4B 5E FE 54 00 49 5E 54 00 4A 5E 07 65 0A 5E EF  // K^.T.I^T.J^.e.^.
    B1B0: 4A 65 0A 5E 20 49 08 03 07 65 1A 5E EF 4A 65 1A  // Je.^ I...e.^.Je.
    B1C0: 5E 20 49 15 03 3D 05 00 00 00 00 00 49 5D 03 4A  // ^ I..=......I].J
    B1D0: A5 E9 5D 80 44 52 03 56 00 41 5C 25 08 5E F8 06  // ..].DR.V.A\%.^..
    B1E0: 51 02 4A 65 08 5E 01 44 3A 03 2D A5 41 01 2D 0D  // Q.Je.^.D:.-.A.-.
    B1F0: 48 10 00 3E A5 41 04 45 32 03 43 F3 04 01 02 48  // H..>.A.E2.C....H
    B200: 5E 00 43 87 04 01 05 03 5E 80 88 01 00 3D A5 01  // ^.C.....^....=..
    B210: 00 49 7E 03 3D 05 00 E0 3B 66 00 45 7E 03 07 25  // .I~.=...;f.E~..%
    B220: 04 5E FE 43 9E 03 0D 25 04 5E 01 3D A5 01 02 49  // .^.C...%.^.=...I
    B230: 9E 03 4B E5 01 08 44 9E 03 01 05 DB 5E 80 88 01  // ..K...D.....^...
    B240: 00 0D 25 DC 5E 01 0D 25 87 5E 01 03 39 40 01 09  // ..%.^..%.^..9@..
    B250: 0D 40 30 00 1B 0D 40 04 01 22 86 5E 40 0D 65 87  // .@0...@..".^@.e.
    B260: 5E 80 5C 79 87 5E FB 03 56 00 40 03 31 40 03 03  // ^.\y.^..V.@.1@..
    B270: 01 41 03 09 05 41 03 00 00 00 75 02 40 41 03 05  // .A...A....u.@A..
    B280: 41 A1 83 00 00 3E 25 40 64 48 F9 03 03 05 41 24  // A....>%@dH....A$
    B290: 83 00 00 3E 25 40 30 48 F9 03 03 05 41 A3 76 00  // ...>%@0H....A.v.
    B2A0: 00 01 0A 4C 5E 41 01 E2 4E 5E 40 0D 25 4E 5E 02  // ...L^A..N^@.%N^.
    B2B0: 01 21 4B 5E 03 01 A5 4B 5E E8 01 02 48 5E 00 54  // .!K^...K^...H^.T
    B2C0: 00 49 5E 01 02 4A 5E 01 4B E5 01 08 44 2F 04 07  // .I^..J^.K...D/..
    B2D0: 65 87 5E FE 43 34 04 0D 65 87 5E 01 5C 29 87 5E  // e.^.C4..e.^.\).^
    B2E0: 1F 01 01 8D 53 5E 20 03 01 29 4D 5E 03 07 65 87  // ....S^ ..)M^..e.
    B2F0: 5E 7F 5C 65 0A 5E E3 04 4A 65 0A 5E 20 49 50 04  // ^.\e.^..Je.^ IP.
    B300: 0D 65 0A 5E 10 4A 65 0A 5E 20 44 5D 04 4B E5 01  // .e.^.Je.^ D].K..
    B310: 02 49 87 04 5C 65 1A 5E E3 04 4A 65 1A 5E 20 49  // .I..\e.^..Je.^ I
    B320: 72 04 0D 65 1A 5E 10 4A 65 1A 5E 20 44 7F 04 4B  // r..e.^.Je.^ D..K
    B330: E5 01 80 49 9A 04 01 02 49 5E 02 0D 65 4B 5E 01  // ...I....I^..eK^.
    B340: 51 0A 0D 65 87 5E 40 51 0A 4A 65 87 5E 20 44 A1  // Q..e.^@Q.Je.^ D.
    B350: 04 07 65 87 5E BF 56 00 40 03 21 40 01 33 25 40  // ..e.^.V.@.!@.3%@
    B360: 14 03 0A 48 40 0D 25 60 01 01 51 0A 4B E5 01 02  // ...H@.%`..Q.K...
    B370: 49 F3 04 3A 00 00 3D 25 02 03 46 F3 04 02 25 03  // I..:..=%..F...%.
    B380: 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08 A5 03  // ......a.........
    B390: 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00 5B 02  // .........R.:..[.
    B3A0: 25 01 0B 43 CB 04 7A 1C 00 00 00 D8 00 B0 01 88  // %..C..z.........
    B3B0: 02 40 42 0F 00 04 00 53 07 00 04 00 53 07 00 00  // .@B....S....S...
    B3C0: 40 42 0F 00 04 00 D4 02 02 01 00 04 37 00 00 42  // @B..........7..B
    B3D0: 29 00 63 02 49 02 63 07 21 00 63 08 1B 00 5A 5A  // ).c.I.c.!.c...ZZ
    B3E0: 5B 0D 25 C8 39 02 5B 01 05 3B 01 30 02 12 00 01  // [.%.9.[..;.0....
    B3F0: 05 30 01 80 BB 10 00 01 05 31 01 3C 00 01 08 01  // .0.......1.<....
    B400: 8D 83 38 30 00 01 25 82 38 01 5C 65 D4 00 FC 02  // ..80..%.8.\e....
    B410: 5C 25 50 39 0F C0 01 25 32 01 00 01 05 4C 35 00  // \%P9...%2....L5.
    B420: 00 00 00 01 05 4A 35 00 00 00 00 01 05 50 35 00  // .....J5......P5.
    B430: 00 00 00 01 05 4E 35 00 00 00 00 01 05 54 35 00  // .....N5......T5.
    B440: 00 00 00 01 05 52 35 00 00 00 00 01 05 58 35 00  // .....R5......X5.
    B450: 00 00 00 01 05 56 35 00 00 00 00 01 05 6D 35 01  // .....V5......m5.
    B460: 00 00 00 01 05 DF 39 01 10 00 00 01 05 24 3A 00  // ......9......$:.
    B470: 1B 5D 05 01 05 76 3A 35 00 13 00 01 05 77 3A 36  // .]...v:5.....w:6
    B480: 11 00 00 01 05 78 3A 41 E6 01 00 01 05 79 3A 00  // .....x:A.....y:.
    B490: 00 00 00 01 05 7A 3A 00 00 08 2C 01 05 7C 3A 02  // .....z:...,..|:.
    B4A0: 04 00 00 01 05 8C 3A 5E 4E 01 00 01 05 7A 3A 00  // ......:^N....z:.
    B4B0: 00 08 2C 01 05 7D 3A A4 01 00 00 01 05 7F 3A A4  // ..,..}:.......:.
    B4C0: 01 00 00 01 05 81 3A 00 02 00 00 01 05 82 3A 49  // ......:.......:I
    B4D0: D2 00 00 01 05 85 3A 20 00 00 00 01 05 86 3A 24  // ......: ......:$
    B4E0: 0D 00 00 01 05 89 3A 00 00 00 00 01 05 8A 3A 00  // ......:.......:.
    B4F0: 00 00 00 01 05 5C 3A 00 00 92 06 01 05 5D 3A AA  // .....\:......]:.
    B500: 08 00 E0 01 05 C9 39 FE 01 00 00 01 05 CA 39 1E  // ......9.......9.
    B510: 05 00 00 01 05 CB 39 BA 04 00 00 01 05 CC 39 24  // ......9.......9$
    B520: 04 00 00 01 05 CD 39 A2 08 00 00 01 05 CE 39 FE  // ......9.......9.
    B530: 01 00 00 01 05 CF 39 1E 05 00 00 01 05 D0 39 BA  // ......9.......9.
    B540: 04 00 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2  // ......9$......9.
    B550: 08 00 00 01 05 D3 39 FE 01 00 00 01 05 D4 39 1E  // ......9.......9.
    B560: 05 00 00 01 05 D5 39 BA 04 00 00 01 05 D6 39 24  // ......9.......9$
    B570: 04 00 00 01 05 D7 39 A2 08 00 00 01 05 D8 39 FE  // ......9.......9.
    B580: 01 00 00 01 05 D9 39 1E 05 00 00 01 05 DA 39 BA  // ......9.......9.
    B590: 04 00 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2  // ......9$......9.
    B5A0: 08 00 00 0D 25 C8 39 02 0D 25 52 41 01 01 25 F2  // ....%.9..%RA..%.
    B5B0: 4A 00 01 25 F0 4A 00 01 25 F1 4A 00 01 25 EF 4B  // J..%.J..%.J..%.K
    B5C0: 00 55 00 01 52 17 2C 25 01 01 3D 25 01 01 45 FE  // .U..R.,%..=%..E.
    B5D0: 01 55 00 01 52 4E 01 05 7C 53 00 00 00 03 02 25  // .U..RN..|S.....%
    B5E0: 01 07 52 33 02 05 01 00 07 00 00 52 4D 2C 25 01  // ..R3.......RM,%.
    B5F0: 01 3D 25 01 04 45 25 02 66 16 03 0C 41 04 00 4C  // .=%..E%.f...A..L
    B600: 0D 41 02 00 44 46 02 0D A5 4C 00 02 52 4B 5B 02  // .A..DF...L..RK[.
    B610: 05 01 01 00 00 00 52 06 01 05 00 00 17 A8 01 00  // ......R.........
    B620: 03 00 40 01 00 15 05 40 04 01 02 59 39 40 2D 01  // ..@....@...Y9@-.
    B630: 40 01 01 02 5A 39 40 01 05 53 39 00 F4 00 00 03  // @...Z9@..S9.....
    B640: 01 40 01 1B 05 40 04 2D 05 40 FF F3 00 00 01 02  // .@...@.-.@......
    B650: 54 39 40 01 05 00 00 17 A8 01 00 01 00 55 39 01  // T9@..........U9.
    B660: 00 01 05 64 3A 00 00 40 0F 54 00 65 3A 03 01 40  // ...d:..@.T.e:..@
    B670: 01 15 05 40 08 33 05 40 01 00 00 00 2D 05 40 00  // ...@.3.@....-.@.
    B680: 00 40 0F 01 02 66 3A 40 54 00 67 3A 01 25 C9 00  // .@...f:@T.g:.%..
    B690: F4 01 05 C4 00 00 00 00 00 5B 8C 00 02 01 00 04  // .........[......
    B6A0: 66 FF 56 08 47 2D 0D 42 68 00 03 21 47 00 09 25  // f.V.G-.Bh..!G..%
    B6B0: 47 F0 42 22 47 63 00 4F 00 63 60 4A 00 63 20 42  // G.B"Gc.O.c`J.c B
    B6C0: 00 63 90 3A 00 63 A0 32 00 5A 5A 5B 2D 0D 42 1E  // .c.:.c.2.ZZ[-.B.
    B6D0: 00 43 4F 00 2D 0D 42 18 00 43 4F 00 2D 0D 42 10  // .CO.-.B..CO.-.B.
    B6E0: 00 43 4F 00 2D 0D 42 08 00 03 21 47 00 09 25 47  // .CO.-.B...!G..%G
    B6F0: 07 2D 0A 42 47 2D 0A 42 47 03 0C 48 00 00 5B 7A  // .-.BG-.BG..H..[z
    B700: 8C 00 00 00 80 00 00 01 80 01 00 00 00 01 00 02  // ................
    B710: 00 03 00 00 D8 00 B0 01 88 02 00 00 C4 00 88 01  // ................
    B720: 00 00 1B 01 36 02 72 00 01 01 00 00 37 00 00 56  // ....6.r.....7..V
    B730: 00 40 03 21 40 00 21 0D 40 1B 01 03 02 48 40 01  // .@.!@.!.@....H@.
    B740: 25 24 41 01 3D 65 00 02 49 4C 00 01 0D 35 41 01  // %$A.=e..IL...5A.
    B750: 00 54 00 33 41 0D 25 26 41 01 01 05 25 41 11 00  // .T.3A.%&A...%A..
    B760: 00 00 07 A5 24 41 FE 01 05 27 41 11 01 11 01 43  // ....$A...'A....C
    B770: 6E 00 01 05 29 41 00 00 00 01 01 05 2D 41 00 00  // n...)A......-A..
    B780: 00 01 01 05 27 41 11 01 11 01 54 00 25 41 01 0D  // ....'A....T.%A..
    B790: 35 41 00 01 3A 00 00 5B 3F 00 01 01 00 00 37 00  // 5A..:..[?.....7.
    B7A0: 00 52 14 54 30 02 50 54 00 21 50 54 00 22 50 3C  // .R.T0.PT.!PT."P<
    B7B0: 69 02 50 00 44 3B 00 01 69 02 50 00 3D 65 00 00  // i.P.D;..i.P.=e..
    B7C0: 44 3B 00 4A A5 01 50 01 44 3B 00 4A 25 02 50 01  // D;.J..P.D;.J%.P.
    B7D0: 44 33 00 3A 00 00 5B 00 43 00 01 01 00 00 37 00  // D3.:..[.C.....7.
    B7E0: 00 52 14 3D 65 00 01 44 3A 00 0D 65 01 50 03 54  // .R.=e..D:..e.P.T
    B7F0: 20 01 50 4A A5 01 50 01 49 1B 00 54 20 0F 50 56  //  .PJ..P.I..T .PV
    B800: 00 40 20 25 00 01 03 0A 48 40 07 E5 E8 39 7F 43  // .@ %....H@...9.C
    B810: 3F 00 0D 25 01 50 01 3A 00 00 5B 00 CF 00 02 01  // ?..%.P.:..[.....
    B820: 00 00 37 00 00 42 29 00 63 00 1B 00 63 01 1B 00  // ..7..B).c...c...
    B830: 63 02 AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D 42 C3  // c...ZZ[f.V.@-.B.
    B840: 00 03 21 40 00 15 25 40 01 2D 0A 42 40 03 0C 48  // ..!@..%@.-.B@..H
    B850: 00 00 3D 65 00 00 44 72 00 0D 25 CC 00 01 3A 00  // ..=e..Dr..%...:.
    B860: 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00 00 10  // .......Q........
    B870: 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02 00 54  // .......P.......T
    B880: 20 CA 00 01 05 C2 00 00 01 00 00 43 1A 00 07 25  //  ..........C...%
    B890: CC 00 FE 3A 00 00 0D 25 CA 00 01 01 25 C2 00 01  // ...:...%....%...
    B8A0: 07 A5 C1 00 FE 0D 25 D5 00 01 0D 65 D5 00 01 4A  // ......%....e...J
    B8B0: 65 D5 00 01 44 93 00 54 08 D5 00 54 00 C6 00 54  // e...D..T...T...T
    B8C0: 00 C8 00 43 1A 00 5C 65 D4 00 FC 02 01 A1 C0 00  // ...C..\e........
    B8D0: 00 2B A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C 00 00  // .+.........[z...
    B8E0: 00 02 00 2C 00 2D 00 2E 00 2F 00 00 DA 01 03 01  // ...,.-.../......
    B8F0: 00 00 37 00 00 03 05 46 10 27 00 00 3D A5 00 02  // ..7....F.'..=...
    B900: 49 1C 00 02 02 00 46 5B 03 05 40 16 6C 01 00 03  // I.....F[..@.l...
    B910: 05 41 00 6C 01 00 3D 25 00 00 44 54 00 03 05 40  // .A.l..=%..DT...@
    B920: 16 6E 01 00 03 05 41 00 6E 01 00 3D 25 00 01 44  // .n....A.n..=%..D
    B930: 54 00 03 05 40 0C 7E 01 00 03 05 41 00 7E 01 00  // T...@.~....A.~..
    B940: 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00 09  // ....@..@....@...
    B950: 8D 40 FF 01 3E 8D 40 00 00 49 AA 00 01 02 00 00  // .@..>.@..I......
    B960: 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D 40  // A..@....@....>.@
    B970: 00 00 49 93 00 03 05 46 00 71 02 00 43 CD 00 21  // ..I....F.q..C..!
    B980: 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00 1B  // .@F..A....A.....
    B990: 05 41 09 43 C5 00 7C 02 40 46 7E 05 40 00 00 01  // .A.C..|.@F~.@...
    B9A0: 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05 41  // ...A....A......A
    B9B0: 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 D9 00  // .u.@A..F@=...I..
    B9C0: 02 02 00 46 5B 3D E5 00 00 49 3B 01 56 00 40 03  // ...F[=...I;.V.@.
    B9D0: 29 40 00 21 0D 40 0A 00 03 05 41 4B 6C 01 00 3D  // )@.!.@....AKl..=
    B9E0: 25 00 00 44 0F 01 03 05 41 4B 6E 01 00 3D 25 00  // %..D....AKn..=%.
    B9F0: 01 44 0F 01 03 05 41 41 7E 01 00 2D 02 40 41 01  // .D....AA~..-.@A.
    BA00: 02 00 00 40 03 00 41 01 00 09 05 41 00 00 F0 07  // ...@..A....A....
    BA10: 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 3B 01 02  // ..A....A=...I;..
    BA20: 05 00 10 27 00 00 5B 56 00 40 03 39 40 00 55 38  // ...'..[V.@.9@.U8
    BA30: 00 66 FF 2D 0D 42 B2 01 3E 0C 40 02 00 47 5C 01  // .f.-.B..>.@..G\.
    BA40: 2D 0D 42 08 00 43 4C 01 33 0C 40 04 00 21 0C 40  // -.B..CL.3.@..!.@
    BA50: 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00 02 0A  // ..-.@....B.U....
    BA60: 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02 02 00  // .@|.F@B..~.@....
    BA70: 40 3E 25 42 00 49 AE 01 56 00 46 66 08 03 0C 46  // @>%B.I..V.Ff...F
    BA80: 0C 00 3E 0D 46 00 00 44 AE 01 7C 02 40 46 7E 05  // ..>.F..D..|.@F~.
    BA90: 40 14 00 00 00 32 02 00 40 5B 5B 7A 28 00 FF FF  // @....2..@[[z(...
    BAA0: 07 00 00 00 00 00 C8 00 3F 00 08 00 19 00 40 06  // ........?.....@.
    BAB0: 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00 00 32  // _.@.2...~.`.d..2
    BAC0: 7F 00 7F 00 64 00 C6 00 02 03 04 00 37 00 00 56  // ....d.......7..V
    BAD0: 00 46 56 00 00 03 21 00 00 55 20 00 3D 65 00 03  // .FV...!..U .=e..
    BAE0: 44 2C 00 3D 65 00 0B 46 BB 00 02 29 00 00 32 25  // D,.=e..F...)..2%
    BAF0: 00 08 0E 25 00 60 52 14 5C 22 28 55 F8 00 02 22  // ...%.`R.\"(U..."
    BB00: 00 00 52 14 03 08 41 3D 41 09 0D 41 03 00 66 FF  // ..R...A=A..A..f.
    BB10: 2D 0D 42 C2 00 2D 0A 42 41 03 24 00 00 00 3D E2  // -.B..-.BA.$...=.
    BB20: 00 00 48 A7 00 3E 25 00 04 44 76 00 03 22 46 00  // ..H..>%..Dv.."F.
    BB30: 33 25 46 01 15 25 46 04 0F 25 46 01 33 39 00 00  // 3%F..%F..%F.39..
    BB40: 3E 25 00 01 44 93 00 3E 25 00 02 44 8C 00 03 25  // >%..D..>%..D...%
    BB50: 46 21 03 65 00 2F 43 97 00 03 65 00 13 03 79 46  // F!.e./C...e...yF
    BB60: 00 33 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01  // .3eF..-F..eF.R..
    BB70: 02 01 4D 46 01 52 00 4D 00 54 00 08 4D 54 00 FF  // ..MF.R.M.T..MT..
    BB80: 4C 3A 00 00 5B 7A 04 00 03 02 01 04 CB 00 01 01  // L:..[z..........
    BB90: 00 00 37 00 00 3D 65 00 01 44 61 00 56 00 40 20  // ..7..=e..Da.V.@ 
    BBA0: 25 00 10 03 0A 48 40 07 25 8D 4F FD 4A 25 8D 4F  // %....H@.%.O.J%.O
    BBB0: 04 49 20 00 52 14 07 25 48 50 FE 4A 65 48 50 01  // .I .R..%HP.JeHP.
    BBC0: 49 2F 00 03 21 40 00 21 0D 40 C4 00 03 0A 48 40  // I/..!@.!.@....H@
    BBD0: 07 25 27 3A FE 56 00 40 03 21 40 00 21 0D 40 1B  // .%':.V.@.!@.!.@.
    BBE0: 01 03 0A 48 40 07 25 FD 40 EF 43 C7 00 56 00 40  // ...H@.%.@.C..V.@
    BBF0: 20 25 00 10 03 0A 48 40 0D 25 8D 4F 02 4A 25 8D  //  %....H@.%.O.J%.
    BC00: 4F 04 44 71 00 52 14 0D 25 48 50 01 4A 65 48 50  // O.Dq.R..%HP.JeHP
    BC10: 01 44 80 00 56 00 40 03 21 40 00 21 0D 40 C4 00  // .D..V.@.!@.!.@..
    BC20: 03 0A 48 40 0D 25 27 3A 01 56 00 40 03 21 40 00  // ..H@.%':.V.@.!@.
    BC30: 21 0D 40 1B 01 03 0A 48 40 0D 25 FD 40 10 56 00  // !.@....H@.%.@.V.
    BC40: 40 03 21 40 00 21 0D 40 5A 00 03 0A 48 40 0D 25  // @.!@.!.@Z...H@.%
    BC50: 4C 4D 01 3A 00 00 5B 00 51 01 01 04 00 08 37 00  // LM.:..[.Q.....7.
    BC60: 00 3D 65 02 01 49 1A 01 4B A5 02 03 49 2A 00 52  // .=e..I..K...I*.R
    BC70: 25 02 05 00 00 00 00 00 02 05 01 00 05 02 00 43  // %..............C
    BC80: 2F 00 55 28 02 52 25 0E 25 02 90 52 14 08 25 02  // /.U(.R%.%..R..%.
    BC90: 07 0D 05 27 3A 11 11 01 00 5C 25 26 3A 0B 01 03  // ...':....\%&:...
    BCA0: 21 41 02 15 25 41 04 0D 22 26 3A 41 0D 65 29 3A  // !A..%A.."&:A.e):
    BCB0: 01 5C 25 4E 3A FD 01 01 0D 3E 3A F4 00 01 0D 42  // .\%N:....>:....B
    BCC0: 3A F4 00 4B A5 02 03 49 85 00 01 05 3D 3A 00 00  // :..K...I....=:..
    BCD0: 10 00 01 05 41 3A 00 00 50 00 43 95 00 01 05 3D  // ....A:..P.C....=
    BCE0: 3A 00 00 00 00 01 05 41 3A 00 00 00 00 01 0D 1B  // :......A:.......
    BCF0: 3A 80 00 01 0D 24 3A 00 03 01 0D 7C 3A 01 03 01  // :....$:....|:...
    BD00: 05 7A 3A 00 00 08 28 01 05 7B 3A 00 00 08 00 01  // .z:...(..{:.....
    BD10: E5 5E 3A 08 01 E5 5D 3A E0 54 00 1C 3A 01 19 1D  // .^:...]:.T..:...
    BD20: 3A 00 01 89 1D 3A 00 01 19 21 3A 00 01 89 21 3A  // :....:...!:...!:
    BD30: 00 54 08 19 3A 66 FF 2D 0D 42 42 01 03 0C 40 00  // .T..:f.-.BB...@.
    BD40: 00 3E 0D 40 FF FF 44 01 01 3D 8C 01 00 00 44 01  // .>.@..D..=....D.
    BD50: 01 2D 0D 42 03 00 43 E4 00 01 24 19 3A 02 00 01  // .-.B..C...$.:...
    BD60: 09 3B 3A 01 07 25 26 3A FE 07 25 4E 3A FE 3A 00  // .;:..%&:..%N:.:.
    BD70: 00 5B 0E 25 02 90 52 14 3D 65 02 00 49 2F 01 0D  // .[.%..R.=e..I/..
    BD80: 25 26 3A 01 43 3B 01 3D 65 02 10 44 3B 01 01 09  // %&:.C;.=e..D;...
    BD90: 3B 3A 01 3A 00 00 5B 7A 0F 00 01 00 01 01 01 03  // ;:.:..[z........
    BDA0: 01 05 02 02 00 08 FF FF 08 00 42 00 01 01 00 00  // ..........B.....
    BDB0: 37 00 00 52 14 3D 65 00 01 44 21 00 54 20 4D 50  // 7..R.=e..D!.T MP
    BDC0: 4A 65 4D 50 01 49 16 00 43 3E 00 5C 4D 1B 50 FE  // JeMP.I..C>.\M.P.
    BDD0: FF 00 01 4A A5 01 50 01 44 3E 00 0D 25 4D 50 01  // ...J..P.D>..%MP.
    BDE0: 4A 65 4D 50 01 44 36 00 3A 00 00 5B 17 00 01 03  // JeMP.D6.:..[....
    BDF0: 00 00 37 00 00 0E 25 00 A0 52 14 54 00 5F 41 3A  // ..7...%..R.T._A:
    BE00: 00 00 5B 00 C6 01 01 01 00 18 56 00 40 03 21 40  // ..[.......V.@.!@
    BE10: 05 21 0D 40 80 00 03 0A 48 40 37 00 00 01 0D 49  // .!.@....H@7....I
    BE20: 50 0D 00 3D 8D 01 0D 00 46 2C 00 01 19 49 50 01  // P..=....F,...IP.
    BE30: 01 8D 4A 50 40 01 01 0D 4B 50 2C 01 03 09 41 00  // ..JP@...KP,...A.
    BE40: 2D 19 41 00 03 8A 41 41 2D 8D 41 01 00 1B 1D 41  // -.A...AA-.A....A
    BE50: 02 01 1A 4A 50 41 33 0D 41 01 00 01 0A EA 4F 41  // ...JPA3.A.....OA
    BE60: 54 08 EC 4F 01 99 EC 4F 02 03 19 41 00 33 09 41  // T..O...O...A.3.A
    BE70: 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A EB 4F  // .V.A..A.3.AA...O
    BE80: 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D 09 41  // A..A.3.A.-.AA-.A
    BE90: 00 4B 25 04 10 44 98 00 2D 09 41 00 01 0A EB 4F  // .K%..D..-.A....O
    BEA0: 41 03 21 41 04 09 25 41 02 1B 25 41 01 01 22 ED  // A.!A..%A..%A..".
    BEB0: 4F 41 03 09 41 01 2D 19 41 01 33 0D 41 01 00 01  // OA..A.-.A.3.A...
    BEC0: 0A EF 4F 41 54 08 F7 4F 01 99 F7 4F 03 03 19 41  // ..OAT..O...O...A
    BED0: 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41 41  // .3.A.V.A..A.3.AA
    BEE0: 01 8A F6 4F 41 03 19 41 01 33 09 41 03 2D 1A 41  // ...OA..A.3.A.-.A
    BEF0: 41 2D 09 41 01 4B 25 04 20 44 FC 00 2D 09 41 01  // A-.A.K%. D..-.A.
    BF00: 01 0A F6 4F 41 03 21 41 04 09 25 41 04 1B 25 41  // ...OA.!A..%A..%A
    BF10: 02 01 22 F8 4F 41 3D 65 05 00 44 21 01 07 65 01  // ..".OA=e..D!..e.
    BF20: 50 EF 43 26 01 0D 65 01 50 10 03 00 46 EB 4F 02  // P.C&..e.P...F.O.
    BF30: 00 02 F6 4F 56 00 40 03 21 40 05 21 0D 40 01 00  // ...OV.@.!@.!.@..
    BF40: 03 0A 48 40 56 00 40 03 09 40 02 3D 65 05 00 49  // ..H@V.@..@.=e..I
    BF50: 53 01 33 0D 40 02 00 15 05 40 0F 56 00 41 3D 8D  // S.3.@....@.V.A=.
    BF60: 02 0D 00 48 6B 01 03 0D 41 0D 00 33 19 41 02 0F  // ...Hk...A..3.A..
    BF70: 02 40 41 0F E5 40 80 01 02 E8 39 40 56 00 40 03  // .@A..@....9@V.@.
    BF80: 21 40 05 21 0D 40 1B 01 03 0A 48 40 01 09 3B 41  // !@.!.@....H@..;A
    BF90: 00 01 89 3B 41 01 01 09 3C 41 00 01 89 3C 41 01  // ...;A...<A...<A.
    BFA0: 01 02 38 41 46 01 01 39 41 02 54 00 36 41 01 31  // ..8AF..9A.T.6A.1
    BFB0: 36 41 04 01 B1 36 41 04 54 00 37 41 01 39 37 41  // 6A...6A.T.7A.97A
    BFC0: 04 01 B9 37 41 04 3A 00 00 5B 0A 00 02 03 08 00  // ...7A.:..[......
    BFD0: 37 00 00 5B 21 02 01 01 00 00 37 00 00 0D 25 78  // 7..[!.....7...%x
    BFE0: 53 08 07 25 9E 53 FE 56 00 41 03 39 41 01 09 25  // S..%.S.V.A.9A..%
    BFF0: 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15 25 41  // A...@Bf.-.B...%A
    C000: 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07  // .-.BA..A......A.
    C010: A5 01 00 FE 54 08 01 00 01 0C 7F 53 02 00 03 0A  // ....T......S....
    C020: 42 40 03 05 40 C0 5D 00 00 56 00 41 03 21 41 00  // B@..@.]..V.A.!A.
    C030: 27 02 40 41 01 8A 7B 53 40 01 25 7B 53 02 0D 25  // '.@A..{S@.%{S..%
    C040: 79 53 02 01 A9 7D 53 01 4B 25 01 01 49 7F 00 54  // yS...}S.K%..I..T
    C050: 30 7D 53 01 0D 7D 53 00 31 2B A5 7D 53 01 4B 25  // 0}S..}S.1+.}S.K%
    C060: 01 02 44 96 00 2B A5 7D 53 01 56 00 41 03 71 41  // ..D..+.}S.V.A.qA
    C070: 01 0F E5 41 80 01 02 7E 53 41 03 69 41 00 2D A5  // ...A...~SA.iA.-.
    C080: 41 01 01 02 7E 53 41 4B 25 01 02 44 C6 00 56 28  // A...~SAK%..D..V(
    C090: 41 2D A5 41 01 01 02 7E 53 41 4B 25 01 01 44 E7  // A-.A...~SAK%..D.
    C0A0: 00 03 71 41 00 2D A5 41 01 01 02 7E 53 41 03 79  // ..qA.-.A...~SA.y
    C0B0: 41 00 2D A5 41 01 01 02 7E 53 41 0D 25 78 53 01  // A.-.A...~SA.%xS.
    C0C0: 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40 01 03  // ..A.C...)@..e@..
    C0D0: 99 40 00 56 00 41 03 71 41 01 0F 65 41 01 0F E5  // .@.V.A.qA..eA...
    C0E0: 41 80 01 02 7E 53 41 01 A5 7D 53 04 3D 65 01 04  // A...~SA..}S.=e..
    C0F0: 47 28 01 01 0D 7D 53 01 13 43 57 01 01 A2 7D 53  // G(...}S..CW...}S
    C100: 40 01 0D 7D 53 01 31 43 57 01 07 65 7D 53 EF 01  // @..}S.1CW..e}S..
    C110: A5 7D 53 03 3E 25 40 04 46 57 01 01 A2 7D 53 40  // .}S.>%@.FW...}S@
    C120: 31 A5 7D 53 01 5C 65 7D 53 FD 20 0D 25 78 53 01  // 1.}S.\e}S. .%xS.
    C130: 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80 03 AA  // ..A.C....A......
    C140: 41 40 01 02 7E 53 41 3D 65 01 01 49 82 01 02 A8  // A@..~SA=e..I....
    C150: 00 7E 53 43 F9 01 56 00 41 03 1A 41 40 3B 02 41  // .~SC..V.A..A@;.A
    C160: 03 28 41 7E 53 03 68 41 7E 53 03 A8 41 7E 53 03  // .(A~S.hA~S..A~S.
    C170: E8 41 7E 53 04 02 00 41 56 28 40 2D 8D 40 04 00  // .A~S...AV(@-.@..
    C180: 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01 02 65  // >%@.G..3%@.C6..e
    C190: 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D 41 00  // ....Ad.3.A..>.A.
    C1A0: 00 44 F9 01 51 64 4A 25 7A 53 10 44 C3 01 4A 65  // .D..QdJ%zS.D..Je
    C1B0: 7A 53 06 49 F9 01 02 65 00 01 0D 25 79 53 02 3E  // zS.I...e...%yS.>
    C1C0: A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D 25 79  // .A.Dc.K%..D...%y
    C1D0: 53 02 01 25 78 53 02 51 01 54 00 78 53 54 00 7F  // S..%xS.Q.T.xST..
    C1E0: 53 5B 7A 10 00 90 5D 01 00 94 5D 03 02 98 5D 05  // S[z...]...]...].
    C1F0: 04 9C 5D 42 41 00 46 00 02 02 00 04 37 00 00 55  // ..]BA.F.....7..U
    C200: 30 00 32 25 00 01 20 25 00 08 56 08 48 03 22 48  // 0.2%.. %..V.H."H
    C210: 40 0D A5 D5 53 01 02 A0 00 D4 53 08 A5 00 03 4A  // @...S.....S....J
    C220: 25 D4 53 02 44 3C 00 5C 0D D5 53 FF FE 01 00 43  // %.S.D<.\..S....C
    C230: 42 00 0D 0D D5 53 01 01 3A 00 00 5B 3A 01 01 08  // B....S..:..[:...
    C240: 08 00 03 01 00 00 3D E5 00 01 44 33 00 3D E5 00  // ......=...D3.=..
    C250: 02 44 33 00 02 05 00 00 00 01 00 52 29 20 05 00  // .D3........R) ..
    C260: 64 00 00 00 03 02 46 40 02 02 00 00 43 93 00 02  // d.....F@....C...
    C270: 05 00 01 00 02 00 52 29 03 01 01 00 02 02 00 00  // ......R)........
    C280: 03 01 46 00 56 38 46 03 05 40 80 C3 C9 01 27 02  // ..F.V8F..@....'.
    C290: 40 46 2D 05 40 31 00 00 00 27 05 40 32 00 00 00  // @F-.@1...'.@2...
    C2A0: 21 05 40 32 00 00 00 21 02 46 40 03 02 46 40 55  // !.@2...!.F@..F@U
    C2B0: 00 03 27 05 46 19 00 00 00 7C 05 40 00 40 00 00  // ..'.F....|.@.@..
    C2C0: 7E 02 40 01 02 8A 01 40 02 1A 01 40 55 00 02 55  // ~.@....@...@U..U
    C2D0: 38 00 03 05 40 00 32 00 00 3D 05 00 00 00 00 00  // 8...@.2..=......
    C2E0: 44 D1 00 03 02 40 46 27 01 40 00 3E 05 40 9C 18  // D....@F'.@.>.@..
    C2F0: 00 00 47 C0 00 03 05 40 00 32 00 00 3E 05 40 C8  // ..G....@.2..>.@.
    C300: 00 00 00 46 D1 00 03 05 40 C8 00 00 00 66 FF 2D  // ...F....@....f.-
    C310: 0D 42 1A 01 3E 0C 40 02 00 47 E8 00 2D 0D 42 08  // .B..>.@..G..-.B.
    C320: 00 43 D8 00 33 0C 40 00 00 27 0C 40 06 00 2D 0C  // .C..3.@..'.@..-.
    C330: 40 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06  // @.....@3.@..!.@.
    C340: 00 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2  // .-.@..'.F@...@..
    C350: 00 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06  // .@[z ...@.....@.
    C360: 80 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32  // ..@.2...8.`.d..2
    C370: 00 32 7F 00 64 00 07 00 02 01 00 00 5B 00 3B 03  // .2..d.......[.;.
    C380: 01 05 00 00 37 00 00 0E 25 00 60 52 14 08 25 00  // ....7...%.`R..%.
    C390: 0F 42 29 00 63 0F 53 00 63 11 0C 02 63 12 7D 02  // .B).c.S.c...c.}.
    C3A0: 63 01 D5 02 63 00 21 03 63 08 D6 01 63 09 B7 01  // c...c.!.c...c...
    C3B0: 63 0A BE 01 63 13 C6 01 63 14 CE 01 63 0B DE 01  // c...c...c...c...
    C3C0: 63 0C C5 02 63 0D E6 01 63 10 FF 01 5A 5A 43 B3  // c...c...c...ZZC.
    C3D0: 01 54 00 9A 55 01 0D 2B 55 1F 00 3D A5 00 00 44  // .T..U..+U..=...D
    C3E0: 72 00 3D A5 00 02 44 A1 01 3D A5 00 05 49 A9 01  // r.=...D..=...I..
    C3F0: 54 00 C9 55 3D 25 02 00 49 81 00 02 25 02 02 32  // T..U=%..I...%..2
    C400: 25 02 01 01 E1 C9 55 02 4A 25 CC 55 01 49 D8 00  // %.....U.J%.U.I..
    C410: 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56 00  // {......~.@....V.
    C420: 46 03 29 46 02 27 02 40 46 07 65 D0 55 FE 01 05  // F.)F.'.@F.e.U...
    C430: D1 55 00 80 00 00 01 02 D2 55 40 0D E5 D3 55 10  // .U.......U@...U.
    C440: 0D 65 28 55 04 03 21 40 02 15 25 40 05 01 E2 CA  // .e(U..!@..%@....
    C450: 55 40 54 20 CE 55 02 A0 02 28 55 03 0A 46 48 08  // U@T .U...(U..FH.
    C460: A5 02 07 56 00 40 03 31 40 02 21 0D 40 80 00 03  // ...V.@.1@.!.@...
    C470: 8A 46 40 03 0A 48 40 03 88 40 EA 4F 03 08 40 EF  // .F@..H@..@.O..@.
    C480: 4F 2D 05 40 01 00 01 00 03 98 41 EB 4F 03 18 41  // O-.@......A.O..A
    C490: F6 4F 03 0A 48 46 3C 02 0C 56 40 44 B3 01 01 02  // .O..HF<..V@D....
    C4A0: 0C 56 40 01 02 0D 56 41 03 1A 48 46 03 00 40 EB  // .V@...VA..HF..@.
    C4B0: 4F 33 1A 40 40 33 08 40 36 41 33 08 40 36 41 03  // O3.@@3.@6A3.@6A.
    C4C0: 00 41 F6 4F 33 1A 41 41 33 08 41 37 41 33 08 41  // .A.O3.AA3.A7A3.A
    C4D0: 37 41 03 0A 48 46 01 0A 0F 56 41 01 8A 0F 56 40  // 7A..HF...VA...V@
    C4E0: 03 1A 48 46 03 00 40 EC 4F 33 8A 40 40 03 00 41  // ..HF..@.O3.@@..A
    C4F0: F7 4F 33 8A 41 41 4A 25 ED 4F 01 44 84 01 0F E5  // .O3.AAJ%.O.D....
    C500: 40 80 4A 25 F8 4F 01 44 90 01 0F E5 41 80 03 0A  // @.J%.O.D....A...
    C510: 48 46 01 1A 0E 56 41 01 9A 0E 56 40 43 B3 01 01  // HF...VA...V@C...
    C520: 05 9A 55 00 00 00 00 07 E5 28 55 2F 0D 65 28 55  // ..U......(U/.e(U
    C530: 04 3A 00 00 5B 54 20 D8 55 43 B3 01 01 25 D8 55  // .:..[T .UC...%.U
    C540: 01 43 B3 01 01 25 D8 55 02 43 B3 01 01 25 D8 55  // .C...%.U.C...%.U
    C550: 03 43 B3 01 07 25 C8 55 EF 43 B3 01 0D 25 C8 55  // .C...%.U.C...%.U
    C560: 10 43 B3 01 0D 65 D0 55 01 51 0A 07 25 CD 55 FE  // .C...e.U.Q..%.U.
    C570: 51 0A 01 0D CC 55 01 02 51 C8 43 B3 01 0D 25 DE  // Q....U..Q.C...%.
    C580: 55 10 01 31 CF 55 00 43 B3 01 01 69 6F 55 02 3D  // U..1.U.C...ioU.=
    C590: A5 00 03 49 28 02 4A 25 35 55 10 49 28 02 01 A5  // ...I(.J%5U.I(...
    C5A0: 6F 55 02 43 2D 02 01 B1 6F 55 00 3D 25 02 00 44  // oU.C-...oU.=%..D
    C5B0: 42 02 32 25 02 01 14 25 02 04 5C E1 6F 55 8F 02  // B.2%...%..\.oU..
    C5C0: 3D E5 00 04 47 51 02 0D 25 6F 55 01 43 56 02 07  // =...GQ..%oU.CV..
    C5D0: 25 6F 55 FE 3D A5 00 05 44 64 02 3D A5 00 00 49  // %oU.=...Dd.=...I
    C5E0: 75 02 02 A5 00 00 03 39 40 00 33 25 40 01 01 22  // u......9@.3%@.."
    C5F0: CB 55 40 02 E0 02 70 55 43 B3 01 02 E0 02 70 55  // .U@...pUC.....pU
    C600: 4B E5 02 01 44 B3 01 02 B0 00 6F 55 02 E5 00 04  // K...D.....oU....
    C610: 4A 25 6F 55 01 44 9E 02 02 E5 00 08 3D A5 00 02  // J%oU.D......=...
    C620: 44 AC 02 3D A5 00 03 49 B5 02 54 00 70 55 50 02  // D..=...I..T.pUP.
    C630: 43 B3 01 02 A5 00 00 03 31 43 00 4A 62 6F 55 44  // C.......1C.JboUD
    C640: 44 B3 01 54 08 CC 55 51 C8 0D 25 CD 55 01 51 32  // D..T..UQ..%.U.Q2
    C650: 43 B3 01 0D 25 70 55 01 3D A5 00 00 44 EA 02 01  // C...%pU.=...D...
    C660: 0D A1 55 0F 01 43 FB 02 03 39 43 00 03 02 40 44  // ..U..C...9C...@D
    C670: 33 25 40 01 01 0A A1 55 40 3A 00 00 20 25 00 02  // 3%@....U@:.. %..
    C680: 03 22 43 40 03 22 40 44 15 25 40 01 0D 22 5E 5D  // ."C@."@D.%@.."^]
    C690: 40 51 64 69 25 40 FF 07 22 5E 5D 40 43 B3 01 54  // @Qdi%@.."^]@C..T
    C6A0: 00 A1 55 07 25 70 55 FE 07 0D 6F 55 FE 80 54 20  // ..U.%pU...oU..T 
    C6B0: C8 55 54 20 D8 55 43 B3 01 00 46 01 01 06 00 00  // .UT .UC...F.....
    C6C0: 37 00 00 42 29 00 63 07 24 01 63 01 25 00 63 00  // 7..B).c.$.c.%.c.
    C6D0: C0 00 63 0B 27 01 63 04 2C 01 5A 5A 43 3F 01 02  // ..c.'.c.,.ZZC?..
    C6E0: 65 00 11 52 04 4B E5 02 01 49 20 01 02 65 00 0A  // e..R.K...I ..e..
    C6F0: 55 08 02 52 4D 3D E5 00 04 47 50 00 68 25 00 01  // U..RM=...GP.h%..
    C700: 02 25 02 01 52 4D 68 25 00 01 3D A5 00 00 49 82  // .%..RMh%..=...I.
    C710: 00 20 05 01 64 00 00 00 02 05 01 14 1E 00 02 2C  // . ..d..........,
    C720: 21 01 00 02 01 02 00 02 02 00 40 52 0C 26 05 00  // !.........@R.&..
    C730: 64 00 00 00 02 02 01 40 02 01 00 02 02 65 00 01  // d......@.....e..
    C740: 55 08 02 52 4D 3D E5 00 04 47 A0 00 68 25 00 01  // U..RM=...G..h%..
    C750: 02 25 02 01 52 4D 68 25 00 01 51 05 02 65 00 01  // .%..RMh%..Q..e..
    C760: 52 04 51 0A 02 65 00 09 52 4D 3D E5 00 04 47 20  // R.Q..e..RM=...G 
    C770: 01 68 25 00 01 52 4D 43 20 01 02 65 00 12 52 04  // .h%..RMC ..e..R.
    C780: 4B E5 02 01 44 20 01 02 65 00 08 52 4D 3D E5 00  // K...D ..e..RM=..
    C790: 04 47 E4 00 68 25 00 01 52 4D 68 25 00 01 02 65  // .G..h%..RMh%...e
    C7A0: 00 00 52 04 02 65 00 00 52 4D 3D E5 00 04 47 01  // ..R..e..RM=...G.
    C7B0: 01 68 25 00 01 52 4D 68 25 00 01 3D A5 00 00 49  // .h%..RMh%..=...I
    C7C0: 20 01 02 01 02 00 02 05 01 14 00 00 00 2C 21 01  //  ............,!.
    C7D0: 00 55 00 00 52 0C 02 01 00 02 3A 00 00 5B 43 20  // .U..R.....:..[C 
    C7E0: 01 52 4D 43 20 01 66 06 02 29 00 00 02 68 00 4E  // .RMC .f..)...h.N
    C7F0: 00 02 8C 00 20 00 52 33 5B 02 29 00 00 52 33 5B  // .... .R3[.)..R3[
    C800: 8B 03 02 01 00 00 37 00 00 0E 25 00 20 52 14 08  // ......7...%. R..
    C810: 25 00 0F 42 29 00 63 07 35 00 63 0A 3D 00 63 01  // %..B).c.5.c.=.c.
    C820: 33 01 63 00 8D 01 63 09 CD 01 63 08 02 02 63 0B  // 3.c...c...c...c.
    C830: 1A 02 5A 5A 5B 0D 65 EC 5D 08 43 87 03 03 0A 46  // ..ZZ[.e.].C....F
    C840: 48 66 07 2D 0C 42 08 00 56 00 40 20 25 00 05 2D  // Hf.-.B..V.@ %..-
    C850: 0A 42 40 20 25 00 02 03 0A 48 40 01 04 2E 5D 00  // .B@ %....H@...].
    C860: 00 01 64 2D 5D 04 00 07 E5 2D 5D FC 07 A5 2D 5D  // ..d-]....-]...-]
    C870: 8F 03 0A 48 46 56 00 41 5C FA FB 5D FC 41 3D A5  // ...HFV.A\..].A=.
    C880: 00 00 49 A7 00 07 A5 E9 5D 7F 66 07 2D 0C 42 06  // ..I.....].f.-.B.
    C890: 00 2D 0D 42 06 00 56 00 41 3D A5 02 14 49 23 03  // .-.B..V.A=...I#.
    C8A0: 03 25 41 20 43 23 03 0D A5 E9 5D 80 66 1E 2D 0D  // .%A C#....].f.-.
    C8B0: 42 C4 00 3D A5 00 02 44 CE 00 2D 0D 42 0C 00 3D  // B..=...D..-.B..=
    C8C0: 05 01 40 9C 00 00 47 CE 00 2D 0D 42 0C 00 03 21  // ..@...G..-.B...!
    C8D0: 43 00 03 E2 41 44 4C E4 41 05 00 49 21 01 66 07  // C...ADL.A..I!.f.
    C8E0: 2D 0C 42 04 00 2D 0D 42 02 00 03 04 40 00 00 3E  // -.B..-.B....@..>
    C8F0: 05 40 00 00 00 00 44 87 03 03 21 43 00 03 E2 41  // .@....D...!C...A
    C900: 44 4C E4 41 05 00 44 19 01 3D A4 00 04 00 49 19  // DL.A..D..=....I.
    C910: 01 3D 04 01 00 00 47 21 01 2D 0D 42 0C 00 43 EA  // .=....G!.-.B..C.
    C920: 00 03 04 40 06 00 03 24 41 0A 00 03 64 41 0B 00  // ...@...$A...dA..
    C930: 43 2C 03 07 65 EC 5D F7 03 0A 46 48 56 00 41 3D  // C,..e.]...FHV.A=
    C940: E5 00 04 47 4E 01 07 25 0A 5E F9 43 54 01 5C 25  // ...GN..%.^.CT.\%
    C950: 0A 5E F9 02 4A 65 08 5E 01 44 54 01 07 25 08 5E  // .^..Je.^.DT..%.^
    C960: F8 4A 65 08 5E 01 44 61 01 2D E5 41 01 2D 0D 48  // .Je.^.Da.-.A.-.H
    C970: 10 00 3E E5 41 04 45 3F 01 03 0A 48 46 0D 25 F9  // ..>.A.E?...HF.%.
    C980: 5D 02 4A 25 F9 5D 04 44 82 01 43 87 03 07 25 F9  // ].J%.].D..C...%.
    C990: 5D FD 4A 25 F9 5D 04 49 92 01 0D 65 EC 5D 08 56  // ].J%.].I...e.].V
    C9A0: 00 41 4A 65 08 5E 01 44 A2 01 5C 25 08 5E F8 04  // .AJe.^.D..\%.^..
    C9B0: 51 02 4A 65 08 5E 01 44 B2 01 2D A5 41 01 2D 0D  // Q.Je.^.D..-.A.-.
    C9C0: 48 10 00 3E A5 41 04 45 A2 01 43 87 03 03 0A 46  // H..>.A.E..C....F
    C9D0: 48 56 08 48 20 25 00 02 03 22 48 40 0D 25 2D 5D  // HV.H %..."H@.%-]
    C9E0: 01 51 64 07 25 2D 5D FE 0D E5 2E 5D 10 03 0A 48  // .Qd.%-]....]...H
    C9F0: 46 0D A5 FB 5D 01 51 14 0D 25 FB 5D 01 51 14 43  // F...].Q..%.].Q.C
    CA00: 87 03 07 A5 FB 5D FE 56 00 40 20 25 00 02 03 0A  // .....].V.@ %....
    CA10: 48 40 07 E5 2E 5D EF 43 87 03 08 A5 00 1B 66 1E  // H@...].C......f.
    CA20: 2D 0D 42 C0 02 03 21 43 00 03 A2 46 44 03 0C 46  // -.B...!C...FD..F
    CA30: 02 00 4C A4 46 00 00 49 89 02 66 1E 2D 0D 42 E8  // ..L.F..I..f.-.B.
    CA40: 00 3D 05 01 48 3F 00 00 47 74 02 66 1E 2D 0D 42  // .=..H?..Gt.f.-.B
    CA50: 50 02 3D 05 01 78 69 00 00 47 74 02 66 1E 2D 0D  // P.=..xi..Gt.f.-.
    CA60: 42 88 02 3D 05 01 F0 D2 00 00 47 74 02 66 1E 2D  // B..=......Gt.f.-
    CA70: 0D 42 20 01 03 21 43 00 03 A2 46 44 03 0C 46 02  // .B ..!C...FD..F.
    CA80: 00 4C A4 46 00 00 44 AC 02 2D 0D 42 06 00 56 20  // .L.F..D..-.B..V 
    CA90: 41 3D A4 00 00 00 44 23 03 2D 25 41 01 3E 25 41  // A=....D#.-%A.>%A
    CAA0: 0A 44 AC 02 2D 0D 42 05 00 43 91 02 66 07 2D 0C  // .D..-.B..C..f.-.
    CAB0: 42 06 00 03 21 43 00 03 A2 46 44 03 0C 46 02 00  // B...!C...FD..F..
    CAC0: 4C A4 46 00 00 49 D0 02 2D 0C 42 04 00 43 BB 02  // L.F..I..-.B..C..
    CAD0: 2D 0D 42 06 00 3D 05 01 48 3F 00 00 47 08 03 03  // -.B..=..H?..G...
    CAE0: 0A 40 46 21 0D 40 0A 00 2D 0A 42 40 3D 05 01 78  // .@F!.@..-.B@=..x
    CAF0: 69 00 00 47 08 03 2D 0A 42 40 3D 05 01 F0 D2 00  // i..G..-.B@=.....
    CB00: 00 47 08 03 2D 0A 42 40 3D A4 00 00 00 44 23 03  // .G..-.B@=....D#.
    CB10: 03 24 41 00 00 3E 25 41 18 44 23 03 2D 0A 42 46  // .$A..>%A.D#.-.BF
    CB20: 43 08 03 03 04 40 01 00 03 65 41 08 01 0A EB 5D  // C....@...eA....]
    CB30: 40 01 05 03 5E 88 88 01 00 01 F2 04 5E 40 01 BA  // @...^.......^@..
    CB40: 0A 5E 40 01 BA 1A 5E 40 01 BA 2A 5E 40 01 BA 3A  // .^@...^@..*^@..:
    CB50: 5E 40 01 25 09 5E 20 01 25 19 5E 20 01 25 29 5E  // ^@.%.^ .%.^ .%)^
    CB60: 20 01 25 39 5E 20 01 2A 09 5E 41 01 2A 19 5E 41  //  .%9^ .*.^A.*.^A
    CB70: 01 2A 29 5E 41 01 2A 39 5E 41 3D 65 00 0B 44 87  // .*)^A.*9^A=e..D.
    CB80: 03 5C A2 F0 5D DF 41 3A 00 00 5B 00 44 02 01 02  // .\..].A:..[.D...
    CB90: 00 00 37 00 00 3D 0D 00 00 00 44 CE 01 56 00 41  // ..7..=....D..V.A
    CBA0: 03 21 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42  // .!A..%A...A...@B
    CBB0: 66 FF 2D 0D 42 34 02 2D 0A 42 41 03 0C 48 02 00  // f.-.B4.-.BA..H..
    CBC0: 0D A5 90 5D 01 54 08 90 5D 03 0C 48 00 00 03 F9  // ...].T..]..H....
    CBD0: 41 01 15 3D 41 04 5C BA 10 54 8F 41 03 0A 42 40  // A..=A.\..T.A..B@
    CBE0: 4A 25 10 54 01 49 81 00 0D 0D 10 54 01 01 0D 25  // J%.T.I.....T...%
    CBF0: 10 54 10 4A 25 10 54 20 44 67 00 07 25 10 54 EF  // .T.J%.T Dg..%.T.
    CC00: 4A 25 10 54 20 49 74 00 0D 25 13 54 40 56 00 41  // J%.T It..%.T@V.A
    CC10: 03 09 41 00 3B 02 41 03 3B 41 00 1B 25 41 04 01  // ..A.;.A.;A..%A..
    CC20: A2 11 54 41 03 69 41 01 15 2D 41 04 01 2A 11 54  // ..TA.iA..-A..*.T
    CC30: 41 56 00 40 0F E5 40 80 03 73 40 00 01 02 16 54  // AV.@..@..s@....T
    CC40: 40 56 00 40 03 6B 40 00 01 02 16 54 40 03 63 40  // @V.@.k@....T@.c@
    CC50: 00 01 02 16 54 40 03 7B 40 00 09 65 40 0F 01 02  // ....T@.{@..e@...
    CC60: 16 54 40 3E 25 41 04 47 10 01 33 25 41 04 2D 05  // .T@>%A.G..3%A.-.
    CC70: 46 04 00 00 00 03 63 40 00 01 02 16 54 40 03 6B  // F.....c@....T@.k
    CC80: 40 00 01 02 16 54 40 03 73 40 00 01 02 16 54 40  // @....T@.s@....T@
    CC90: 03 7B 40 00 01 02 16 54 40 43 D7 00 0D 25 13 54  // .{@....T@C...%.T
    CCA0: 02 0D 25 11 54 01 03 29 40 01 21 25 40 0A 2D 25  // ..%.T..)@.!%@.-%
    CCB0: 40 32 4A 25 14 54 01 49 42 01 51 0A 33 25 40 01  // @2J%.T.IB.Q.3%@.
    CCC0: 3E 25 40 00 49 26 01 02 65 01 01 43 CA 01 4A 05  // >%@.I&..e..C..J.
    CCD0: 14 54 F0 8F FF 00 44 54 01 02 65 01 02 43 CA 01  // .T....DT..e..C..
    CCE0: 01 05 16 54 01 00 00 80 03 00 40 16 54 02 6A 01  // ...T......@.T.j.
    CCF0: 40 02 B8 01 14 54 08 A5 01 1F 3D A5 01 00 46 7C  // @....T....=...F|
    CD00: 01 02 65 01 03 43 CA 01 32 A5 01 01 3D 8D 00 00  // ..e..C..2...=...
    CD10: 00 44 CA 01 3D A5 01 00 44 CA 01 03 31 41 01 03  // .D..=...D...1A..
    CD20: 19 40 00 56 18 40 3B 02 40 03 28 40 16 54 03 68  // .@.V.@;.@.(@.T.h
    CD30: 40 16 54 03 A8 40 16 54 03 E8 40 16 54 04 02 00  // @.T..@.T..@.T...
    CD40: 40 3E 25 41 04 47 CA 01 33 25 41 04 2D 05 46 04  // @>%A.G..3%A.-.F.
    CD50: 00 00 00 43 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34  // ...C..:..[f.-.B4
    CD60: 02 03 0C 48 00 00 01 8D 18 54 18 00 01 05 19 54  // ...H.....T.....T
    CD70: 00 1C 02 00 01 05 1A 54 10 11 3D 12 2D 0D 42 04  // .......T..=.-.B.
    CD80: 00 2C 25 00 01 3D 25 00 04 49 D5 01 56 08 48 03  // .,%..=%..I..V.H.
    CD90: 25 41 10 0D 65 BF 5D 40 07 65 BF 5D BF 33 25 41  // %A..e.]@.e.].3%A
    CDA0: 01 3E 25 41 00 49 07 02 0D 25 63 5D 01 54 30 63  // .>%A.I...%c].T0c
    CDB0: 5D 0D 25 64 5D 01 54 30 64 5D 51 32 5B 7A 10 00  // ].%d].T0d]Q2[z..
    CDC0: 00 00 00 00 1C 00 04 00 38 00 08 00 54 00 0C 00  // ........8...T...
    CDD0: 5C 00 01 02 00 04 02 25 01 04 03 31 41 00 09 0D  // \......%...1A...
    CDE0: 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A  // A....A.f.-.BP.-.
    CDF0: 42 41 03 0C 48 00 00 07 A5 90 5D FE 01 0D 90 5D  // BA..H.....]....]
    CE00: 11 11 50 02 4A 0D 93 5D 01 00 49 41 00 02 25 01  // ..P.J..]..IA..%.
    CE10: 13 54 08 90 5D 54 00 92 5D 3A 00 00 5B 7A 0C 00  // .T..]T..]:..[z..
    CE20: 00 00 04 00 08 00 0C 00 10 00 14 00 6C 01 02 01  // ............l...
    CE30: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 53 00  // ..7..B!.c.).c.S.
    CE40: 63 02 9D 00 63 04 BB 00 63 0C 49 01 63 0D 5A 01  // c...c...c.I.c.Z.
    CE50: 5A 5A 43 6B 01 01 0D 45 5D 9F 0F 01 25 46 5D 00  // ZZCk...E]...%F].
    CE60: 66 06 01 24 47 5D 30 00 01 4C 47 5D 31 00 03 24  // f..$G]0..LG]1..$
    CE70: 46 3B 00 3E 25 46 00 44 6B 01 54 20 47 5D 5B 4A  // F;.>%F.Dk.T G][J
    CE80: E5 43 5D 02 44 8B 00 56 00 41 66 1E 03 24 41 31  // .C].D..V.Af..$A1
    CE90: 00 0D E5 47 5D 01 3E 25 41 00 44 7E 00 50 01 33  // ...G].>%A.D~.P.3
    CEA0: 25 41 01 3E 25 41 00 49 71 00 5C 05 43 5D FF FF  // %A.>%A.Iq.\.C]..
    CEB0: FF FD 11 00 00 00 5B 0D E5 47 5D 01 5C 05 43 5D  // ......[..G].\.C]
    CEC0: FF FF FF FD 11 00 00 00 5B 0D E5 47 5D 01 4A 25  // ........[..G].J%
    CED0: 44 5D 02 44 AF 00 0D A5 43 5D 01 0D A5 43 5D 02  // D].D....C]...C].
    CEE0: 5C 25 43 5D EF 01 5B 4A 05 53 00 00 02 00 00 44  // \%C]..[J.S.....D
    CEF0: CB 00 0D 25 4B 5D 01 3D 8D 00 00 00 44 48 01 03  // ...%K].=....DH..
    CF00: 05 46 00 36 6E 01 56 00 41 03 19 41 00 21 05 41  // .F.6n.V.A..A.!.A
    CF10: FF 0F 00 00 27 02 46 40 3E 05 41 00 00 00 00 44  // ....'.F@>.A....D
    CF20: FB 00 2D 0D 40 01 00 01 8A 45 5D 40 56 00 41 03  // ..-.@....E]@V.A.
    CF30: 19 41 00 21 02 40 41 27 02 46 40 01 A5 4A 5D 0C  // .A.!.@A'.F@..J].
    CF40: 01 0A 4A 5D 40 15 05 40 04 56 00 41 03 29 41 00  // ..J]@..@.V.A.)A.
    CF50: 2D 0D 41 01 00 21 02 40 41 1B 05 40 08 01 0A 48  // -.A..!.@A..@...H
    CF60: 5D 40 0D E5 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D  // ]@..H]..%K].JeK]
    CF70: 01 49 40 01 5B 5C E5 43 5D FE 02 07 E5 47 5D FE  // .I@.[\.C]....G].
    CF80: 0D 25 43 5D 11 5B 0D E5 47 5D 01 5C 05 43 5D EF  // .%C].[..G].\.C].
    CF90: FF FD FD 01 00 00 00 5B CB 00 03 02 00 10 37 00  // .......[......7.
    CFA0: 00 56 00 40 4A 25 00 EC 01 44 30 00 4A 25 05 EC  // .V.@J%...D0.J%..
    CFB0: 1E 49 30 00 03 25 40 01 01 05 05 EC 03 00 00 00  // .I0..%@.........
    CFC0: 4A 65 05 EC 0F 49 28 00 3D 65 02 00 49 3B 00 2C  // Je...I(.=e..I;.,
    CFD0: 25 02 F4 3D E5 02 00 49 46 00 2C A5 02 F4 3D 65  // %..=...IF.,...=e
    CFE0: 02 02 49 4D 00 03 01 40 03 09 05 40 00 00 00 FC  // ..IM...@...@....
    CFF0: 3E 05 40 00 00 00 D0 49 73 00 01 05 63 C0 00 00  // >.@....Is...c...
    D000: 00 40 55 00 00 55 20 02 43 77 00 54 00 63 C0 01  // .@U..U .Cw.T.c..
    D010: 01 64 C0 00 56 00 40 03 21 40 02 01 02 65 C0 40  // .d..V.@.!@...e.@
    D020: 01 01 66 C0 01 03 31 40 02 01 02 67 C0 40 01 01  // ..f...1@...g.@..
    D030: E8 C0 03 3D 65 02 01 44 AB 00 3D E5 02 01 44 AB  // ...=e..D..=...D.
    D040: 00 51 02 4A E5 A0 21 80 49 AB 00 3E 25 40 01 49  // .Q.J..!.I..>%@.I
    D050: CA 00 01 05 05 EC 01 00 00 00 4A 65 05 EC 0F 49  // ..........Je...I
    D060: C2 00 5B 00 0D 02 02 01 00 00 37 00 00 3D 25 01  // ..[.......7..=%.
    D070: 01 44 5D 00 3D 25 01 02 44 F1 00 3D 25 01 00 49  // .D].=%..D..=%..I
    D080: F6 01 3D 05 00 00 00 00 00 49 39 00 3A 00 00 0D  // ..=......I9.:...
    D090: 25 A4 53 01 4A 65 A4 53 01 44 30 00 5B 54 20 A4  // %.S.Je.S.D0.[T .
    D0A0: 53 26 05 00 64 00 00 00 02 02 01 40 02 05 00 04  // S&..d......@....
    D0B0: 00 00 00 52 13 20 05 01 64 00 00 00 02 02 00 40  // ...R. ..d......@
    D0C0: 5B 02 01 02 01 02 05 00 05 00 00 00 02 05 01 58  // [..............X
    D0D0: 02 00 00 52 13 20 05 01 40 42 0F 00 02 02 00 40  // ...R. ..@B.....@
    D0E0: 02 01 01 02 56 00 46 66 08 03 0C 46 0C 00 26 05  // ....V.Ff...F..&.
    D0F0: 00 40 0D 03 00 21 02 40 46 32 02 00 40 07 0D 18  // .@...!.@F2..@...
    D100: 01 F8 FE 66 08 03 0C 41 0C 00 3E 0D 41 00 00 44  // ...f...A..>.A..D
    D110: CD 00 01 A5 15 01 01 01 05 13 01 C0 12 00 00 01  // ................
    D120: 01 14 01 00 0D 25 15 01 01 4A 65 15 01 02 44 C5  // .....%...Je...D.
    D130: 00 01 01 42 01 00 01 01 46 01 00 01 01 4A 01 00  // ...B....F....J..
    D140: 01 01 4E 01 00 3D 65 01 02 49 F0 00 5C 0D 18 01  // ..N..=e..I..\...
    D150: F8 FF 01 01 5B 66 FF 2D 0D 42 FD 01 56 00 41 03  // ....[f.-.B..V.A.
    D160: 39 41 01 15 25 41 02 2D 0A 42 41 3D 65 01 0B 49  // 9A..%A.-.BA=e..I
    D170: 64 01 20 05 00 64 00 00 00 03 0C 48 02 00 03 00  // d. ..d.....H....
    D180: 41 40 01 0F 25 41 10 09 0D 41 DF FF 03 0C 48 00  // A@..%A...A....H.
    D190: 00 4A 05 01 50 01 00 00 00 44 4D 01 03 0C 48 02  // .J..P....DM...H.
    D1A0: 00 3C 02 41 01 40 49 4D 01 3C 02 40 01 41 44 F6  // .<.A.@IM.<.@.AD.
    D1B0: 01 03 0C 48 02 00 07 25 40 01 EF 01 02 41 01 40  // ...H...%@....A.@
    D1C0: 01 0A 40 01 41 43 F6 01 56 00 40 03 8D 40 0C 00  // ..@.AC..V.@..@..
    D1D0: 3D 65 01 18 44 87 01 03 8D 40 3E 00 3D 65 01 19  // =e..D....@>.=e..
    D1E0: 44 87 01 03 A9 40 01 33 A5 40 14 03 31 40 01 09  // D....@.3.@..1@..
    D1F0: 25 40 03 15 25 40 04 0F 0D 40 01 01 56 00 41 03  // %@..%@...@..V.A.
    D200: 29 41 01 33 25 41 14 03 0C 48 00 00 4A 05 01 50  // )A.3%A...H..J..P
    D210: 01 00 00 00 44 D4 01 03 0C 48 02 00 4A 25 40 01  // ....D....H..J%@.
    D220: 10 49 D4 01 3C 22 43 01 41 49 D4 01 03 1A 48 40  // .I..<"C.AI....H@
    D230: 3C 0A 00 01 40 44 F6 01 03 1A 48 40 07 25 00 01  // <...@D....H@.%..
    D240: FE 03 0C 48 02 00 01 22 43 01 41 07 0D 40 01 EF  // ...H..."C.A..@..
    D250: FF 03 1A 48 40 01 0A 00 01 40 3A 00 00 5B 7A 10  // ...H@....@:..[z.
    D260: 00 00 00 00 00 80 00 04 00 00 01 08 00 80 01 0C  // ................
    D270: 00 00 F2 00 01 01 04 00 37 00 00 56 00 00 66 1E  // ........7..V..f.
    D280: 2D 0D 42 4C 00 56 00 40 21 25 00 10 2D 0A 42 40  // -.BL.V.@!%..-.B@
    D290: 03 24 41 0C 00 4C 25 41 08 44 E6 00 02 25 00 64  // .$A..L%A.D...%.d
    D2A0: 02 0D 01 01 01 02 E4 01 06 00 0E E5 01 90 66 1E  // ..............f.
    D2B0: 03 24 41 08 00 4C 25 41 20 49 64 00 43 64 00 2D  // .$A..L%A Id.Cd.-
    D2C0: 0D 42 35 02 02 A4 01 00 00 03 64 00 01 00 2D 0D  // .B5.......d...-.
    D2D0: 42 03 00 43 CC 00 3E 0D 00 00 00 44 87 00 3E 0D  // B..C..>....D..>.
    D2E0: 00 01 00 44 9E 00 3E 0D 00 02 00 44 B5 00 3E 0D  // ...D..>....D..>.
    D2F0: 00 03 00 44 4D 00 43 E6 00 2D 0D 42 E4 01 02 A4  // ...DM.C..-.B....
    D300: 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43 CC 00  // ....d...-.B..C..
    D310: 2D 0D 42 FF 01 02 A4 01 00 00 03 64 00 01 00 2D  // -.B........d...-
    D320: 0D 42 03 00 43 CC 00 2D 0D 42 1A 02 02 A4 01 00  // .B..C..-.B......
    D330: 00 03 64 00 01 00 2D 0D 42 03 00 43 CC 00 3E 65  // ..d...-.B..C..>e
    D340: 00 00 44 E6 00 33 65 00 01 02 4C 00 00 00 52 36  // ..D..3e...L...R6
    D350: 2D 0D 42 02 00 43 CC 00 2D 25 00 01 3E 25 00 04  // -.B..C..-%..>%..
    D360: 45 0C 00 5B FF FF FF FF FF FF FF FF FF FF FF FF  // E..[............
    D370: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D380: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D390: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D400: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D410: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D420: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D430: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D440: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D450: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D460: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D480: 00 00 00 00                                      // ....


WPBT
----
[000h 0000   4]                    Signature : "WPBT"    [Windows Platform Binary Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C1
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ASUS"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 Handoff Size : 000D6308
[028h 0040   8]              Handoff Address : 00000000CA7F0000
[030h 0048   1]                       Layout : 01
[031h 0049   1]                         Type : 01
[032h 0050   2]             Arguments Length : 0000
                      Command-line Arguments : /* Zero-length Data */

Raw Table Data: Length 60 (0x3C)

    0000: 57 50 42 54 3C 00 00 00 01 C1 41 4C 41 53 4B 41  // WPBT<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 53 55 53  // A M I.......ASUS
    0020: 01 00 00 00 08 63 0D 00 00 00 7F CA 00 00 00 00  // .....c..........
    0030: 01 01 00 00 00 00 00 00 00 00 00 00              // ............


