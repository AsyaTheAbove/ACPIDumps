
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200110
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  AAFT  0x00000484  0x01  "ALASKA"  "OEMAAFT "  0x01072009  "MSFT"   0x00000097
 02)  SSDT  0x00000E0C  0x01  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 03)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 04)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 05)  CRAT  0x00000810  0x01  "AMD   "  "AMD CRAT"  0x00000001  "AMD "   0x00000001
 06)  SSDT  0x00005419  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x02000002
 07)  TPM2  0x00000038  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 08)  VFCT  0x0000EC84  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 09)  SSDT  0x000000BF  0x01  "AMD   "  "AMD PT  "  0x00001000  "INTL"   0x20120913
 10)  CDIT  0x00000029  0x01  "AMD   "  "AMD CDIT"  0x00000001  "AMD "   0x00000001
 11)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 12)  IVRS  0x000000D0  0x02  "AMD   "  "AMD IVRS"  0x00000001  "AMD "   0x00000000
 13)  DSDT  0x00006C65  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 14)  SSDT  0x0000052C  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 15)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 16)  SSDT  0x000000D7  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 17)  SSDT  0x00003096  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 18)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 19)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 20)  SSDT  0x00000094  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 21)  SSDT  0x00001D4A  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 22)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 23)  SSDT  0x000010B4  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 24)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 25)  FACS  0x00000040  0x02
 26)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 26 ACPI tables in acpidump

AAFT
----
[000h 0000   4]                    Signature : "AAFT"    
[004h 0004   4]                 Table Length : 00000484
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "OEMAAFT "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table signature [AAFT]


Raw Table Data: Length 1156 (0x484)

    0000: 41 41 46 54 84 04 00 00 01 65 41 4C 41 53 4B 41  // AAFT.....eALASKA
    0010: 4F 45 4D 41 41 46 54 20 09 20 07 01 4D 53 46 54  // OEMAAFT . ..MSFT
    0020: 97 00 00 00 1B 22 00 00 00 41 53 52 5F 41 55 52  // ....."...ASR_AUR
    0030: 41 5F 44 45 46 41 55 4C 54 09 00 00 00 12 FF FF  // A_DEFAULT.......
    0040: FF 14 00 00 00 00 1A 11 00 00 00 4E 54 46 53 00  // ...........NTFS.
    0050: 00 00 00 03 00 01 00 15 2C 00 00 00 02 53 41 54  // ........,....SAT
    0060: 41 33 20 43 6F 6E 74 72 6F 6C 6C 65 72 00 00 00  // A3 Controller...
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  // ................
    0080: FF 00 01 15 2C 00 00 00 02 41 53 4D 65 64 69 61  // ....,....ASMedia
    0090: 20 53 41 54 41 33 20 43 6F 6E 74 72 6F 6C 6C 65  //  SATA3 Controlle
    00A0: 72 00 00 00 00 00 00 00 00 01 00 01 01 02 FF 10  // r...............
    00B0: 67 00 00 00 02 43 D6 87 EC A4 EB B5 4B A1 E5 3F  // g....C......K..?
    00C0: 3E 36 B2 0D A9 41 53 52 6F 63 6B 50 6C 61 74 66  // >6...ASRockPlatf
    00D0: 6F 72 6D 43 6F 6E 66 69 67 00 00 00 00 00 00 00  // ormConfig.......
    00E0: 00 00 00 00 00 01 43 D6 87 EC A4 EB B5 4B A1 E5  // ......C......K..
    00F0: 3F 3E 36 B2 0D A9 53 65 74 75 70 00 00 00 00 00  // ?>6...Setup.....
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 11 71 00 00 00 01 46 61 73 74  // .......q....Fast
    0120: 42 6F 6F 74 00 00 00 00 00 00 00 00 00 00 00 00  // Boot............
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 01 01  // ................
    0140: 43 6C 6B 47 65 6E 50 63 69 65 00 00 00 00 00 00  // ClkGenPcie......
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: B7 01 02 01 66 54 50 4D 53 77 69 74 63 68 00 00  // ....fTPMSwitch..
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 2A 00 01 1C 28 00 00 00 01 66 54 50  // ....*...(....fTP
    0190: 4D 53 77 69 74 63 68 00 00 00 00 00 00 00 00 00  // MSwitch.........
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 18  // ................
    01B0: D5 02 00 00 53 65 74 75 70 00 00 00 00 00 00 00  // ....Setup.......
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 43 D6 87 EC A4 EB B5 4B A1 E5 3F 3E 36 B2 0D A9  // C......K..?>6...
    01F0: 55 73 62 53 75 70 70 6F 72 74 00 00 00 00 00 00  // UsbSupport......
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 43 D6 87 EC  // ............C...
    0220: A4 EB B5 4B A1 E5 3F 3E 36 B2 0D A9 41 53 52 6F  // ...K..?>6...ASRo
    0230: 63 6B 50 6C 61 74 66 6F 72 6D 43 6F 6E 66 69 67  // ckPlatformConfig
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 43 D6 87 EC A4 EB B5 4B  // ........C......K
    0260: A1 E5 3F 3E 36 B2 0D A9 41 4D 49 54 53 45 53 65  // ..?>6...AMITSESe
    0270: 74 75 70 00 00 00 00 00 00 00 00 00 00 00 00 00  // tup.............
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 38 FA 11 C8 C8 42 79 45 A9 BB 60 E9  // ....8....ByE..`.
    02A0: 4E DD FB 34 49 6E 74 65 6C 53 65 74 75 70 00 00  // N..4IntelSetup..
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 43 D6 87 EC A4 EB B5 4B A1 E5 3F 3E 36 B2 0D A9  // C......K..?>6...
    02E0: 41 53 52 6F 63 6B 45 61 73 79 53 65 74 75 70 00  // ASRockEasySetup.
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 13 29 13 8F  // .............)..
    0310: 07 69 92 41 A2 27 6C BC D7 A5 0E 6C 50 4E 50 30  // .i.A.'l....lPNP0
    0320: 34 30 30 5F 30 5F 4E 56 00 00 00 00 00 00 00 00  // 400_0_NV........
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 8A F5 0B 56 0D 1E 7E 4D  // ...........V..~M
    0350: 95 3F 29 80 A2 61 E0 31 50 4E 50 30 35 31 30 5F  // .?)..a.1PNP0510_
    0360: 30 5F 4E 56 00 00 00 00 00 00 00 00 00 00 00 00  // 0_NV............
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 8A F5 0B 56 0D 1E 7E 4D 95 3F 29 80  // .......V..~M.?).
    0390: A2 61 E0 31 50 4E 50 30 35 30 31 5F 30 5F 4E 56  // .a.1PNP0501_0_NV
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 8A F5 0B 56 0D 1E 7E 4D 95 3F 29 80 A2 61 E0 31  // ...V..~M.?)..a.1
    03D0: 50 4E 50 30 35 30 31 5F 31 5F 4E 56 00 00 00 00  // PNP0501_1_NV....
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 8A F5 0B 56  // ...............V
    0400: 0D 1E 7E 4D 95 3F 29 80 A2 61 E0 31 41 6D 64 53  // ..~M.?)..a.1AmdS
    0410: 65 74 75 70 00 00 00 00 00 00 00 00 00 00 00 00  // etup............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 02 75 99 3A 7A 64 82 4C  // .........u.:zd.L
    0440: 99 8E 52 EF 94 86 A2 47 41 4D 44 5F 50 42 53 5F  // ..R....GAMD_PBS_
    0450: 53 45 54 55 50 00 00 00 00 00 00 00 00 00 00 00  // SETUP...........
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 46 D7 39 A3 78 F6 B3 49 9F C7 54 CE  // ....F.9.x..I..T.
    0480: 0F 9D F2 26                                      // ...&


APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 53
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 01
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 03
[057h 0087   1]                Local Apic ID : 03
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 05
[05Fh 0095   1]                Local Apic ID : 05
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 00
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 00
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 00
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 00
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 09
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 0A
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 53 41 4C 41 53 4B 41  // APIC^....SALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 01 01  // ................
    0050: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 00  // ................
    0070: 00 00 00 00 00 08 09 00 00 00 00 00 00 08 0A 00  // ................
    0080: 00 00 00 00 00 08 0B 00 00 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 09 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 0A 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 41
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000D7818018
[030h 0048   4]                Image OffsetX : 0000012C
[034h 0052   4]                Image OffsetY : 00000118

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 41 41 4C 41 53 4B 41  // BGRT8....AALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 00 00 18 80 81 D7 00 00 00 00  // ................
    0030: 2C 01 00 00 18 01 00 00                          // ,.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CB
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CDIT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 CB 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 4D 44 20 43 44 49 54 01 00 00 00 41 4D 44 20  // AMD CDIT....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000810
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4F
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CRAT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2064 (0x810)

    0000: 43 52 41 54 10 08 00 00 01 4F 41 4D 44 00 00 00  // CRAT.....OAMD...
    0010: 41 4D 44 20 43 52 41 54 01 00 00 00 41 4D 44 20  // AMD CRAT....AMD 
    0020: 01 00 00 00 21 00 00 00 01 00 00 00 00 00 00 00  // ....!...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 08 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 DF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 20  // ............... 
    00C0: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0300: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    03C0: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0440: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0450: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0480: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0490: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    04C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    04D0: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0500: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0510: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0540: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0550: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0580: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0590: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    05C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    05D0: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0600: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0610: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0640: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0650: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0680: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0690: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    06C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    06D0: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0700: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0710: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0750: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    07D0: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0280)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x02A0)
    Name (IO3L, 0x10)
    Name (IO4B, 0x02B0)
    Name (IO4L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (RXST, Zero)
    Name (U3ST, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xDBCFD000)
    Name (TPMC, 0xDBD01000)
    Name (TPMM, 0xFD110510)
    Name (FTPM, 0xFD110510)
    Name (PPIM, 0xDBF11D18)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PG29, Package (0x00){})
        Name (AG29, Package (0x00){})
        Name (PG2A, Package (0x00){})
        Name (AG2A, Package (0x00){})
        Name (PG2B, Package (0x00){})
        Name (AG2B, Package (0x00){})
        Name (PG2C, Package (0x00){})
        Name (AG2C, Package (0x00){})
        Name (PG2D, Package (0x00){})
        Name (AG2D, Package (0x00){})
        Name (PG2E, Package (0x00){})
        Name (AG2E, Package (0x00){})
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0001000000000000)
                    Name (UMAB, 0x0001000000000000)
                    Name (UMAM, 0x0001000000000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y0F, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PD16) /* \_SB_.PD16 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PD18) /* \_SB_.PD18 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PD1A) /* \_SB_.PD1A */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PD1C) /* \_SB_.PD1C */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1E) /* \_SB_.AR1E */
                    }

                    Return (PD1E) /* \_SB_.PD1E */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D015)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD100000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1F) /* \_SB_.AR1F */
                    }

                    Return (PD1F) /* \_SB_.PD1F */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D026)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D027)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D01D)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        SCF7,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2F), 
                        SCFF,   8, 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1F)
                        IRQNoFlags (_Y1D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IRQNoFlags (_Y20)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y21)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y26)
                        IRQ (Level, ActiveLow, Shared, _Y24)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y25)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 &= 0xCF
                                If (KBFG)
                                {
                                    OPT6 |= 0x10
                                }
                                Else
                                {
                                    OPT6 &= 0xEF
                                }

                                If (MSFG)
                                {
                                    OPT6 |= 0x20
                                }
                                Else
                                {
                                    OPT6 &= 0xDF
                                }

                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                OPT2 |= One
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    RGE0 |= 0x41
                                }
                                Else
                                {
                                    RGE0 &= 0xBE
                                }

                                If (MSFG)
                                {
                                    RGE0 |= 0x22
                                }
                                Else
                                {
                                    RGE0 &= 0xDD
                                }

                                RGE4 |= One
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x0A
                                OPT0 |= 0x20
                                RGE4 |= 0x10
                                LDN = 0x0B
                                OPT7 = 0x45
                                If ((OPT7 == 0x87))
                                {
                                    OPT7 = 0x45
                                }
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        If ((Arg0 == One))
                        {
                            PMFG = OPT3 /* \_SB_.PCI0.SBRG.SIO1.OPT3 */
                            OPT3 = 0xFF
                            OPT6 &= 0xCF
                            OPT2 &= 0xFE
                        }

                        If ((Arg0 >= 0x03))
                        {
                            PMFG = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            RGE0 &= 0x9F
                            RGE4 &= 0xFE
                        }

                        LDN = 0x0B
                        If ((OPT7 != Zero))
                        {
                            OPT7 = 0x87
                        }

                        LDN = 0x09
                        ACTR |= 0x08
                        OPT5 &= 0xDF
                        OPT4 &= 0xDF
                        LDN = 0x0F
                        RGE5 &= 0xDF
                        SCFF &= 0xF7
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)){}
                        If ((PMFG & 0x10)){}
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PD12) /* \_SB_.PD12 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (D038)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (D039)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (D03A)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (D03B)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            SPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    OperationRegion (DBGB, SystemIO, 0x80, One)
    Field (DBGB, ByteAcc, NoLock, Preserve)
    {
        P80B,   8
    }

    OperationRegion (DBGW, SystemIO, 0x80, 0x02)
    Field (DBGW, WordAcc, NoLock, Preserve)
    {
        P80W,   16
    }

    OperationRegion (DBGD, SystemIO, 0x80, 0x04)
    Field (DBGD, DWordAcc, NoLock, Preserve)
    {
        P80D,   32
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            SPIE,   1, 
            P80E,   1, 
                ,   2, 
            NI2C,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            SDMC,   1, 
                ,   2, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA306C), 
            RAR2,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1, 
            Offset (0xA30D0), 
                ,   13, 
            LCLK,   2
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            IM17,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FMIS, SystemMemory, 0xFED80E00, 0x0100)
        Field (FMIS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   13, 
            I24M,   1
        }

        OperationRegion (FGIO, SystemMemory, 0xFED81500, 0x0300)
        Field (FGIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA8), 
                ,   22, 
            O042,   1, 
            Offset (0x164), 
                ,   22, 
            O089,   1
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x62), 
            AMTD,   2, 
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        OperationRegion (SPIM, SystemMemory, 0xFEC10000, 0x0100)
        Field (SPIM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x1D), 
            ASCE,   2, 
            Offset (0x22), 
            SSSC,   16, 
            Offset (0xFC), 
            STRN,   1, 
                ,   2, 
            BOWS,   1, 
            DOWS,   1
        }

        Mutex (ASSM, 0x00)
        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        CreateWordField (SVBF, 0x14, RG22)
        CreateDWordField (SVBF, 0x18, SAR2)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }

            Return (Zero)
        }

        Method (OP80, 1, Serialized)
        {
            If (P80E)
            {
                P80D = Arg0
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (SPI1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (SPIE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC10000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.SPI1._CRS.RBUF */
            }

            Method (ASSC, 2, Serialized)
            {
                Acquire (ASSM, 0xFFFF)
                Local0 = Arg1
                Switch (ToInteger (Arg0))
                {
                    Case (0x03)
                    {
                        DOWS = One
                        STRN = One
                        While ((BOWS && STRN))
                        {
                            If (Arg1)
                            {
                                Stall (One)
                                Local0 -= One
                                If ((Local0 == Zero))
                                {
                                    Break
                                }
                            }
                        }

                        SAR2 = RAR2 /* \_SB_.RAR2 */
                        RAR2 = Zero
                        ASCE = 0x02
                        RG22 = SSSC /* \_SB_.SSSC */
                    }
                    Case (0x04)
                    {
                        SSSC = RG22 /* \_SB_.RG22 */
                        ASCE = Zero
                        RAR2 = SAR2 /* \_SB_.SAR2 */
                        Local0 = One
                        DOWS = Zero
                    }

                }

                Release (ASSM)
                Return (Local0)
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (RST, 0, NotSerialized)
            {
                Notify (GPIO, Zero) // Bus Check
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (UOL0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {5}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_ADR, One)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = 0xFF00
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (ECRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveLow, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (MHID, "AMDI0041")
        Name (MCID, "AMDI0041")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCI\\CC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((EMMD == Zero))
                {
                    Return (AHID) /* \_SB_.AHID */
                }

                If ((EMMD == One))
                {
                    Return (SHID) /* \_SB_.SHID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MHID) /* \_SB_.MHID */
                }

                Return (Zero)
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If ((EMMD == Zero))
                {
                    Return (ACID) /* \_SB_.ACID */
                }

                If ((EMMD == One))
                {
                    Return (SCID) /* \_SB_.SCID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MCID) /* \_SB_.MCID */
                }

                Return (Zero)
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    If ((EMMD == One))
                    {
                        Return (DCRS) /* \_SB_.DCRS */
                    }

                    Return (ECRS) /* \_SB_.ECRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }

            Device (CARD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    If ((EMMD == One))
                    {
                        If ((SDMC == One))
                        {
                            Return (Zero)
                        }

                        Return (One)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER0 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y27)
                    IRQNoFlags (_Y28)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y27._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y27._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR0))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER1 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y29)
                    IRQNoFlags (_Y2A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y29._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y29._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR1))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER2 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2B)
                    IRQNoFlags (_Y2C)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR2))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER3 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2D)
                    IRQNoFlags (_Y2E)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR3))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.PCI0.GP17.VGA)
    {
        Device (CAMF)
        {
            Name (_ADR, 0x1000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O042 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O042 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O042 = Zero
            }
        }

        Device (CAMR)
        {
            Name (_ADR, 0x2000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O089 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O089 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O089 = Zero
            }
        }

        Method (RCPU, 0, NotSerialized)
        {
            O089 = One
        }

        Method (RCPD, 0, NotSerialized)
        {
            O089 = Zero
        }

        Method (FCPU, 0, NotSerialized)
        {
            O042 = One
        }

        Method (FCPD, 0, NotSerialized)
        {
            O042 = Zero
        }

        Method (ICLE, 0, NotSerialized)
        {
            I24M = Zero
        }

        Method (ICLD, 0, NotSerialized)
        {
            I24M = One
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y30)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y32)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y30._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y30._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y31._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y31._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y32._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y32._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Name (RV2I, Zero)
    Name (ISDS, Zero)
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1C, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD1 */
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1C, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD1 */
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD1 */
                    }
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x0C, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x10, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD1 */
                    }
                }
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1C, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT7.PLD1 */
                    }
                }
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    If (RV2I)
                    {
                        Return (UPC2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.UPC2 */
                    }
                    Else
                    {
                        Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.UPC1 */
                    }
                }

                Name (PLD1, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x91, 0x1D, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x11, 0x0C, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    If (RV2I)
                    {
                        Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.PLD2 */
                    }
                    Else
                    {
                        Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT8.PLD1 */
                    }
                }
            }

            Device (PRT9)
            {
                Name (_ADR, 0x09)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RV2I)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRTA)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RV2I)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (ISDS)
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x5,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x5,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 5E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DBF11E00
[028h 0040   4]                 DSDT Address : DBE75230
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DBE75230
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 5E 41 4C 41 53 4B 41  // FACP.....^ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 1E F1 DB 30 52 E7 DB 00 01 09 00  // ........0R......
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 30 52 E7 DB  // ............0R..
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : CBBF3C41
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 41 3C BF CB 00 00 00 00  // FACS@...A<......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 E4 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 31 39 39 39  // ....$FID.x.A1999
    0030: 35 37 33 00 B0 D2 A3 0A CD 9B E9 9A 9A DB 36 CD  // 573...........6.
    0040: 08 19 80 3B 30 35 00 31 34 00 30 35 00 37 33 00  // ...;05.14.05.73.
    0050: E3 07 06 18 0F 3B 0E FF FF 41 4C 41 53 4B 41 41  // .....;...ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 42
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DCB92F30

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DCB92F50

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 42 41 4C 41 53 4B 41  // FPDTD....BALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 2F B9 DC  // ............0/..
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 2F B9 DC  // ............P/..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 6C
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AMD IVRS"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]                     Reserved : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 09
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 0A
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Unknown Subtable Type]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x11

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 6C 41 4D 44 20 20 00  // IVRS.....lAMD  .
    0010: 41 4D 44 20 49 56 52 53 01 00 00 00 41 4D 44 20  // AMD IVRS....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 09 A0 00 01  // H.......H.......
    0070: 48 00 00 00 0A 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 4F 00 00 00 00 00 00 00 00 00  // .J)".wO.........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 09 A0 00 01 48 00 00 00 0A 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD CPU", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000FA0, 
                0x000013F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
            /* 0028 */  0x0F, 0x00, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x07, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A014)
                CreateWordField (Arg1, 0x02, A015)
                CreateDWordField (Arg1, 0x04, A016)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateWordField (Local0, 0x02, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                CreateDWordField (Local0, 0x04, A019)
                A019 = A016 /* \_SB_.ALIB.A016 */
                A019 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A019 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A020 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A024 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A025 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A026 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A027)
                CreateDWordField (Local7, 0x04, A028)
                CreateDWordField (Local7, 0x08, A029)
                CreateDWordField (Local7, 0x0C, A030)
                CreateDWordField (Local7, 0x10, A031)
                CreateDWordField (Local7, 0x14, A032)
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A032 = 0x00
                A012 (0x51, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A006)
                CreateDWordField (Local6, 0x04, A007)
                CreateDWordField (Local6, 0x08, A008)
                CreateDWordField (Local6, 0x0C, A009)
                CreateDWordField (Local6, 0x10, A010)
                CreateDWordField (Local6, 0x14, A011)
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                A012 (0x52, Local6)
            }

            Return (0x00)
        }

        Method (A023, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A084 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A085 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A017)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A086)
            A017 = 0x04
            A034 = 0x00
            If ((Local2 == 0x00))
            {
                A086 = 0x00
            }
            Else
            {
                A086 = 0x01
            }

            Return (Local7)
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A079 (Arg1))
            }
        }

        Method (A085, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A080 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A020, 1, NotSerialized)
        {
            AD00 = Arg0
            A005 ()
        }

        Method (A024, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A025, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A033, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A017)
            A017 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A034 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A034 = 0x01
                Return (Local7)
            }

            A035 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A036 ()
            A034 = 0x02
            Return (Local7)
        }

        Method (A037, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A036 ()
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A039, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A040, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A041 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A036 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A042, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A035, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                If ((A043 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A044 (Local0)
                        A045 (Local0, Local1)
                    }
                    Else
                    {
                        A045 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A046, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A048, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A049 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            A048 ()
            A046 ()
            If ((AP02 != AP01))
            {
                A013 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                Local2 = A050 (Local0)
                If ((Local1 != Local2))
                {
                    A051 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A051 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A052 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A052 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A052 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A052 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A052 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A052 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A052 (Arg1))
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A053 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A053 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A053 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A053 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A053 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A053 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A053 ())
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A054 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A054 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A054 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A054 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A054 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A054 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A054 ())
            }
        }

        Method (A049, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A055 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A055 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A055 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A055 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A055 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A055 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A055 ())
            }
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A056 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A056 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A056 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A056 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A056 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A056 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A056 ())
            }
        }

        Method (A045, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A057 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A057 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A057 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A057 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A057 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A057 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A057 (Arg1))
            }
        }

        Method (A043, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }
        }

        Method (A041, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }
        }

        OperationRegion (A111, SystemMemory, AGRB, 0x1000)
        Field (A111, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A112,   32
        }

        BankField (A111, A112, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A111, A112, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A111, A112, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A071,   32
        }

        BankField (A111, A112, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A111, A112, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A111, A112, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A111, A112, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        BankField (A111, A112, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A111, A112, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A089,   32
        }

        BankField (A111, A112, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A090,   32
        }

        BankField (A111, A112, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A091,   32
        }

        BankField (A111, A112, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A092,   32
        }

        BankField (A111, A112, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A093,   32
        }

        BankField (A111, A112, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A111, A112, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A111, A112, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A067 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A067 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A067 (Arg1))
            }
        }

        Method (A088, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x000C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x000D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x000E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000F0300
                }

                Local1 = A089 /* \_SB_.A089 */
                Local1 &= 0xFF00FCFF
                A089 = (Local0 | Local1)
                Local1 = A089 /* \_SB_.A089 */
                A089 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0x00400000 | Local1)
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0x00400000 | Local1)
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0x00400000 | Local1)
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0x00400000 | Local1)
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0x00400000 | Local1)
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A004, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A087 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A088 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A012, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A097)
            CreateDWordField (Arg1, 0x04, A098)
            CreateDWordField (Arg1, 0x08, A099)
            CreateDWordField (Arg1, 0x0C, A100)
            CreateDWordField (Arg1, 0x10, A101)
            CreateDWordField (Arg1, 0x14, A102)
            A103 = 0x00
            While ((A103 != 0x00)){}
            A071 = A097 /* \_SB_.A012.A097 */
            A104 = A098 /* \_SB_.A012.A098 */
            A105 = A099 /* \_SB_.A012.A099 */
            A106 = A100 /* \_SB_.A012.A100 */
            A107 = A101 /* \_SB_.A012.A101 */
            A108 = A102 /* \_SB_.A012.A102 */
            A109 = Arg0
            While ((A103 == 0x00)){}
        }

        Method (A082, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg0
            A007 = Arg1
            A008 = Arg2
            A009 = Arg3
            A012 (0x0A, Local7)
        }

        Method (A026, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A110)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            Local0 = 0x02
            While ((Local0 < A110))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                If ((Local1 == 0x01))
                {
                    A006 = Local2
                    A012 (0x1E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A006 = Local2
                    A012 (0x1F, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A006 = Local2
                    A012 (0x1A, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A006 = Local2
                    A012 (0x1B, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A006 = Local2
                    A012 (0x1C, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A006 = Local2
                    A012 (0x1D, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A006 = Local2
                    A012 (0x26, Local7)
                }

                If ((Local1 == 0x0A))
                {
                    A006 = Local2
                    A012 (0x27, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A006 = Local2
                    A012 (0x20, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A006 = Local2
                    A012 (0x22, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A006 = Local2
                    A012 (0x24, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A006 = Local2
                    A012 (0x25, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A012 (0x2B, Local7)
                        }
                        Else
                        {
                            A012 (0x2A, Local7)
                        }
                    }
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR0.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR0.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR1.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR1.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR2.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR2.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR3.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR3.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR4.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR4.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR5.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR5.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR6.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR6.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A003, 0, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A113 (Local0)
                    Local0++
                }
            }
        }

        Method (A070, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg1
            A007 = Arg2
            A012 (Arg0, Local7)
        }

        Method (A113, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A068 ())
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            A003 ()
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A004 (Local0, Local1)
        }

        Method (A005, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            A011 = 0x00
            If ((AD00 == 0x00))
            {
                A012 (0x18, Local7)
            }
            Else
            {
                A012 (0x19, Local7)
            }
        }

        Method (A013, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD PT", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 20 external control methods found during
     * disassembly, but only 0 were resolved (20 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (M097, UnknownObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.DDPM */
            }

            Device (SWDS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "Set VDDIO", 
                "Set VTT", 
                "", 
                ""
            })
            Name (OBIT, Package (0xE9)
            {
                0x00020001, 
                0x014D, 
                0x0898, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x09C4, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0xC8, 
                0x07D0, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x04B0, 
                0x0708, 
                0x32, 
                0x00030002, 
                0x0258, 
                0x0384, 
                0x19, 
                Zero
            })
            Name (OBD1, Package (0xEA)
            {
                0x00020001, 
                0x23, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x1F)
            {
                0x00030001, 
                0x0D, 
                0x04B0, 
                0x04E2, 
                0x0514, 
                0x0546, 
                0x0578, 
                0x05AA, 
                0x05DC, 
                0x060E, 
                0x0640, 
                0x0672, 
                0x06A4, 
                0x06D6, 
                0x0708, 
                0x00030002, 
                0x0D, 
                0x0258, 
                0x0271, 
                0x028A, 
                0x02A3, 
                0x02BC, 
                0x02D5, 
                0x02EE, 
                0x0307, 
                0x0320, 
                0x0339, 
                0x0352, 
                0x036B, 
                0x0384, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateDWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateDWordField (OBUF, 0x7E, BFMX)
                CreateDWordField (OBUF, 0x80, BGMX)
                CreateDWordField (OBUF, 0x82, BVDG)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Name (CMDV, 0x04)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xDBED9018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                MRSD,   480, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x04
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x04
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x04
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x04
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x04
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x04
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x04
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x04
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x04
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x04
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x04
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x04
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x04
            }

            Name (WQBA, Buffer (0x09D4)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xC4, 0x09, 0x00, 0x00, 0x5C, 0x34, 0x00, 0x00,  // ....\4..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC8, 0x99, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x00, 0x6B,  // ...gZ..k
                /* 0140 */  0x67, 0x07, 0xD9, 0x82, 0xD0, 0x59, 0x20, 0x56,  // g....Y V
                /* 0148 */  0x63, 0x28, 0x82, 0x88, 0x10, 0x34, 0x8A, 0xF1,  // c(...4..
                /* 0150 */  0x22, 0x84, 0x0A, 0x11, 0x25, 0xEA, 0x39, 0x07,  // "...%.9.
                /* 0158 */  0xA9, 0x4D, 0x80, 0x32, 0x10, 0xA1, 0x05, 0x33,  // .M.2...3
                /* 0160 */  0x02, 0xB3, 0x7F, 0x06, 0x60, 0x16, 0x20, 0xFE,  // ....`. .
                /* 0168 */  0x08, 0x2C, 0xE1, 0x44, 0x20, 0x23, 0xA3, 0xA1,  // .,.D #..
                /* 0170 */  0x87, 0x05, 0x9F, 0x04, 0xD8, 0x01, 0xC1, 0xF3,  // ........
                /* 0178 */  0x39, 0x35, 0x13, 0x38, 0x30, 0x84, 0x78, 0x25,  // 95.80.x%
                /* 0180 */  0x40, 0xD4, 0xD1, 0x82, 0x12, 0x58, 0xCA, 0xD1,  // @....X..
                /* 0188 */  0x80, 0xD8, 0x1E, 0x98, 0xEE, 0x01, 0x47, 0x78,  // ......Gx
                /* 0190 */  0xEE, 0xBE, 0x1C, 0x9C, 0x9A, 0x7F, 0x1A, 0x9E,  // ........
                /* 0198 */  0xE6, 0x43, 0x02, 0x66, 0x88, 0x1E, 0xEB, 0x41,  // .C.f...A
                /* 01A0 */  0x04, 0x3C, 0x44, 0x76, 0x4A, 0x30, 0x20, 0xDE,  // .<DvJ0 .
                /* 01A8 */  0xFB, 0xB5, 0x80, 0x8C, 0xE0, 0x25, 0xC1, 0x80,  // .....%..
                /* 01B0 */  0x9E, 0xC4, 0x03, 0x02, 0x58, 0x0E, 0x1A, 0x07,  // ....X...
                /* 01B8 */  0x7E, 0x42, 0x15, 0xDF, 0x01, 0xE8, 0x91, 0x80,  // ~B......
                /* 01C0 */  0xCD, 0x28, 0xBE, 0x09, 0xCA, 0x3A, 0x3E, 0xA0,  // .(...:>.
                /* 01C8 */  0xE7, 0x1C, 0xED, 0xD9, 0xE1, 0x65, 0xA1, 0xD9,  // .....e..
                /* 01D0 */  0x2B, 0x06, 0x21, 0x78, 0x0D, 0xF0, 0x4D, 0xC1,  // +.!x..M.
                /* 01D8 */  0xA7, 0x11, 0x8B, 0x5A, 0x9D, 0x9C, 0xAC, 0xCA,  // ...Z....
                /* 01E0 */  0x23, 0xA6, 0xE0, 0x1E, 0x02, 0x97, 0x01, 0xA7,  // #.......
                /* 01E8 */  0xA1, 0x7B, 0xBC, 0xE0, 0x50, 0x30, 0x5E, 0xFA,  // .{..P0^.
                /* 01F0 */  0xFF, 0x1F, 0x2F, 0xB8, 0xE7, 0x75, 0xBC, 0x60,  // ../..u.`
                /* 01F8 */  0x39, 0x26, 0x3C, 0x6C, 0x54, 0x05, 0xA1, 0x41,  // 9&<lT..A
                /* 0200 */  0x1C, 0x70, 0xF3, 0x03, 0x20, 0x57, 0x0B, 0x8F,  // .p.. W..
                /* 0208 */  0x98, 0xCD, 0xE5, 0xAC, 0xD8, 0x11, 0x85, 0x0F,  // ........
                /* 0210 */  0x8F, 0x0F, 0xC3, 0x23, 0x7E, 0x6F, 0x28, 0x16,  // ...#~o(.
                /* 0218 */  0x44, 0x02, 0x21, 0x74, 0x66, 0x38, 0x72, 0xB0,  // D.!tf8r.
                /* 0220 */  0x7C, 0x71, 0x9E, 0x20, 0x12, 0x58, 0xDA, 0xD0,  // |q. .X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x51, 0x18, 0x33,  // .....Q.3
                /* 0468 */  0x20, 0x2C, 0xC0, 0xE9, 0x40, 0xA2, 0x5E, 0x04,  //  ,..@.^.
                /* 0470 */  0x14, 0xC6, 0x87, 0x1A, 0x9F, 0x99, 0xE0, 0x4A,  // .......J
                /* 0478 */  0x82, 0x43, 0x9D, 0xD3, 0xD8, 0xE9, 0xF8, 0xE4,  // .C......
                /* 0480 */  0x4E, 0xE4, 0xF5, 0xC0, 0x93, 0x7B, 0x78, 0x82,  // N....{x.
                /* 0488 */  0x71, 0x4C, 0xF0, 0xB4, 0x4E, 0xCA, 0xDA, 0x8F,  // qL..N...
                /* 0490 */  0x40, 0xE4, 0xFF, 0x7F, 0xCD, 0x62, 0x67, 0x05,  // @....bg.
                /* 0498 */  0x8E, 0xC6, 0x4F, 0x52, 0x60, 0xBD, 0x30, 0xF8,  // ..OR`.0.
                /* 04A0 */  0x98, 0x00, 0x8E, 0x59, 0xBF, 0x46, 0x61, 0xB0,  // ...Y.Fa.
                /* 04A8 */  0x42, 0xC5, 0x68, 0xF4, 0x1A, 0x44, 0x40, 0x8F,  // B.h..D@.
                /* 04B0 */  0xAF, 0xAF, 0x61, 0xE8, 0x4E, 0x60, 0xA8, 0x88,  // ..a.N`..
                /* 04B8 */  0x21, 0xDE, 0x0C, 0xEC, 0xF2, 0x3C, 0x84, 0x3C,  // !....<.<
                /* 04C0 */  0x34, 0x81, 0x0B, 0xFB, 0xA1, 0x09, 0xEC, 0xA1,  // 4.......
                /* 04C8 */  0xCE, 0x64, 0x34, 0xD2, 0x68, 0x50, 0xE7, 0x74,  // .d4.hP.t
                /* 04D0 */  0x7E, 0x20, 0x78, 0xE4, 0xF2, 0xB1, 0xC3, 0x20,  // ~ x.... 
                /* 04D8 */  0x27, 0x7A, 0x5A, 0x8F, 0x0B, 0x4F, 0x03, 0x1E,  // 'zZ..O..
                /* 04E0 */  0x37, 0xBB, 0x26, 0xF8, 0x83, 0xE0, 0xE3, 0x01,  // 7.&.....
                /* 04E8 */  0xFE, 0x00, 0x11, 0xF0, 0x44, 0x9F, 0x3C, 0x60,  // ....D.<`
                /* 04F0 */  0x9D, 0x40, 0xF0, 0x47, 0x0D, 0xF8, 0xE3, 0xF1,  // .@.G....
                /* 04F8 */  0x31, 0xC0, 0xC7, 0x0E, 0x2E, 0x7F, 0x10, 0xA8,  // 1.......
                /* 0500 */  0xA3, 0x22, 0x1F, 0xE9, 0x69, 0xBD, 0x0D, 0xF8,  // ."..i...
                /* 0508 */  0x90, 0x70, 0x58, 0xEC, 0xCC, 0xE1, 0x93, 0x11,  // .pX.....
                /* 0510 */  0xFE, 0xFF, 0x3F, 0x1E, 0x70, 0x1E, 0xDB, 0x1F,  // ..?.p...
                /* 0518 */  0x32, 0x7C, 0x65, 0xF0, 0x7C, 0x7D, 0xA2, 0x05,  // 2|e.|}..
                /* 0520 */  0xCB, 0xAD, 0xC3, 0x87, 0x86, 0x50, 0x4F, 0x1D,  // .....PO.
                /* 0528 */  0x9E, 0xC1, 0xFB, 0x85, 0x4F, 0x20, 0xC0, 0x44,  // ....O .D
                /* 0530 */  0xAE, 0x16, 0x88, 0x1E, 0x8E, 0x19, 0x5E, 0xA7,  // ......^.
                /* 0538 */  0x6C, 0x9C, 0x35, 0xE9, 0x79, 0xC0, 0x72, 0x0F,  // l.5.y.r.
                /* 0540 */  0x08, 0xBA, 0x46, 0x60, 0x6E, 0x10, 0x41, 0x3C,  // ..F`n.A<
                /* 0548 */  0xFC, 0x37, 0x0A, 0x7E, 0x68, 0x14, 0xA0, 0x0E,  // .7.~h...
                /* 0550 */  0x66, 0x86, 0xB0, 0x34, 0x0A, 0x09, 0x83, 0xD0,  // f..4....
                /* 0558 */  0x88, 0x7C, 0xF4, 0x20, 0x70, 0x14, 0xC4, 0xA3,  // .|. p...
                /* 0560 */  0x77, 0xCC, 0xE3, 0x13, 0x7A, 0xA8, 0x3E, 0x06,  // w...z.>.
                /* 0568 */  0x78, 0x12, 0xB8, 0x50, 0x07, 0x1F, 0x7A, 0x5C,  // x..P..z\
                /* 0570 */  0xC0, 0xE3, 0x3D, 0x10, 0xFB, 0x1C, 0xC0, 0xC6,  // ..=.....
                /* 0578 */  0x8E, 0x3B, 0x79, 0xC0, 0x1D, 0x07, 0xFE, 0xC4,  // .;y.....
                /* 0580 */  0x89, 0x3F, 0xAB, 0xF1, 0x53, 0x0F, 0x38, 0x8F,  // .?..S.8.
                /* 0588 */  0x9C, 0xB8, 0xFF, 0xFF, 0xE1, 0x00, 0x1E, 0x90,  // ........
                /* 0590 */  0xEF, 0x03, 0x56, 0x7A, 0x26, 0xA0, 0x73, 0x08,  // ..Vz&.s.
                /* 0598 */  0x11, 0x26, 0x9A, 0xE1, 0x31, 0x81, 0x8F, 0x4F,  // .&..1..O
                /* 05A0 */  0xF4, 0x44, 0xEA, 0x71, 0xF1, 0x51, 0xFA, 0x0C,  // .D.q.Q..
                /* 05A8 */  0xC3, 0xB0, 0x1F, 0x51, 0x7C, 0x4C, 0x3C, 0xC0,  // ...Q|L<.
                /* 05B0 */  0x97, 0x83, 0x67, 0x3E, 0x0C, 0xAC, 0xC7, 0xCD,  // ..g>....
                /* 05B8 */  0x61, 0x8D, 0x16, 0xF6, 0x70, 0x9F, 0x21, 0x7C,  // a...p.!|
                /* 05C0 */  0xFF, 0xF0, 0xCC, 0x7C, 0x6D, 0xF4, 0xC9, 0x03,  // ...|m...
                /* 05C8 */  0x2C, 0x47, 0x29, 0xF8, 0x43, 0xC5, 0x9D, 0x05,  // ,G).C...
                /* 05D0 */  0xE0, 0x1E, 0x98, 0xD8, 0x1C, 0x9E, 0x06, 0xF0,  // ........
                /* 05D8 */  0x32, 0x0F, 0x11, 0xA8, 0x81, 0x58, 0xE4, 0x02,  // 2....X..
                /* 05E0 */  0x75, 0x5C, 0xF1, 0x48, 0x4C, 0x60, 0x79, 0x07,  // u\.HL`y.
                /* 05E8 */  0x08, 0xD4, 0xF9, 0xC1, 0xB2, 0x0E, 0x10, 0x28,  // .......(
                /* 05F0 */  0x21, 0x70, 0x14, 0xC4, 0x07, 0x08, 0x1F, 0xD3,  // !p......
                /* 05F8 */  0x6D, 0xE4, 0x00, 0x81, 0x3E, 0xC0, 0x30, 0x88,  // m...>.0.
                /* 0600 */  0x87, 0x4E, 0x13, 0xF8, 0x28, 0xE3, 0x03, 0x04,  // .N..(...
                /* 0608 */  0xF0, 0x18, 0x07, 0xFE, 0x00, 0x01, 0xEF, 0xFF,  // ........
                /* 0610 */  0x4F, 0xE0, 0x13, 0x30, 0xF0, 0x39, 0x3F, 0x80,  // O..0.9?.
                /* 0618 */  0xE3, 0x24, 0xEA, 0xF3, 0x03, 0xB8, 0x4E, 0x00,  // .$....N.
                /* 0620 */  0x3E, 0x3F, 0x00, 0xD7, 0x01, 0x3E, 0x0A, 0x80,  // >?...>..
                /* 0628 */  0xE5, 0x4C, 0xC6, 0xE6, 0xF0, 0x52, 0x73, 0xE6,  // .L...Rs.
                /* 0630 */  0xAF, 0x4C, 0x3E, 0xF1, 0x62, 0x4E, 0xBD, 0x5C,  // .L>.bN.\
                /* 0638 */  0xD7, 0x08, 0x48, 0xC4, 0x33, 0x04, 0x6A, 0x10,  // ..H.3.j.
                /* 0640 */  0x3E, 0x98, 0xFB, 0x38, 0xC1, 0x7C, 0x1E, 0x82,  // >..8.|..
                /* 0648 */  0xA4, 0x1A, 0x45, 0xF0, 0xBE, 0x15, 0xB0, 0x08,  // ..E.....
                /* 0650 */  0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49, 0x3F, 0x46,  // ...x.I?F
                /* 0658 */  0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x8F, 0xDA, 0x07,  // ...Q....
                /* 0660 */  0x09, 0xDB, 0x38, 0xDB, 0xA2, 0x0F, 0xC3, 0xFC,  // ..8.....
                /* 0668 */  0x28, 0xC0, 0x4F, 0x11, 0x70, 0xFF, 0xFF, 0xB3,  // (.O.p...
                /* 0670 */  0xF0, 0x29, 0x0C, 0x77, 0xF4, 0x00, 0xC7, 0x45,  // .).w...E
                /* 0678 */  0xEC, 0xD0, 0xCE, 0xEE, 0x21, 0x21, 0x4A, 0xCC,  // ....!!J.
                /* 0680 */  0x33, 0x78, 0xF3, 0x33, 0x60, 0xD8, 0x68, 0x1E,  // 3x.3`.h.
                /* 0688 */  0x23, 0x0E, 0xE7, 0x1C, 0x7D, 0x51, 0xF3, 0x9C,  // #...}Q..
                /* 0690 */  0x62, 0x3D, 0xBE, 0xF1, 0x23, 0x05, 0x5C, 0x14,  // b=..#.\.
                /* 0698 */  0x1F, 0x29, 0xE0, 0xCE, 0xE4, 0x3C, 0x30, 0xEA,  // .)...<0.
                /* 06A0 */  0xC6, 0x22, 0x78, 0x5F, 0x0B, 0xF1, 0x07, 0x0B,  // ."x_....
                /* 06A8 */  0xE0, 0x71, 0x5C, 0xF2, 0xC1, 0x02, 0x5C, 0x90,  // .q\...\.
                /* 06B0 */  0x3E, 0x58, 0x00, 0xD7, 0xF3, 0x81, 0x4F, 0x07,  // >X....O.
                /* 06B8 */  0x60, 0xBD, 0x90, 0xF1, 0xFB, 0x01, 0xFB, 0xFF,  // `.......
                /* 06C0 */  0xDF, 0x0F, 0x70, 0x27, 0x0C, 0x18, 0xE7, 0x03,  // ..p'....
                /* 06C8 */  0xCC, 0x0D, 0xC3, 0xB1, 0x56, 0xAA, 0x13, 0x06,  // ....V...
                /* 06D0 */  0x2E, 0xD6, 0x83, 0x42, 0x03, 0x61, 0xC3, 0x7B,  // ...B.a.{
                /* 06D8 */  0xFE, 0x79, 0x32, 0xE4, 0x87, 0x19, 0x16, 0x05,  // .y2.....
                /* 06E0 */  0x4E, 0x47, 0x0B, 0x9F, 0x2C, 0x1C, 0x82, 0x42,  // NG..,..B
                /* 06E8 */  0x07, 0x31, 0x9F, 0x30, 0xB8, 0x98, 0x13, 0x06,  // .1.0....
                /* 06F0 */  0x05, 0x31, 0xA0, 0x93, 0x9E, 0xC3, 0xD0, 0xA7,  // .1......
                /* 06F8 */  0x4D, 0x1F, 0x1B, 0xD8, 0xED, 0xDE, 0xF7, 0x0B,  // M.......
                /* 0700 */  0xCF, 0xC5, 0x73, 0xE6, 0x78, 0x3E, 0x2F, 0x33,  // ..s.x>/3
                /* 0708 */  0xD4, 0x37, 0x13, 0xF0, 0x5C, 0x29, 0xD8, 0x71,  // .7..\).q
                /* 0710 */  0x1E, 0x73, 0x9B, 0x64, 0x07, 0x4E, 0x76, 0x2C,  // .s.d.Nv,
                /* 0718 */  0x30, 0xCA, 0xF1, 0xBE, 0x16, 0x5A, 0xCD, 0x5D,  // 0....Z.]
                /* 0720 */  0x01, 0x35, 0x23, 0x0C, 0x81, 0x07, 0xEC, 0x93,  // .5#.....
                /* 0728 */  0x18, 0x98, 0xF4, 0xDD, 0x28, 0x40, 0x8E, 0xCE,  // ....(@..
                /* 0730 */  0x85, 0x8E, 0x1E, 0x75, 0x00, 0xF0, 0xD1, 0x8E,  // ...u....
                /* 0738 */  0x8F, 0xDE, 0x47, 0x6C, 0x1F, 0x57, 0xE0, 0x1E,  // ..Gl.W..
                /* 0740 */  0xEE, 0x7C, 0x86, 0x02, 0xC7, 0xFF, 0xFF, 0x0C,  // .|......
                /* 0748 */  0x05, 0x5C, 0x06, 0xE6, 0x19, 0x3E, 0xA1, 0x80,  // .\...>..
                /* 0750 */  0xEB, 0xFE, 0xC0, 0x2F, 0xAA, 0x98, 0x89, 0x3C,  // .../...<
                /* 0758 */  0x0B, 0xC3, 0x38, 0xA5, 0x00, 0x8F, 0xD1, 0xFB,  // ..8.....
                /* 0760 */  0x94, 0x02, 0xAE, 0x03, 0x80, 0x4F, 0x29, 0xC0,  // .....O).
                /* 0768 */  0x75, 0x8E, 0x0F, 0x05, 0x60, 0x39, 0xA3, 0x44,  // u...`9.D
                /* 0770 */  0xF1, 0xFD, 0xD7, 0x13, 0xB1, 0xF1, 0xE1, 0xD3,  // ........
                /* 0778 */  0x0B, 0x8A, 0xC7, 0xF2, 0x6C, 0xCE, 0xCE, 0x94,  // ....l...
                /* 0780 */  0x3A, 0x9B, 0xA0, 0xA3, 0xBD, 0x1E, 0x34, 0xE8,  // :.....4.
                /* 0788 */  0x07, 0x15, 0xCF, 0x3E, 0xFC, 0xF1, 0x45, 0x78,  // ...>..Ex
                /* 0790 */  0x3E, 0x35, 0xF0, 0xFF, 0x3F, 0x81, 0xE3, 0x9C,  // >5..?...
                /* 0798 */  0x4D, 0x50, 0x41, 0x28, 0x74, 0xEC, 0xF4, 0x71,  // MPA(t..q
                /* 07A0 */  0x82, 0x4B, 0x3A, 0x4E, 0x50, 0x10, 0x03, 0x3A,  // .K:NP..:
                /* 07A8 */  0xEF, 0x11, 0xCF, 0xC3, 0xA0, 0xC7, 0x09, 0x7E,  // .......~
                /* 07B0 */  0xEA, 0xF3, 0x2D, 0xE1, 0x38, 0x9E, 0x40, 0x12,  // ..-.8.@.
                /* 07B8 */  0xCC, 0x77, 0x12, 0xA0, 0x97, 0x13, 0x78, 0xE7,  // .w....x.
                /* 07C0 */  0x75, 0xF0, 0x8C, 0xC2, 0x3B, 0x39, 0x0B, 0x86,  // u...;9..
                /* 07C8 */  0xF0, 0x66, 0xCD, 0x8E, 0x13, 0xF8, 0xCB, 0xC1,  // .f......
                /* 07D0 */  0xB3, 0xC2, 0x83, 0x3A, 0xBF, 0x9E, 0xC0, 0xBC,  // ...:....
                /* 07D8 */  0xE7, 0x81, 0xEB, 0x78, 0x02, 0x2C, 0x64, 0x1E,  // ...x.,d.
                /* 07E0 */  0x00, 0x50, 0xC7, 0x46, 0x1F, 0x1C, 0xF9, 0x01,  // .P.F....
                /* 07E8 */  0xC0, 0xA1, 0x8F, 0x27, 0xE8, 0x99, 0xF8, 0x58,  // ...'...X
                /* 07F0 */  0xF4, 0x54, 0xE2, 0x0B, 0x00, 0x3F, 0xBB, 0xE9,  // .T...?..
                /* 07F8 */  0x7C, 0x02, 0x8A, 0x73, 0x26, 0x78, 0xC6, 0xC1,  // |..s&x..
                /* 0800 */  0xAE, 0x00, 0xF8, 0x33, 0x00, 0xE6, 0xFF, 0x7F,  // ...3....
                /* 0808 */  0x42, 0x81, 0x73, 0x24, 0x03, 0xDF, 0x44, 0x7C,  // B.s$..D|
                /* 0810 */  0xAA, 0x38, 0x10, 0xEC, 0x49, 0x16, 0x78, 0xC3,  // .8..I.x.
                /* 0818 */  0xF2, 0x93, 0x2C, 0xE0, 0xE3, 0x36, 0x82, 0x9D,  // ..,..6..
                /* 0820 */  0xC5, 0x33, 0x09, 0x23, 0x18, 0xF9, 0x68, 0x82,  // .3.#..h.
                /* 0828 */  0x3A, 0x22, 0x3B, 0xE8, 0x29, 0x0C, 0x31, 0xCE,  // :";.).1.
                /* 0830 */  0xC7, 0x0A, 0x63, 0x44, 0x2E, 0x7E, 0xD4, 0x9A,  // ..cD.~..
                /* 0838 */  0x8C, 0xCF, 0x66, 0xBE, 0xAC, 0xB3, 0xC3, 0x0F,  // ..f.....
                /* 0840 */  0x8E, 0x60, 0xA0, 0x03, 0x0A, 0xEA, 0x38, 0xE6,  // .`....8.
                /* 0848 */  0xB3, 0x18, 0xB8, 0xFE, 0xFF, 0x67, 0x31, 0x80,  // .....g1.
                /* 0850 */  0x07, 0x67, 0x77, 0x8F, 0x9E, 0x1F, 0xDB, 0x39,  // .gw....9
                /* 0858 */  0x88, 0x47, 0xEF, 0xF0, 0x67, 0x31, 0xE8, 0x61,  // .G..g1.a
                /* 0860 */  0xCF, 0x62, 0x40, 0x5B, 0xF0, 0x59, 0x0C, 0x94,  // .b@[.Y..
                /* 0868 */  0xB7, 0x08, 0xFC, 0xFF, 0xFF, 0x16, 0x81, 0x3B,  // .......;
                /* 0870 */  0x83, 0x02, 0xAF, 0xB5, 0xF9, 0x84, 0x02, 0xAE,  // ........
                /* 0878 */  0x3B, 0x83, 0x4F, 0x28, 0xC0, 0xF5, 0x08, 0x80,  // ;.O(....
                /* 0880 */  0x3B, 0x83, 0x82, 0xE3, 0x04, 0xC0, 0x7C, 0xDD,  // ;.....|.
                /* 0888 */  0x00, 0x28, 0xC8, 0x23, 0x00, 0xFE, 0x0A, 0xEF,  // .(.#....
                /* 0890 */  0x83, 0x09, 0x2E, 0xDE, 0x49, 0x05, 0xC5, 0xE1,  // ....I...
                /* 0898 */  0x78, 0x27, 0x15, 0xC4, 0x54, 0x22, 0xBF, 0xB5,  // x'..T"..
                /* 08A0 */  0x78, 0x02, 0xE1, 0x0F, 0x2E, 0xCE, 0xFB, 0x19,  // x.......
                /* 08A8 */  0x3F, 0x95, 0xC1, 0x10, 0x75, 0xB0, 0x40, 0xC9,  // ?...u.@.
                /* 08B0 */  0x38, 0x58, 0x50, 0x10, 0x03, 0x3A, 0xE3, 0x29,  // 8XP..:.)
                /* 08B8 */  0x05, 0x7D, 0x2A, 0xE3, 0x97, 0x11, 0x0F, 0x2C,  // .}*....,
                /* 08C0 */  0xC1, 0x4C, 0xD7, 0x14, 0xA8, 0xFF, 0x7F, 0x64,  // .L.....d
                /* 08C8 */  0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B, 0xF6, 0x20,  // _@p.... 
                /* 08D0 */  0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03, 0x73, 0x44,  // a..d..sD
                /* 08D8 */  0x01, 0x6C, 0x48, 0x1E, 0x3A, 0x4A, 0xE4, 0xD0,  // .lH.:J..
                /* 08E0 */  0x29, 0x88, 0x87, 0x6E, 0x1A, 0x1F, 0x51, 0x70,  // )..n..Qp
                /* 08E8 */  0x63, 0x65, 0x17, 0x02, 0x58, 0x51, 0x4F, 0x29,  // ce..XQO)
                /* 08F0 */  0xA0, 0x10, 0x39, 0x7C, 0xD0, 0x8C, 0xE3, 0xE8,  // ..9|....
                /* 08F8 */  0x9E, 0x7A, 0x3C, 0x0F, 0x7E, 0x27, 0xF6, 0x31,  // .z<.~'.1
                /* 0900 */  0x0F, 0xEE, 0x49, 0x05, 0x77, 0x6A, 0xC4, 0x9D,  // ..I.wj..
                /* 0908 */  0x54, 0xC0, 0x30, 0x47, 0xEC, 0xA9, 0x0C, 0x1C,  // T.0G....
                /* 0910 */  0xFF, 0xFF, 0x23, 0x28, 0x70, 0xF4, 0x70, 0x04,  // ..#(p.p.
                /* 0918 */  0x05, 0xB4, 0x1C, 0x52, 0xF8, 0x31, 0x03, 0x73,  // ...R.1.s
                /* 0920 */  0x35, 0xE0, 0x47, 0x50, 0x8C, 0x42, 0x9B, 0x3E,  // 5.GP.B.>
                /* 0928 */  0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99,  // 5..jP.F.
                /* 0930 */  0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98, 0x25,  // ...Tj..%
                /* 0938 */  0x28, 0x45, 0x58, 0xAD, 0x86, 0xEB, 0x50, 0x0F,  // (EX...P.
                /* 0940 */  0x07, 0x81, 0x38, 0xEE, 0x9A, 0x35, 0x64, 0xB2,  // ..8..5d.
                /* 0948 */  0x54, 0x81, 0x58, 0x88, 0x0A, 0x10, 0x26, 0x66,  // T.X...&f
                /* 0950 */  0x65, 0x02, 0xB1, 0xD4, 0x95, 0x09, 0xC4, 0x51,  // e......Q
                /* 0958 */  0x7C, 0x80, 0xB0, 0x80, 0x4A, 0x40, 0x58, 0x54,  // |...J@XT
                /* 0960 */  0x2B, 0x40, 0x54, 0x0B, 0x08, 0x8B, 0xE5, 0x05,  // +@T.....
                /* 0968 */  0x84, 0x05, 0x5B, 0x9D, 0x40, 0x1C, 0xC6, 0x0D,  // ..[.@...
                /* 0970 */  0x08, 0x93, 0xF2, 0x70, 0xD0, 0x60, 0x88, 0x9D,  // ...p.`..
                /* 0978 */  0xF3, 0xA8, 0x0E, 0x8E, 0x06, 0x11, 0x90, 0x43,  // .......C
                /* 0980 */  0xFB, 0x01, 0x62, 0x12, 0x16, 0x2D, 0x20, 0x0B,  // ..b..- .
                /* 0988 */  0x57, 0x04, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0x3A,  // W..b...:
                /* 0990 */  0xD6, 0x26, 0x20, 0x8B, 0x02, 0x11, 0x90, 0xA5,  // .& .....
                /* 0998 */  0x69, 0x02, 0x62, 0x42, 0x41, 0x04, 0xE4, 0x90,  // i.bBA...
                /* 09A0 */  0xA2, 0x20, 0xFE, 0xFF, 0x81, 0x9C, 0x18, 0x44,  // . .....D
                /* 09A8 */  0x40, 0x0E, 0x6F, 0x0A, 0x88, 0x49, 0x51, 0x05,  // @.o..IQ.
                /* 09B0 */  0xC4, 0xD4, 0xBF, 0x0E, 0x04, 0xE4, 0x28, 0x20,  // ......( 
                /* 09B8 */  0x02, 0x72, 0x20, 0x5B, 0x40, 0x2C, 0x1E, 0x88,  // .r [@,..
                /* 09C0 */  0x80, 0xAC, 0xF0, 0x71, 0x27, 0x20, 0xCB, 0x05,  // ...q' ..
                /* 09C8 */  0x11, 0x90, 0x23, 0x18, 0x03, 0x62, 0x81, 0x40,  // ..#..b.@
                /* 09D0 */  0x04, 0xE4, 0xFF, 0x3F                           // ...?
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 11 external control methods found during
     * disassembly, but only 0 were resolved (11 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xDBF13018, 0x000100CD)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                        One)
                }
                Else
                {
                    Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                        One)
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
                Else
                {
                    M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                    0x04), Zero, One))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IPTS (Arg0)
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != Zero))
        {
            \_SB.M284 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IWAK (Arg0)
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GPP0.SWUS.SWDS.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (Zero, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x86)
                        M112 (Local0, Zero)
                        M111 (Local0, One)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, One)
                        M000 (0x87)
                        HPOK = Zero
                        Sleep (0x14)
                        M201 = One
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            M023 (Zero, M091, M090)
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (Zero, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (Zero, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (Zero, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = Zero
                                    If ((M025 == Zero))
                                    {
                                        M091
                                        M090
                                        Ones
                                        Local0 = One
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, One))
                                        M111 (M049, M133 (0x18, One))
                                        HPOK = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x88)
                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (Zero, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = Zero
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), 
                                                    M201 = Zero, \_SB.ALIB, 0x06), Local7, If ((M097 (Zero, 0x54 = M019 (
                                                    Zero, M091, M090), Local0, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (Zero, 0x10, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x89), Else
                                                                                {
                                                                                    M000 (0x8A)
                                                                                    M201 = Zero
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x8B)
                                                                                    M111 (M049, M133 (0x17, Zero))
                                                                                    M111 (M049, M133 (0x18, Zero))
                                                                                    M112 (Local0, Zero)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, Zero)
                                                                                    M023 (Zero, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (Zero, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = Zero
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (Zero, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )){})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One))
            }
            Else
            {
                M111 (M049, M133 (0x17, Zero))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One))
            }
            Else
            {
                M111 (M049, M133 (0x18, Zero))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, 0x08, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                One = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : A0
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FD110510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

/**** ACPI subtable terminates early - may be older version (dump table) */

Raw Table Data: Length 56 (0x38)

    0000: 54 50 4D 32 38 00 00 00 04 A0 41 4C 41 53 4B 41  // TPM28.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 11 FD 00 00 00 00  // ................
    0030: 02 00 00 00 00 00 00 00                          // ........


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 39
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 39 41 4C 41 53 4B 41  // UEFIB....9ALASKA
    0010: 41 20 4D 20 49 20 00 00 02 00 00 00 20 20 20 20  // A M I ......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 A0 DE DB 00 00  // ...26...........
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000EC84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 60548 (0xEC84)

    0000: 56 46 43 54 84 EC 00 00 01 CF 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 7F 68 00 00 00 00  // ...........h....
    0060: 01 00 00 00 00 EC 00 00 55 AA 76 E9 F3 02 00 00  // ........U.v.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: A4 02 00 00 00 00 49 42 4D 26 B2 8A 00 00 00 00  // ......IBM&......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 7C 02 00 00 00 00 00 00 30 37 2F 31 39 2F 31 37  // |.......07/19/17
    00C0: 20 31 36 3A 34 37 00 00 34 00 00 00 E9 E1 03 00  //  16:47..4.......
    00D0: E9 EB 03 00 00 00 48 01 09 00 00 00 0B 80 13 E8  // ......H.........
    00E0: 03 00 00 00 00 80 00 80 00 80 00 18 F4 38 8A 50  // .............8.P
    00F0: E3 28 44 20 7A C1 CB 38 9E F2 FF FF 00 00 00 00  // .(D z..8........
    0100: 00 00 8C AF 00 00 00 7F 68 F8 AA 0C 01 F1 00 00  // ........h.......
    0110: 30 55 00 38 88 6F 00 B8 63 B3 80 AF 3A 14 84 00  // 0U.8.o..c...:...
    0120: 60 C0 FB 48 00 42 00 82 80 CD 31 32 00 00 00 00  // `..H.B....12....
    0130: 1E 10 00 29 40 0C 06 07 05 00 00 00 00 68 01 00  // ...)@........h..
    0140: 00 00 02 00 00 00 00 00 22 10 06 04 1C 00 00 00  // ........".......
    0150: 08 00 00 00 01 00 00 00 07 01 00 00 32 00 00 00  // ............2...
    0160: 0C 00 00 00 00 00 00 00 01 00 00 00 00 87 0C 00  // ................
    0170: 02 10 36 0B 00 00 00 00 C3 04 00 00 00 00 00 00  // ..6.............
    0180: 00 00 00 00 F9 49 22 10 04 06 00 19 00 00 00 00  // .....I".........
    0190: 30 24 30 10 00 80 5E 00 20 70 00 00 65 00 00 00  // 0$0...^. p..e...
    01A0: 00 04 00 C0 E8 A2 00 00 F8 D0 8F 08 00 00 00 00  // ................
    01B0: 31 31 33 2D 44 30 35 30 30 31 35 30 2D 31 30 32  // 113-D0500150-102
    01C0: 00 56 45 47 41 31 30 00 50 43 49 5F 45 58 50 52  // .VEGA10.PCI_EXPR
    01D0: 45 53 53 00 48 42 4D 32 00 0D 0A 56 65 67 61 31  // ESS.HBM2...Vega1
    01E0: 30 20 41 31 20 58 54 20 44 30 35 30 30 31 20 33  // 0 A1 XT D05001 3
    01F0: 32 4D 78 31 32 38 20 38 35 32 65 2F 39 34 35 6D  // 2Mx128 852e/945m
    0200: 20 30 2E 39 35 56 20 20 20 20 20 20 20 20 20 20  //  0.95V          
    0210: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0220: 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00  //        ..... ...
    0230: 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41  // (C) 1988-2010, A
    0240: 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65  // dvanced Micro De
    0250: 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D  // vices, Inc..ATOM
    0260: 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31  // BIOSBK-AMD VER01
    0270: 36 2E 30 30 31 2E 30 30 31 2E 30 30 30 2E 30 30  // 6.001.001.000.00
    0280: 38 37 30 37 00 44 30 35 30 30 31 35 30 2E 31 30  // 8707.D0500150.10
    0290: 32 00 31 34 33 35 35 38 35 20 00 33 39 31 35 30  // 2.1435585 .39150
    02A0: 34 20 20 00 20 20 20 20 20 20 20 20 00 41 4D 44  // 4  .        .AMD
    02B0: 5F 56 45 47 41 31 30 5F 44 30 35 30 30 31 5F 4D  // _VEGA10_D05001_M
    02C0: 42 41 5F 41 31 5F 48 42 4D 5F 38 47 42 5F 53 45  // BA_A1_HBM_8GB_SE
    02D0: 43 4F 4E 44 41 52 59 5C 63 6F 6E 66 69 67 2E 68  // CONDARY\config.h
    02E0: 00 00 00 90 28 00 02 02 41 54 4F 4D 00 C0 F3 03  // ....(...ATOM....
    02F0: 1D 02 C9 02 71 01 26 04 00 00 00 00 02 10 36 0B  // ....q.&.......6.
    0300: A4 02 FE 8D A4 8E 00 00 E6 9A 00 00 50 43 49 52  // ............PCIR
    0310: 02 10 7F 68 00 00 18 00 00 00 00 03 76 00 01 10  // ...h........v...
    0320: 00 00 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0330: 00 CB 07 A9 B9 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66  // ...fPfQfRfSfUfVf
    0370: 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 D3 28 0B  // W.......... ..(.
    0380: C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A  // .u....f_f^f]f[fZ
    0390: 66 59 66 58 07 1F CB E8 ED 29 E8 BF 27 32 D2 8D  // fYfX.....)..'2..
    03A0: 3E 7C 02 89 55 16 E8 81 0E E8 41 0E E8 95 0F E8  // >|..U.....A.....
    03B0: B1 02 E8 D2 24 0B C0 74 0C E8 39 00 E8 A9 4F E8  // ....$..t..9...O.
    03C0: 40 0E E8 FE 4F E8 A9 00 B4 80 E8 B9 27 8A C7 66  // @...O.......'..f
    03D0: C1 E0 10 8A E3 B0 20 66 A3 B2 8A E8 B0 02 E8 53  // ...... f.......S
    03E0: 0E E8 C8 29 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ...)f_f^f]f[fZfY
    03F0: 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 05 04 00 75  // fX.........>...u
    0400: 04 89 1E 03 04 1E 2E 8E 1E FB 03 9C FA 66 C7 06  // .............f..
    0410: 08 01 65 F0 00 F0 C7 06 40 00 26 04 89 1E 42 00  // ..e.....@.&...B.
    0420: C7 06 B4 01 26 04 89 1E B6 01 C7 06 7C 00 94 58  // ....&.......|..X
    0430: 89 1E 7E 00 C7 06 0C 01 A7 5C 89 1E 0E 01 C7 06  // ..~......\......
    0440: A8 04 C6 52 89 1E AA 04 2E 8E 1E 03 04 8B C3 A3  // ...R............
    0450: C8 52 A3 D8 52 A3 EA 52 9D 1F C3 50 4D 49 44 26  // .R..R..R...PMID&
    0460: 04 F8 42 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00  // ..B.............
    0470: 00 BB 00 00 E8 A6 0D 66 C1 E8 10 A3 AA 02 BB 0B  // .......f........
    0480: 00 E8 99 0D 8D 3E 7C 02 66 89 45 18 C3 00 E8 F6  // .....>|.f.E.....
    0490: 28 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05  // (...u..=.....Ou.
    04A0: E8 E3 3D EB 07 E8 38 43 EB 02 B4 01 E8 FD 28 CF  // ..=...8C......(.
    04B0: E8 D4 28 E8 20 00 EB 02 B4 01 E8 EF 28 CB E8 C6  // ..(. .......(...
    04C0: 28 80 FC 4F 75 05 E8 BD 3D EB 07 E8 12 43 EB 02  // (..Ou...=....C..
    04D0: B4 01 E8 D7 28 CB 1E 06 66 50 66 51 66 52 66 53  // ....(...fPfQfRfS
    04E0: 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00  // fUfVfW..<.u)....
    04F0: 66 C1 E0 10 2E A1 18 00 8D 36 6F 01 8A 3C 80 EF  // f........6o..<..
    0500: 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89  // 0.....^..F.f....
    0510: 46 00 E9 2C 01 3C 05 75 18 E8 6A 26 E8 3D 26 2E  // F..,.<.u..j&.=&.
    0520: A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 10  // ......V..F..^...
    0530: 01 3C 06 75 32 E8 CD 0C 66 D1 E0 8B EC 89 46 14  // .<.u2...f.....F.
    0540: BB 02 00 E8 D7 0C 88 46 18 E8 C1 0C 66 89 46 0C  // .......F....f.F.
    0550: BB 09 00 E8 C7 0C 33 C0 66 89 46 00 2E 8B 16 AA  // ......3.f.F.....
    0560: 02 89 56 10 E9 DA 00 3C 0B 75 24 0A DB 75 11 B9  // ..V....<.u$..u..
    0570: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 C1 00  // ........^..N....
    0580: 8A C7 E8 D4 00 E8 38 01 0F 84 AD 00 E9 B2 00 3C  // ......8........<
    0590: 17 75 21 E8 70 0F 74 06 E8 E7 0A E8 48 14 E8 26  // .u!.p.t.....H..&
    05A0: 06 E8 3C 0C 33 C9 66 C1 E8 10 0A E8 8B EC 89 4E  // ..<.3.f........N
    05B0: 14 E9 8D 00 3C 18 75 45 0A FF 75 10 E8 F3 0E 8B  // ....<.uE..u.....
    05C0: EC 89 46 0C E8 6F 06 89 4E 10 EB 75 E8 37 0F 75  // ..F..o..N..u.7.u
    05D0: 68 BB 00 1C E8 6C 27 66 0B C0 74 5D 23 C9 74 59  // h....l'f..t]#.tY
    05E0: E8 0B 0F BE 00 1C E8 61 0C 74 4E BE 00 1C B0 40  // .......a.tN....@
    05F0: E8 AC 0C E8 BC 0E 8B EC 89 46 0C EB 44 3C 82 75  // .........F..D<.u
    0600: 1A 80 FB 05 75 15 0A FF 75 0A E8 00 0E 8B EC 89  // ....u...u.......
    0610: 46 14 EB 2D E8 CD 0D 74 18 EB 26 3C 8E 75 12 80  // F..-...t..&<.u..
    0620: FF 01 74 08 80 FF 02 75 08 80 C1 02 E8 26 0E EB  // ..t....u.....&..
    0630: 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB  // ....F.......F...
    0640: 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B  // .2....f.f_f^f]f[
    0650: 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3  // fZfYfX...Q......
    0660: E0 59 C3 E8 6C 27 C3 0C 01 C3 50 51 B0 B6 E6 43  // .Y..l'....PQ...C
    0670: B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61  // .3.B...B.a.....a
    0680: 8A C4 B9 C8 00 E8 74 23 E6 61 59 58 C3 00 1E 56  // ......t#.aYX...V
    0690: 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E  // ...>...v........
    06A0: 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC  // ........!..3.2..
    06B0: 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00  // .........&!.^...
    06C0: 57 0B C0 75 0F E8 82 09 74 25 E8 24 00 F6 C3 04  // W..u....t%.$....
    06D0: 74 F3 EB 11 8B C8 E8 AE 21 23 C1 74 12 E8 11 00  // t.......!#.t....
    06E0: F6 C3 04 74 0A 5F 8D 5C 28 E8 D2 04 0B F6 C3 5F  // ...t._.\(......_
    06F0: C3 50 E8 37 09 E8 00 21 E8 0E 21 0A C9 74 59 0A  // .P.7...!..!..tY.
    0700: ED 74 10 8A CD B5 02 E8 75 22 B1 02 8D 9C 48 01  // .t......u"....H.
    0710: E8 D4 25 E8 25 02 F6 C3 04 74 08 E8 4A 0A E8 71  // ..%.%....t..J..q
    0720: 1F 74 35 8D 5C 28 E8 34 00 E8 59 14 33 C9 50 8D  // .t5.\(.4..Y.3.P.
    0730: 9C 28 01 E8 0D 26 66 0B C0 74 03 B9 00 08 58 0A  // .(...&f..t....X.
    0740: C0 75 0E 8D 5C 28 80 CD 02 E8 1A 00 74 03 80 CD  // .u..\(......t...
    0750: 04 8D 9C 48 01 E8 8F 25 E8 E0 01 58 C3 51 B9 49  // ...H...%...X.Q.I
    0760: 00 E8 47 22 59 C3 51 E8 1A 00 75 14 E8 9D 01 3C  // ..G"Y.Q...u....<
    0770: 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02  // .u.. ..'.u......
    0780: 33 C9 59 C3 53 E8 BB 25 66 3D 00 FF FF FF 75 0E  // 3.Y.S..%f=....u.
    0790: 83 C3 04 E8 AD 25 66 3D FF FF FF 00 75 00 5B C3  // .....%f=....u.[.
    07A0: 50 52 32 D2 E8 9C 25 02 D0 02 D4 66 C1 E8 10 02  // PR2...%....f....
    07B0: D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 6C 08  // ..........ZX..l.
    07C0: 8D 9C 4C 01 E8 1D 01 E8 71 01 B5 13 F6 C3 08 75  // ..L.....q......u
    07D0: 0C E8 94 09 8A EA 80 FD 13 75 02 B5 03 66 50 8D  // .........u...fP.
    07E0: 9C B8 02 66 33 C0 8A C5 E8 B8 24 66 58 A9 C8 0E  // ...f3.....$fX...
    07F0: 74 48 E8 46 01 F6 C3 08 74 0C 8D 5C 28 E8 EB 00  // tH.F....t..\(...
    0800: 75 04 E8 5D 00 C3 B5 02 E8 0A 01 E8 2D 01 F6 C3  // u..]........-...
    0810: 04 74 17 8D 5C 28 E8 30 01 E8 30 03 E8 12 01 80  // .t..\(.0..0.....
    0820: FD 00 75 3D B5 02 E8 FE 00 C3 8D 9C 68 01 B8 00  // ..u=........h...
    0830: 55 E8 CB 0E B5 02 E8 EE 00 C3 A9 02 00 74 22 B5  // U............t".
    0840: 04 E8 D1 00 8D 9C 68 01 56 E8 C6 22 8B F7 E8 3B  // ......h.V.."...;
    0850: 03 5E E8 74 22 E8 CF 00 8D 5C 28 E8 94 22 E8 EB  // .^.t"....\(.."..
    0860: 02 C3 B5 01 E8 AE 00 B5 02 E8 BB 00 E8 CC 00 F6  // ................
    0870: C3 04 75 0C B8 00 55 E8 85 0E B5 02 E8 17 00 C3  // ..u...U.........
    0880: E8 C6 00 B5 02 8D 5C 28 E8 6E 00 75 02 B5 01 E8  // ......\(.n.u....
    0890: 04 00 E8 B7 02 C3 8D 9C B4 02 B1 02 E8 48 24 B5  // .............H$.
    08A0: 02 E8 83 00 C3 8D 9C 4C 01 E8 38 00 E8 8C 00 F6  // .......L..8.....
    08B0: C3 04 74 23 8D 5C 28 E8 8F 00 E8 55 22 8D 9C 68  // ..t#.\(....U"..h
    08C0: 01 06 0E 07 B9 07 00 E8 1B 21 07 E8 63 00 E8 97  // .........!..c...
    08D0: 08 8D 5C 28 E8 46 22 8D 5C 28 E8 F5 21 B8 02 00  // ..\(.F".\(..!...
    08E0: E8 DA FE C3 B9 61 00 E8 C1 20 C3 53 81 C3 05 01  // .....a... .S....
    08F0: E8 50 24 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75  // .P$$.<.[....=..u
    0900: 0A 53 83 C3 18 E8 3B 24 5B A8 01 C3 53 83 C3 12  // .S....;$[...S...
    0910: E8 30 24 5B C3 8D 9C B4 02 32 C9 E8 C9 23 C3 8D  // .0$[.....2...#..
    0920: 9C B4 02 E8 1D 24 C3 8D 9C B4 02 B1 01 E8 B7 23  // .....$.........#
    0930: C3 8D 9C B4 02 B1 01 E8 C5 23 C3 66 50 8D 9C 48  // .........#.fP..H
    0940: 01 E8 FF 23 8A D8 66 58 C3 55 57 51 B9 08 00 BD  // ...#..fX.UWQ....
    0950: 00 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 E4 23 E8  // .....+....XN..#.
    0960: 98 01 E2 EE 8D 5C 4B E8 D9 23 B9 04 00 8B D0 BF  // .....\K..#......
    0970: 6E 09 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 22  // n..U.t.f......."
    0980: 23 8B 45 04 8D 9A F8 01 E8 30 23 83 C5 08 83 C7  // #.E......0#.....
    0990: 08 E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 A3 23  // ....|^...3.....#
    09A0: 0B C0 74 09 E8 12 01 E8 4C 00 83 C5 1C 83 C7 12  // ..t.....L.......
    09B0: E2 E9 32 ED E8 70 FF 8D 5C 28 E8 4F FF 3D 01 04  // ..2..p..\(.O.=..
    09C0: 75 10 83 C3 14 E8 7B 23 24 70 C0 E8 04 8A E8 E8  // u.....{#$p......
    09D0: 55 FF 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04  // U.Y_]. .X.<.....
    09E0: 00 03 3C 00 00 08 00 05 00 04 4B 00 00 01 80 02  // ..<.......K.....
    09F0: E0 01 3C 00 20 00 51 8D 1D E8 47 23 8D 9A 68 01  // ..<. .Q...G#..h.
    0A00: E8 B8 22 8D 5D 02 E8 3A 23 8D 9A 6A 01 E8 89 00  // ..".]..:#..j....
    0A10: 8D 5D 05 E8 2D 23 8D 9A 6E 01 E8 7C 00 8D 5D 08  // .]..-#..n..|..].
    0A20: E8 20 23 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F  // . #....f........
    0A30: 8A F0 C0 EE 04 8A EC C0 E5 06 8A FC C0 E7 04 80  // ................
    0A40: E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0  // ............?...
    0A50: C0 EC 02 0A F4 8B C3 8D 9A 74 01 E8 5D 22 8D 9A  // .........t..]"..
    0A60: 72 01 8B C1 E8 54 22 8D 9A 76 01 33 C0 8A C6 E8  // r....T"..v.3....
    0A70: 49 22 8D 9A 78 01 33 C0 8A C2 E8 3E 22 8D 5D 0C  // I"..x.3....>".].
    0A80: E8 C0 22 8D 9A 7A 01 E8 0F 00 8D 5D 0F E8 B3 22  // .."..z.....]..."
    0A90: 8D 9A 7E 01 E8 24 22 59 C3 8B C8 8A D4 66 C1 C8  // ..~..$"Y.....f..
    0AA0: 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 0B 22  // ..............."
    0AB0: 83 C3 02 8B C2 E8 03 22 C3 8D 5D 11 E8 84 22 8A  // ......."..]...".
    0AC0: E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8  // .......t........
    0AD0: 03 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4  // .$.<.u...@<.u...
    0AE0: D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB  // ....t......t....
    0AF0: 8B C2 8D 9A 80 01 E8 C2 21 C3 3C 01 74 3D 8B D0  // ........!.<.t=..
    0B00: 0F B6 C6 24 3F 04 3C 8D 9A F8 01 E8 AD 21 0F B6  // ...$?.<......!..
    0B10: C2 83 C0 1F C1 E0 03 8D 9A F4 01 E8 9D 21 0F B6  // .............!..
    0B20: DE C1 EB 06 C1 E3 02 2E F7 A7 D6 0A 2E F7 B7 D4  // ................
    0B30: 0A 8D 9A F6 01 E8 83 21 83 C5 08 C3 01 00 01 00  // .......!........
    0B40: 04 00 03 00 05 00 04 00 10 00 09 00 57 66 51 8D  // ............WfQ.
    0B50: 9C 68 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B  // .h......=...t.f.
    0B60: D1 E8 49 0E 83 C7 1C EB EC 66 59 5F C3 50 53 51  // ..I......fY_.PSQ
    0B70: B9 07 00 53 8B DA E8 CA 21 83 F8 00 5B 74 09 66  // ...S....!...[t.f
    0B80: C1 E3 10 8B DA E8 38 1E 59 5B 58 C3 51 53 B9 07  // ......8.Y[X.QS..
    0B90: 00 E8 45 1E 5B 59 C3 66 50 53 83 C3 06 E8 A3 21  // ..E.[Y.fPS.....!
    0BA0: 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 95 21 8B C8  // [..f...S.....!..
    0BB0: 5B 66 58 C3 8D 9C 48 01 32 C9 E8 2A 21 C3 57 B9  // [fX...H.2..*!.W.
    0BC0: 20 00 E8 20 1E 5F C3 33 C9 E8 A9 1E 75 3C 66 BA  //  .. ._.3....u<f.
    0BD0: 37 F1 FF FF 66 33 C0 E8 ED 05 33 C0 E8 6B 04 74  // 7...f3....3..k.t
    0BE0: 1C A9 C8 0E 74 F6 E8 08 FB F6 C3 04 75 05 F6 C3  // ....t.......u...
    0BF0: 18 74 E9 E8 30 00 50 E8 C3 FB 58 EB DF E8 1C 00  // .t..0.P...X.....
    0C00: 75 08 E8 31 00 8B C1 E8 B3 FB C3 8D 5D 28 66 C1  // u..1........](f.
    0C10: E3 10 8D 5C 28 B9 49 00 E8 A5 1D C3 66 50 E8 BF  // ...\(.I.....fP..
    0C20: 05 8B C8 66 58 C3 66 52 66 BA FF FF FF FF 33 D0  // ...fX.fRf.....3.
    0C30: E8 94 05 66 5A C3 50 53 52 E8 E0 FF 75 09 33 C0  // ...fZ.PSR...u.3.
    0C40: E8 07 04 8B C8 EB 10 83 F9 02 74 0B E8 36 09 80  // ..........t..6..
    0C50: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66  // ..u....Z[X.Vf3.f
    0C60: BA 00 F0 FF FF E8 59 08 66 C1 E6 10 E8 E8 03 0B  // ......Y.f.......
    0C70: C0 74 03 E8 1C 00 E8 39 08 5E C3 66 52 66 8B D0  // .t.....9.^.fRf..
    0C80: E8 40 16 8D 9C 1C 03 E8 B9 20 8A C2 E8 14 20 66  // .@....... .... f
    0C90: 5A C3 50 51 E8 95 03 50 32 C0 E8 0A 05 E8 16 03  // Z.PQ...P2.......
    0CA0: E8 98 00 8D 9C 40 03 E8 99 20 38 E8 74 0A 8A C5  // .....@... 8.t...
    0CB0: E8 F0 1F B0 02 E8 EF 04 58 E8 CA 00 E8 A8 00 E8  // ........X.......
    0CC0: 8C 00 8D 9C 4C 01 E8 7A 20 8B C8 8B D3 8D 9C 00  // ....L..z .......
    0CD0: 03 E8 6F 20 3B C1 74 05 B0 02 E8 CA 04 E8 8D FE  // ..o ;.t.........
    0CE0: 8D 9C 00 03 E8 B9 15 8D 9C D8 02 E8 B5 1F E8 8A  // ................
    0CF0: FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1  // .f.....f........
    0D00: 00 E8 48 04 8A E9 8D 9C DC 02 32 C9 E8 D8 1F E8  // ..H.......2.....
    0D10: 31 04 66 25 FF 0F 00 00 59 58 66 BA FF FF FF FF  // 1.f%....YXf.....
    0D20: 33 D0 E8 9C 07 33 D2 C3 53 66 50 8D 9C D4 02 E8  // 3....3..SfP.....
    0D30: 11 20 8A C4 E8 6C 1F 66 58 5B C3 53 66 50 8D 9C  // . ...l.fX[.SfP..
    0D40: D4 02 E8 FE 1F 8A E0 E8 59 1F 66 58 5B C3 E8 97  // ........Y.fX[...
    0D50: 03 E8 52 03 8A DD E8 FF 16 8A E9 8D 9C 3C 03 32  // ..R..........<.2
    0D60: C9 E8 83 1F 0B DB C3 83 EC 08 8B EC E8 79 03 E8  // .............y..
    0D70: 34 03 E8 85 16 8D 9C 4C 03 E8 C7 1F 8A 46 00 E8  // 4......L.....F..
    0D80: 21 1F 83 C4 08 C3 8D 9C D4 02 E8 B6 1F 32 C0 E8  // !............2..
    0D90: 11 1F C3 E8 0A 00 8D 9C D0 02 32 C9 E8 48 1F C3  // ..........2..H..
    0DA0: B5 00 8D 1D E8 9C 1F 66 8B D0 8D 9C 02 03 E8 92  // .......f........
    0DB0: 1F 0B C0 74 1C 51 8B C8 8D 9C 06 03 E8 84 1F 66  // ...t.Q.........f
    0DC0: C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00 EB 02 B5  // .....Yf;.u......
    0DD0: 02 C3 E8 4F 03 8D 9C 40 03 B1 03 E8 09 1F E8 50  // ...O...@.......P
    0DE0: FB 8D 9C 40 03 B1 02 E8 FD 1E E8 B9 02 80 FD 00  // ...@............
    0DF0: 75 1D E8 94 00 66 81 FA F0 D2 00 00 75 06 66 BA  // u....f......u.f.
    0E00: 78 69 00 00 E8 BE 00 E8 F7 00 E8 8D 03 EB 38 E8  // xi............8.
    0E10: 63 03 E8 85 03 66 52 E8 D9 02 0B D2 74 07 E8 31  // c....fR.....t..1
    0E20: 16 66 5A EB 22 E8 40 03 E8 97 18 66 5A 51 E8 75  // .fZ.".@....fZQ.u
    0E30: 02 80 FD 02 59 75 10 B5 04 66 81 FA 74 40 00 00  // ....Yu...f..t@..
    0E40: 76 05 B5 08 66 D1 EA 8D 9C 54 03 66 8B C2 E8 52  // v...f....T.f...R
    0E50: 1E 8D 9C 40 03 E8 EB 1E 8A E5 E8 46 1E E8 26 01  // ...@.......F..&.
    0E60: 8D 9C 48 03 32 C9 E8 7E 1E E8 7C 02 E8 37 02 E8  // ..H.2..~..|..7..
    0E70: E3 15 8D 9C 58 03 32 C9 E8 6C 1E E8 6A 02 E8 25  // ....X.2..l..j..%
    0E80: 02 8D 9C 60 03 E8 90 15 C3 53 8D 9C 29 01 E8 B2  // ...`.....S..)...
    0E90: 1E 66 33 D2 0A C0 75 05 BA 48 3F 5B C3 8A D0 66  // .f3...u..H?[...f
    0EA0: B8 8C 0A 00 00 66 F7 E2 66 8B F8 E8 BA 02 E8 E1  // .....f..f.......
    0EB0: 17 74 0D E8 32 02 B3 00 E8 CC 14 66 3B D7 76 03  // .t..2......f;.v.
    0EC0: 66 8B D7 5B C3 B7 01 53 8D 9C 42 03 E8 74 1E 8A  // f..[...S..B..t..
    0ED0: C8 5B 66 52 E8 83 00 E8 9B 02 66 3B D1 66 5A 76  // .[fR......f;.fZv
    0EE0: 09 D0 E7 E8 07 00 38 EF 72 DD 8A EF C3 53 8D 9C  // ......8.r....S..
    0EF0: 2A 01 E8 4E 1E 24 0F 8A E8 0A ED 75 02 B5 01 5B  // *..N.$.....u...[
    0F00: C3 51 83 EC 08 8B EC 66 C7 46 00 48 3F 78 69 66  // .Q.....f.F.H?xif
    0F10: C7 46 04 F0 D2 00 00 E8 D9 01 0B D2 74 03 E8 47  // .F..........t..G
    0F20: 15 8A FD 53 8D 9C 42 03 E8 18 1E 8A C8 5B E8 58  // ...S..B......[.X
    0F30: FF 66 33 C0 8B 46 00 66 3B C2 73 19 66 8B D0 E8  // .f3..F.f;.s.f...
    0F40: 18 00 E8 30 02 66 3B D1 72 05 83 C5 02 EB D4 66  // ...0.f;.r......f
    0F50: 33 D2 8B 56 00 83 C4 08 59 C3 66 52 52 32 ED 83  // 3..V....Y.fRR2..
    0F60: C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 33  // .......f3...ZQf3
    0F70: C0 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1  // .....f..f...Yf..
    0F80: 66 8B C8 66 5A C3 E8 6A 01 0B D2 74 0B E8 16 00  // f..fZ..j...t....
    0F90: 0A ED 75 11 E8 45 14 C3 B5 00 E8 CB 01 E8 EE 16  // ..u..E..........
    0FA0: 75 03 E8 01 00 C3 B5 00 8D 9C 31 01 E8 94 1D A8  // u.........1.....
    0FB0: 01 74 02 B5 01 C3 53 E8 39 01 66 C1 E2 10 E8 27  // .t....S.9.f....'
    0FC0: 01 8D 9C B8 02 E8 7B 1D 8A E8 E8 EC 13 8A EB 5B  // ......{........[
    0FD0: C3 57 53 53 E8 DF FF E8 0E 01 5B E8 4A 14 74 49  // .WSS......[.J.tI
    0FE0: 80 FD 00 75 24 53 E8 A0 FE E8 45 F9 8A CD E8 FC  // ...u$S....E.....
    0FF0: FE 8A FD E8 64 FF 5B E8 49 1D 66 25 FF FF 00 00  // ....d.[.I.f%....
    1000: 66 3B C8 73 21 32 DB EB 20 80 FD 02 75 18 53 E8  // f;.s!2.. ...u.S.
    1010: 56 01 E8 8A 16 5B 74 0E 8D 1F E8 26 1D 3D 74 40  // V....[t....&.=t@
    1020: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    1030: 55 18 23 F0 74 09 8B C6 E8 F4 16 8B F3 0B DB 5B  // U.#.t..........[
    1040: C3 51 E8 F1 FB E8 0F 00 59 C3 51 50 E8 38 18 8B  // .Q......Y.QP.8..
    1050: C8 58 E8 02 00 59 C3 57 53 E8 69 18 0B C0 74 09  // .X...Y.WS.i...t.
    1060: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    1070: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    1080: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB  // _.3....t........
    1090: 00 E8 17 19 83 C6 08 E8 9D 17 EB E8 BB F0 16 B8  // ................
    10A0: 5A A5 E8 16 1C C3 53 66 50 8D 9C 40 03 E8 93 1C  // Z.....SfP..@....
    10B0: 8A E8 66 58 5B C3 8D 9C 69 03 E8 86 1C C3 8D 9C  // ..fX[...i.......
    10C0: 64 03 E8 7E 1C 0B C0 C3 53 66 50 8D 9C D4 02 E8  // d..~....SfP.....
    10D0: 71 1C 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8  // q...fX[.SfP.....
    10E0: 61 1C 8A C8 66 58 5B C3 53 8D 5C 14 E8 54 1C 8B  // a...fX[.S.\..T..
    10F0: D0 5B C3 53 66 50 8D 5C 16 E8 47 1C 8B D0 66 58  // .[.SfP.\..G...fX
    1100: 5B C3 53 66 50 8D 9C 50 03 E8 37 1C 66 8B D0 66  // [.SfP..P..7.f..f
    1110: 58 5B C3 53 66 50 8D 9C 54 03 E8 26 1C 66 8B D0  // X[.SfP..T..&.f..
    1120: 66 58 5B C3 53 66 50 8D 5C 10 E8 16 1C 8B C8 66  // fX[.SfP.\......f
    1130: 58 5B C3 66 50 53 8D 9C 41 03 E8 06 1C 5B 8A D8  // X[.fPS..A....[..
    1140: 66 58 C3 53 8D 5C 08 E8 F9 1B 5B C3 53 50 8D 9C  // fX.S.\....[.SP..
    1150: 4C 03 E8 EE 1B 8A C8 58 5B C3 53 50 8D 9C 4D 03  // L......X[.SP..M.
    1160: E8 E0 1B 8A C8 58 5B C3 53 50 8D 5C 0C E8 D3 1B  // .....X[.SP.\....
    1170: 8B D0 58 5B C3 53 66 50 8D 9C 00 03 E8 C4 1B 66  // ..X[.SfP.......f
    1180: 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 B5 1B C3 51  // 3...fX[..\.....Q
    1190: 8D 5C 04 32 C9 E8 4F 1B 59 C3 8D 9C 50 03 E8 A2  // .\.2..O.Y...P...
    11A0: 1B 8B C2 E8 FD 1A C3 53 51 8A E8 E8 DA FF 24 FD  // .......SQ.....$.
    11B0: 0A E8 E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8 82  // .....Y[.fP......
    11C0: 1B 66 8B D0 66 58 C3 53 66 50 51 66 8B C8 BB 00  // .f..fX.SfPQf....
    11D0: 00 E8 3C 15 23 C2 0B C1 E8 3E 15 59 66 58 5B C3  // ..<.#....>.YfX[.
    11E0: BB 00 00 E8 2A 15 66 25 CA 0E 00 00 C3 E8 79 17  // ....*.f%......y.
    11F0: E8 43 17 E8 21 17 75 09 E8 BB 18 E8 9B 16 E8 22  // .C..!.u........"
    1200: 17 C3 B0 01 C3 55 B3 01 E8 2B 19 5D C3 66 53 66  // .....U...+.].fSf
    1210: BB 04 00 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1  // ........3.f[.Uf.
    1220: E3 10 BB 00 00 E8 0E 19 5D C3 E8 35 18 BB 0A 00  // ........]..5....
    1230: E8 E6 14 C3 BB 0A 00 E8 D6 14 66 8B C8 E8 22 18  // ..........f...".
    1240: BB 0A 00 66 2B C1 E8 D0 14 C3 E8 29 00 0B C9 74  // ...f+......)...t
    1250: 22 E8 07 FA E8 1B 07 66 51 66 8B C8 BB 07 00 E8  // "......fQf......
    1260: AE 14 66 25 00 FE 00 00 66 0B C1 E8 AB 14 66 59  // ..f%....f.....fY
    1270: 0C 01 C3 32 C0 C3 E8 65 02 0B C9 75 06 E8 B6 F9  // ...2...e...u....
    1280: E8 6B 02 E8 B0 F9 66 C1 E6 10 33 C0 E8 B2 FD 74  // .k....f...3....t
    1290: 09 E8 04 03 75 F6 33 C8 EB F2 66 C1 EE 10 C3 A8  // ....u.3...f.....
    12A0: 10 75 63 E8 DE 06 66 C1 E6 10 33 C0 E8 9B FD 74  // .uc...f...3....t
    12B0: 35 E8 78 FD 50 51 8B C8 E8 F7 01 85 C1 59 58 74  // 5.x.PQ.......YXt
    12C0: 0D 50 E8 C3 FE 24 03 3C 03 58 75 E0 EB 0C 50 E8  // .P...$.<.Xu...P.
    12D0: B6 FE A8 01 58 74 D5 E8 61 FA 50 E8 C8 07 58 B5  // ....Xt..a.P...X.
    12E0: 00 E8 AB FE EB C6 E8 C9 01 E8 40 FD E8 32 01 B1  // ..........@..2..
    12F0: 00 E8 3C 07 66 C1 EE 10 E8 82 06 A8 20 75 40 A8  // ..<.f....... u@.
    1300: 40 75 03 E8 44 0D E8 69 06 0A C0 75 05 B5 01 E8  // @u..D..i...u....
    1310: BC 0D E8 9D 01 E8 14 FD E8 4D FE E8 74 13 75 14  // .........M..t.u.
    1320: E8 62 02 0A DB 74 0D E8 11 FA E8 79 07 B5 00 E8  // .b...t.....y....
    1330: 5D FE EB 08 E8 51 07 B5 01 E8 53 FE E8 E6 00 C3  // ]....Q....S.....
    1340: E8 44 15 C3 E8 3B FD E8 9C 06 33 C9 E8 9F 01 66  // .D...;....3....f
    1350: 33 D2 66 33 C0 E8 6F FE E8 52 00 B1 FF E8 84 00  // 3.f3..o..R......
    1360: 33 C0 E8 E5 FC 74 0A E8 C2 FC 50 E8 CC 07 58 EB  // 3....t....P...X.
    1370: F1 32 C9 E8 C4 01 E8 0E 15 0B C0 C3 E8 03 FD E8  // .2..............
    1380: 64 06 66 33 C0 66 BA 00 F0 FF FF E8 33 01 51 B1  // d.f3.f......3.Q.
    1390: 01 E8 8C 01 59 33 C0 E8 B0 FC 74 0A E8 8D FC 50  // ....Y3....t....P
    13A0: E8 67 07 58 EB F1 E8 B1 0C E8 1B F8 C3 B8 02 00  // .g.X............
    13B0: E8 79 FC 74 2E B1 07 E8 2F 11 B8 02 00 E8 31 F3  // .y.t..../.....1.
    13C0: F6 C3 04 75 12 E8 4A 17 83 3D 00 75 0A E8 B7 14  // ...u..J..=.u....
    13D0: 83 E0 FD E8 BA 14 C3 66 B8 02 00 00 00 E8 E7 FD  // .......f........
    13E0: E8 C2 F4 C3 E8 3B 13 74 23 38 E1 76 04 8A CC EB  // .....;.t#8.v....
    13F0: 06 38 C1 73 02 8A C8 BB 02 00 E8 13 13 8A E1 E8  // .8.s............
    1400: 17 13 B1 04 E8 E2 10 0C 01 C3 0C 01 C3 51 E8 11  // .............Q..
    1410: 13 74 0C 8A CC BB 02 00 E8 F5 12 8A C4 8A E1 59  // .t.............Y
    1420: C3 E8 EE 05 C3 E8 F9 05 C3 E8 49 16 75 18 E8 81  // ..........I.u...
    1430: 00 E8 F8 FB 80 F9 01 75 0E 51 E8 4B 06 B5 01 E8  // .......u.Q.K....
    1440: 4D FD 59 E8 DF FF C3 E8 D7 FF 51 E8 BC 06 B5 00  // M.Y.......Q.....
    1450: E8 3C FD 59 C3 B8 02 00 E8 D1 FB 74 03 E8 89 10  // .<.Y.......t....
    1460: C3 E8 AD 04 3B C1 7C 3A 8B C1 E8 ED 04 E8 21 0E  // ....;.|:......!.
    1470: 8B C8 51 E8 1D 05 E8 E1 04 59 E8 14 0E 3B C8 72  // ..Q......Y...;.r
    1480: 02 8B C1 8D 5C 04 E8 32 18 32 C9 B5 0F E8 02 0C  // ....\..2.2......
    1490: E8 0F 15 FE C1 38 C1 72 F2 8D 5C 04 E8 A4 18 0B  // .....8.r..\.....
    14A0: C0 C3 33 C0 C3 BB 00 18 33 C0 8A C2 C1 E0 02 03  // ..3.....3.......
    14B0: D8 C3 53 BB 03 00 E8 57 12 66 25 FF 0F 00 00 5B  // ..S....W.f%....[
    14C0: C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 41 12 66  // .SfPfQf......A.f
    14D0: 23 C2 66 0B C1 E8 41 12 66 59 66 58 5B C3 66 50  // #.f...A.fYfX[.fP
    14E0: BB 05 00 E8 2A 12 25 FF 0F 8B C8 66 58 C3 E8 96  // ....*.%....fX...
    14F0: 13 23 C8 66 50 BB 05 00 E8 15 12 25 00 F0 0B C1  // .#.fP......%....
    1500: E8 16 12 66 58 C3 66 50 53 BB 06 00 E8 01 12 A8  // ...fX.fPS.......
    1510: 10 75 09 BB F0 16 E8 2A 18 3D 5A A5 5B 66 58 C3  // .u.....*.=Z.[fX.
    1520: 66 50 53 BB 06 00 E8 E7 11 80 F1 01 C0 E1 04 24  // fPS............$
    1530: EF 0A C1 E8 E3 11 5B 66 58 C3 53 66 50 BB F8 16  // ......[fX.SfP...
    1540: E8 00 18 8A C1 E8 5B 17 66 58 5B C3 53 BB F8 16  // ......[.fX[.S...
    1550: E8 F0 17 83 E0 01 5B C3 53 66 50 BB 07 00 E8 AF  // ......[.SfP.....
    1560: 11 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB  // ....fX..t...[.S.
    1570: 07 00 E8 9B 11 80 E4 FE 80 FD 06 74 03 80 CC 01  // ...........t....
    1580: E8 96 11 5B C3 66 50 BB 06 00 E8 83 11 24 40 C0  // ...[.fP......$@.
    1590: E8 06 8A D8 66 58 C3 C3 50 66 51 E8 8E FA 83 EC  // ....fX..PfQ.....
    15A0: 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC 68 01  // ...f3.f.F.3...h.
    15B0: 8D 1D E8 8E 17 0B C0 74 1F 8B DF B0 00 E8 0F 01  // .......t........
    15C0: 74 11 8B DF E8 D0 F5 66 3B 4E 00 72 06 8B D7 66  // t......f;N.r...f
    15D0: 89 4E 00 83 C7 1C EB D8 0B D2 74 0A 8D 9C 4C 01  // .N........t...L.
    15E0: E8 8A F5 E9 88 00 66 33 C0 66 89 46 00 8D BC F4  // ......f3.f.F....
    15F0: 01 33 D2 8D 1D E8 4B 17 0B C0 74 58 66 50 E8 1E  // .3....K...tXfP..
    1600: F3 3C 01 66 58 74 05 3D 40 06 73 43 66 52 66 8B  // .<.fXt.=@.sCfRf.
    1610: D0 8D 5D 04 E8 2C 17 E8 5D 00 8B CA 66 5A 74 2F  // ..]..,..]...fZt/
    1620: 56 8D 9C 4C 01 8B F1 E8 62 F5 5E B0 00 E8 9F 00  // V..L....b.^.....
    1630: 74 1D 8D 1D E8 0C 17 8B D9 8B 47 06 66 C1 E0 10  // t.........G.f...
    1640: 8B 47 02 66 3B 46 00 72 06 8B D1 66 89 46 00 83  // .G.f;F.r...f.F..
    1650: C7 08 EB 9F 0B D2 74 16 56 8D 9C 4C 01 8B F2 E8  // ......t.V..L....
    1660: 2A F5 5E 53 8D 9C 62 01 33 C0 E8 4E 16 5B 83 C4  // *.^S..b.3..N.[..
    1670: 04 0B D2 66 59 58 C3 57 53 51 E8 66 12 3B 55 02  // ...fYX.WSQ.f.;U.
    1680: 75 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75  // u.f.....f...;].u
    1690: 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33  // ...t.:E.t......3
    16A0: D2 EB 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 32  // .......Y[_.QfR.2
    16B0: 12 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83  // .:e.u...t.:E.t..
    16C0: C7 1C E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 C3 66  // ....3.....fZY..f
    16D0: 51 66 52 53 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8  // QfRSSf.....f....
    16E0: 61 16 5B 66 8B D0 E8 AE F4 3B CA 72 0A 66 3B CA  // a.[f.....;.r.f;.
    16F0: 72 05 E8 DC F8 75 02 32 C0 5B 66 5A 66 59 C3 56  // r....u.2.[fZfY.V
    1700: 57 E8 A7 FF 8B F7 E8 83 F4 5F 5E C3 66 50 53 66  // W........_^.fPSf
    1710: 51 52 57 56 51 8B DE B9 08 00 E8 8E 12 59 8D 5C  // QRWVQ........Y.\
    1720: 08 8B C1 66 C1 E0 10 8A C2 E8 77 15 F6 C2 03 75  // ...f......w....u
    1730: 24 8B C1 24 7F BF EF 17 80 3D FF 0F 84 0F 01 3A  // $..$.....=.....:
    1740: 05 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00  // .u.f.E.f........
    1750: 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 70 01 0F  // ........t%...p..
    1760: 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08  // ...3.......u..\.
    1770: 66 25 FF FF 00 00 66 C1 E0 08 E8 26 15 EB B2 8A  // f%....f....&....
    1780: E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A  // ................
    1790: EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4  // ...pr*..us%..p..
    17A0: 32 E4 50 E8 30 02 8B D8 58 38 D8 72 05 33 C0 E9  // 2.P.0...X8.r.3..
    17B0: 9C 00 E8 28 02 E8 8B 15 0B C0 0F 84 90 00 EB 1B  // ...(............
    17C0: 32 C0 E8 E6 FE 0F 84 85 00 8D 5C 16 8B 05 E8 EA  // 2.........\.....
    17D0: 14 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 B2 0A 66  // ..E.f....E.P...f
    17E0: C1 E1 10 8B C8 58 8D 1C E8 B8 14 66 50 8D 5C 04  // .....X.....fP.\.
    17F0: 66 8B C1 E8 AD 14 66 58 66 C1 E8 10 66 81 E1 FF  // f.....fXf...f...
    1800: FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 35 15 8B C8  // ...f..fP.\..5...
    1810: 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 9B 14  // fXf..f...@.\....
    1820: BF 4F 18 83 F9 01 74 11 BF 57 18 81 F9 01 01 74  // .O....t..W.....t
    1830: 08 BF 5F 18 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8  // .._....u..\.f...
    1840: 61 14 8D 5C 10 66 8B 45 04 E8 57 14 0B DB 5E 5F  // a..\.f.E..W...^_
    1850: 5A 66 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90  // ZfY[fX..@....@..
    1860: 01 02 80 02 90 01 03 80 02 90 01 04 40 01 90 01  // ............@...
    1870: 05 40 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D  // .@...........^..
    1880: 40 01 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80  // @...........^...
    1890: 02 5E 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02  // .^..............
    18A0: 90 01 23 20 04 90 01 32 20 04 B0 02 33 20 04 C0  // ..# ...2 ...3 ..
    18B0: 02 62 80 02 E0 01 FF 05 0A 05 05 05 00 00 00 05  // .b..............
    18C0: 0B 06 05 05 00 00 00 08 10 08 08 08 00 00 00 56  // ...............V
    18D0: E8 E4 11 80 E4 01 3B 04 74 09 83 C6 04 E2 F7 33  // ......;.t......3
    18E0: C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8 C7 11  // ....D...^.WSP...
    18F0: 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1 E0  // .........v......
    1900: 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F  // .............X[_
    1910: C3 66 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8 10  // .fSQfR.A..w.f...
    1920: 66 0F B7 D8 66 B8 00 00 00 01 66 D3 E8 66 33 D2  // f...f.....f..f3.
    1930: 66 F7 F3 E8 5B 09 66 5A 59 66 5B C3 53 66 50 BB  // f...[.fZYf[.SfP.
    1940: 07 00 E8 CB 0D 0A C0 66 58 5B C3 53 66 50 BB 07  // .......fX[.SfP..
    1950: 00 E8 BC 0D A8 01 66 58 5B C3 53 66 50 8D 5C 06  // ......fX[.SfP.\.
    1960: E8 E0 13 8A C8 66 58 5B C3 51 B9 08 00 E8 50 10  // .....fX[.Q....P.
    1970: 59 C3 53 8D 5C 08 E8 CA 13 24 03 5B C3 8D 5C 09  // Y.S.\....$.[..\.
    1980: E8 C0 13 C3 51 53 B1 01 8A E8 8D 5C 08 E8 57 13  // ....QS.....\..W.
    1990: 5B 59 C3 53 8D 1C E8 AA 13 5B C3 53 8D 5C 04 E8  // [Y.S.....[.S.\..
    19A0: A1 13 5B C3 53 8D 5C 16 E8 98 13 5B C3 53 66 52  // ..[.S.\....[.SfR
    19B0: 33 C0 E8 C2 FC 66 5A 75 1B E8 34 00 74 16 E8 15  // 3....fZu..4.t...
    19C0: 00 40 83 F8 05 73 0D E8 D9 12 48 E8 0F 00 66 8B  // .@...s....H...f.
    19D0: C2 E8 CF 12 5B C3 BB 00 1E E8 67 13 C3 BB 08 1E  // ....[.....g.....
    19E0: C1 E0 03 03 D8 C3 BB 00 1E B9 32 00 E8 BC 0F C3  // ..........2.....
    19F0: 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 1E E8 43 13  // Q.....t.......C.
    1A00: 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3 00  // f;.t........Y...
    1A10: C3 00 BB 20 DF E8 CD 32 E8 AD F6 B5 01 E8 DA 06  // ... ...2........
    1A20: C3 BB 00 DF E8 BE 32 E8 9E F6 B5 00 E8 CB 06 C3  // ......2.........
    1A30: 80 F9 00 75 0A E8 70 0F 8A C8 B5 02 E8 87 08 0B  // ...u..p.........
    1A40: F6 74 29 E8 82 F6 B5 01 E8 B6 06 56 33 F6 B5 00  // .t)........V3...
    1A50: E8 3F 06 5E B5 01 E8 F3 F6 E8 6A 08 E8 27 09 E8  // .?.^......j..'..
    1A60: 66 F6 8D 9C 00 03 E8 9F 06 E8 E8 06 66 C1 CE 10  // f...........f...
    1A70: B5 01 E8 1D 06 E8 05 FF A8 40 75 07 32 C0 B5 01  // .........@u.2...
    1A80: E8 ED 07 66 C1 CE 10 C3 E8 3D F6 B5 01 E8 45 06  // ...f.....=....E.
    1A90: B5 00 E8 6C 06 E8 CF 06 B1 0F E8 D6 09 B1 10 E8  // ...l............
    1AA0: D1 09 E8 26 00 C3 E8 61 00 E8 2C F6 B5 00 E8 24  // ...&...a..,....$
    1AB0: 06 B5 00 E8 4B 06 E8 A1 F6 E8 EC 0E 38 C1 74 0A  // ....K.......8.t.
    1AC0: 80 F9 0B 74 05 B5 03 E8 FC 07 C3 E8 25 F6 0B D2  // ...t........%...
    1AD0: 74 0C E8 B3 F6 3C 01 74 05 B1 0F E8 D3 09 B1 0C  // t....<.t........
    1AE0: E8 75 00 B1 01 E8 01 0A E8 BB F5 80 FD 00 75 0D  // .u............u.
    1AF0: E8 E1 01 B1 0D E8 7B 09 B1 03 E8 5B 00 E8 F3 F5  // ......{....[....
    1B00: 0B D2 74 05 B1 01 E8 A8 09 C3 E8 E6 F5 0B D2 74  // ..t............t
    1B10: 05 B1 00 E8 9B 09 B1 02 E8 3D 00 E8 6A F6 A8 01  // .........=..j...
    1B20: 74 0D E8 81 F5 80 FD 00 75 05 B0 02 E8 0D 04 B1  // t.......u.......
    1B30: 00 E8 B5 09 B1 0D E8 1F 00 C3 B1 07 E8 AA 09 E8  // ................
    1B40: B1 F5 0B D2 75 0C E8 1F F6 E8 42 0B 75 09 E8 49  // ....u.....B.u..I
    1B50: 0A C3 B1 07 E8 5A 09 C3 E8 0D F6 E8 30 0B 75 24  // .....Z......0.u$
    1B60: 51 E8 85 09 59 80 F9 0C 75 1A 33 D2 56 83 C6 08  // Q...Y...u.3.V...
    1B70: E8 59 0B 5E 0A C0 75 0C B9 0A 00 E8 7E 0E 42 83  // .Y.^..u.....~.B.
    1B80: FA 1E 75 E8 C3 56 83 C6 08 E8 E1 0A 5E E8 63 F5  // ..u..V......^.c.
    1B90: 0B D2 74 03 E8 54 08 80 FD 01 0F 84 CC 00 80 FD  // ..t..T..........
    1BA0: 02 0F 85 ED 00 B1 0C E8 AE FF 56 83 C6 08 E8 1B  // ..........V.....
    1BB0: 0B 5E 0A C0 0F 84 DA 00 E8 DA 00 0A DB 0F 85 D1  // .^..............
    1BC0: 00 8D 9C 35 01 E8 7B 11 A8 01 74 03 E8 7A 03 E8  // ...5..{...t..z..
    1BD0: 21 F5 0B D2 74 00 66 33 C9 E8 48 F5 66 BA 50 01  // !...t.f3..H.f.P.
    1BE0: 40 50 66 C1 C9 10 8A C1 66 C1 C9 10 E8 D7 09 0F  // @Pf.....f.......
    1BF0: 85 9F 00 66 BA 50 01 50 4F 52 E8 F6 F4 80 FA 22  // ...f.P.POR....."
    1C00: 5A 74 0D 8D 9C 2D 01 E8 39 11 24 06 3C 02 75 02  // Zt...-..9.$.<.u.
    1C10: B6 02 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8  // ...\(f.....f....
    1C20: A4 09 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1  // ..un..2.f.....f.
    1C30: C9 10 66 BA 50 01 10 30 33 DB E8 89 09 75 53 66  // ..f.P..03....uSf
    1C40: C1 C9 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10  // .....f.....tE...
    1C50: 75 0F 8D 5C 28 E8 EB 10 66 0B C0 0F 85 7D FF EB  // u..\(...f....}..
    1C60: 31 3D 80 00 0F 82 74 FF EB 25 E8 B7 F4 8A E9 B1  // 1=....t..%......
    1C70: A0 BA 00 80 BF 32 00 8D 5C 28 E8 1E 09 80 FF 01  // .....2..\(......
    1C80: 74 0D B1 A2 8D 5C 28 E8 11 09 80 FF 01 75 03 B0  // t....\(......u..
    1C90: 00 C3 B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75  // ......+.t......u
    1CA0: 21 E8 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01  // !...u.f....C..0.
    1CB0: E8 13 09 66 BA 20 00 90 41 8D 9C 34 01 E8 06 09  // ...f. ..A..4....
    1CC0: 33 DB C3 E8 5E F4 66 BA 00 00 90 47 8D 9C 28 01  // 3...^.f....G..(.
    1CD0: E8 F3 08 C3 E8 B1 F4 3C 01 75 0E E8 ED 02 80 FD  // .......<.u......
    1CE0: 01 75 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00  // .u..............
    1CF0: E8 B8 0C B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9  // ......D.t.......
    1D00: 19 01 B1 08 E8 6C 07 E8 66 02 B1 09 E8 64 07 E8  // .....l..f....d..
    1D10: AC 01 8D 9C B8 03 66 33 C0 E8 87 0F E8 47 01 B9  // ......f3.....G..
    1D20: 90 01 E8 CC 0C B0 01 E8 F7 01 B5 02 E8 D5 02 E8  // ................
    1D30: 5B 01 E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8  // [............3..
    1D40: E7 00 F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6  // .....u..........
    1D50: C5 04 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7  // ..t.............
    1D60: 03 E8 CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84  // .......8.u..3...
    1D70: A9 00 E8 54 01 FE C1 E8 B9 F3 38 D9 75 C1 8D 9C  // ...T......8.u...
    1D80: AC 03 E8 BE 0F 3C 03 74 05 E8 DA 00 EB A1 8D 9C  // .....<.t........
    1D90: B0 03 66 33 C0 E8 0B 0F 8D 9C 2A 01 E8 A4 0F A8  // ..f3......*.....
    1DA0: 40 74 0C B1 13 E8 CB 06 B0 03 E8 74 01 EB 0A B1  // @t.........t....
    1DB0: 0A E8 BF 06 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC  // .......h....F...
    1DC0: 00 E8 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58  // ..X..8....8.3..X
    1DD0: 00 80 FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23  // ....u..s.u'Q...#
    1DE0: 02 59 F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65  // .Y...u....$..-.e
    1DF0: 00 8A D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00  // .......].8.u....
    1E00: 74 19 FE C1 E8 2C F3 38 D9 75 C3 8D 9C AC 03 E8  // t....,.8.u......
    1E10: 31 0F 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01  // 1.<.u..M........
    1E20: B1 0B E8 4E 06 E8 A3 01 C3 8D 9C C0 03 E8 0F 00  // ...N............
    1E30: 8A E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51  // ...S.......[...Q
    1E40: E8 00 0F C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03  // ........$.Y.....
    1E50: E8 F0 0E A8 01 C3 8D 9C B8 03 E8 A2 0E C3 8D 9C  // ................
    1E60: B8 03 E8 82 0E C3 33 C9 33 D2 E8 E9 FF 38 D5 76  // ......3.3....8.v
    1E70: 02 8A D5 FE C1 E8 BB F2 38 D9 72 EE 33 C9 8A EA  // ........8.r.3...
    1E80: 8D 9C 5C 03 E8 60 0E B1 0B E8 5D 06 C3 E8 94 F2  // ..\..`....].....
    1E90: 8D 9C B8 03 E8 AC 0E 66 BA 03 01 80 83 E8 26 07  // .......f......&.
    1EA0: C3 51 53 8D 9C B0 03 E8 55 0E FE C5 E8 38 0E 80  // .QS.....U....8..
    1EB0: FD 06 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33  // ..r....W.3.[Y.f3
    1EC0: C0 8D 9C B0 03 E8 DB 0D C3 32 ED E8 65 FF 80 E3  // .........2..e...
    1ED0: 0C C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18  // ......*.........
    1EE0: 72 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A  // r... .K....8.r..
    1EF0: DF 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8  // ....u.......`...
    1F00: 22 F2 8D 9C C0 03 66 BA 02 02 90 45 E8 B7 06 C3  // ".....f....E....
    1F10: E8 11 F2 66 BA 00 01 90 42 8D 9C B4 03 E8 A6 06  // ...f....B.......
    1F20: C3 E8 00 F2 66 BA 02 01 80 50 E8 99 06 C3 E8 E2  // ....f....P......
    1F30: F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 E5 F1 66  // ...f3..........f
    1F40: BA 00 06 80 50 E8 7E 06 C3 E8 D8 F1 66 BA 11 01  // ....P.~.....f...
    1F50: 80 50 B0 04 E8 6F 06 C3 E8 C9 F1 66 BA 00 06 90  // .P...o.....f....
    1F60: 40 8D 9C C8 03 E8 5E 06 8D 9C C8 03 E8 D4 0D C3  // @.....^.........
    1F70: E8 BB FF E8 BD F1 8A E3 80 CC 80 50 E8 A5 F1 58  // ...........P...X
    1F80: 66 BA 00 01 80 61 E8 3D 06 33 C9 E8 30 F1 0B C0  // f....a.=.3..0...
    1F90: 74 02 B5 10 8D 9C BC 03 E8 4C 0D 8A C5 E8 84 F1  // t........L......
    1FA0: 66 BA 07 01 80 50 E8 1D 06 E8 BC F1 E8 E3 06 75  // f....P.........u
    1FB0: 19 8D 9C 48 03 E8 8B 0D 0A C0 74 0E E8 65 F1 66  // ...H......t..e.f
    1FC0: BA 0A 01 80 50 B0 01 E8 FC 05 C3 E8 42 FF E8 2E  // ....P.......B...
    1FD0: FF E8 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8  // ....<.u..q.t.3..
    1FE0: 47 FE 80 FD 07 75 0D FE C1 E8 47 F1 38 D9 75 EF  // G....u....G.8.u.
    1FF0: B5 01 EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02  // ................
    2000: E8 E4 0C C3 51 8D 9C AC 03 32 C9 E8 D9 0C 59 C3  // ....Q....2....Y.
    2010: 51 8D 9C AC 03 B1 01 E8 CD 0C 59 C3 8D 9C 32 01  // Q.........Y...2.
    2020: E8 20 0D 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 12  // . ...u..d.......
    2030: 0D 3C 02 74 03 B9 90 01 E8 B6 09 C3 32 E4 B1 04  // .<.t........2...
    2040: 33 D2 F6 E1 8B C8 E8 B3 09 C3 51 8D 5C 14 E8 F2  // 3.........Q.\...
    2050: 0C 66 C1 E0 10 E8 58 01 59 C3 33 C9 E8 43 09 38  // .f....X.Y.3..C.8
    2060: C1 73 05 B5 00 E8 74 00 B5 00 E8 68 00 FE C1 E8  // .s....t....h....
    2070: 33 09 38 C1 72 E6 B1 14 8A E9 E8 2B 09 38 C1 74  // 3.8.r......+.8.t
    2080: 05 B5 03 E8 40 02 FE C1 E8 14 09 04 14 38 C1 76  // ....@........8.v
    2090: E7 C3 83 EC 0C 8B EC 0B F6 74 1E E8 F5 F8 66 C1  // .........t....f.
    20A0: C8 10 66 89 46 00 8D 5C 04 E8 97 0C 66 89 46 04  // ..f.F..\....f.F.
    20B0: 8D 5C 08 E8 8D 0C 88 46 0A 89 4E 08 8C D0 66 C1  // .\.....F..N...f.
    20C0: E0 10 8B C4 BB 2B 00 E8 2C 08 83 C4 0C C3 BB 25  // .....+..,......%
    20D0: 00 E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 17 00 E8  // ......#.........
    20E0: 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0  // .........N...f..
    20F0: 10 8B C4 E8 00 08 83 C4 04 C3 BB 22 00 E8 E3 FF  // ..........."....
    2100: C3 BB 2C 00 E8 DC FF C3 E8 38 0C 66 A9 00 00 FF  // ..,......8.f....
    2110: FF 74 40 83 EC 18 8B EC 55 51 B9 04 00 83 C3 02  // .t@.....UQ......
    2120: E8 20 0C 66 89 46 00 83 C5 04 83 C3 04 E2 F1 83  // . .f.F..........
    2130: C3 04 E8 0E 0C 66 C1 C8 10 66 89 46 00 59 5D 88  // .....f...f.F.Y].
    2140: 4E 14 8C D0 66 C1 E0 10 8B C4 BB 31 00 E8 A6 07  // N...f......1....
    2150: 83 C4 18 C3 E8 71 EF 8D 9C D0 02 E8 E5 0B 8A E8  // .....q..........
    2160: BB 21 00 E8 7D FF C3 8D 9C 3C 03 E8 D5 0B 8A F8  // .!..}....<......
    2170: E8 33 EF 8A DD 53 8D 9C 42 03 E8 C6 0B 8A E8 5B  // .3...S..B......[
    2180: E8 45 EF E8 E2 EF E8 09 05 75 02 B3 01 83 EC 04  // .E.......u......
    2190: 8B EC 88 4E 00 88 7E 01 88 5E 02 88 6E 03 8C D0  // ...N..~..^..n...
    21A0: 66 C1 E0 10 8B C4 BB 2A 00 E8 4A 07 83 C4 04 C3  // f......*..J.....
    21B0: 83 EC 10 8B EC 66 8B C8 66 33 C0 66 89 46 04 BB  // .....f..f3.f.F..
    21C0: 00 17 E8 DE 0A 66 B8 00 80 00 D0 66 89 46 0C 66  // .....f.....f.F.f
    21D0: 33 C0 66 89 46 08 56 E8 F7 06 66 8B 44 04 66 50  // 3.f.F.V...f.D.fP
    21E0: 66 C1 E8 16 88 46 08 66 58 66 C1 E0 0A 66 05 00  // f....F.fXf...f..
    21F0: 17 00 00 66 89 46 00 5E 8C D0 66 C1 E0 10 8B C4  // ...f.F.^..f.....
    2200: BB 35 00 E8 F0 06 8B EC 66 B8 00 80 00 00 66 2B  // .5......f.....f+
    2210: C8 66 89 46 04 66 05 00 00 00 40 66 89 46 0C 66  // .f.F.f....@f.F.f
    2220: 33 C0 66 89 46 08 66 89 46 00 8C D0 66 C1 E0 10  // 3.f.F.f.F...f...
    2230: 8B C4 BB 35 00 E8 BE 06 8B EC 66 8B 46 0C 66 25  // ...5......f.F.f%
    2240: FF FF 1F 00 66 01 46 04 66 3B C8 76 1F 66 2B C8  // ....f.F.f;.v.f+.
    2250: 66 8B 46 04 66 3D 00 FF 01 00 76 06 66 B8 00 FF  // f.F.f=....v.f...
    2260: 01 00 66 3B C8 73 AE 66 8B C1 EB A9 83 C4 10 C3  // ..f;.s.f........
    2270: 83 EC 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C  // ......N.f.V..^..
    2280: D0 66 C1 E0 10 8B C4 BB 2D 00 E8 69 06 83 C4 08  // .f......-..i....
    2290: C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3  // .=..v.......?$..
    22A0: 51 E8 9F 0A 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 92  // Q...f3..........
    22B0: 0A 03 C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8  // ...f%....Y=.'s..
    22C0: 10 27 C3 32 D2 C3 80 FD 02 75 19 E8 EA EE 66 BB  // .'.2.....u....f.
    22D0: 00 08 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00  // .......f3.f.....
    22E0: E8 82 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33  // .......u.f3...f3
    22F0: D2 66 BB FF 00 00 00 EB 36 51 33 D2 E8 A7 ED 8A  // .f......6Q3.....
    2300: D5 66 C1 E2 10 E8 E0 ED 8A F2 8A D1 66 8B C2 66  // .f..........f..f
    2310: 0D 00 00 00 80 E8 1B EE 80 FB 04 76 06 66 0D 00  // ...........v.f..
    2320: 00 00 08 E8 4F EE E8 9F ED 66 33 DB 8A D9 59 83  // ....O....f3...Y.
    2330: EC 10 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66  // ....f.F.f.^.f..f
    2340: 33 D2 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB  // 3.f.d...f..f.F..
    2350: 0C 00 8C D0 66 C1 E0 10 8B C4 E8 99 05 8B EC B3  // ....f...........
    2360: 01 83 C4 10 C3 83 EC 10 8B EC 66 89 56 00 66 89  // ..........f.V.f.
    2370: 5E 04 BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 76 05  // ^......f......v.
    2380: B3 01 83 C4 10 C3 C3 53 51 66 50 B9 A0 8C 80 FB  // .......SQfP.....
    2390: 00 75 1C B9 78 69 E8 81 04 83 E3 03 80 FB 03 75  // .u..xi.........u
    23A0: 0E E8 D1 05 66 3D 50 C3 00 00 72 03 B9 F0 D2 66  // ....f=P...r....f
    23B0: 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2  // 3...fXY[.fR..f..
    23C0: 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14 74 09  // ....u....t....t.
    23D0: B3 01 80 FD 0E 74 02 B3 02 66 5A C3 B5 11 80 FA  // .....t...fZ.....
    23E0: 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 80 FA 23  // #t..."t........#
    23F0: 74 07 80 FA 22 74 02 B3 01 C3 32 C9 80 FD 00 75  // t..."t....2....u
    2400: 08 C7 46 00 0B 01 B1 01 C3 50 33 C0 E8 6C 01 04  // ..F......P3..l..
    2410: 14 89 46 00 58 B1 01 C3 C3 8B DA B7 22 80 FE 21  // ..F.X......."..!
    2420: 74 02 B7 21 C3 0C 01 C3 E8 18 09 66 C1 E8 10 0B  // t..!.......f....
    2430: C0 74 1C 53 83 C3 06 E8 09 09 5B 3D E0 01 72 0F  // .t.S......[=..r.
    2440: 53 83 C3 18 E8 FC 08 5B A8 80 75 03 0C 01 C3 32  // S......[..u....2
    2450: C0 C3 B5 0C C3 B5 02 C3 50 E8 1F 01 B1 03 0A C0  // ........P.......
    2460: 74 04 B1 08 02 C8 58 C3 80 FA 22 75 05 C7 46 00  // t.....X..."u..F.
    2470: 78 69 C3 E8 E8 00 80 FD FF 74 35 83 EC 0C 8B EC  // xi.......t5.....
    2480: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F  // .N..n....u..$...
    2490: 80 F9 10 75 0A 8D 9C 48 03 E8 A7 08 88 46 02 8C  // ...u...H.....F..
    24A0: D0 66 C1 E0 10 8B C4 BB 04 00 E8 49 04 83 C4 0C  // .f.........I....
    24B0: C3 C3 66 53 E8 5C EC 66 8B C2 66 33 D2 66 BB 8C  // ..fS.\.f..f3.f..
    24C0: 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40  // ...f..f[...n...@
    24D0: 03 E8 6F 08 88 46 02 88 66 03 66 C1 E8 10 88 46  // ..o..F..f.f....F
    24E0: 08 E8 1E EC 66 89 56 04 C3 83 EC 20 8B EC 80 F9  // ....f.V.... ....
    24F0: 04 75 0A 88 4E 01 32 C0 88 46 00 EB 4F E8 E8 EB  // .u..N.2..F..O...
    2500: E8 78 00 88 46 00 88 4E 01 E8 5C EC 88 56 0A 80  // .x..F..N..\..V..
    2510: F9 01 74 11 80 F9 0B 75 33 8D 9C 5C 03 E8 23 08  // ..t....u3..\..#.
    2520: 88 46 02 EB 27 E8 FC EB 88 6E 08 E8 D4 EB 66 89  // .F..'....n....f.
    2530: 56 04 E8 FE EB 88 5E 03 E8 6B EB 88 6E 02 51 E8  // V.....^..k..n.Q.
    2540: 1C 00 8A CD B0 01 D2 E0 59 88 46 09 8C D0 66 C1  // ........Y.F...f.
    2550: E0 10 8B C4 BB 4C 00 E8 9C 03 83 C4 20 C3 8D 9C  // .....L...... ...
    2560: 3C 03 E8 DE 07 32 ED 3C 03 74 0C 3C 09 72 09 3C  // <....2.<.t.<.r.<
    2570: 0E 77 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0 80 EE  // .w.,.......R2...
    2580: 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80  // !...t..... t....
    2590: FA 21 74 02 B0 06 02 C6 5A C3 C3 83 EC 08 8B EC  // .!t.....Z.......
    25A0: 89 7E 00 89 5E 02 89 56 04 89 4E 06 8C D0 66 C1  // .~..^..V..N...f.
    25B0: E0 10 8B C4 BB 36 00 E8 3C 03 8B EC 8B 5E 02 8A  // .....6..<....^..
    25C0: 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2 00 00 80 00  // ~.....V3.f......
    25D0: 75 0A 50 33 C0 8A C6 8B F0 32 F6 58 53 BB 04 1F  // u.P3.....2.XS...
    25E0: E8 C0 06 66 8B C2 BB 00 1F E8 B7 06 5B 66 F7 C2  // ...f........[f..
    25F0: 00 00 10 00 75 02 33 DB 8B D3 66 C1 E2 10 BA 00  // ....u.3...f.....
    2600: 1F 83 EC 08 8B EC 66 89 56 00 88 4E 04 8A C5 FE  // ......f.V..N....
    2610: C8 88 46 07 C6 46 05 00 C6 46 06 00 8C D0 66 C1  // ..F..F...F....f.
    2620: E0 10 8B C4 BB 4E 00 E8 CC 02 8B EC 8A 5E 05 8A  // .....N.......^..
    2630: 7E 06 83 C4 08 0A DB 74 32 51 B9 90 01 80 FB 20  // ~......t2Q..... 
    2640: 74 05 80 FB 80 75 13 B9 0A 00 8B C6 0A C0 74 0A  // t....u........t.
    2650: B9 90 01 3C 01 74 03 B9 E8 03 E8 94 03 59 8B C6  // ...<.t.......Y..
    2660: FE C4 8B F0 80 FC 06 76 98 0A DB 5E C3 8D 5C 04  // .......v...^..\.
    2670: E8 D0 06 8B D0 B5 02 E8 14 00 74 11 B5 01 80 FA  // ..........t.....
    2680: 13 75 0A E8 61 00 80 FA 13 75 02 B5 02 C3 80 FA  // .u..a....u......
    2690: 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80 FA 05 C3 80  // .....t..........
    26A0: FA 02 74 03 80 FA 04 C3 80 FA 01 74 03 80 FA 02  // ..t........t....
    26B0: C3 80 FA 02 75 03 B2 01 C3 80 FA 04 75 03 B2 03  // ....u.......u...
    26C0: C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8  // .......t.....\..
    26D0: 71 06 8A C8 0A C9 75 03 32 C0 C3 B5 02 E8 9F 02  // q.....u.2.......
    26E0: 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 56 06 8A D0 B6  // ..$.....\..V....
    26F0: 01 83 EC 10 8B EC 89 56 02 8C D0 66 C1 E0 10 8B  // .......V...f....
    2700: C4 BB 4F 00 E8 EF 01 8B EC 8A 56 04 83 C4 10 C3  // ..O.......V.....
    2710: 53 83 C3 4C E8 FA 05 5B C3 53 83 C3 4C E8 4C 05  // S..L...[.S..L.L.
    2720: 5B C3 56 E8 96 01 8B 44 38 83 7D 20 00 5E C3 52  // [.V....D8.} .^.R
    2730: 50 0F BC D8 32 FF 80 FB 01 75 05 BB 00 24 EB 0C  // P...2....u...$..
    2740: FE CB B8 00 04 F7 E3 05 00 20 8B D8 58 5A C3 57  // ......... ..XZ.W
    2750: E8 56 00 74 0A 8B 5D 02 E8 08 00 0B DB 5F C3 33  // .V.t..]......_.3
    2760: DB 5F C3 52 51 0B DB 74 1B 56 E8 36 01 03 DE 5E  // ._.RQ..t.V.6...^
    2770: 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06 03 D9  // 3..O..?.t.:.t...
    2780: EB F0 33 DB 0B DB 59 5A C3 56 51 E8 15 01 32 C9  // ..3...YZ.VQ...2.
    2790: 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE C1 3A 4C 06  // .|.;].t......:L.
    27A0: 72 F1 33 FF 0B FF 59 5E C3 56 51 E8 F5 00 32 C9  // r.3...Y^.VQ...2.
    27B0: 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1 3A 4C 06 72  // .|.;.t......:L.r
    27C0: F2 33 FF 0B FF 59 5E C3 56 51 E8 D6 00 32 C9 8D  // .3...Y^.VQ...2..
    27D0: 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1 3A 4C 06 72  // |.;E.t......:L.r
    27E0: F1 33 FF 0B FF 59 5E C3 57 50 E8 DB FF 8A C3 8B  // .3...Y^.WP......
    27F0: 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3 01 E8 E8 FF  // ]..n.X_.S2......
    2800: 74 03 8A 4F 02 0A C9 5B C3 53 32 ED B3 02 E8 D7  // t..O...[.S2.....
    2810: FF 74 03 8A 6F 02 0A ED 5B C3 50 57 8B DA E8 68  // .t..o...[.PW...h
    2820: FF 75 04 33 DB EB 0D B0 14 8B 5D 08 E8 34 FF 74  // .u.3......]..4.t
    2830: F2 8B 5F 02 5F 58 C3 66 50 53 51 57 8D 1C 66 25  // .._._X.fPSQW..f%
    2840: FF FF 00 00 E8 5C 04 8B D8 E8 3B 00 23 C3 74 31  // .....\....;.#.t1
    2850: E8 75 FF 0B FF 74 2A 66 50 66 8B 45 04 8D 5C 0C  // .u...t*fPf.E..\.
    2860: E8 40 04 66 33 C0 8B 05 8D 5C 04 E8 35 04 66 58  // .@.f3....\..5.fX
    2870: E8 85 FF E8 93 FF 8D 5C 08 66 33 C0 8B C1 E8 22  // .......\.f3...."
    2880: 04 5F 59 5B 66 58 C3 56 E8 18 00 8B 44 04 5E C3  // ._Y[fX.V....D.^.
    2890: 56 E8 0F 00 89 44 04 5E C3 C3 BF 9C 02 8B 3D 8B  // V....D.^......=.
    28A0: 7D 0C C3 BE 9C 02 8B 34 8B 74 30 C3 1E 0E 1F BF  // }......4.t0.....
    28B0: 9C 02 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE 9C 02 8B  // ...=.}..........
    28C0: 34 8B 74 10 C3 BF 9C 02 8B 3D 8B 7D 26 83 C7 04  // 4.t......=.}&...
    28D0: C3 BE 9C 02 8B 34 8B 74 1A C3 BE 9C 02 8B 34 8B  // .....4.t......4.
    28E0: 74 3A C3 BF 9C 02 8B 3D 8B 7D 0A 83 C7 04 B9 07  // t:.....=.}......
    28F0: 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33  // ............F.f3
    2900: C0 C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 56  // ..F...F..R.....V
    2910: 16 5A 07 83 C4 06 C3 E8 80 FF 66 F7 45 10 01 00  // .Z........f.E...
    2920: 00 00 C3 50 E8 73 FF B8 01 00 09 45 10 58 C3 E8  // ...P.s.....E.X..
    2930: 68 FF 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E  // h..E..fS..H..f.^
    2940: 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00  // .f.N...f........
    2950: E8 A3 FF 83 C4 48 66 5B E8 2F 01 BB 04 00 E8 AF  // .....Hf[./......
    2960: FD 66 C1 E8 10 E8 C7 FF C3 E8 2E FF 66 8B 5D 08  // .f..........f.].
    2970: 66 8B 4D 0C C3 56 E8 61 FF 66 8B 44 08 5E C3 83  // f.M..V.a.f.D.^..
    2980: EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB  // .....N...f......
    2990: 38 00 E8 61 FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0  // 8..a....n.......
    29A0: 06 C3 B0 01 C3 B0 06 C3 B0 08 C3 53 66 50 66 33  // ...........SfPf3
    29B0: C0 E8 EF 02 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3  // .........fX[.2..
    29C0: FC E8 7F 03 66 C1 CB 10 E8 D8 02 66 C1 CB 10 66  // ....f......f...f
    29D0: 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 C4 02 83  // ..........f.....
    29E0: C3 04 E2 F6 C3 FC E8 5A 03 66 AB 83 C3 04 E2 F6  // .......Z.f......
    29F0: C3 66 50 B8 1B 00 E8 10 00 66 58 C3 66 50 B8 BC  // .fP......fX.fP..
    2A00: 34 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 4B  // 4.....fX.R.....K
    2A10: 01 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03  // .fS..f.....f....
    2A20: 00 B2 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1  // ...f...f3.f.f...
    2A30: 03 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73  // ....f...f.3.f..s
    2A40: 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3  // .f.f.....u.f.f;.
    2A50: 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B  // s.f...;.r.....f[
    2A60: 5A C3 BB 42 EC E8 A9 02 66 33 D2 66 BB 1B 00 00  // Z..B....f3.f....
    2A70: 00 66 F7 F3 C3 66 50 53 BB 07 00 E8 92 FC 25 00  // .f...fPS......%.
    2A80: 02 35 00 02 0B C0 5B 66 58 C3 B3 01 E8 A7 00 66  // .5....[fX......f
    2A90: C1 E0 0A 66 83 E8 20 E8 37 FE 66 89 44 04 C7 44  // ...f.. .7.f.D..D
    2AA0: 08 20 00 C3 56 1E 0E 1F E8 26 FE 66 8B 44 04 66  // . ..V....&.f.D.f
    2AB0: C1 E0 0A 1F 5E C3 C3 BE 9C 02 8B 34 8B 74 1E 83  // ....^......4.t..
    2AC0: C6 04 B9 1C 00 C3 33 FF C3 56 E8 EF FD 8A 6C 33  // ......3..V....l3
    2AD0: 5E C3 56 E8 E6 FD 53 81 C3 09 01 E8 65 02 8A E8  // ^.V...S.....e...
    2AE0: 5B 53 81 C3 00 01 E8 5A 02 5B 8A C5 66 89 44 34  // [S.....Z.[..f.D4
    2AF0: 5E C3 56 E8 C6 FD 66 8B 44 34 53 81 C3 00 01 E8  // ^.V...f.D4S.....
    2B00: A1 01 5B 53 81 C3 08 01 B1 01 8A E8 E8 D8 01 5B  // ..[S...........[
    2B10: 5E C3 56 E8 A6 FD 8B FE 83 C7 04 5E C3 56 E8 9B  // ^.V........^.V..
    2B20: FD 8A 44 24 80 FD 00 74 05 88 6C 33 0C 02 88 44  // ..D$...t..l3...D
    2B30: 24 5E C3 32 C0 C3 66 53 83 EC 04 8B EC 8C D0 66  // $^.2..fS.......f
    2B40: C1 E0 10 8B C4 66 89 5E 00 BB 06 00 E8 A7 FD 8B  // .....f.^........
    2B50: EC 66 8B 46 00 83 C4 04 66 5B C3 00 66 50 8C C8  // .f.F....f[..fP..
    2B60: 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB  // =..u.........t..
    2B70: 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32  // .S...... .....[2
    2B80: D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A  // .f.fX.........u.
    2B90: 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3  // Kt.C;.w.....+...
    2BA0: 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10  // .......+..;.r.u.
    2BB0: 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3  // ;.w.+...+.+.....
    2BC0: 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB  // +.+.....UV+.....
    2BD0: 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8  // ..r.E;.r.w.;.v..
    2BE0: 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0  // ..Mx ....+....r.
    2BF0: 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB  // ..Mx.........s..
    2C00: DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3  // ...........3.^].
    2C10: 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3  // .P...t......t...
    2C20: 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66  // ..X.....RfP....f
    2C30: C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58  // .......$....f.fX
    2C40: 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF  // Z.R...f.Z.R...f.
    2C50: 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8  // Z..1............
    2C60: 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66  // $...........RfSf
    2C70: 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1  // P...fXf[Z.f...f.
    2C80: EB 0E E8 D7 FE E8 75 01 C3 66 50 66 C1 E3 10 66  // ......u..fPf...f
    2C90: C1 EB 10 E8 0E FE 66 03 D8 66 81 CB 00 00 00 80  // ......f..f......
    2CA0: 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8  // fX.RfS...f[Z.fP.
    2CB0: AA FE E8 D4 FF E8 45 01 66 58 C3 52 51 66 53 66  // ......E.fX.RQfSf
    2CC0: 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8  // P...............
    2CD0: B7 FF E8 0F 01 66 D3 C8 58 50 66 D3 C0 E8 1D 01  // .....f..XPf.....
    2CE0: 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00  // fXf[YZ.fPQ....S.
    2CF0: 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66  // f....f.....YfX.f
    2D00: 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58  // PQ....;.f..Y..fX
    2D10: C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E  // .._...D.f...f...
    2D20: E8 C1 00 C3 E8 35 FE 66 C1 E3 02 E8 B6 00 C3 52  // .....5.f.......R
    2D30: 66 53 E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8  // fS...f[Z.. ..J..
    2D40: A2 00 C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03  // ...QfR..........
    2D50: 80 E3 FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3  // .........t.f....
    2D60: 04 E8 CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66  // .......f.f.....f
    2D70: 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53  // ZY.RfS...f[Z.RfS
    2D80: E8 A1 FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B  // ...f[Z.fPURfP...
    2D90: 56 0C 89 56 08 E8 C4 FD 2E A1 E9 02 B2 18 EF B2  // V..V............
    2DA0: 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55 52  // .f.f.F.fXZ].fPUR
    2DB0: 8B EC E8 A7 FD B2 00 66 8B 46 0A 66 EF 8B 56 08  // .......f.F.f..V.
    2DC0: 89 56 0C 66 8B 46 04 66 89 46 08 5A 5D 66 58 66  // .V.f.F.f.F.Z]fXf
    2DD0: 58 C3 66 50 52 E8 84 FD B2 18 66 ED 2E A3 E9 02  // X.fPR.....f.....
    2DE0: 5A 66 58 C3 66 81 FB FF 00 00 00 77 04 8A D3 EB  // ZfX.f......w....
    2DF0: 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66 81 FB  // .f....f...f..f..
    2E00: FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00 66 EF  // ....w.....f...f.
    2E10: 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51 8B F0  // f...f....U..SQ..
    2E20: 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC 59 5B  // &.\.&.L..(..f.Y[
    2E30: 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14 00 59  // ].SQ..&.\$3....Y
    2E40: 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26 8B 4C  // [.U..SQ..&.\.&.L
    2E50: 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E FE 8C  // ...RVW.......N..
    2E60: D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20 00 2B  // ...&.|&.E.2.. .+
    2E70: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    2E80: 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0 F7  // .2..............
    2E90: D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B 7C  // .&!D.&!|.....&.|
    2EA0: 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66 C7 46  // &.M.2.. .+...f.F
    2EB0: FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2 F8 8A  // ........n..^....
    2EC0: 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8 E2  // M.2....V........
    2ED0: FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06 D1 E0  // .#F.#V..M.2.....
    2EE0: D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F 5E 5A  // ....&.D.&.T.._^Z
    2EF0: C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F 26 8A  // .U..SQRWP..&..&.
    2F00: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    2F10: D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7 00  // .......M..N..F..
    2F20: 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09 47  // ...N.........&.G
    2F30: 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51 52  // .&....f._Z...SQR
    2F40: 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01 32 ED  // W......&.w&.L.2.
    2F50: B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1 EA  // . .+............
    2F60: D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6 E3  // ....&..&.M.2....
    2F70: 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C 26  // ...........&!G.&
    2F80: 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E C2 26  // !W._...SV......&
    2F90: 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A 44 01  // .w&.<.ts.<.uX.D.
    2FA0: 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75 46 8A  // 2.&....uL&;G.uF.
    2FB0: 04 6B F0 03 8A 84 E6 8B 26 01 47 26 8C D0 8E C0  // .k......&.G&....
    2FC0: 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B F0 03  // &.w&.<.t...2.k..
    2FD0: 8B C3 FF 94 E4 8B 26 8B 77 26 8A 04 32 E4 EB D1  // ......&.w&..2...
    2FE0: 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47 1C 26  // .D.&)G&&.G&&.G.&
    2FF0: 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B F0 03  // .w...&.w&..2.k..
    3000: 8A 84 E6 8B 26 01 47 26 E9 80 FF 33 C0 33 F6 8B  // ....&.G&...3.3..
    3010: D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26 8B 54  // .^[.SQRV...w5&.T
    3020: 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26 8B 47  // .&.W.&.G.....&.G
    3030: 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E C1 26  //  3.&.G.&.T.....&
    3040: F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75 22 26  // .G/.....&..4.u"&
    3050: 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26 D1 57  // .w.&.w.u.&.g.&.W
    3060: 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11 E9 E1  // .&.g.&.W....y...
    3070: 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47 1C 26  // .&.G42.....&.G.&
    3080: 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B D8 8D  // .W.........SV...
    3090: 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37 26 8B  // w5&.D.2....&.7&.
    30A0: 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04 26 89  // 4..&.G.&._.&..&.
    30B0: 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77 35 8E  // \.^[.SRV.....w5.
    30C0: C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02 32 F6  // .&.T...@s!&.w.2.
    30D0: C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26 8B 47  // ...&.t...&.W.&.G
    30E0: 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41 75 12  // .&..&.D......Au.
    30F0: 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89 57 12  // &.G.&.W.&.G.&.W.
    3100: EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57 0A 26  // .h..@u.&.G.&.W.&
    3110: 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A 26 8B  // .G.&.W..Q..Bu.&.
    3120: 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26 8A 47  // G.&.G".B..Cu.&.G
    3130: 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B 57 08  // .&.G3.3..Fu.&.W.
    3140: 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C 80 FA  // &.G.&.W.&.G.....
    3150: 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80 FA 48  // Gu.&.G.&.G$....H
    3160: 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3 53 56  // u.&.G.&.G ^Z[.SV
    3170: 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47 14 26  // ...w5&.D.2.&.G.&
    3180: C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B 77 02  // .G...^[.SV..&.w.
    3190: 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7 47 16  // &.t...2.&.G.&.G.
    31A0: 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53 56 8B  // ..&._.&.G.^[.SV.
    31B0: D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77 14 26  // .&.w.&.t..4&.w.&
    31C0: C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02 5E 5B  // .G...&._.&.G..^[
    31D0: C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 04 8B  // .SV..&.w.&.t....
    31E0: 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02 26 83  // t.&.G.&.w.&._.&.
    31F0: 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B F3  // G..^[.SRV...p...
    3200: 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8  // &.G.&.W.........
    3210: 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9 4A FF  // &.G.&.T....+..J.
    3220: 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53 8B D8  // S..&._.&.G.[.S..
    3230: 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B D8 E8  // &._.&.G..[.SV...
    3240: 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14 26 11  // k...&.W 3.&.W.&.
    3250: 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4 06 3D  // D.....&.G.2....=
    3260: 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E 32  // ..u.2.3.^[.&.G.2
    3270: C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00 75 08  // ....=..t.&..4.u.
    3280: 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4 26 89  // .../.^[.&.G42.&.
    3290: 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B C3  // G.&.G........^[.
    32A0: 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B 1F  // S.....&.G....&..
    32B0: 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3 C4 32  // &....&..&.W.[..2
    32C0: B9 32 CF 32 1E 33 D5 32 ED 32 07 33 12 33 18 33  // .2.2.3.2.2.3.3.3
    32D0: 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F 16  // SQV.........&...
    32E0: 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02 26 8B  // .u"&...@s.&.w.&.
    32F0: 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07 26 8B  // _....&.D...&..&.
    3300: 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83 C6 C0  // W..{.&.w.&.G....
    3310: 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF A4 56  // ...uq...wl.....V
    3320: 32 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B 47 0C  // 2&.G.&.W..T.&.G.
    3330: 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26 8A 4F  // &.W..I.&.G".K&.O
    3340: 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2 FA  // 32....3.........
    3350: 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00 33 D2  // ...+.&.O32....3.
    3360: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05 26  // ...............&
    3370: 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24 EB 08  // .G.&.W....&.G$..
    3380: 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53 56 8B  // &.G ..3.3....SV.
    3390: D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ......&.G.&.W...
    33A0: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    33B0: E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8 E8  // ...^[.3.3..SV...
    33C0: EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54 02 5E  // ..&.w.&.w"...T.^
    33D0: 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B 47  // [.S..&.G+....&.G
    33E0: 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B 01 E8  // .&.W.[.S..&.G+..
    33F0: BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD EB  // ....S..&.G+.....
    3400: DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03 80 E3  // .S....5&._......
    3410: 07 32 FF 03 DB FF 97 74 8B 5B C3 53 52 56 8B D8  // .2.....t.[.SRV..
    3420: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 90 8B  // &.G,2...........
    3430: 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4 8B F0  // &.G.&.W.&.G-2...
    3440: 03 F0 8B C3 FF 94 A8 8B 26 89 47 04 26 89 57 06  // ........&.G.&.W.
    3450: E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1  // ...SQV..&.O+2...
    3460: 8A 8C D8 8B E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6  // ......&.o.&._...
    3470: 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C B8 8B 8B  // &.O+2...........
    3480: B4 BA 8B 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32  // ...&!O.&!w.&.O*2
    3490: ED 8B F1 8A 8C E0 8B E3 0A 26 D1 67 04 26 D1 57  // .........&.g.&.W
    34A0: 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F 14 26  // ...&.O.&.w.&.O.&
    34B0: 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C D0 8E  // .w....SQRVW.....
    34C0: C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A  // .&.G+2......&.G*
    34D0: 8B F8 8A 8D E0 8B 32 ED 8B 84 B8 8B 8B 94 BA 8B  // ......2.........
    34E0: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 14  // ............&!G.
    34F0: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C E0 8B  // &!W.&.G*2.......
    3500: 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A  // 2...&.o.&._...&.
    3510: 47 2B 8B F0 C1 E6 02 8B 84 B8 8B 8B 94 BA 8B 26  // G+.............&
    3520: 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B F0 8A  // !G.&!W.&.G*2....
    3530: 8C E0 8B 32 ED E3 0A 26 D1 67 08 26 D1 57 0A E2  // ...2...&.g.&.W..
    3540: F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57  // .&.G.&.W.&.G.&.W
    3550: 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A 4F 2B  // ._^ZY[.SQV..&.O+
    3560: 32 ED 8B F1 8A 8C D8 8B E3 0A 26 D1 6F 06 26 D1  // 2.........&.o.&.
    3570: 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B  // _...&.O+2.......
    3580: 8C B8 8B 8B B4 BA 8B 26 21 4F 04 26 21 77 06 26  // .......&!O.&!w.&
    3590: 8A 4F 2A 32 ED 8B F1 8A 8C E0 8B E3 0A 26 D1 6F  // .O*2.........&.o
    35A0: 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1  // .&._...&.O+2....
    35B0: E6 02 8B 8C B8 8B 8B B4 BA 8B 26 21 4F 08 26 21  // ..........&!O.&!
    35C0: 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0 26 80  // w....QRW......&.
    35D0: 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .+.t.&.G,2......
    35E0: C3 FF 94 90 8B 26 89 47 08 26 89 57 0A EB 10 26  // .....&.G.&.W...&
    35F0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 9C 8B 26  // .G,2...........&
    3600: 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A8 8B 26  // .G-2...........&
    3610: 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F 2B 00  // .G.&.W.....&..+.
    3620: 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  // tJ&.G+2......&.G
    3630: 2A 8B F8 8A 8D E0 8B 32 ED 8B 84 B8 8B 8B 94 BA  // *......2........
    3640: 8B E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3650: 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26 8B  // .&!W......&.G.&.
    3660: 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B 57 04  // W.&.G.&.W...&.W.
    3670: 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A 47 2C  // &.G.&.W.&.G.&.G,
    3680: 32 E4 8B F0 03 F0 8B C3 FF 94 84 8B 5F 5A 59 C3  // 2..........._ZY.
    3690: 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B F0 8A  // SQRVW..&.G*2....
    36A0: 8C E0 8B 32 ED E3 0A 26 D1 67 04 26 D1 57 06 E2  // ...2...&.g.&.W..
    36B0: F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    36C0: 26 8A 47 2A 8B F8 8A 8D E0 8B 32 ED 8B 84 B8 8B  // &.G*......2.....
    36D0: 8B 94 BA 8B E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ................
    36E0: 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B 57 06  // &.G.&.W.&.G.&.W.
    36F0: 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC 51 52  // &!G.&!W..V.U..QR
    3700: 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // P..&.G,2........
    3710: 94 90 8B 26 89 47 08 26 89 57 0A 26 8A 47 2B 88  // ...&.G.&.W.&.G+.
    3720: 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57 06 26  // F......&.G.&.W.&
    3730: 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 A8 8B 26  // .O-2...........&
    3740: 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46 FA 32  // .G.&.W....D..F.2
    3750: E4 8B F0 8A 8C D8 8B E3 0A 26 D1 6F 16 26 D1 5F  // .........&.o.&._
    3760: 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B 84  // ...&.W+2........
    3770: B8 8B 8B 94 BA 8B 26 21 47 14 26 21 57 16 26 8A  // ......&!G.&!W.&.
    3780: 47 2A 32 E4 8B F0 8A 8C E0 8B 32 ED E3 0A 26 D1  // G*2.......2...&.
    3790: 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B 57 16  // g.&.W...&.G.&.W.
    37A0: 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4 8B F0  // &.G.&.W.&.G,2...
    37B0: 03 F0 8B C3 FF 94 84 8B 8D 66 FC 5A 59 5D C3 51  // .........f.ZY].Q
    37C0: 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C D8  // ...V.&.O+2......
    37D0: 8B E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3 E8  // ...&.o.&._......
    37E0: AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // ..&.O,2.........
    37F0: 84 8B 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26 8B  // ..Y...."....U.&.
    3800: 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A 26 8A  // G.&.w.&.G.&.w.&.
    3810: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84 8B C3 53  // G,2............S
    3820: 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04 26  // V........(.&.G.&
    3830: 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47 2C 32  // .w.&1G.&1w.&.G,2
    3840: E4 8B F0 03 F0 8B C3 FF 94 84 8B 5E 5B C3 53 51  // ...........^[.SQ
    3850: 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04 E3  // V..........&.O..
    3860: 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8 46 FC  // .&.g.&.W......F.
    3870: 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 84 8B  // &.O,2...........
    3880: 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3 E8 C2  // ^Y[.SQV.........
    3890: FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2  // .&.O...&.o.&._..
    38A0: F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B F3  // ...R...r........
    38B0: 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11 54 0A  // &.G.&.W.&.G.&.T.
    38C0: 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .....&.G,2......
    38D0: C3 FF 94 84 8B 5A C3 52 8B D8 E8 3E FB 8B C3 E8  // .....Z.R...>....
    38E0: 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29 47 08  // q...&.G.&.W.&)G.
    38F0: 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B C6 E8  // &.T...QR........
    3900: 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B  // U.&.D.&.T.&.\.&.
    3910: 4C 06 E8 FB F2 26 89 44 0C 26 89 54 0E 5A 59 C3  // L....&.D.&.T.ZY.
    3920: 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8 5C 08  // R........,....\.
    3930: 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18 FC 26  // Z.QRW..........&
    3940: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    3950: 3A F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26 8B  // :.&.D.&.T.....&.
    3960: 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 1B  // D.&.T.&.\.&.L...
    3970: F2 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B D0 E8  // .&.\.&.L....R...
    3980: 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3 51 52  // ............Z.QR
    3990: 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1 26 8B  // ..............&.
    39A0: 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47 04  // G.&.W.&;W.u.&;G.
    39B0: 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47 0A  // u.&.G0.ZY...&.G.
    39C0: 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04 33 C0  // &;G.r.u.&;W.s.3.
    39D0: EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52 57 8B  // .....&.G0ZY.QRW.
    39E0: D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 90  // .&.G,2..........
    39F0: 8B 26 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A 47  // .&.G.&.W.....&.G
    3A00: 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D8 8B 32 ED  // +2............2.
    3A10: 8B 84 B8 8B 8B 94 BA 8B E3 06 D1 E0 D1 D2 E2 FA  // ................
    3A20: F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D FC 55  // ....&!G.&!W..M.U
    3A30: 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32 E4  // ..QRW.....&.G+2.
    3A40: 8B F0 C1 E6 02 8B F8 8A 8D D8 8B 32 ED 8B 84 B8  // ...........2....
    3A50: 8B 89 46 F4 8B 84 BA 8B 89 46 F6 E3 08 D1 66 F4  // ..F......F....f.
    3A60: D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A  // .V....~..F..F.&.
    3A70: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 90 8B 26 89  // G,2...........&.
    3A80: 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47 04 26  // G.&.W....G.&.G.&
    3A90: 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08  // .W......V...&#G.
    3AA0: 26 23 57 0A 26 89 47 14 26 89 57 16 26 21 7F 08  // &#W.&.G.&.W.&!..
    3AB0: 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26 80  // .F.&!G....w5..&.
    3AC0: 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1  // <.s.&.O...&.g.&.
    3AD0: 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A  // W.....&.O...&.o.
    3AE0: 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21 47  // &._...&!...F.&!G
    3AF0: 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26 09 47  // .&.W.&.G.&.W.&.G
    3B00: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84  // .&.G,2..........
    3B10: 8B 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8 8B C3  // ..f._...R.......
    3B20: E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57 06 75  // .4.&.G.&.W.&.W.u
    3B30: 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01 00 26  // .&.G.t.........&
    3B40: 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D 32  // .G0Z.SQRV..&.O-2
    3B50: ED 8B F1 03 F1 FF 94 A8 8B 26 89 47 04 26 89 57  // .........&.G.&.W
    3B60: 06 26 8A 47 2B 32 E4 8B F0 8A 8C D8 8B E3 0A 26  // .&.G+2.........&
    3B70: D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1  // .o.&._...&.G+...
    3B80: E6 02 8B 84 B8 8B 8B 94 BA 8B 26 21 47 04 26 21  // ..........&!G.&!
    3B90: 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47 04 26  // W....R.....&.G.&
    3BA0: 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51 52 8B  // .W.&.G.&.W.Z.QR.
    3BB0: D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74 02  // ........&.w.&.t.
    3BC0: 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80 3C  // .<ZZt[&.w.&.t..<
    3BD0: 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8 21 F8  // cu.&.w.&.D....!.
    3BE0: 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26 89 47  // &.G.&.W......&.G
    3BF0: 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B 47  // .&.W.....&.W.&.G
    3C00: 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B 77  // .&;G.u.&;W.u.&.w
    3C10: 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02 5A 59  // .&..&.G...&.G.ZY
    3C20: C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57 8B  // .&._.&.G..ZY.RW.
    3C30: D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54 01  // .....&.w.&.t..T.
    3C40: 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF 75  // ..u.&.G".../...u
    3C50: 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02 26  // .&.w.&.?&.4&+u.&
    3C60: 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A C2 32  // .w"..&.........2
    3C70: E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02 26  // .......&.G"&._.&
    3C80: 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26 8B  // .G.._Z...&.g/.&.
    3C90: 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26 8B 5F  // w.&.t..D.&.G4&._
    3CA0: 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B 74  // .&.G.....&.w.&.t
    3CB0: 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26 8A 47  // ..t.&.w ..S..&.G
    3CC0: 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26 09 47  // ,2.$.&.g/....&.G
    3CD0: 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..O...&.w.&.t..D
    3CE0: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    3CF0: 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26 8B  // @.&._.&.G.....&.
    3D00: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    3D10: C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56 8B D8  // .G..........SV..
    3D20: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    3D30: 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86 F4 53  // .&.G...........S
    3D40: 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4  // V..&.w.&.t..D.2.
    3D50: 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0 03 E9  // &.G.&.G.........
    3D60: 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F 02  // c.SV..&.w...&._.
    3D70: 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52 8B  // ._....&.\.^[.QR.
    3D80: D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8 A0 01  // .&.w.&.D..&.....
    3D90: 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1 03  // ..&.w(.D.2......
    3DA0: F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6 8B  // ..<.tO&.w(.T.2..
    3DB0: C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B 34 8B  // ....&.G1&.w.&.4.
    3DC0: 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24 1F  // D....2.$....2.$.
    3DD0: 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37 26  // &.g/....&.G.&.7&
    3DE0: 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47 32  // .G.......&..&.G2
    3DF0: 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32 82  // .&.O(ZY.S..&.G2.
    3E00: 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74 0A  // [.W......&..,.t.
    3E10: 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26 8B  // &.G,&:G0u.&.w.&.
    3E20: 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B  // t.&...&.=.t...&.
    3E30: 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83 47 02  // _.&.w._.&._.&.G.
    3E40: 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F 30  // ._.SVW......&..0
    3E50: 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B 77  // .t.&.G0&:G,u &.w
    3E60: 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03  // .&.t.&...&.=.t..
    3E70: F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B 5F  // .&._.&.w._^[.&._
    3E80: 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C D0 8E  // .&.G....SVW.....
    3E90: C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51 52  // .&..0.t...U..SQR
    3EA0: 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26 C6 47  // W..&.w.&.t...&.G
    3EB0: 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26 8B 77  // =.....&..=.s &.w
    3EC0: 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B F3 03  // .&.W=2.&.|......
    3ED0: F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26 8B 7F  // ...&.T5&.G=..&..
    3EE0: 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 05 8C 26 01  // ...2..........&.
    3EF0: 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88 57 2D  // U.&..(.U....&.W-
    3F00: 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26 88 57  // &..(.U.......&.W
    3F10: 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57 2A 8A  // +&..(.U....&.W*.
    3F20: 94 04 8C 26 88 57 2C 8D 66 F8 5F 5A 59 5B 5D C3  // ...&.W,.f._ZY[].
    3F30: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    3F40: D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53 56  // ..t........^[.SV
    3F50: 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8 8B  // ..&.w....tH.....
    3F60: 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51 56 57  // t .......U..SQVW
    3F70: 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46 E0  // ..@...F.......F.
    3F80: 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE 04  // &.E.._....^..F..
    3F90: 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4 FF  // ......F.2..F....
    3FA0: 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F 84  // ..2....^....?...
    3FB0: 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46 D8  // e..F..f...F...F.
    3FC0: 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00 00 C6  // ..f.F......F....
    3FD0: 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A C2  // F....<......V...
    3FE0: 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75 26 8B  // 2....^....?.tu&.
    3FF0: 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1 09  // E......G.2......
    4000: 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0 50 E2  // 2.......t...3.P.
    4010: FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0 08 26  // ......F...tA...&
    4020: 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26 8B  // .G...2....^...&.
    4030: 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26 8B 07  // E....^.&...^.&..
    4040: 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26 89 77  // ...&.G..^..v.&.w
    4050: 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6 46 EA  // ..^..^..F.....F.
    4060: 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8 10 0F  // ....F...F.2.....
    4070: 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F 83  // ....f..F.2......
    4080: 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0 8B  // ....^...&._..^..
    4090: 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10 8B  // ^.&._..?[uJ.F...
    40A0: 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F 8B  // ^.&._..^..^.&...
    40B0: 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 03 E1  // G.2......2......
    40C0: 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47 04  // .^..^...t.&...G.
    40D0: C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E B8  // ...2.$........^.
    40E0: 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D 46 B8  // &)....F.......F.
    40F0: E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97 02  // .....2.....F....
    4100: 8C E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E EA 10  // ..r..~.......~..
    4110: 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9 0B  // t..F...2..f._^..
    4120: FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 C2 E8 59  // ..SQ..&.O.2....Y
    4130: 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 BD E8 59  // [.SQ..&.O.2....Y
    4140: 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B C3 53  // [.S..&.G.2...[.S
    4150: 51 8B D8 26 8A 4F 04 32 ED E8 B4 D8 59 5B C3 53  // Q..&.O.2....Y[.S
    4160: 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B  // ..fPfRfQf&.G.f&.
    4170: 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47 0C 66  // W.f&.O.f..f&.G.f
    4180: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B D8 66  // &.W.fYfZfX[.S..f
    4190: 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F 04 66  // PfRfQf&.G.f&.O.f
    41A0: F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    41B0: 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 56 EB 8B  // fX[.SW..&._..V..
    41C0: D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26 8B 47  // .f...._[.SW..&.G
    41D0: 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1  // .&.W.....f......
    41E0: E3 02 E8 54 EB EB D8 53 52 57 8B D8 26 8B 47 08  // ...T...SRW..&.G.
    41F0: 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14 E8  // &.W..f.....&._..
    4200: 78 EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C 26 8B  // x._Z[.SR..&.G.&.
    4210: 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F 01  // W..f.....&._&._.
    4220: E8 57 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C 26 8B  // .W.Z[.SRV..&.\&.
    4230: 5F 01 E8 E0 EA 8B D0 66 C1 E8 10 92 26 89 44 1C  // _......f....&.D.
    4240: 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8 26 8B  // &.T.^Z[.SQRW..&.
    4250: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8 26  // G.&.W..f.......&
    4260: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    4270: DA C1 E3 02 8B C1 E8 34 EA 5F 5A 59 5B C3 8B D0  // .......4._ZY[...
    4280: 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52 66 53  // f.......fPfQfRfS
    4290: 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07 01 E9  // fUfVfW....u.....
    42A0: A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02 75 06  // ..<.u..7....<.u.
    42B0: E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B EC 89  // ._....<.u.......
    42C0: 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75 0A E8  // ^....<.u..}<.u..
    42D0: 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8 8C 03  // .....V..q<.u....
    42E0: 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C 07 75  // ...^..N..V..]<.u
    42F0: 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E 0D EB  // ..U<.u.......~..
    4300: 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04 8B EC  // I<.u..A<.u..e...
    4310: 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75 02 EB  // .N..~..F../<.u..
    4320: 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB 1B 3C  // '<.u..Z....^...<
    4330: 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC 89 5E  // .u...<.u.......^
    4340: 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46 18 66  // ....O...2....F.f
    4350: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3  // _f^f]f[fZfYfX...
    4360: 50 1E 2E 8E 1E 03 04 8C D8 A3 C8 52 A3 D8 52 A3  // P..........R..R.
    4370: EA 52 2E 8E 1E FB 03 A3 AA 04 1F 58 CB 00 30 31  // .R.........X..01
    4380: 2E 30 30 00 56 45 53 41 00 03 BC 02 00 00 01 00  // .00.VESA........
    4390: 00 00 00 00 00 00 00 01 01 10 C8 01 00 00 59 01  // ..............Y.
    43A0: 00 00 16 43 00 00 B9 3F 00 8B DF 83 C7 04 FC 66  // ...C...?.......f
    43B0: 33 C0 F3 66 AB 8B FB BE 1C 43 B9 22 00 F3 A4 06  // 3..f.....C."....
    43C0: 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C 4F 20  // ..O..G..O..O..O 
    43D0: 83 C7 22 89 7F 0E 0E 1F E8 0F D5 B0 4F 32 E4 C3  // ..".........O2..
    43E0: 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59 8C DB  // VQW...f3..f._Y..
    43F0: 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40 00 C7  // .......E...E.@..
    4400: 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45 1A 01  // E.@..E...E...E..
    4410: C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB E8 EC  // .E..f.E>........
    4420: CD 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28 8C C8  // .f........f.E(..
    4430: 66 C1 E0 10 B8 D5 46 66 89 45 0C 81 F9 FF 81 0F  // f.....Ff.E......
    4440: 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 1C E8 BB  // ........S.......
    4450: D2 5B 06 1F 0F 84 B1 00 53 E8 37 D5 66 89 45 12  // .[......S.7.f.E.
    4460: C7 45 16 08 10 8D 5C 0C E8 D8 E8 66 89 45 1F 66  // .E....\....f.E.f
    4470: 89 45 36 8D 5C 10 E8 CA E8 66 89 45 23 66 89 45  // .E6.\....f.E#f.E
    4480: 3A 8D 5C 08 E8 BC E8 0A C0 75 03 5B EB 7B E8 02  // :.\......u.[.{..
    4490: D5 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74 08 77  // .f...=X.t.=^.t.w
    44A0: 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 FD 03 89  // ..E.....E.......
    44B0: 45 08 8D 5C 04 E8 8B E8 66 8B C8 66 C1 E9 10 D3  // E..\....f..f....
    44C0: E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19 8D 5C  // ..E..E2.....E..\
    44D0: 14 E8 6F E8 5B 3D 00 01 77 2F 53 8B D8 B8 00 01  // ..o.[=..w/S.....
    44E0: 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88 45 34  // 3...[...E..E5.E4
    44F0: 8E DB 57 53 BE 80 1C E8 7C CD 5B 5F 0B C9 75 05  // ..WS....|.[_..u.
    4500: 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E DB 5E  // ...%.2......O..^
    4510: C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3 EB 21  // ......th..u....!
    4520: F6 C7 08 75 61 8B CB B2 01 BE 20 1C E8 DD D1 74  // ...ua..... ....t
    4530: 55 E8 3E D4 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A  // U.>...u.f.......
    4540: C7 E8 D5 02 EB 3A E8 BD CF 74 06 E8 2E CE E8 76  // .....:...t.....v
    4550: C6 BE 20 1C E8 F3 CC 74 2D E8 A5 00 E8 2C 00 66  // .. ....t-....,.f
    4560: BB 20 1C 00 1C E8 01 D4 BE 00 1C E8 04 D4 66 C1  // . ............f.
    4570: E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8 1F CD  // ....2....t..@...
    4580: B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33 C0 8E  // .O2....O...V.3..
    4590: C0 BE 20 1C E8 FC D3 8B C8 66 C1 E8 10 8B D0 C1  // .. ......f......
    45A0: E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88 16 84  // ..&..J......&...
    45B0: 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26 C6 06  // .&..Q..&..P..&..
    45C0: 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85 04 10  // I.b&..L...&.....
    45D0: 26 C7 06 0C 01 A7 5C 8C C8 26 A3 0E 01 07 5E C3  // &.....\..&....^.
    45E0: 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00 01 02  // .........@......
    45F0: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    4600: 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01 BE 78  // ...............x
    4610: 45 AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9  // E...............
    4620: 09 00 BA CE 03 32 E4 BE 7C 45 8A C4 EE AC 42 EE  // .....2..|E....B.
    4630: 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0 03 32  // J..............2
    4640: E4 BE 85 45 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00  // ...E............
    4650: 1C E8 1E D3 66 C1 E8 10 8B D8 E8 EE D2 75 05 E8  // ....f........u..
    4660: DA D2 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 DC D2 74  // ..u..O...O.....t
    4670: 53 BE 00 1C 80 FB 00 74 18 80 FB 01 75 05 E8 1A  // S......t....u...
    4680: D3 EB 1D 80 FB 02 75 10 8B C1 E8 CD D2 D3 E8 8B  // ......u.........
    4690: C8 E8 CD CD 74 2E EB 08 80 FB 03 75 24 E8 71 D2  // ....t......u$.q.
    46A0: E8 B7 D2 8B D8 D3 E3 50 33 C0 BA 00 01 3B DA 77  // .......P3....;.w
    46B0: 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8 4F 00  // ..........X...O.
    46C0: C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07 8A EF  // .2...O......u...
    46D0: E8 9B CE EB 05 E8 80 CE 8A F8 B0 4F 32 E4 C3 00  // ...........O2...
    46E0: E8 68 D2 74 2C BE 00 1C E8 87 D2 66 C1 E8 10 F6  // .h.t,......f....
    46F0: C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80 FF 01  // .@u...u.........
    4700: 75 14 BB 13 00 E8 09 E6 D1 E8 8B D0 B0 4F 32 E4  // u............O2.
    4710: C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81 E2 FF  // ..O...2..RSfP...
    4720: 00 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13 00 E8  // .....@f.........
    4730: 3A E5 BB 12 00 E8 34 E5 66 58 5B 5A C3 9C 1E 06  // :.....4.fX[Z....
    4740: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4750: E8 34 E6 E8 8A FF E8 53 E6 8B EC 89 56 10 89 46  // .4.....S....V..F
    4760: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4770: 1F 9D CB 0E 07 BF AA 8A 2E 8B 0E A8 8A B8 4F 00  // ..............O.
    4780: C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB 01 75  // ....u......&...u
    4790: 14 E8 72 CD 75 21 53 B1 01 0A FF 74 02 B1 00 E8  // ..r.u!S....t....
    47A0: 87 CC 5B EB 0D 80 FB 02 75 0D E8 9F CD 8A F8 C0  // ..[.....u.......
    47B0: E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3 01 0A  // ...O2...O.......
    47C0: DB 75 05 BB 02 01 EB 0E E8 3B CD 75 0E 33 C0 53  // .u.......;.u.3.S
    47D0: E8 ED BE 5B 74 05 B0 4F 32 E4 C3 B0 4F B4 03 C3  // ...[t..O2...O...
    47E0: 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51 66 52  // ...r..B...fPfQfR
    47F0: 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4 D1 E0  // fSfUfVfW..P.....
    4800: 8B F0 58 2E FF 94 C2 47 66 5F 66 5E 66 5D 66 5B  // ..X....Gf_f^f]f[
    4810: 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6 C4 D1  // fZfYfX.....P....
    4820: E0 8B F0 58 2E FF 94 C2 47 C3 FC 47 12 81 2B 81  // ...X....G..G..+.
    4830: 48 81 EF 48 4B 78 7D 78 F0 78 73 79 01 7B 05 7B  // H..HKx}x.xsy.{.{
    4840: 0E 7E DF 7E 62 7F C9 7F 64 81 C6 81 6F 84 08 4B  // .~.~b...d...o..K
    4850: B6 88 B0 47 B0 47 B0 47 B0 47 B0 47 B0 47 86 89  // ...G.G.G.G.G.G..
    4860: 89 6D DD 6E 2E 8E 1E FB 03 80 26 87 04 F3 50 8A  // .m.n......&...P.
    4870: E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA CC 03  // .......;.u.X....
    4880: EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4 B1 20  // ....0&.G..t.... 
    4890: A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B 53 E8  // ..uI......tA..S.
    48A0: 70 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E 88 04  // pA..[u..&.......
    48B0: EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08 0E 10  // .+X......&......
    48C0: 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84 04 18  // ...c............
    48D0: C7 06 0C 01 94 54 8C 0E 0E 01 CD 42 C3 80 26 10  // .....T.....B..&.
    48E0: 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A C8 E8  // ......XSP..3....
    48F0: 14 CC 74 06 E8 85 CA E8 CD C2 B2 08 BE 40 1C E8  // ..t..........@..
    4900: 0A CE BE 40 1C E8 42 C9 58 5B 0F 84 6E FF 2E 8E  // ...@..B.X[..n...
    4910: 1E FB 03 0E 07 E8 19 29 0E 1F 53 66 BB 40 1C 00  // .......)..Sf.@..
    4920: 1C E8 45 D0 BE 00 1C B0 20 E8 73 C9 5B 2E 8E 1E  // ..E..... .s.[...
    4930: FB 03 0E 07 E8 22 2E E8 24 00 E8 2E 3D E8 D1 01  // ....."..$...=...
    4940: E8 8E 01 E8 B4 3E 0E 1F BE 00 1C B0 10 E8 4F C9  // .....>........O.
    4950: E8 FD 2D E8 F5 2D C3 8B EC C6 46 1B 00 C3 E8 2F  // ..-..-....F..../
    4960: 00 E8 0A 00 E8 BD 00 E8 52 00 E8 62 0A C3 53 83  // ........R..b..S.
    4970: C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32 C0 26  // ....c......0.2.&
    4980: 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3  // .'.C....[...2...
    4990: 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A 27 3C  // S...........&.'<
    49A0: 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47  // .u... .C....[&.G
    49B0: 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3 83 C6  // ................
    49C0: 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6 06 89  // #...&.G..u......
    49D0: 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2 C0 80  // ..t.............
    49E0: FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF  // ..t....&...F....
    49F0: C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4 EE FE  // .S......2.......
    4A00: C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06  // .&...C.....2....
    4A10: E8 4F 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4 46 A4  // .O-..t........F.
    4A20: 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA CE 03  // ..[.S..7...2....
    4A30: 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB C6 4C 0E 07  // &.'.C....[...L..
    4A40: 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03  // ....}......3....
    4A50: 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24 0F 3C  // .<J.....u ...$.<
    4A60: 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74 18 B0  // .~$<.t <.t.<.t..
    4A70: 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC F6 E4  // @..........@....
    4A80: 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3 80 FC  // ........@.......
    4A90: 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01 C3 81  // .u......u.......
    4AA0: C3 00 05 C3 BF 48 4A BE 69 4A 33 C9 E8 4E 00 C3  // .....HJ.iJ3..N..
    4AB0: 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0 02 0F  // ................
    4AC0: 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05 62 40  // ......@.......b@
    4AD0: 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1 E3 2E  // .S..I......2....
    4AE0: 8B 87 85 4A A2 65 04 88 26 66 04 5B C3 2C 30 28  // ...J.e..&f.[.,0(
    4AF0: 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E 38 25  // 0-0)0*0.0.?)0.8%
    4B00: 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED  // u...].3.....;.u.
    4B10: C3 1E 06 2E 8E 1E FB 03 F6 06 87 04 80 75 49 83  // .............uI.
    4B20: 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B 3E 01  // >L..tB.I... ..>.
    4B30: 04 26 F6 47 33 01 75 0E 26 F6 47 09 01 75 1B 2E  // .&.G3.u.&.G..u..
    4B40: 8B 3E FF 03 EB 14 3C 06 7E 0B 2E 8B 3E FD 03 26  // .>....<.~...>..&
    4B50: 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07 20 07  // .g7.@f3...f. . .
    4B60: 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07 1F C3  // ..f3..f..&......
    4B70: 2E 8E 1E FB 03 80 FB 10 75 03 E9 7A 01 80 FB 20  // ........u..z... 
    4B80: 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A C0 75  // u......2u......u
    4B90: 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00  // ................
    4BA0: EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28 3C 80  // .$.........5u(<.
    4BB0: 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04 40 0F  // u.....@.......@.
    4BC0: 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8 98 07  // ...........u....
    4BD0: E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00 50 E8  // ........0t....P.
    4BE0: 30 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75 30 B7  // 0>........X..u0.
    4BF0: 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24 30 3C  // ....u...u....$0<
    4C00: 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C 30 75  // 0u.........$0<0u
    4C10: 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB 36 3C  // ....&..o......6<
    4C20: 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75 15 B7  // .uA.&..o.....u..
    4C30: 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED 74 15  // ....$0<0t.....t.
    4C40: B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7 0B 0A  // .......$0<0u....
    4C50: ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E  // .t..............
    4C60: 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80 0E 89  // ...)<.u+.&..o...
    4C70: 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C 01 75  // ......1u...t.<.u
    4C80: 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B EC C6  // .........&......
    4C90: 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C 01 75  // F.....3u.<.t.<.u
    4CA0: EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB DE 80  // ..&.............
    4CB0: FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB CE 3C  // .4u.<.u..&.....<
    4CC0: 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36 75 26  // .u...........6u&
    4CD0: BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02 EB AD  // . .<.t....<.t...
    4CE0: E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42 EC 22  // .............B."
    4CF0: C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8  // ................
    4D00: 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F  // .u............%.
    4D10: 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3  // ......^..N..F...
    4D20: 9C FA C7 06 14 00 76 72 8C 0E 16 00 9D C3 28 18  // ......vr......(.
    4D30: 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0 BF 1F  // .......c-'(.+...
    4D40: 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // ................
    4D50: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    4D60: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ..............P.
    4D70: 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81 BF 1F  // .......c_OP.U...
    4D80: 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // ...........(....
    4D90: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    4DA0: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ..............(.
    4DB0: 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80 BF 1F  // ..@....c-'(.+...
    4DC0: 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 A2  // ................
    4DD0: FF 00 13 15 17 02 04 06 07 10 11 12 13 14 15 16  // ................
    4DE0: 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF 50 18  // ..........0...P.
    4DF0: 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    4E00: 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 C2  // ...........(....
    4E10: FF 00 17 17 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    4E20: 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF 50 18  // ..............P.
    4E30: 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    4E40: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63 BA A3  // .M........](.c..
    4E50: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    4E60: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    4E70: 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    4E80: 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7 04 E3  // .@.........P....
    4E90: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    4EA0: 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF 00 05  // ..........@.....
    4EB0: 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F 00 05  // .....(..-2 $8?..
    4EC0: 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F 07 0C  // ....... $(-28?..
    4ED0: 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A 25 27  // ........%/83.*%'
    4EE0: 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29 29 2D  // )*,#..#%'*,+*))-
    4EF0: 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27 2F 30  // 27;974234551,'/0
    4F00: 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39 38 38  // 234433258:=<:988
    4F10: 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09 08 0D  // 99:741..........
    4F20: 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07 10 10  // ................
    4F30: 12 13 14 13 13 13 12 14 16 18 1A 19 18 17 16 17  // ................
    4F40: 17 17 18 15 14 11 15 15 16 17 17 17 17 17 16 18  // ................
    4F50: 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16 02 03  // ................
    4F60: 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A  // ................
    4F70: 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C  // ................
    4F80: 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C  // ................
    4F90: 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E  // ................
    4FA0: 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00 28 18  // ..............(.
    4FB0: 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80 BF 1F  // .. ....c-'(.+...
    4FC0: 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 E3  // ................
    4FD0: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    4FE0: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 50 18  // ..............P.
    4FF0: 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    5000: 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 E3  // ...........(....
    5010: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5020: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 00 05  // ................
    5030: 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C 0C 11  // ....%(... ..(,..
    5040: 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39 06 0B  // %*..26..',. 49..
    5050: 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33 13 17  // .$..,0..!&...3..
    5060: 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F 00 05  // +0.$8=..-2 $8?..
    5070: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    5080: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 00 05  // -2 $8?..-2 $8?..
    5090: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    50A0: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 50 18  // -2 $8?..-2 $8?P.
    50B0: 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    50C0: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    50D0: FF 00 08 00 00 18 18 00 00 00 08 00 00 00 18 00  // ................
    50E0: 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF 50 18  // ..............P.
    50F0: 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    5100: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    5110: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5120: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    5130: 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0 BF 1F  // ........-'(.+...
    5140: 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63 BA A3  // .M........]..c..
    5150: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5160: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5170: 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    5180: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63 BA A3  // .M........](.c..
    5190: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    51A0: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ?.............(.
    51B0: 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0 BF 1F  // .......g-'(.+...
    51C0: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // .O..............
    51D0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    51E0: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    51F0: 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81 BF 1F  // .......g_OP.U...
    5200: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // .O.........(....
    5210: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5220: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5230: 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81 BF 1F  // .......f_OP.U...
    5240: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3  // .O.........(....
    5250: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    5260: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    5270: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    5280: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 C3  // .@.........(....
    5290: FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ..??????????????
    52A0: 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF 50 1D  // ?.............P.
    52B0: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    52C0: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 E3  // .@.........(....
    52D0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    52E0: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    52F0: 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F  // .. ....c_OP.T...
    5300: 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96 B9 A3  // .A.........(@...
    5310: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    5320: 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF C6 4C  // .A........@....L
    5330: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 E6 52  // ...............R
    5340: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 1A 00  // ................
    5350: 84 8A 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5360: 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E 1E FB  // ................
    5370: 03 E8 FE 36 E8 D5 36 E8 76 1A 1F C3 2E 8E 1E FB  // ...6..6.v.......
    5380: 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89 04 0C  // .....`..........
    5390: 11 24 17 A2 89 04 B4 01 E8 73 1E A0 89 04 80 26  // .$.......s.....&
    53A0: 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03 0E 1F  // ....... ..c.....
    53B0: E8 83 B8 F7 C1 02 00 75 03 E8 0B B8 B8 03 00 E8  // .......u........
    53C0: 57 F4 C3 1E 2E 8E 1E FB 03 0E 07 EB 00 1F C3 F6  // W...............
    53D0: 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6  // ....t..S........
    53E0: EE B2 C8 80 3E 63 04 B4 75 2F BE 48 54 B9 40 00  // ....>c..u/.HT.@.
    53F0: 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03  // 3...............
    5400: FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE  // ....B...E....E..
    5410: FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89  // ..J......&.G+...
    5420: 04 06 74 31 B9 F8 00 BF 46 4E 3C 08 74 11 B9 40  // ..t1....FN<.t..@
    5430: 00 BF C6 4F 3C 38 74 07 3C 3F 74 03 BF 06 50 33  // ...O<8t.<?t...P3
    5440: DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A  // .........B.....J
    5450: E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74  // ....I<.t%<8t.<?t
    5460: 2A B9 08 00 33 DB 51 E8 42 D4 B9 08 00 F7 C3 10  // *...3.Q.B.......
    5470: 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 2B  // .t.....g.Y... .+
    5480: D4 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00 33 DB  // ....3..W....@.3.
    5490: 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3  // Q.(...../..Y..[.
    54A0: 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F  // .*.*.*.*.?.?.?.?
    54B0: 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF  // .*.?.*.?.*.?....
    54C0: 02 83 E7 0F 2E 8A B5 38 54 8B FB D1 EF 83 E7 0F  // .......8T.......
    54D0: 2E 8A AD 38 54 8B FB 83 E7 0F 2E 8A 8D 38 54 C3  // ...8T........8T.
    54E0: 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47  // ........B.G....G
    54F0: 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00  // ....G..J........
    5500: 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA  // ....~......~|...
    5510: C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE  // ..|.....|8...8|.
    5520: 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE  // |8...8....8.8|..
    5530: 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81  // l.8...<~<.......
    5540: C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99  // ......<ff<......
    5550: 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E  // .......6x..x~..~
    5560: 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36  // .~.......p.`>>66
    5570: F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8  // .f...<f.f<......
    5580: F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18  // .......>.....<~.
    5590: 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B  // ~<..fffff.f...{;
    55A0: 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00  // ....<f8ll8.x....
    55B0: FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18  // .....<~.~<.~.<~.
    55C0: 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE  // ........~<......
    55D0: 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0  // .....0p.p0......
    55E0: C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C  // .....$f.f$....8|
    55F0: 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00  // |.....||8.......
    5600: 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00  // .....<<.....lll.
    5610: 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C  // ....ll.l.ll..~.|
    5620: 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76  // ........0`..8l8v
    5630: CC CC 76 00 18 18 30 00 00 00 00 00 18 30 60 60  // ..v...0......0``
    5640: 60 30 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE  // `0..`0...0`...|.
    5650: 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00 00 00  // |......~........
    5660: 18 18 30 00 00 00 00 FE 00 00 00 00 00 00 00 00  // ..0.............
    5670: 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE  // .88....0`...|...
    5680: F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18  // ..|..x....~.|...
    5690: 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C  // 0f..|..<..|...<l
    56A0: FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC  // ..........|.|...
    56B0: C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C  // ..|.........|..|
    56C0: C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00  // ..|.|..~..|.....
    56D0: 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60  // ...........0..0`
    56E0: 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C  // 0...........`0..
    56F0: 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE  // .0`.|.......|...
    5700: DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C  // ..~.8l.......ff|
    5710: 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66  // ff..<f...f<..lff
    5720: 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C  // fl...........b`|
    5730: 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE  // ``..|.....|.....
    5740: C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18  // ....<.....<.<...
    5750: D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60  // ..p..........```
    5760: 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6  // `b..............
    5770: DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C  // ....|.....|..ff|
    5780: 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC  // ``..|.....|.....
    5790: D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18  // ....|..|..|.~Z..
    57A0: 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6  // ..<.......|.....
    57B0: 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38  // l8...........l88
    57C0: 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18  // 8l..fff<..<.....
    57D0: 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18  // 0b..|`````|..`0.
    57E0: 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6  // ....|.....|..8l.
    57F0: 00 00 00 00 00 00 00 00 00 00 00 FF 30 30 18 00  // ............00..
    5800: 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66  // ......x.|.~..`|f
    5810: 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC  // ff....|...|...|.
    5820: CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC  // ..~...|...|..60.
    5830: 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66  // 00x...v..~.|.`|f
    5840: 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C  // ff....8...<.....
    5850: 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18  // ...x.`flxl......
    5860: 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66  // ......l........f
    5870: 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66  // fff...|...|....f
    5880: 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66  // f|`...v..|.....f
    5890: 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30  // ``....|.|.|.00.0
    58A0: 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6  // 06........v.....
    58B0: 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C  // l8........l....l
    58C0: 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98  // 8l.......v.|....
    58D0: 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00  // 0d.....p........
    58E0: 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00  // ....p.....p.v...
    58F0: 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66  // ......88ll..<f.f
    5900: 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6  // <..x......v...|.
    5910: FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C  // ..|.|.x.|.~...x.
    5920: 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C  // |.~...x.|.~.88x.
    5930: 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6  // |.~...|.|.l8|.|.
    5940: FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6  // ..|...|...|...|.
    5950: FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18  // ..|.f.8...<.|.8.
    5960: 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6  // ..<...8...<..8l.
    5970: FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0  // ....88.|........
    5980: F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE  // ......l.~.n.~...
    5990: D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C  // ....|..|..|....|
    59A0: C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6  // ..|....|..|.|...
    59B0: C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18  // ..v.......v...<.
    59C0: 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6  // ..<..8l..l8.....
    59D0: C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0  // ..|...~..~..8l`.
    59E0: 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E  // f.l..f<~.<..>c8.
    59F0: 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C  // c>...>a<.|....x.
    5A00: 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C  // |.~...8...<....|
    5A10: C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC  // ..|.......v.....
    5A20: 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60  // ff..........>.>`
    5A30: 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30  // gc=.>.v..~.|...0
    5A40: 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C  // `f<....|``.....|
    5A50: 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30  // .......0|6.>...0
    5A60: 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8  // l<~.....<<...6l.
    5A70: 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88  // l6....l6l...".".
    5A80: 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77  // ".".U.U.U.U..w.w
    5A90: DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18  // .w.w............
    5AA0: F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36  // ............6666
    5AB0: F6 36 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18  // .666.....666....
    5AC0: F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36  // ....66...6666666
    5AD0: 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06  // 6666.....66666..
    5AE0: FE 00 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18  // ....6666........
    5AF0: F8 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    5B00: 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    5B10: FF 18 18 18 18 18 18 18 1F 18 18 18 00 00 00 00  // ................
    5B20: FF 00 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18  // ................
    5B30: 1F 18 18 18 36 36 36 36 37 36 36 36 36 36 37 30  // ....666676666670
    5B40: 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00  // ?.....?0766666..
    5B50: FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30  // .........6666670
    5B60: 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00  // 7666........66..
    5B70: F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36  // .666........6666
    5B80: FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00  // ................
    5B90: FF 36 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18  // .6666666?.......
    5BA0: 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00  // ................
    5BB0: 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18  // ?6666666.666....
    5BC0: FF 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    5BD0: 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    5BE0: FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F  // ................
    5BF0: 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC  // ..............f.
    5C00: D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60  // ..f..x........b`
    5C10: 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30  // ``....lllll...`0
    5C20: 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66  // `....~....p..fff
    5C30: 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6  // f|...v....8..8l.
    5C40: 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6  // l8..8l...l8.8l..
    5C50: 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB  // ll..>`8f..x...~.
    5C60: DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8  // .~...|...|..8`..
    5C70: C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE  // .`8.|...........
    5C80: 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18  // ......~...~.0...
    5C90: 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18  // 0.~...0...~.....
    5CA0: 18 18 18 18 18 18 18 18 18 78 30 00 00 00 18 00  // .........x0.....
    5CB0: 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C  // ~....v..v...|..|
    5CC0: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    5CD0: 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C  // .........8...lll
    5CE0: 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C  // ....p.0.......||
    5CF0: 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00 00 00  // ||..............
    5D00: 00 24 66 FF 66 24 00 00 00 00 00 00 00 10 00 00  // .$f.f$..........
    5D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5D20: 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00  // .~........~.....
    5D30: 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00  // .|........|.....
    5D40: 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00  // ..l.....|8......
    5D50: 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00  // ...8|.|8........
    5D60: 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00  // ...88.l.l.8.....
    5D70: 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00  // ..8||...l.8.....
    5D80: 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF  // .....<<<........
    5D90: FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00  // ................
    5DA0: 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF  // ....<fff<.......
    5DB0: FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00  // ................
    5DC0: 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00  // ....6x....x.....
    5DD0: 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00  // .<fff<.~........
    5DE0: 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00  // ........x.p.....
    5DF0: 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00  // .>6>66v.f.......
    5E00: 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00  // ...~<ff<~.......
    5E10: 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00  // ................
    5E20: 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00  // ....>~.~>.......
    5E30: 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00  // ..<~....~<......
    5E40: 00 66 66 66 66 66 66 66 00 66 66 00 00 00 00 00  // .fffffff.ff.....
    5E50: 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00  // ......{.........
    5E60: 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00  // .|..`|..|...|...
    5E70: 00 00 00 00 00 00 00 FE FE FE FE 00 00 00 00 00  // ................
    5E80: 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00  // ..<~...~<.~.....
    5E90: 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00  // ..<~............
    5EA0: 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00  // ........~<......
    5EB0: 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00  // ................
    5EC0: 00 00 00 00 30 70 FE 70 30 00 00 00 00 00 00 00  // ....0p.p0.......
    5ED0: 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00  // ................
    5EE0: 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00  // ....$f.f$.......
    5EF0: 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00  // ...888||........
    5F00: 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00  // ....|||88.......
    5F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F20: 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00  // ..<<<<..........
    5F30: 36 36 36 36 14 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    5F40: 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00  // .lll.ll.lll.....
    5F50: 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00  // ...|..x<..|.....
    5F60: 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00  // ....bf..0f......
    5F70: 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00  // .8l80v~...v.....
    5F80: 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5F90: 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00 00 00  // ...000000.......
    5FA0: 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00  // .0........0.....
    5FB0: 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00  // ....l8.8l.......
    5FC0: 00 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 00  // ......~.........
    5FD0: 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00  // ................
    5FE0: 00 00 00 00 00 00 FE 00 00 00 00 00 00 00 00 00  // ................
    5FF0: 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // ................
    6000: 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00  // .......0`.......
    6010: 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6020: 00 18 78 18 18 18 18 18 18 18 7E 00 00 00 00 00  // ..x.......~.....
    6030: 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00  // .|.....0`.......
    6040: 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00  // .|...<....|.....
    6050: 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00  // ...<l...........
    6060: 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00  // ..........|.....
    6070: 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6080: 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00 00 00  // ......00000.....
    6090: 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00  // .|...|....|.....
    60A0: 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00  // .|....~...|.....
    60B0: 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00  // ................
    60C0: 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00  // ................
    60D0: 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00  // ....0`.`0.......
    60E0: 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00  // ................
    60F0: 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00  // ..`0.....0`.....
    6100: 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00  // .|..............
    6110: 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00  // .|........~.....
    6120: 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00  // .8l.............
    6130: 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00  // ..fff|ffff......
    6140: 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00  // .<f......f<.....
    6150: 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00  // ..lffffffl......
    6160: 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00  // ..f`d|d``f......
    6170: 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00  // ..f`d|d```......
    6180: 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00  // .|........|.....
    6190: 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00  // ................
    61A0: 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .<........<.....
    61B0: 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00  // .<........p.....
    61C0: 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00  // ................
    61D0: 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00 00 00  // ..``````bf......
    61E0: 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00  // ................
    61F0: 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00  // ................
    6200: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6210: 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00  // ..ffff|```......
    6220: 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00  // .|........|.....
    6230: 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00  // ..fff|xlff......
    6240: 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00  // .|...p....|.....
    6250: 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .~Z.......<.....
    6260: 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    6270: 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6280: 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00  // ................
    6290: 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00  // ....l88l........
    62A0: 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00  // .fffff<...<.....
    62B0: 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00  // ......0`........
    62C0: 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00 00 00  // .|````````|.....
    62D0: 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00  // .....`0.........
    62E0: 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00  // .|........|.....
    62F0: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 00  // .8l.............
    6300: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 00 00  // ................
    6310: 18 18 18 0C 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6320: 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6330: 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00  // ..``|fffff......
    6340: 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6350: 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00  // ....|.....~.....
    6360: 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6370: 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00 00 00  // ..600.0000x.....
    6380: 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00  // ....v....v..|...
    6390: 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00  // ..``|fffff......
    63A0: 00 18 18 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    63B0: 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00  // ............x...
    63C0: 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00  // ..``fflxlf......
    63D0: 00 18 18 18 18 18 18 18 18 18 1C 00 00 00 00 00  // ................
    63E0: 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00  // ....l...........
    63F0: 00 00 00 00 DC 66 66 66 66 66 66 00 00 00 00 00  // .....ffffff.....
    6400: 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6410: 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00  // .....ffff|``....
    6420: 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00  // ....v....|......
    6430: 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00  // .....f````......
    6440: 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00  // ....|..|..|.....
    6450: 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00  // .000.00006......
    6460: 00 00 00 00 CC CC CC CC CC CC 76 00 00 00 00 00  // ..........v.....
    6470: 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6480: 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00  // ..........l.....
    6490: 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00  // ......l8l.......
    64A0: 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00  // .........v..|...
    64B0: 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00  // ........0b......
    64C0: 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00 00 00  // .....p..........
    64D0: 00 18 18 18 18 00 18 18 18 18 18 00 00 00 00 00  // ................
    64E0: 00 70 18 18 18 0E 18 18 18 18 70 00 00 00 00 00  // .p........p.....
    64F0: 00 76 DC 00 00 00 00 00 00 00 00 00 00 00 00 00  // .v..............
    6500: 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00  // .....88ll.......
    6510: 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00  // .<f....f<...8...
    6520: 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // ..........v.....
    6530: 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6540: 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 0x..x.|...v.....
    6550: 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6560: 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // `0..x.|...v.....
    6570: 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 8l8.x.|...v.....
    6580: 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00  // ...|....|..l8...
    6590: 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    65A0: 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    65B0: 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0...|.....|.....
    65C0: 00 66 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .f..8.....<.....
    65D0: 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .<f.8.....<.....
    65E0: 00 00 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    65F0: C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38  // ..8l...........8
    6600: 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C  // l8.8l...........
    6610: 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00  // .0..``|```......
    6620: 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00  // ...f......v.....
    6630: 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00  // .~..............
    6640: 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    6650: 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6660: 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0...|.....|.....
    6670: 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // 0x........v.....
    6680: 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // `0........v.....
    6690: 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00  // ..<.......<.....
    66A0: C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..|.......|.....
    66B0: C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    66C0: 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00  // ...|....|.......
    66D0: 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00  // 8l``.```f.l.....
    66E0: 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00  // ffff<.~.<.......
    66F0: 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00  // .>cc0..cc>......
    6700: 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00  // ....>c8.c>......
    6710: 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ..0.x.|...v.....
    6720: 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ..0.8.....<.....
    6730: 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6740: 18 30 60 00 CC CC CC CC CC DC 76 00 00 00 00 00  // .0`.......v.....
    6750: 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00  // .v...fffff......
    6760: 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00  // v...............
    6770: 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00  // !...3``gc3......
    6780: 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00  // B<.;fff>.f<.....
    6790: 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00  // .00.000`..|.....
    67A0: 00 00 00 00 00 00 7E 60 60 60 00 00 00 00 00 00  // ......~```......
    67B0: 00 00 00 00 00 00 7E 06 06 06 00 00 00 00 00 00  // ......~.........
    67C0: 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00  // ``bfl.0`.6..>...
    67D0: 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00  // ``bfl.6n.6~.....
    67E0: 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00  // ......<<<<......
    67F0: 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00  // ....6l.l6.......
    6800: 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11  // .....l6l........
    6810: 44 11 44 11 44 11 44 11 44 11 44 11 44 11 44 AA  // D.D.D.D.D.D.D.D.
    6820: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD  // U.U.U.U.U.U.U.U.
    6830: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18  // w.w.w.w.w.w.w.w.
    6840: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6850: 18 18 18 18 18 18 F8 18 18 18 18 18 18 18 18 18  // ................
    6860: 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    6870: 36 36 36 36 36 36 F6 36 36 36 36 36 36 36 36 00  // 666666.66666666.
    6880: 00 00 00 00 00 00 FE 36 36 36 36 36 36 36 36 00  // .......66666666.
    6890: 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    68A0: 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // 6666...666666666
    68B0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 00  // 666666666666666.
    68C0: 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36  // .......666666666
    68D0: 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36  // 6666...........6
    68E0: 36 36 36 36 36 36 FE 00 00 00 00 00 00 00 00 18  // 666666..........
    68F0: 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00  // ................
    6900: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 18 18  // ................
    6910: 18 18 18 18 18 18 1F 00 00 00 00 00 00 00 00 18  // ................
    6920: 18 18 18 18 18 18 FF 00 00 00 00 00 00 00 00 00  // ................
    6930: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 18 18  // ................
    6940: 18 18 18 18 18 18 1F 18 18 18 18 18 18 18 18 00  // ................
    6950: 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 18  // ................
    6960: 18 18 18 18 18 18 FF 18 18 18 18 18 18 18 18 18  // ................
    6970: 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36  // ...............6
    6980: 36 36 36 36 36 36 37 36 36 36 36 36 36 36 36 36  // 6666667666666666
    6990: 36 36 36 36 37 30 3F 00 00 00 00 00 00 00 00 00  // 666670?.........
    69A0: 00 00 00 00 3F 30 37 36 36 36 36 36 36 36 36 36  // ....?07666666666
    69B0: 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00  // 6666............
    69C0: 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36  // .......666666666
    69D0: 36 36 36 36 37 30 37 36 36 36 36 36 36 36 36 00  // 666670766666666.
    69E0: 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    69F0: 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18  // 6666...66666666.
    6A00: 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    6A10: 36 36 36 36 36 36 FF 00 00 00 00 00 00 00 00 00  // 666666..........
    6A20: 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00  // ................
    6A30: 00 00 00 00 00 00 FF 36 36 36 36 36 36 36 36 36  // .......666666666
    6A40: 36 36 36 36 36 36 3F 00 00 00 00 00 00 00 00 18  // 666666?.........
    6A50: 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00  // ................
    6A60: 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00  // ................
    6A70: 00 00 00 00 00 00 3F 36 36 36 36 36 36 36 36 36  // ......?666666666
    6A80: 36 36 36 36 36 36 FF 36 36 36 36 36 36 36 36 18  // 666666.66666666.
    6A90: 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18  // ................
    6AA0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 00 00  // ................
    6AB0: 00 00 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF  // ................
    6AC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00  // ................
    6AD0: 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF F0  // ................
    6AE0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F  // ................
    6AF0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF  // ................
    6B00: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00  // ................
    6B10: 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00  // ...v......v.....
    6B20: 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00  // .x..............
    6B30: 00 FE 66 62 60 60 60 60 60 60 60 00 00 00 00 00  // ..fb```````.....
    6B40: 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00  // .....llllll.....
    6B50: 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00  // ...b0..0b.......
    6B60: 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00  // ....~.....p.....
    6B70: 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00  // ...fffff|`......
    6B80: 00 00 00 00 76 DC 18 18 18 18 18 00 00 00 00 00  // ....v...........
    6B90: 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00  // ..88l..l88......
    6BA0: 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00  // ..8l.....l8.....
    6BB0: 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00  // .8l....lll......
    6BC0: 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00  // .>``<f....x.....
    6BD0: 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00  // ....~...~.......
    6BE0: 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00  // ...|....|`......
    6BF0: 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00  // ...0``|``0......
    6C00: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00  // .|..............
    6C10: 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00  // ................
    6C20: 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00  // .....~....~.....
    6C30: 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00  // .0.....0..~.....
    6C40: 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00  // ...0`0....~.....
    6C50: 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18  // ................
    6C60: 18 18 18 18 18 18 18 18 18 58 78 30 00 00 00 00  // .........Xx0....
    6C70: 00 00 00 18 18 00 7E 00 18 18 00 00 00 00 00 00  // ......~.........
    6C80: 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00  // .....v..v.......
    6C90: 00 78 CC CC 78 00 00 00 00 00 00 00 00 00 00 00  // .x..x...........
    6CA0: 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00  // ................
    6CB0: 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 00  // ................
    6CC0: 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00  // .........x8.....
    6CD0: 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00  // ..lllll.........
    6CE0: 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00 00 00  // .p..0`..........
    6CF0: 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00  // ....~~~~~~......
    6D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1D  // ................
    6D10: 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    6D20: 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00  // /........0`.....
    6D30: 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00  // .0..~........~..
    6D40: 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00  // ..M.............
    6D50: 00 00 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C  // ...T...........<
    6D60: 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C  // ....V.........f<
    6D70: 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB  // .....W..........
    6D80: FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66  // .f....X.....f<<f
    6D90: C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C  // .......Y......f<
    6DA0: 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30  // ...<....\.....`0
    6DB0: 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00 00 66  // .........m.....f
    6DC0: FF DB DB DB C3 C3 00 00 00 00 76 00 00 00 00 00  // ..........v.....
    6DD0: C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00  // ....f<.....w....
    6DE0: 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00 A7 5C  // .......f.......\
    6DF0: C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA  // ...t..F.W2..@...
    6E00: 5F BB 74 8A 26 89 1D 26 8C 4D 02 2E 8E 1E FB 03  // _.t.&..&.M......
    6E10: 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05  // W.I..........&..
    6E20: 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85  // FG.._.....&.E"..
    6E30: 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25 26 88  // .&.E#W..._&.]%&.
    6E40: 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D  // }&..I....t......
    6E50: 32 FF D1 E3 2E 8A 87 4C 8A 32 E4 0A C0 74 01 40  // 2......L.2...t.@
    6E60: 26 89 45 27 2E 8A 87 4D 8A 26 88 45 29 A1 85 04  // &.E'...M.&.E)...
    6E70: 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2  // ..........=..~..
    6E80: 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D  // .=^.~...=..~...=
    6E90: E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01  // ..~.&.U*.&....$.
    6EA0: C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04  // ................
    6EB0: 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08  // $.........0.B.$.
    6EC0: C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45  // .......&.E-..&.E
    6ED0: 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE  // 1.w...2.........
    6EE0: 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA  // ;.t4&.w.....t...
    6EF0: 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5  // .&.w.....t....&.
    6F00: 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C  // w.....t....&.w..
    6F10: D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03  // ...t......&.U2..
    6F20: BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0  // ................
    6F30: EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC  // .....%....&.E+..
    6F40: C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74  // .F.....t...t6..t
    6F50: 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03  // V...F.... ....t.
    6F60: 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03  // ..`...t...:...t.
    6F70: 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46  // .....?......F..F
    6F80: 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00  // ....... ...t....
    6F90: F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01  // ...t.......t....
    6FA0: 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8  // ...F......t.....
    6FB0: 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8  // %....t.......t..
    6FC0: 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3  // .......B....J...
    6FD0: E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4  // .k.......2......
    6FE0: EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20  // .B....J........ 
    6FF0: EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF  // ..&....GF...&.%.
    7000: 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE  // G..........&..G.
    7010: C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07  // .......QW..+.&..
    7020: 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE  // ......&.D.&.TA..
    7030: EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26  // .&.D....&.D....&
    7040: 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4  // .D....&.........
    7050: 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54  // ..p.&........&.T
    7060: 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F  // A2.....[.&.D..._
    7070: FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE  // ...2.....I.&.D..
    7080: 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47  // _Y..`......+.&.G
    7090: 02 51 57 2E 8E 1E FB 03 A0 10 04 24 30 AA BE 49  // .QW........$0..I
    70A0: 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04  // ................
    70B0: B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04  // ............t...
    70C0: F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4  // ...|............
    70D0: 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7  // _Y..:....&.?....
    70E0: 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9  // Q...............
    70F0: 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8  // .....G..&.D.....
    7100: 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1  // ...&...&.TA.....
    7110: 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A  // .2....&.D.....&.
    7120: 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09  // D.....2..... ...
    7130: 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C  // 2......&.D..Y...
    7140: FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E FB 03 26 8A  // .&......Q.....&.
    7150: 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E  // ..&.......G.I...
    7160: 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1  // ................
    7170: 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1  // ..~.......v..t..
    7180: 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1  // ..n..|....f.....
    7190: 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89  // ..^.Y.......+.&.
    71A0: 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA  // G.......4.B.&...
    71B0: C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83  // ...&.E.PJJ.&.E..
    71C0: C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58  // .....B2..BB....X
    71D0: 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2  // J.....&.w....l..
    71E0: C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE  // ..4.&......&.D..
    71F0: 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04  // VBB...2..B...&..
    7200: EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC  // .F..^..&.D......
    7210: 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86  // ..$.............
    7220: C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE  // .............. .
    7230: C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04  // .P......&....&..
    7240: 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C  // $...<.~.&.G3.u.<
    7250: 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47  // #t.<2t.<3t...&.G
    7260: 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87  // ..u....&I.......
    7270: 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD  // ..&.G..t....&...
    7280: 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9  // ..c...N.....b...
    7290: 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A  // ...P.....3....&.
    72A0: 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47  // .2..J.&.G....&.G
    72B0: 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86  // ....&.G..L.&.G..
    72C0: C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6  // ..`.X.R2.3......
    72D0: C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E  // .)u.2.3.....Z...
    72E0: 60 2E 8E 1E FB 03 2E 83 0E 05 04 00 75 6E 80 3E  // `...........un.>
    72F0: 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF  // ...tg.......b.2.
    7300: D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A  // ......P..>b.P2..
    7310: 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF  // ...2.AQ..J.2....
    7320: F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8 B0 D4  // ..)u=QR..P......
    7330: 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75  // ..u.. 3.2.....)u
    7340: 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32  // .Z..Y....Y...w.2
    7350: C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF  // ....X..P....a...
    7360: 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0  // ZYY....R*.8.}.2.
    7370: 2E 8E 06 FD 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8  // .....Z..........
    7380: 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1  // ............m...
    7390: 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32  // 2...........Ku.2
    73A0: E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB  // ..W..S..b...u...
    73B0: 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3  // t..5.[..+.......
    73C0: 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6  // 2....2.+...t**..
    73D0: 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F  // &....R... ......
    73E0: EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48  // .Z.............H
    73F0: 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05  // u...............
    7400: EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00  // .B.$....J....B..
    7410: EC 4A 9D C3 1E 2E 8E 1E FB 03 8B 16 63 04 80 C2  // .J..........c...
    7420: 06 1F C3 1E 2E 8E 1E FB 03 8B 16 63 04 1F C3 50  // ...........c...P
    7430: BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE  // ........u...X...
    7440: FF 80 C2 06 C3 1E 2E 8E 1E FB 03 80 3E 49 04 03  // ............>I..
    7450: 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05  // t..>I..t..>I..t.
    7460: 80 3E 49 04 00 1F C3 50 2E 8E 06 FF 03 A0 10 04  // .>I....P........
    7470: 24 30 3C 30 74 05 2E 8E 06 01 04 58 0B C0 74 03  // $0<0t......X..t.
    7480: E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B  // .....N.....+.2..
    7490: 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A  // .J..............
    74A0: DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B  // .u...8.~........
    74B0: C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B  // ......:.J.t.....
    74C0: 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8  // .....@..........
    74D0: 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A  // ....+.......S..*
    74E0: CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3  // .2.2.+.+........
    74F0: A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB  // .......u.X. ....
    7500: 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2  // ....u..S..*.t...
    7510: 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B  // ....X...... ....
    7520: D8 E8 2E 00 2E 8E 1E 01 04 8A C3 22 DF D3 E3 A8  // ..........."....
    7530: 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C  // .t.0.....4".....
    7540: C3 8A FC E8 0C 00 2E 8E 1E 01 04 8A 04 D2 E8 22  // ..............."
    7550: C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1  // ...(.....t......
    7560: C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0  // ................
    7570: E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3  // ................
    7580: FC 8A D8 2E 8E 06 01 04 8B C1 E8 86 00 75 02 8A  // .............u..
    7590: DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 01 04 8A  // ....$...........
    75A0: C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00  // ....m.u.........
    75B0: 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C  // ....+.......*..,
    75C0: 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B  // Q..VW..........+
    75D0: F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13  // .+.... ... .....
    75E0: C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7  // ..._^....Y......
    75F0: 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81  // ..W..........+..
    7600: C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB  // .. ........_....
    7610: 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02  // u.........+.8.v.
    7620: 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80  // 2.Q......Y2..P..
    7630: 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0  // >I..t...........
    7640: B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B  // .P.....RS..2....
    7650: 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03  // .P....P...L...[.
    7660: C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2  // .[Z.R...J...2...
    7670: D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 24 76 8B E8  // ..Z.........$v..
    7680: C1 ED 04 83 E5 0F 2E 8A 86 24 76 C3 00 03 0C 0F  // .........$v.....
    7690: 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86  // 03<?........&...
    76A0: E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02  // .......t........
    76B0: 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF  // u..V.E...c......
    76C0: 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1  // ......R.....&J..
    76D0: E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B  // ..2...Z.S..2....
    76E0: 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52  // .P......[.R..2.R
    76F0: 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74  // ...&...&J.Z....t
    7700: 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A  // ...L...u.Z.R...J
    7710: 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B  // ...2.......N....
    7720: C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9  // ......Z....&J...
    7730: C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C  // .......t...2..&L
    7740: 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3  // ................
    7750: E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0  // ...... .......2.
    7760: EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53  // ...>..&.}......S
    7770: B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E  // ................
    7780: AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0  // ....U......<.t..
    7790: 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7  // ..v.<Ut.2.[.....
    77A0: EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36  // ..........[....6
    77B0: 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8  // ......t%..*.....
    77C0: 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3  // R2........+.Q...
    77D0: A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB  // .+.+.Y..Z.......
    77E0: F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02  // ...........2....
    77F0: 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75  // ......+.....+.Nu
    7800: F7 C3 2E 8E 1E FB 03 89 0E 60 04 8A C5 24 60 A8  // .........`...$`.
    7810: 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85  //  t..............
    7820: 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6  // ...>I..t....t...
    7830: 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE  // ....t..B..6.....
    7840: CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB  // .8.~...td.......
    7850: 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED  // \8.tX.....|.....
    7860: FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75  // ...I...~D..*...u
    7870: 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38  // .8.t8..8.t2....8
    7880: F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03  // .~....~.........
    7890: 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9  // }.....8.t.......
    78A0: 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8  // ..*.............
    78B0: 05 FE C3 2E 8E 1E FB 03 A2 62 04 32 E4 8B F0 F7  // .........b.2....
    78C0: 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49  // &L..N....z.t..>I
    78D0: 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50  // ..w............P
    78E0: 04 E8 27 FE C3 2E 8E 1E FB 03 8A 26 49 04 E8 4B  // ..'........&I..K
    78F0: A0 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80  // .t...P.....H.t..
    7900: FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC  // ..t.w..w........
    7910: 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA  // .|.t...N........
    7920: 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A  // ..J.R.&........Z
    7930: E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7  // .....0......g...
    7940: 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B  // .R..J.....&.....
    7950: F7 03 F0 5A E8 55 FE C3 2E 8E 1E FB 03 8A 26 49  // ...Z.U........&I
    7960: 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03  // ....t....t.w@...
    7970: 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A  // ...S............
    7980: C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52  // ........+>J....R
    7990: F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A  // .&...&J......+.Z
    79A0: 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13  // ..J.............
    79B0: 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4  // |.t.............
    79C0: E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD  // ...R..J..&....+.
    79D0: 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E FB 03  // ..+.Z...........
    79E0: 2E 8E 06 01 04 E8 5D FA 74 11 80 3E 49 04 07 7C  // ......].t..>I..|
    79F0: 18 2E 8E 06 FF 03 74 03 E9 B1 00 E8 49 FC 8B D8  // ......t.....I...
    7A00: 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B  // &.....F...P.....
    7A10: F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9  // ....+....>I..u..
    7A20: 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46  // ..&...F.E&... .F
    7A30: 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6  // .E..P...........
    7A40: B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0  // ....V.... .O....
    7A50: 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E  // .....+..>..2....
    7A60: 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B  // u.&.}..u........
    7A70: CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE  // ....t.GVW.._^t#.
    7A80: C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74  // ......t.G..u...t
    7A90: 0F 2E 8E 1E FB 03 C4 3E 7C 00 B0 80 B2 80 EB CB  // .......>|.......
    7AA0: 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04  // 2........F...>I.
    7AB0: 13 7C 05 75 02 EB 5A C3 2E 8E 06 FD 03 E8 18 FC  // .|.u..Z.........
    7AC0: 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00  // ......+.........
    7AD0: BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75  // ....>I..r.....`u
    7AE0: 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05  // .......u........
    7AF0: 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00  // .....Q..&.....F.
    7B00: 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44  // E.6J...X....2..D
    7B10: FF 2E 8E 06 FD 03 A1 50 04 8B D0 32 F6 52 8A C4  // .......P...2.R..
    7B20: 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B  // 2..&J..&..Z.....
    7B30: 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03  // ...+...S.>J.O...
    7B40: C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74  // ......2.&......t
    7B50: 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3  // ....F...f.E..Ku.
    7B60: 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00  // [...2....3......
    7B70: 2E 8E 1E FB 03 2E 8E 06 01 04 8A 26 49 04 E8 C4  // ...........&I...
    7B80: F8 74 0F 2E 8E 06 FF 03 80 FC 07 74 05 7C 3D E9  // .t.........t.|=.
    7B90: 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04  // ........2.....P.
    7BA0: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A  // ...J...2........
    7BB0: DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6  // .t....L.....u...
    7BC0: 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06  // ..u.....G...P...
    7BD0: 01 04 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A  // ...P.......P..&J
    7BE0: 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04  // ...X..t.$..6|...
    7BF0: C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06  // .6....2.........
    7C00: 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A  // ti.....U........
    7C10: F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23  // ...P.....u'..U.#
    7C20: C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E  // ....N.#.&......N
    7C30: FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2  // ..u......>.X.r..
    7C40: D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23  // ......#.&1...%.#
    7C50: C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08  // .&1.. ..P..u....
    7C60: 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04  // ..>.X.I......P..
    7C70: F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83  // ...t..&0..&0.. .
    7C80: C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20  // .P.........?.X. 
    7C90: 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE  // .......&......O.
    7CA0: CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD  // ........?.X.....
    7CB0: C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16  // ...8.r.2........
    7CC0: 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04  // ......2...f...Q.
    7CD0: F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00  // ..f...J...du..h.
    7CE0: 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0  // ..Zu..`.....u...
    7CF0: 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03  // .R..f...f...P.f.
    7D00: F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66  // .f.....f.......f
    7D10: C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06  // ...Z..J....P.P..
    7D20: 0C 01 03 F0 2E 8E 06 FD 03 58 57 51 50 9C FC 8B  // .........XWQP...
    7D30: CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A  // ..;..........s..
    7D40: C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D  // .&..fG..u.f.....
    7D50: 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B  // XY_.....8.r.Q2..
    7D60: CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06  // .I.......Y+.....
    7D70: 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8  // R3...f.....f....
    7D80: BA 9B 74 16 38 E0 74 12 0F B6 D0 E8 8B C9 8A E0  // ..t.8.t.........
    7D90: 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13  // f.....f...Z.....
    7DA0: 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00  // |.......b.......
    7DB0: C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF  // ....u.......PS..
    7DC0: 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 FD 03 E8 07  // 2.....P.[.......
    7DD0: F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56  // .......X2.R.6J.V
    7DE0: 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE  // .&...6.....u..|.
    7DF0: 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75  // .u...F.........u
    7E00: 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51  // m......ZXPRJ..WQ
    7E10: 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38  // QW..2......_G..8
    7E20: D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0  // .v.2...I..G..Y..
    7E30: 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B  // Y_........[KZQW.
    7E40: CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B  // ..&.%....._G+.B;
    7E50: D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD  // .v.3...I..G..Y..
    7E60: BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE  // ................
    7E70: B8 03 18 EF EB BC 2E 8E 1E FB 03 80 3E 63 04 B4  // ............>c..
    7E80: 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1  // t.......u..B....
    7E90: F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08  // ...u.......&f...
    7EA0: 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2  // &f..-...f... ...
    7EB0: EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02  // ....t..f.$....t.
    7EC0: 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8  // . .f.$......S...
    7ED0: 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07  // ~..SP...........
    7EE0: 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED  // ...`.t......,...
    7EF0: 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88  // t.&.........t.&.
    7F00: 5D 10 58 5B C3 8A E0 1E 2E 8E 1E FB 03 80 3E 49  // ].X[..........>I
    7F10: 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8  // .3............0.
    7F20: C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE  // ................
    7F30: 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02  // .....t.G&.......
    7F40: E2 EB B0 20 EE 9D C3 2E 8E 1E FB 03 8A 26 49 04  // ... .........&I.
    7F50: E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3  // ...t....w.t.....
    7F60: 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03  // ...|.tL.........
    7F70: B0 08 EF 2E 8E 1E FD 03 F6 C3 80 75 1C B2 C4 B8  // ...........u....
    7F80: 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88  // ....%.......%...
    7F90: 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0  // %...............
    7FA0: 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00  // .....%...%......
    7FB0: EF EB E1 50 2E 8E 06 FD 03 A1 4A 04 C1 E0 03 F7  // ...P......J.....
    7FC0: E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E FB 03 8A  // .....X&.........
    7FD0: 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8  // &I..o.t....w.t..
    7FE0: 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3  // _....F.....|.t).
    7FF0: E8 35 F7 8A CC 2E 8E 1E FD 03 BA CE 03 32 FF B8  // .5...........2..
    8000: 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC  // .......".t......
    8010: 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2  // }....~...J......
    8020: 03 C1 8B F8 2E 8E 1E FD 03 8A 05 8B EC 88 46 1A  // ..............F.
    8030: C3 2E 8E 1E FB 03 8A 3E 62 04 8A CF D0 E1 32 ED  // .......>b.....2.
    8040: BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E  // .P.......I.<.vJ.
    8050: 8E 06 01 04 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A  // .......u3..J....
    8060: C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A  // ...........N....
    8070: C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63  // ....A..8.sY....c
    8080: 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 FF  // ................
    8090: 03 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C  // ....t....u.2...<
    80A0: 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14  // .u.:6..u........
    80B0: E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3  // ...u.........L..
    80C0: 3C 07 75 04 E8 A3 85 C3 3C 08 75 83 0A D2 74 DE  // <.u.....<.u...t.
    80D0: FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06  // ....2.2.+.:6..t.
    80E0: FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5  // ..........c.....
    80F0: EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B  // ......+.+.&.e.P.
    8100: 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8  // >N..............
    8110: 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4  // ......X. .......
    8120: 0A E8 BC C6 FE C2 3A 16 4A 04 74 03 89 14 C3 32  // ......:.J.t....2
    8130: FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89  // .2...:6..t......
    8140: 14 2E 8E 06 01 04 E8 FC F2 74 0E 2E 8E 06 FF 03  // .........t......
    8150: 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9  // ...t.2..........
    8160: D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A  // ..O..J...3..6...
    8170: 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E FB 03 F6  // .J......p.......
    8180: 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46  // ....t..B..v....F
    8190: 1B 00 C3 2E 8E 1E FB 03 8A DF 32 FF D1 E3 89 97  // ..........2.....
    81A0: 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3  // P...8.b.u....\..
    81B0: 2E 8E 1E FB 03 8A DF 32 FF D1 E3 8B 97 50 04 8B  // .......2.....P..
    81C0: 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E FB  // .`....N..V......
    81D0: 03 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06  // ....$...I..&J...
    81E0: 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F  // ...u-.].t..>I...
    81F0: 21 51 8A CC 8A 2E 84 04 BE BD 81 81 FE C6 81 74  // !Q.............t
    8200: 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44  // ..;.t......$...D
    8210: 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E  // .Y.>b....F..^..N
    8220: 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E  // ..V....#.+3.*2..
    8230: 1E FB 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A  // ...<...PR......Z
    8240: 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4  // Xt..>c..t...>c..
    8250: 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 F9  // u.<.s.2.........
    8260: 81 31 82 51 82 63 82 98 82 E2 81 E2 81 E2 81 BD  // .1.Q.c..........
    8270: 82 D5 82 D9 82 E2 81 E2 81 E2 81 E2 81 E2 81 E2  // ................
    8280: 81 07 83 E2 81 0B 83 26 83 E2 81 65 83 E2 81 73  // .......&...e...s
    8290: 83 8E 83 95 83 A1 83 C5 83 80 3E 49 04 13 74 15  // ..........>I..t.
    82A0: E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7  // ........p...t...
    82B0: 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44  // 2.&............D
    82C0: FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13  // ...t.&.}....>I..
    82D0: 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00  // t........t......
    82E0: F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA  // .......2........
    82F0: 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5  // ................
    8300: 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24  // ...w..C....0...$
    8310: F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65  // ..&e.....t.....e
    8320: 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B  // . ..............
    8330: C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB  // ... ....N..x....
    8340: E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C  // .........2......
    8350: FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C  // ..B.&....J..G...
    8360: FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8  // ....B..&......Z.
    8370: CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26  // .....Q..&.5&.m.&
    8380: 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB  // .M.......CY.....
    8390: 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7  // u.......0.n.$...
    83A0: 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C  // .t....0.p.....u.
    83B0: E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0  // ......0.P....u..
    83C0: E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8  // ...4...Q........
    83D0: D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3  // .....N..v....Q..
    83E0: E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83 C7  // ...&.5&.m.&.M...
    83F0: 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03  // .CY.............
    8400: EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34  // .2....F...?....4
    8410: E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75  // .......0.......u
    8420: 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3  // .........^...Q..
    8430: E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3  // .s..*....R.CY...
    8440: F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3  // .....t.......9..
    8450: F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3  // .....t..........
    8460: 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59  // P....P.;..P....Y
    8470: 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0  // ..Y...d....2|...
    8480: 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA  // ......X.R.9.ZS..
    8490: BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE  // ......B.........
    84A0: 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC  // .[....S......BB.
    84B0: 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8  // ................
    84C0: 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08  // ...[.PQ.........
    84D0: 75 02 E2 F9 59 58 C3 2E 8E 1E FB 03 8B F8 24 0F  // u...YX........$.
    84E0: 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 89  // ................
    84F0: 84 91 84 A6 84 44 85 A0 85 3C 03 74 08 3C 04 7F  // .....D...<.t.<..
    8500: 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04  // ..............<.
    8510: 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A  // w.PSPR..c.......
    8520: E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8  // .......@t.......
    8530: D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1  // ..@..........t..
    8540: 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0 01  // ........=..s....
    8550: 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01  // =..s....=|.s..^.
    8560: 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6 06  // =J.s........ZX..
    8570: 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E  // ....].[X..2...t.
    8580: B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB  // ..<.t...<.t.....
    8590: 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01 87  // .........~......
    85A0: 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0 74 11  // ...S.[.[......t.
    85B0: FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74 40  // ..t...t8..t<..t@
    85C0: C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA  // ...|...~........
    85D0: 0A DB 74 07 32 FF 2E 8A 97 84 85 89 0E 85 04 88  // ..t.2...........
    85E0: 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A  // ...............*
    85F0: E8 09 03 B9 0E 00 EB D6 BD 94 54 B9 08 00 EB CA  // ..........T.....
    8600: BD A7 5C B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04  // ..\.......u.....
    8610: 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A FF  // .......w5...w...
    8620: 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF  // u...|..&..... ..
    8630: 02 75 0B 8C CD 8E C5 2E 8B 2E 86 6D EB 10 0E 07  // .u.........m....
    8640: 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF F7 85 8B C5  // ..2.............
    8650: 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3 A7  // ...N..V..F..F...
    8660: 5C 94 54 94 58 94 5C A7 5C A7 6C 53 06 8A 26 49  // \.T.X.\.\.lS..&I
    8670: 04 E8 C7 C3 26 8A 47 02 26 8A 67 33 F6 C4 01 74  // ....&.G.&.g3...t
    8680: 22 BD A7 5C 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C  // "..\<.}..q.....<
    8690: 0E 7D 07 BD 94 54 8C 0E 0E 01 89 2E 0C 01 E8 10  // .}...T..........
    86A0: 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F  // ..-..<.}...<.t..
    86B0: 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05  // ...<.t......&.G.
    86C0: 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9 01  // .t......2.......
    86D0: 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8  // .[..............
    86E0: 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6  // ................
    86F0: 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01  // ..P$...t"..3....
    8700: 3C 04 75 07 B7 10 BD A7 5C EB 10 FE C8 75 07 B7  // <.u.....\....u..
    8710: 0E E8 E8 01 EB 05 B7 08 BD 94 54 E8 2D 00 58 A8  // ..........T.-.X.
    8720: 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2 CC  // .t..............
    8730: EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF  // ......u.....P.X.
    8740: B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75 01  // ...2..........u.
    8750: C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD 80  // ....u.&.~..u....
    8760: 1E 06 1F 2E 8E 06 FD 03 8B FA C1 E7 05 B0 40 53  // ..............@S
    8770: 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0 8B  // .....[...t.. ...
    8780: D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5  // ......(2...2.Q..
    8790: 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20 00  // .t.F...... t.. .
    87A0: 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE 1F  // +...Y...t.F..u..
    87B0: C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 0C  // ..&I.P.W.>..&.}.
    87C0: 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C FF  // ....t0.....&..<.
    87D0: 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE C8  // t$8.t.G....&....
    87E0: A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89 3E  // ...&.E....&.}..>
    87F0: 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01 74  // ......_.X.&.G3.t
    8800: 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74 1F  // ......&._.....t.
    8810: BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04 75  // ...&..<.t.G8.I.u
    8820: F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00 C3  // .&..2...........
    8830: 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA 80  // ..c..&..........
    8840: FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0  // ..t....B.$....J.
    8850: 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16  // ..B.$...........
    8860: 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE 0E  // .....>...u......
    8870: 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0 12  // .......t...H....
    8880: 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6 E4  // ..c...J..&......
    8890: D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06 57  // ......L...&I.P.W
    88A0: C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF  // .>..&.}.....tJ..
    88B0: 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47 EB  // ...&..<.t>8.t.G.
    88C0: F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B  // ...&.=&.].&.M.&.
    88D0: 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84 04  // U.&.E.<.t...P...
    88E0: FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4 7D  // ...&.....X...&.}
    88F0: 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51 52  // ...2...._.X.PSQR
    8900: 2E A1 05 04 0B C0 74 09 2E 8B 2E 86 6D 0E 07 EB  // ......t.....m...
    8910: 08 B8 30 11 B7 02 E8 C7 BE 5A 59 5B 58 C3 3C 04  // ..0......ZY[X.<.
    8920: 7C 01 C3 E3 FD 53 2E 8E 1E FB 03 86 FB 32 FF D1  // |....S.......2..
    8930: E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0 51  // .....P..5[..V..Q
    8940: 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40  // S&.F.E<...u.2..@
    8950: 3C 0A 74 32 3C 07 75 05 E8 0F 7D EB 62 3C 08 75  // <.t2<.u...}.b<.u
    8960: 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05 26  // ...tZ...'....t.&
    8970: 8A 5E 00 45 B9 01 00 B4 09 E8 64 BE FE C2 3A 16  // .^.E......d...:.
    8980: 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE C6  // J.r.2...:6..s...
    8990: 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8 40 BE  // ...+P...u.....@.
    89A0: EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04 53  // ...>I..t.2..>b.S
    89B0: 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15 5B  // ..U.%.][.>b.X..[
    89C0: 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A 3E  // Y..Z....u.....:>
    89D0: 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A 36 84  // b.u..4...d.3..6.
    89E0: 04 8A 16 4A 04 FE CA B8 01 06 E8 F3 BD C3 2E 8E  // ...J............
    89F0: 1E FB 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E C6  // .....u.......^..
    8A00: 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46 1A  // F...<.u..A....F.
    8A10: 1A C3 A0 8A 04 BF 84 8A 2E 3A 05 72 04 BB FF FF  // .........:.r....
    8A20: C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A  // .2.......]...t..
    8A30: FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74 06  // .u........$0<0t.
    8A40: F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 84 8A 2E  // ...u.....t......
    8A50: 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B  // ..2.....;.t....;
    8A60: 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2 8A  // .t......8.~.....
    8A70: 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00 BA  // ..........t.....
    8A80: CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 DF EC  // .....t..........
    8A90: 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB C3 BA  // t!........t.....
    8AA0: D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA B4 74  // .....t....w....t
    8AB0: 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03 01  // ................
    8AC0: 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F 08  // ................
    8AD0: 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F 00  // ................
    8AE0: 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08 00  // ..........?.....
    8AF0: 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02 05  // ................
    8B00: 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06 07  // ................
    8B10: CA 00 34 00 90 00 96 00 00 00 00 00 00 00 5F 57  // ..4..........._W
    8B20: C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00 00 00  // ..PfR...........
    8B30: 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32 C0 66  // ...f....f....2.f
    8B40: 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56 53 57  // ..fZX.f.O.fRfVSW
    8B50: 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66 BB 53  // P..uD.....f3.f.S
    8B60: 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B 66 81  // ..H........@u+f.
    8B70: E2 FF 00 66 D1 E2 66 8B C2 66 40 C1 E0 10 66 8B  // ...f..f..f@...f.
    8B80: C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00 E8 27  // .f....0...f....'
    8B90: 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E 66 5A  // ...fX2.fPX_[f^fZ
    8BA0: C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90 66 52  // ..f.O...f.O...fR
    8BB0: E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00  // ......fZ..fR....
    8BC0: 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66  // ..fZ..f..P3.f..f
    8BD0: 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 8C 33 7F 33  // ......f...X..3.3
    8BE0: 7F 33 7F 33 6A 33 6A 33 6A 33 6A 33 AC 2F 23 30  // .3.3j3j3j3j3./#0
    8BF0: 4D 30 8E 31 8D 31 8D 31 D3 31 38 32 68 32 25 33  // M0.1.1.1.182h2%3
    8C00: 4E 33 4E 33 C5 31 B8 31 B8 31 B8 31 B8 31 B8 31  // N3N3.1.1.1.1.1.1
    8C10: D3 31 38 32 68 32 25 33 53 33 99 33 4E 33 4E 33  // .182h2%3S3.3N3N3
    8C20: FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00  // ................
    8C30: FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00  // ................
    8C40: 00 00 08 10 00 08 10 18 00 08 10 18 B0 2D 01 B0  // .............-..
    8C50: 2D 02 BE 41 03 9E 41 03 D5 2E 03 89 2E 03 B1 2D  // -..A..A........-
    8C60: 04 CA 2D 04 DA 2D 04 B0 2D 03 00 00 00 00 5D 35  // ..-..-..-.....]5
    8C70: 00 02 5D 35 01 02 5D 35 02 02 5D 35 03 02 5D 35  // ..]5..]5..]5..]5
    8C80: 04 02 5D 35 05 02 57 37 00 02 57 37 01 02 57 37  // ..]5..W7..W7..W7
    8C90: 02 02 57 37 03 02 57 37 04 02 57 37 05 02 8C 37  // ..W7..W7..W7...7
    8CA0: 00 02 8C 37 01 02 8C 37 02 02 8C 37 03 02 8C 37  // ...7...7...7...7
    8CB0: 04 02 8C 37 05 02 C7 39 00 02 C7 39 01 02 C7 39  // ...7...9...9...9
    8CC0: 02 02 C7 39 03 02 C7 39 04 02 C7 39 05 02 C7 39  // ...9...9...9...9
    8CD0: 00 02 C7 39 01 02 C7 39 02 02 C7 39 03 02 C7 39  // ...9...9...9...9
    8CE0: 04 02 C7 39 05 02 8E 38 00 02 8E 38 01 02 8E 38  // ...9...8...8...8
    8CF0: 02 02 8E 38 03 02 8E 38 04 02 8E 38 05 02 CA 38  // ...8...8...8...8
    8D00: 00 02 CA 38 01 02 CA 38 02 02 CA 38 03 02 CA 38  // ...8...8...8...8
    8D10: 04 02 CA 38 05 02 3B 38 00 02 3B 38 01 02 3B 38  // ...8..;8..;8..;8
    8D20: 02 02 3B 38 03 02 3B 38 04 02 3B 38 05 02 6F 38  // ..;8..;8..;8..o8
    8D30: 00 02 6F 38 01 02 6F 38 02 02 6F 38 03 02 6F 38  // ..o8..o8..o8..o8
    8D40: 04 02 6F 38 05 02 1F 3C 00 00 52 3C 01 00 52 3C  // ..o8...<..R<..R<
    8D50: 02 00 3F 3C 00 00 2D 3B 00 02 26 39 00 02 26 39  // ..?<..-;..&9..&9
    8D60: 01 02 26 39 02 02 26 39 03 02 26 39 04 02 26 39  // ..&9..&9..&9..&9
    8D70: 05 02 45 3B 00 02 9A 3D 05 00 9A 3D 01 00 9A 3D  // ..E;...=...=...=
    8D80: 00 00 9A 3D 02 00 DB 3D 00 00 DB 3D 02 00 20 3E  // ...=...=...=.. >
    8D90: 00 00 B0 3A 00 02 B0 3A 01 02 B0 3A 02 02 B0 3A  // ...:...:...:...:
    8DA0: 03 02 B0 3A 04 02 B0 3A 05 02 6C 3C 00 00 94 3C  // ...:...:..l<...<
    8DB0: 00 00 15 3D 00 00 90 3D 00 00 74 39 00 02 74 39  // ...=...=..t9..t9
    8DC0: 01 02 74 39 02 02 74 39 03 02 74 39 04 02 74 39  // ..t9..t9..t9..t9
    8DD0: 05 02 8F 3D 00 01 8F 3D 00 01 93 36 00 02 93 36  // ...=...=...6...6
    8DE0: 01 02 93 36 02 02 93 36 03 02 93 36 04 02 93 36  // ...6...6...6...6
    8DF0: 05 02 B4 3C 00 00 90 3D 00 00 90 3D 00 00 90 3D  // ...<...=...=...=
    8E00: 00 00 C5 3B 00 00 B7 37 00 02 B7 37 01 02 B7 37  // ...;...7...7...7
    8E10: 02 02 B7 37 03 02 B7 37 04 02 B7 37 05 02 E6 37  // ...7...7...7...7
    8E20: 00 02 E6 37 01 02 E6 37 02 02 E6 37 03 02 E6 37  // ...7...7...7...7
    8E30: 04 02 E6 37 05 02 1C 38 00 02 1C 38 01 02 1C 38  // ...7...8...8...8
    8E40: 02 02 1C 38 03 02 1C 38 04 02 1C 38 05 02 D7 3C  // ...8...8...8...<
    8E50: 00 00 FA 3C 00 00 B8 38 01 02 B8 38 02 02 14 39  // ...<...8...8...9
    8E60: 01 02 14 39 02 02 A6 00 02 01 BE 9B 00 00 AA A7  // ...9............
    8E70: 8C C7 16 DB F6 A7 C8 A8 DA C7 90 A6 E6 B3 B0 B4  // ................
    8E80: E2 B4 0C B5 16 BB 48 BC 00 00 B4 D8 00 00 BA BD  // ......H.........
    8E90: 00 00 A8 BE 14 A9 40 AC 6A BA C0 B0 D8 B0 EA B0  // ......@.j.......
    8EA0: 78 B1 3C 9D 00 00 C8 E4 40 E5 00 00 36 BF AE BF  // x.<.....@...6...
    8EB0: 22 C0 00 00 60 C0 00 00 00 00 00 00 8C C0 5C C2  // "...`.........\.
    8EC0: 22 C3 CA C4 14 C5 C4 E8 AA C5 C6 C5 E4 C5 00 00  // "...............
    8ED0: C8 E5 38 C7 16 E8 FC C8 00 00 2E CB 74 CB 7E CB  // ..8.........t.~.
    8EE0: 88 CB C0 D4 60 D6 78 DD B2 D6 9C D7 00 00 00 00  // ....`.x.........
    8EF0: E4 D8 00 00 92 E7 0E DB 56 BC B2 BD 00 00 00 00  // ........V.......
    8F00: 00 00 A2 DD E8 DE 20 E2 6C E4 94 DA 4A 00 02 01  // ...... .l...J...
    8F10: 00 00 BA 9A 00 00 EE 8E B6 8F FE 8F 32 90 00 00  // ............2...
    8F20: 72 9A D2 9A 00 00 8E 90 9A 90 0E 91 8E 9A 82 91  // r...............
    8F30: 00 00 38 94 00 00 00 00 00 00 00 00 4C 94 F4 94  // ..8.........L...
    8F40: D4 94 00 00 00 00 3A 9A FA 94 00 00 00 00 22 98  // ......:.......".
    8F50: F4 98 00 00 00 00 C8 00 02 01 D6 09 80 02 A0 00  // ................
    8F60: E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00  // ..-...`.........
    8F70: 08 08 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00  // .....<.. ...X...
    8F80: 28 00 80 00 01 00 04 00 00 00 00 00 00 00 00 00  // (...............
    8F90: 6A 3C 64 19 00 04 40 01 00 03 26 00 18 00 88 00  // j<d...@...&.....
    8FA0: 03 00 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A  // ............U<0*
    8FB0: 00 05 08 02 C0 03 28 00 60 00 70 00 01 00 03 00  // ......(.`.p.....
    8FC0: 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01  // .........<0*....
    8FD0: 00 04 2A 00 30 00 70 00 01 00 03 00 00 00 00 00  // ..*.0.p.........
    8FE0: 00 00 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00  // .....<./x.....'.
    8FF0: 58 00 90 00 03 00 04 00 00 00 00 00 00 00 02 00  // X...............
    9000: EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00  // .<H?@.0...2.@...
    9010: 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C 48 00  // .............<H.
    9020: 03 01 00 01 01 10 D0 4C 01 00 24 71 01 00 01 00  // .......L..$q....
    9030: 00 00 8A 28 00 00 4C 00 00 00 B6 03 84 03 46 05  // ...(..L.......F.
    9040: 00 00 00 00 00 00 F4 00 00 00 00 00 00 00 00 00  // ................
    9050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9060: 00 00 00 00 00 00 34 00 02 01 00 00 00 00 00 2A  // ......4........*
    9070: 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A  // .*..***..*.**..*
    9080: 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15  // **.....?.?..???.
    9090: 15 3F 15 3F 3F 3F 15 3F 3F 3F 5C 00 02 01 00 00  // .?.???.???\.....
    90A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    90B0: 00 00 00 00 00 00 06 00 00 00 C8 00 00 00 00 00  // ................
    90C0: 34 21 00 00 B8 0B 07 5A 5A 7D 00 5A 07 01 00 00  // 4!.....ZZ}.Z....
    90D0: 00 00 00 FF FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    90E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    90F0: 00 00 00 00 00 00 0C 00 02 01 00 00 00 00 00 00  // ................
    9100: 00 00 74 00 02 01 CB 55 00 00 00 00 01 00 CB 55  // ..t....U.......U
    9110: 00 00 08 08 02 00 CB 55 00 00 10 10 03 00 CB 55  // .......U.......U
    9120: 00 00 18 14 04 00 CB 55 00 00 1A 18 05 00 CB 55  // .......U.......U
    9130: 00 00 1C 1C 06 00 A7 55 00 00 08 08 90 00 AB 55  // .......U.......U
    9140: 00 00 08 08 91 00 AF 55 00 00 08 08 92 00 B3 55  // .......U.......U
    9150: 00 00 08 08 93 00 B7 55 00 00 08 08 94 00 BB 55  // .......U.......U
    9160: 00 00 08 08 95 00 D7 55 00 00 01 04 96 00 BF 55  // .......U.......U
    9170: 00 00 08 08 97 00 74 00 01 01 10 01 06 12 11 01  // ......t.........
    9180: 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55 17 01  // .....j...j...U..
    9190: 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9 66 01  // .U........e...f.
    91A0: 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55 24 01  // ..!..."..j#..U$.
    91B0: 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01  // ..E...F...u...v.
    91C0: 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01  // .....p...p...q..
    91D0: 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01  // .q...r...r...s..
    91E0: 0A 73 F5 01 16 74 F6 01 0A 74 B6 02 08 01 00 5C  // .s...t...t.....\
    91F0: 00 61 07 00 00 09 2C 00 00 1B 00 48 00 00 00 80  // .a....,....H....
    9200: A9 03 00 F0 49 02 00 32 00 08 00 00 00 00 00 00  // ....I..2........
    9210: 00 00 00 00 00 00 00 00 02 01 5C 00 4F 02 46 02  // ..........\.O.F.
    9220: 94 00 9E 01 BE 00 28 01 7A 00 8C 00 BC 01 00 00  // ......(.z.......
    9230: 00 00 72 02 00 00 90 00 A8 02 6D 01 43 01 97 01  // ..r.......m.C...
    9240: F0 49 02 00 71 02 02 02 00 00 00 00 00 00 08 00  // .I..q...........
    9250: 00 00 00 00 00 00 05 00 07 00 03 00 05 00 00 00  // ................
    9260: 00 00 00 00 01 08 20 03 84 03 B6 03 E8 03 1A 04  // ...... .........
    9270: 4C 04 7E 04 B0 04 01 01 46 05 01 01 84 03 00 08  // L.~.....F.......
    9280: 60 EA 00 00 00 40 19 01 00 01 80 38 01 00 02 DC  // `....@.....8....
    9290: 4A 01 00 03 90 5F 01 00 04 00 77 01 00 05 90 91  // J...._....w.....
    92A0: 01 00 06 6C B0 01 00 07 01 08 D0 4C 01 00 00 00  // ...l.......L....
    92B0: 80 00 00 00 00 00 00 1C 83 01 00 01 00 00 00 00  // ................
    92C0: 00 00 00 00 70 A7 01 00 02 00 00 00 00 00 00 00  // ....p...........
    92D0: 00 88 BC 01 00 03 00 00 00 00 00 00 00 00 C0 D4  // ................
    92E0: 01 00 04 00 00 00 00 00 00 00 00 44 23 02 00 05  // ...........D#...
    92F0: 00 00 00 00 01 00 00 00 00 58 02 00 06 00 00 00  // .........X......
    9300: 00 01 00 00 00 B8 7C 02 00 07 00 00 00 00 01 00  // ......|.........
    9310: 00 00 00 05 60 EA 00 00 00 40 19 01 00 00 80 38  // ....`....@.....8
    9320: 01 00 00 DC 4A 01 00 00 90 5F 01 00 00 00 08 28  // ....J...._.....(
    9330: 6E 00 00 00 2C C9 00 00 01 F8 0B 01 00 02 80 38  // n...,..........8
    9340: 01 00 03 90 5F 01 00 04 F4 91 01 00 05 D0 B0 01  // ...._...........
    9350: 00 06 C0 D4 01 00 07 00 08 6C 39 00 00 00 24 5E  // .........l9...$^
    9360: 00 00 01 FC 85 00 00 02 AC BC 00 00 03 34 D0 00  // .............4..
    9370: 00 04 68 6E 01 00 05 08 97 01 00 06 EC A3 01 00  // ..hn............
    9380: 07 00 01 68 3C 01 00 00 01 04 3C 41 00 00 00 00  // ...h<.....<A....
    9390: 00 50 C3 00 00 00 00 00 80 38 01 00 02 00 00 24  // .P.......8.....$
    93A0: 71 01 00 04 00 00 01 08 00 98 85 00 00 40 B5 00  // q............@..
    93B0: 00 60 EA 00 00 50 C3 00 00 01 80 BB 00 00 60 EA  // .`...P........`.
    93C0: 00 00 94 0B 01 00 50 C3 00 00 02 00 E1 00 00 94  // ......P.........
    93D0: 0B 01 00 40 19 01 00 50 C3 00 00 03 78 FF 00 00  // ...@...P....x...
    93E0: 40 19 01 00 88 26 01 00 50 C3 00 00 04 40 19 01  // @....&..P....@..
    93F0: 00 80 38 01 00 80 38 01 00 50 C3 00 00 05 80 38  // ..8...8..P.....8
    9400: 01 00 DC 4A 01 00 DC 4A 01 00 50 C3 00 00 06 00  // ...J...J..P.....
    9410: 77 01 00 00 77 01 00 90 5F 01 00 50 C3 00 00 07  // w...w..._..P....
    9420: 90 91 01 00 90 91 01 00 00 77 01 00 50 C3 00 00  // .........w..P...
    9430: 01 18 00 00 00 00 00 00 00 0B E4 12 60 09 60 09  // ............`.`.
    9440: 4B 00 0A 00 54 03 90 01 90 01 90 01 90 01 90 01  // K...T...........
    9450: 90 01 90 01 00 00 00 00 00 02 04 31 07 C8 00 C8  // ...........1....
    9460: 00 C8 00 2C 01 00 00 59 00 69 00 4A 00 4A 00 5F  // ...,...Y.i.J.J._
    9470: 00 73 00 73 00 64 00 40 00 90 92 97 60 96 00 90  // .s.s.d.@....`...
    9480: 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // U...............
    9490: 00 00 02 02 D4 30 00 00 02 10 60 EA 00 00 02 10  // .....0....`.....
    94A0: 14 00 02 01 02 00 08 00 80 00 00 02 00 04 00 08  // ................
    94B0: 40 00 FF FF 88 00 01 04 88 06 04 00 13 31 48 00  // @............1H.
    94C0: 21 21 00 00 6C 00 00 00 08 00 00 00 13 32 51 00  // !!..l........2Q.
    94D0: 21 22 00 00 73 00 00 00 80 00 00 00 13 33 5A 00  // !"..s........3Z.
    94E0: 1E 21 00 00 7A 00 00 00 00 02 00 00 0C 31 63 00  // .!..z........1c.
    94F0: 1E 22 00 00 81 00 00 00 00 04 00 00 01 04 90 00  // ."..............
    9500: 02 04 01 00 FF 01 04 91 00 02 04 02 00 FF 01 04  // ................
    9510: 94 00 02 04 05 00 FF 01 04 95 00 02 04 06 00 FF  // ................
    9520: 14 06 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06  // ................
    9530: 0F 00 00 00 FF 14 06 0F 00 00 00 FF 20 00 03 01  // ............ ...
    9540: 92 E6 C5 00 00 70 03 00 90 1F 00 00 00 00 00 00  // .....p..........
    9550: 00 00 B8 0B 00 06 60 00 8C 0A 00 00 05 00 01 01  // ......`.........
    9560: 00 00 27 03 02 03 43 00 4F 00 00 00 93 02 00 00  // ..'...C.O.......
    9570: 00 00 00 00 00 00 01 00 00 04 00 20 00 00 FF FF  // ........... ....
    9580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2B 00  // ..............+.
    9590: 00 60 10 07 35 00 01 02 00 00 4B 48 41 38 34 33  // .`..5.....KHA843
    95A0: 38 30 31 42 00 00 00 00 00 FF FF FF 00 00 00 00  // 801B............
    95B0: 00 16 00 00 00 81 40 01 00 82 40 01 00 83 40 01  // ......@...@...@.
    95C0: 00 84 40 01 00 85 40 01 00 86 40 01 00 87 40 01  // ..@...@...@...@.
    95D0: 00 88 40 01 00 89 40 01 00 8A 40 01 00 8C 40 01  // ..@...@...@...@.
    95E0: 00 8D 40 01 00 8E 40 01 00 8F 40 01 00 90 40 01  // ..@...@...@...@.
    95F0: 00 91 40 01 00 94 40 01 00 95 40 01 00 96 40 01  // ..@...@...@...@.
    9600: 00 97 40 01 00 98 40 01 00 A1 40 01 00 3C 41 00  // ..@...@...@..<A.
    9610: 00 0A 06 03 03 09 09 03 03 02 02 00 05 08 00 00  // ................
    9620: 00 03 03 05 00 04 00 00 00 00 02 00 00 03 02 01  // ................
    9630: 03 03 02 01 03 01 0D 00 00 8C 02 00 00 08 0C 00  // ................
    9640: 00 2E 00 00 00 00 00 11 00 04 00 00 00 55 14 0D  // .............U..
    9650: 01 1B 00 07 00 04 00 02 05 09 01 0C 01 00 00 02  // ................
    9660: 00 2C 00 00 00 44 04 00 00 30 75 00 00 0B 0A 05  // .,...D...0u.....
    9670: 03 0F 0F 05 05 02 02 00 05 08 00 00 00 03 03 05  // ................
    9680: 00 06 00 00 00 00 03 00 00 03 02 01 03 03 02 01  // ................
    9690: 03 01 0E 00 00 92 04 00 00 08 0C 00 00 51 00 00  // .............Q..
    96A0: 00 00 00 11 00 04 00 00 00 55 14 0E 01 30 00 07  // .........U...0..
    96B0: 00 04 00 02 05 0A 01 0C 01 00 00 02 00 4E 00 00  // .............N..
    96C0: 00 44 04 00 00 50 C3 00 00 0C 11 08 05 18 18 07  // .D...P..........
    96D0: 07 02 03 00 05 08 00 00 00 04 03 05 00 09 00 00  // ................
    96E0: 00 00 04 00 00 03 02 01 03 03 02 01 03 01 0E 00  // ................
    96F0: 00 9E 07 00 00 08 0C 00 00 87 00 00 00 00 00 11  // ................
    9700: 00 04 00 00 00 55 14 11 01 50 00 07 00 04 00 02  // .....U...P......
    9710: 05 0B 02 0C 01 00 00 02 00 82 00 00 00 44 04 00  // .............D..
    9720: 00 80 38 01 00 11 1B 0D 08 27 27 0C 0C 04 05 00  // ..8......''.....
    9730: 05 0D 00 00 00 06 03 07 00 0D 00 00 00 00 07 00  // ................
    9740: 00 03 02 01 03 03 02 01 03 01 11 00 00 30 0C 00  // .............0..
    9750: 00 08 0C 00 00 D8 00 00 00 00 00 11 00 06 00 00  // ................
    9760: 00 86 20 18 01 80 00 07 00 06 00 02 06 10 04 0C  // .. .............
    9770: 01 00 00 02 00 D0 00 00 00 44 04 00 00 A0 86 01  // .........D......
    9780: 00 14 21 10 0A 2F 2F 0E 0E 04 06 00 05 10 00 00  // ..!..//.........
    9790: 00 07 04 09 00 10 00 00 00 00 08 00 00 03 02 01  // ................
    97A0: 03 03 02 01 03 01 13 00 00 3C 0F 00 00 08 0F 00  // .........<......
    97B0: 00 0E 01 00 00 00 00 11 00 08 00 00 00 A8 28 1C  // ..............(.
    97C0: 01 A0 00 07 00 08 00 02 08 13 05 0C 01 00 00 02  // ................
    97D0: 00 04 01 00 00 44 04 00 00 00 00 00 00 00 00 00  // .....D..........
    97E0: 00 FF FF FF 00 FF FF FF 01 FF FF FF 02 FF FF FF  // ................
    97F0: 03 00 00 00 00 11 00 00 00 4F 5C 01 00 50 5C 01  // .........O\..P\.
    9800: 00 51 5C 01 00 52 5C 01 00 53 5C 01 00 54 5C 01  // .Q\..R\..S\..T\.
    9810: 00 55 5C 01 00 56 5C 01 00 57 5C 01 00 00 00 00  // .U\..V\..W\.....
    9820: 01 01 00 00 01 02 00 00 01 03 00 00 01 04 00 00  // ................
    9830: 01 05 00 00 01 06 00 00 01 07 00 00 01 FF FF FF  // ................
    9840: 00 5C 1A AB 61 04 80 00 00 00 00 00 00 20 01 00  // .\..a........ ..
    9850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9860: 00 00 00 00 00 00 36 01 00 00 00 00 07 CC F9 CC  // ......6.........
    9870: CC A8 00 AA 55 00 00 00 00 00 00 00 00 02 02 02  // ....U...........
    9880: 02 00 00 10 00 00 00 00 00 00 D2 00 04 02 B0 04  // ................
    9890: 00 00 20 03 00 00 95 00 00 00 35 04 00 00 62 00  // .. .......5...b.
    98A0: 00 00 1B 00 00 00 00 00 B3 35 FD FF 33 B9 01 00  // .........5..3...
    98B0: 1D 5A 02 00 1E 43 FD FF 77 74 01 00 86 28 02 00  // .Z...C..wt...(..
    98C0: 00 00 00 00 DD 00 00 00 CC FF FF FF 00 00 00 00  // ................
    98D0: 9F 00 00 00 DC FF FF FF C0 12 00 01 00 01 00 01  // ................
    98E0: 00 00 00 00 00 00 AC 09 00 00 49 0A 00 00 00 00  // ..........I.....
    98F0: 00 00 AC 09 00 00 49 0A 00 00 00 00 00 00 9A 01  // ......I.........
    9900: 00 00 00 00 00 00 00 00 00 00 9A 01 00 00 00 00  // ................
    9910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9920: 00 00 00 00 00 00 25 00 00 00 01 01 00 00 00 00  // ......%.........
    9930: 06 09 00 00 56 0D 00 00 00 00 00 00 06 09 00 00  // ....V...........
    9940: 56 0D 00 00 00 00 00 00 9A 01 00 00 00 00 00 00  // V...............
    9950: 00 00 00 00 9A 01 00 00 00 00 00 00 46 01 04 01  // ............F...
    9960: 01 03 AA 00 08 06 60 00 00 00 00 00 27 00 28 00  // ......`.....'.(.
    9970: 3F 00 63 00 40 00 9E 00 41 00 6B 00 42 00 38 00  // ?.c.@...A.k.B.8.
    9980: 6B 00 01 00 61 00 20 00 76 00 89 00 77 00 C6 00  // k...a. .v...w...
    9990: 28 00 FF 00 49 00 D0 00 37 00 14 00 94 00 53 00  // (...I...7.....S.
    99A0: 92 00 0A 00 93 00 C3 00 95 00 22 00 43 00 9E 00  // ..........".C...
    99B0: 44 00 59 00 45 00 2E 00 46 00 38 00 6C 00 01 00  // D.Y.E...F.8.l...
    99C0: 62 00 A0 00 78 00 60 00 79 00 F3 00 29 00 40 00  // b...x.`.y...).@.
    99D0: 4A 00 DE 00 38 00 1E 00 48 00 FC 00 47 00 07 00  // J...8...H...G...
    99E0: E8 00 03 00 51 00 67 00 E8 00 07 00 99 00 FC 00  // ....Q.g.........
    99F0: 4B 00 40 00 4C 00 44 00 5E 00 44 00 5C 00 40 00  // K.@.L.D.^.D.\.@.
    9A00: 5D 00 14 00 66 00 CC 00 FF 00 01 07 0C 00 2E 00  // ]...f...........
    9A10: 01 FF 00 FF 00 00 04 03 22 00 15 06 A2 00 00 00  // ........".......
    9A20: 00 00 D3 00 5C 00 D4 00 82 00 D5 00 82 00 D6 00  // ....\...........
    9A30: 82 00 D7 00 82 00 FF 00 02 07 0C 00 2E 00 01 FF  // ................
    9A40: 00 20 00 00 0A 03 22 00 15 06 A6 00 00 00 00 00  // . ....".........
    9A50: D3 00 5C 00 D4 00 4C 00 D5 00 4C 00 D6 00 4C 00  // ..\...L...L...L.
    9A60: D7 00 4C 00 FF 00 08 00 3C 00 00 08 00 00 07 00  // ..L.....<.......
    9A70: 00 00 00 00 00 00 00 00 01 00 00 00 01 00 02 00  // ................
    9A80: 00 00 02 00 03 00 00 00 03 00 04 00 00 00 04 00  // ................
    9A90: 05 00 00 00 05 00 06 00 00 00 06 00 07 00 00 00  // ................
    9AA0: 07 00 38 00 04 01 04 00 00 00 60 EA 00 00 8C 0A  // ..8.......`.....
    9AB0: 46 05 00 00 00 00 00 00 00 00 7C 01 4E 0C 01 01  // F.........|.N...
    9AC0: 00 00 55 00 00 00 8C 0A 00 00 00 0C 06 01 01 06  // ..U.............
    9AD0: 06 00 00 00 00 00 00 00 00 00 1C 00 03 01 00 09  // ................
    9AE0: 00 00 F4 01 4E 0C 00 00 4E 0C 8C 0A 00 00 FF 00  // ....N...N.......
    9AF0: 05 00 FF 00 00 01 2C 00 02 02 00 09 04 04 10 01  // ......,.........
    9B00: 04 04 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0  // ..d...e...f...g.
    9B10: 00 00 E8 C0 00 00 A0 21 00 00 42 EC 00 00 8C 0A  // .......!..B.....
    9B20: 00 00 18 00 02 01 00 07 00 04 00 10 70 08 00 10  // ............p...
    9B30: 70 08 00 A4 1F 00 00 A4 1F 00 EC 00 02 02 00 00  // p...............
    9B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 24 50  // ..............$P
    9B50: 53 50 0C 77 E0 A4 0C 00 00 00 00 00 00 00 00 00  // SP.w............
    9B60: 00 00 40 02 00 00 00 00 02 00 00 00 00 00 01 00  // ..@.............
    9B70: 00 00 00 A0 00 00 00 D0 02 00 00 00 00 00 03 00  // ................
    9B80: 00 00 40 03 00 00 00 04 02 00 00 00 00 00 04 00  // ..@.............
    9B90: 00 00 00 EC 00 00 00 00 00 00 00 00 00 00 05 00  // ................
    9BA0: 00 00 00 01 00 00 00 08 02 00 00 00 00 00 07 00  // ................
    9BB0: 00 00 00 10 00 00 00 10 02 00 00 00 00 00 09 00  // ................
    9BC0: 00 00 08 00 00 00 B6 9B 00 00 00 00 00 00 11 00  // ................
    9BD0: 00 00 00 84 00 00 00 70 03 00 00 00 00 00 12 00  // .......p........
    9BE0: 00 00 00 03 00 00 00 09 02 00 00 00 00 00 14 00  // ................
    9BF0: 00 00 00 50 00 00 00 80 02 00 00 00 00 00 21 00  // ...P..........!.
    9C00: 00 00 10 00 00 00 00 0C 02 00 00 00 00 00 23 00  // ..............#.
    9C10: 00 00 00 50 00 00 00 20 02 00 00 00 00 00 01 00  // ...P... ........
    9C20: 00 00 00 00 00 00 7D 01 02 01 00 08 37 00 00 4B  // ......}.....7..K
    9C30: E5 00 04 49 66 01 4B E5 00 02 44 1E 00 4B E5 00  // ...If.K...D..K..
    9C40: 40 49 DA 00 4A 65 53 00 02 49 C0 00 4B E5 01 01  // @I..JeS..I..K...
    9C50: 49 43 00 08 E5 01 FD 66 18 03 24 41 1B 00 4C 25  // IC.....f..$A..L%
    9C60: 41 02 44 43 00 0E E5 01 02 02 05 02 06 00 00 00  // A.DC............
    9C70: 52 15 02 01 02 00 52 47 52 1B 02 05 02 08 00 01  // R.....RGR.......
    9C80: 00 52 43 02 05 02 08 00 00 00 52 43 02 05 02 00  // .RC.......RC....
    9C90: 07 00 00 52 0D 52 3D 52 02 02 01 02 00 0E E5 02  // ...R.R=R........
    9CA0: 08 52 0A 52 08 02 01 02 01 52 05 02 25 02 07 52  // .R.R.....R..%..R
    9CB0: 1C 52 1A 52 16 52 18 52 19 02 05 02 00 02 00 00  // .R.R.R.R........
    9CC0: 52 0D 02 25 02 01 52 1C 02 05 02 00 01 00 00 55  // R..%..R........U
    9CD0: 00 03 4B E5 01 02 44 B7 00 02 25 03 01 52 15 3D  // ..K...D...%..R.=
    9CE0: E5 02 01 49 60 01 4B E5 00 40 49 DA 00 02 05 02  // ...I`.K..@I.....
    9CF0: 00 03 00 00 02 05 03 01 00 00 00 52 15 43 60 01  // ...........R.C`.
    9D00: 02 05 02 00 03 00 00 02 05 03 02 00 00 00 52 15  // ..............R.
    9D10: 02 05 02 01 00 00 00 52 15 3D E5 02 01 49 60 01  // .......R.=...I`.
    9D20: 02 05 02 02 0C 09 00 52 15 02 05 02 02 0D 0A 00  // .......R........
    9D30: 52 15 02 05 02 02 2A 14 00 52 15 02 05 02 02 2B  // R.....*..R.....+
    9D40: 15 00 52 15 02 05 02 02 2C 16 00 52 15 02 05 02  // ..R.....,..R....
    9D50: 02 0E 08 00 52 15 02 05 02 02 0F 07 00 52 15 02  // ....R........R..
    9D60: 05 02 02 10 13 00 52 15 02 05 02 02 06 12 00 52  // ......R........R
    9D70: 15 02 05 02 05 00 00 00 52 15 3D E5 02 00 44 60  // ........R.=...D`
    9D80: 01 55 00 02 52 1D 0D 65 53 00 02 5B 02 05 02 00  // .U..R..eS..[....
    9D90: 07 00 00 52 0D 02 05 02 00 02 00 00 52 0D 52 3D  // ...R........R.R=
    9DA0: 52 18 5B 00 54 09 01 01 08 00 37 00 00 3D 25 00  // R.[.T.....7..=%.
    9DB0: 01 44 B1 01 52 0E 03 01 00 00 15 05 00 02 01 05  // .D..R...........
    9DC0: 10 74 00 00 00 00 01 05 44 70 71 00 00 00 03 02  // .t......Dpq.....
    9DD0: 01 00 1B 05 01 02 33 05 01 01 00 00 00 15 05 01  // ......3.........
    9DE0: 04 01 02 13 76 01 15 05 01 08 5E 05 01 00 F2 FF  // ....v.....^.....
    9DF0: FF 00 00 00 00 01 02 45 70 01 01 05 C0 70 81 03  // .......Ep....p..
    9E00: 30 00 03 02 41 00 33 05 41 24 00 00 00 15 05 41  // 0...A.3.A$.....A
    9E10: 02 01 02 C1 70 41 03 02 41 00 33 05 41 21 00 00  // ....pA..A.3.A!..
    9E20: 00 15 05 41 02 01 02 C2 70 41 03 02 41 00 15 05  // ...A....pA..A...
    9E30: 41 0A 33 05 41 00 90 00 00 0F 25 41 01 01 02 C3  // A.3.A.....%A....
    9E40: 70 41 01 05 C4 70 81 03 20 00 03 02 41 00 33 05  // pA...p.. ...A.3.
    9E50: 41 20 00 00 00 15 05 41 02 01 02 C5 70 41 03 02  // A .....A....pA..
    9E60: 41 00 33 05 41 01 00 00 00 15 05 41 02 01 02 C6  // A.3.A......A....
    9E70: 70 41 03 02 41 00 15 05 41 0A 33 05 41 00 80 00  // pA..A...A.3.A...
    9E80: 00 0F 25 41 01 01 02 C7 70 41 01 05 42 70 71 00  // ..%A....pA..Bpq.
    9E90: 00 00 0F 25 01 10 01 02 43 70 01 66 FF 2D 0D 42  // ...%....Cp.f.-.B
    9EA0: E5 01 56 00 40 03 0C 40 00 00 3E 0D 40 00 00 44  // ..V.@..@..>.@..D
    9EB0: 21 01 01 02 00 00 40 01 04 01 00 02 00 2D 0D 42  // !.....@......-.B
    9EC0: 06 00 43 FE 00 66 FF 2D 0D 42 0D 09 56 00 40 03  // ..C..f.-.B..V.@.
    9ED0: A4 40 00 00 3E A5 40 FF 44 70 01 3E A5 40 00 44  // .@..>.@.Dp.>.@.D
    9EE0: 42 01 03 25 40 01 01 02 10 74 40 56 00 40 03 0C  // B..%@....t@V.@..
    9EF0: 40 01 00 01 02 41 74 40 03 0C 40 03 00 01 02 42  // @....At@..@....B
    9F00: 74 40 03 0C 40 05 00 01 02 43 74 40 2D 0D 42 07  // t@..@....Ct@-.B.
    9F10: 00 43 28 01 01 05 10 74 00 00 00 00 01 05 14 72  // .C(....t.......r
    9F20: 09 00 00 00 01 05 10 72 00 00 0F 40 01 05 11 72  // .......r...@...r
    9F30: DB F7 60 85 01 05 12 72 00 88 00 00 01 05 FC 70  // ..`....r.......p
    9F40: 01 00 00 00 01 05 D8 75 0D 00 20 00 01 05 D4 75  // .......u.. ....u
    9F50: 00 00 00 0E 5B 01 05 C9 71 FF FF 00 00 01 05 CA  // ....[...q.......
    9F60: 71 0E 00 00 00 52 3E 01 04 CB 71 04 00 01 05 41  // q....R>...q....A
    9F70: 71 03 00 00 00 01 05 10 74 02 00 00 00 01 05 C0  // q.......t.......
    9F80: 75 00 30 00 00 5B 7A 6F 07 66 71 36 00 00 00 67  // u.0..[zo.fq6...g
    9F90: 71 41 60 04 00 61 71 37 00 00 00 62 71 41 60 04  // qA`..aq7...bqA`.
    9FA0: 00 38 71 10 00 00 00 39 71 10 00 00 00 34 71 10  // .8q....9q....4q.
    9FB0: 10 02 00 10 74 01 00 20 00 38 71 18 00 00 00 39  // ....t.. .8q....9
    9FC0: 71 14 00 00 00 34 71 20 20 00 00 10 74 01 00 21  // q....4q  ...t..!
    9FD0: 00 38 71 18 00 00 00 39 71 14 00 00 00 34 71 20  // .8q....9q....4q 
    9FE0: 20 00 00 10 74 01 00 22 00 38 71 10 00 00 00 39  //  ...t..".8q....9
    9FF0: 71 10 00 00 00 34 71 10 10 00 00 10 74 01 00 23  // q....4q.....t..#
    A000: 00 5D 71 02 00 70 1C 5E 71 00 00 00 00 5F 71 01  // .]q..p.^q...._q.
    A010: 00 10 18 60 71 00 00 00 00 59 71 7F 00 80 20 5A  // ...`q....Yq... Z
    A020: 71 00 00 00 00 5B 71 7F 00 10 3C 5C 71 00 00 00  // q....[q...<\q...
    A030: 00 10 74 00 00 00 00 3B 71 13 11 98 00 3D 71 19  // ..t....;q....=q.
    A040: C8 41 00 3C 71 0C 10 56 00 3E 71 0E 66 20 00 49  // .A.<q..V.>q.f .I
    A050: 71 00 00 30 00 45 71 00 08 01 00 4A 71 00 00 40  // q..0.Eq....Jq..@
    A060: 00 47 71 00 00 10 02 4C 71 24 00 00 00 53 71 00  // .Gq....Lq$...Sq.
    A070: 00 10 00 4F 71 00 04 01 00 54 71 00 00 10 00 46  // ...Oq....Tq....F
    A080: 71 00 84 00 00 50 71 00 84 00 00 51 71 00 00 10  // q....Pq....Qq...
    A090: 00 10 74 01 00 26 00 3B 71 11 11 78 00 3D 71 19  // ..t..&.;q..x.=q.
    A0A0: C8 41 00 3C 71 0B 10 46 00 3E 71 0E 66 20 00 47  // .A.<q..F.>q.f .G
    A0B0: 71 00 84 10 02 51 71 00 84 10 00 10 74 01 00 2D  // q....Qq.....t..-
    A0C0: 00 3B 71 13 11 80 09 3D 71 19 C8 10 04 3C 71 0C  // .;q....=q....<q.
    A0D0: 10 60 05 3E 71 0E 66 00 02 48 71 00 00 10 02 4D  // .`.>q.f..Hq....M
    A0E0: 71 24 00 00 00 46 71 00 00 00 00 50 71 00 00 00  // q$...Fq....Pq...
    A0F0: 00 47 71 00 84 00 00 4C 71 00 00 00 00 51 71 00  // .Gq....Lq....Qq.
    A100: 84 00 00 52 71 00 00 10 00 10 74 01 00 32 00 3B  // ...Rq.....t..2.;
    A110: 71 12 81 09 00 3D 71 0F 18 06 00 3C 71 0B 60 05  // q....=q....<q.`.
    A120: 00 3E 71 08 06 02 00 46 71 00 00 10 02 4B 71 25  // .>q....Fq....Kq%
    A130: 00 00 00 45 71 00 84 00 00 4A 71 00 00 00 00 4F  // ...Eq....Jq....O
    A140: 71 00 84 00 00 54 71 00 00 00 00 50 71 00 00 10  // q....Tq....Pq...
    A150: 00 47 71 00 00 00 00 4C 71 00 00 00 00 51 71 00  // .Gq....Lq....Qq.
    A160: 00 00 00 10 74 01 00 33 00 3B 71 12 81 09 00 3D  // ....t..3.;q....=
    A170: 71 0F 18 06 00 3C 71 0B 60 05 00 3E 71 08 06 02  // q....<q.`..>q...
    A180: 00 46 71 00 00 10 02 4B 71 25 00 00 00 45 71 00  // .Fq....Kq%...Eq.
    A190: 84 00 00 4A 71 00 00 00 00 4F 71 00 84 00 00 54  // ...Jq....Oq....T
    A1A0: 71 00 00 00 00 50 71 00 00 10 00 47 71 00 00 00  // q....Pq....Gq...
    A1B0: 00 4C 71 00 00 00 00 51 71 00 00 00 00 10 74 01  // .Lq....Qq.....t.
    A1C0: 00 34 00 3B 71 12 81 09 00 3D 71 0F 18 06 00 3C  // .4.;q....=q....<
    A1D0: 71 0B 60 05 00 3E 71 08 06 02 00 46 71 00 00 10  // q.`..>q....Fq...
    A1E0: 02 4B 71 25 00 00 00 45 71 00 84 00 00 4A 71 00  // .Kq%...Eq....Jq.
    A1F0: 00 00 00 4F 71 00 84 00 00 54 71 00 00 00 00 50  // ...Oq....Tq....P
    A200: 71 00 00 10 00 47 71 00 00 00 00 4C 71 00 00 00  // q....Gq....Lq...
    A210: 00 51 71 00 00 00 00 10 74 01 00 35 00 3B 71 12  // .Qq.....t..5.;q.
    A220: 81 09 00 3D 71 0F 18 06 00 3C 71 0B 60 05 00 3E  // ...=q....<q.`..>
    A230: 71 08 06 02 00 46 71 00 00 10 02 4B 71 25 00 00  // q....Fq....Kq%..
    A240: 00 45 71 00 84 00 00 4A 71 00 00 00 00 4F 71 00  // .Eq....Jq....Oq.
    A250: 84 00 00 54 71 00 00 00 00 50 71 00 00 10 00 47  // ...Tq....Pq....G
    A260: 71 00 00 00 00 4C 71 00 00 00 00 51 71 00 00 00  // q....Lq....Qq...
    A270: 00 10 74 01 00 36 00 3B 71 10 11 C2 00 3D 71 1E  // ..t..6.;q....=q.
    A280: CA 44 00 3C 71 0F 11 C1 00 3E 71 13 86 41 00 44  // .D.<q....>q..A.D
    A290: 71 00 8C 01 00 49 71 00 00 50 00 45 71 00 8C 01  // q....Iq..P.Eq...
    A2A0: 00 4A 71 00 00 50 00 46 71 00 84 00 00 47 71 00  // .Jq..P.Fq....Gq.
    A2B0: 84 10 02 4C 71 25 00 00 00 4E 71 00 84 01 00 53  // ...Lq%...Nq....S
    A2C0: 71 00 00 20 00 4F 71 00 84 01 00 54 71 00 00 30  // q.. .Oq....Tq..0
    A2D0: 00 50 71 00 84 00 00 51 71 00 84 10 00 10 74 01  // .Pq....Qq.....t.
    A2E0: 00 37 00 3B 71 14 11 4C 02 3D 71 20 CA 44 02 3C  // .7.;q..L.=q .D.<
    A2F0: 71 10 11 1D 00 3E 71 14 87 14 00 44 71 00 8C 01  // q....>q....Dq...
    A300: 00 49 71 00 00 30 00 45 71 00 8C 01 00 4A 71 00  // .Iq..0.Eq....Jq.
    A310: 00 50 00 46 71 00 00 10 02 4B 71 25 00 00 00 4E  // .P.Fq....Kq%...N
    A320: 71 00 84 01 00 53 71 00 00 20 00 54 71 00 00 30  // q....Sq.. .Tq..0
    A330: 00 4F 71 00 84 01 00 50 71 00 00 10 00 47 71 00  // .Oq....Pq....Gq.
    A340: 00 00 00 4C 71 00 00 00 00 51 71 00 00 00 00 10  // ...Lq....Qq.....
    A350: 74 01 00 38 00 3B 71 1E A7 C1 00 3D 71 1A 0B 0F  // t..8.;q....=q...
    A360: 00 3C 71 14 09 B0 00 3E 71 19 0A 0F 00 44 71 00  // .<q....>q....Dq.
    A370: 84 10 00 49 71 00 00 41 00 46 71 00 8C 01 00 4B  // ...Iq..A.Fq....K
    A380: 71 00 00 61 00 4E 71 00 84 10 00 53 71 00 00 20  // q..a.Nq....Sq.. 
    A390: 00 50 71 00 84 01 00 55 71 00 00 30 00 45 71 00  // .Pq....Uq..0.Eq.
    A3A0: 00 00 00 4A 71 00 00 00 00 4F 71 00 00 00 00 54  // ...Jq....Oq....T
    A3B0: 71 00 00 00 00 47 71 00 00 10 00 4C 71 00 00 00  // q....Gq....Lq...
    A3C0: 00 51 71 00 00 10 00 10 74 01 00 39 00 3B 71 16  // .Qq.....t..9.;q.
    A3D0: D1 80 00 3D 71 1E 0F A5 00 3C 71 14 B0 90 00 3E  // ...=q....<q....>
    A3E0: 71 18 0C 84 00 44 71 00 8C 01 00 49 71 00 00 62  // q....Dq....Iq..b
    A3F0: 00 47 71 00 8C 11 00 4C 71 04 00 00 00 4E 71 00  // .Gq....Lq....Nq.
    A400: 84 01 00 53 71 00 00 30 00 51 71 00 04 12 00 45  // ...Sq..0.Qq....E
    A410: 71 00 00 10 00 4A 71 00 00 00 00 4F 71 00 00 10  // q....Jq....Oq...
    A420: 00 54 71 00 00 00 00 46 71 00 00 00 00 50 71 00  // .Tq....Fq....Pq.
    A430: 00 00 00 10 74 01 00 26 00 4C 74 10 FF 00 00 10  // ....t..&.Lt.....
    A440: 74 01 00 27 00 4C 74 19 FF 00 00 29 71 F3 01 FF  // t..'.Lt....)q...
    A450: 01 10 74 01 00 28 00 4C 74 16 FF 00 00 29 71 F3  // ..t..(.Lt....)q.
    A460: 01 FF 01 10 74 01 00 29 00 4C 74 1F FF 00 00 29  // ....t..).Lt....)
    A470: 71 F3 01 FF 01 10 74 01 00 2A 00 4C 74 14 FF 00  // q.....t..*.Lt...
    A480: 00 29 71 F3 01 FF 01 10 74 01 00 2B 00 4C 74 1D  // .)q.....t..+.Lt.
    A490: FF 00 00 29 71 F3 01 FF 01 10 74 01 00 2C 00 4C  // ...)q.....t..,.L
    A4A0: 74 12 FF 00 00 29 71 F3 01 FF 01 10 74 01 00 2D  // t....)q.....t..-
    A4B0: 00 4D 74 1B FF 00 00 29 71 F3 01 FF 01 10 74 01  // .Mt....)q.....t.
    A4C0: 00 2E 00 4C 74 18 FF 00 00 29 71 F3 01 FF 01 10  // ...Lt....)q.....
    A4D0: 74 01 00 2F 00 4C 74 11 FF 00 00 29 71 F3 01 FF  // t../.Lt....)q...
    A4E0: 01 10 74 01 00 30 00 4C 74 1E FF 00 00 29 71 F3  // ..t..0.Lt....)q.
    A4F0: 01 FF 01 10 74 01 00 31 00 4C 74 17 FF 00 00 29  // ....t..1.Lt....)
    A500: 71 F3 01 FF 01 10 74 01 00 32 00 4B 74 1C FF 00  // q.....t..2.Kt...
    A510: 00 29 71 F3 01 FF 01 10 74 01 00 33 00 4B 74 15  // .)q.....t..3.Kt.
    A520: FF 00 00 29 71 F3 01 FF 01 10 74 01 00 34 00 4B  // ...)q.....t..4.K
    A530: 74 1A FF 00 00 29 71 F3 01 FF 01 10 74 01 00 35  // t....)q.....t..5
    A540: 00 4B 74 13 FF 00 00 29 71 F3 01 FF 01 10 74 00  // .Kt....)q.....t.
    A550: 00 00 00 44 74 00 00 40 00 10 74 01 00 36 00 44  // ...Dt..@..t..6.D
    A560: 74 00 00 00 00 29 71 F3 01 FF 01 10 74 01 00 37  // t....)q.....t..7
    A570: 00 44 74 00 00 00 00 29 71 F3 01 FF 01 10 74 01  // .Dt....)q.....t.
    A580: 00 38 00 44 74 00 00 00 00 29 71 F3 01 FF 01 10  // .8.Dt....)q.....
    A590: 74 01 00 39 00 44 74 00 00 00 00 29 71 F3 01 FF  // t..9.Dt....)q...
    A5A0: 01 10 74 01 00 10 00 29 71 F3 01 FF 01 10 74 01  // ..t....)q.....t.
    A5B0: 00 11 00 29 71 F3 01 FF 01 10 74 01 00 12 00 29  // ...)q.....t....)
    A5C0: 71 F3 01 FF 01 10 74 01 00 13 00 29 71 F3 01 FF  // q.....t....)q...
    A5D0: 01 10 74 01 00 14 00 29 71 F3 01 FF 01 10 74 01  // ..t....)q.....t.
    A5E0: 00 15 00 29 71 F3 01 FF 01 10 74 01 00 16 00 29  // ...)q.....t....)
    A5F0: 71 F3 01 FF 01 10 74 01 00 17 00 29 71 F3 01 FF  // q.....t....)q...
    A600: 01 10 74 01 00 18 00 29 71 F3 01 FF 01 10 74 01  // ..t....)q.....t.
    A610: 00 19 00 29 71 F3 01 FF 01 10 74 01 00 1A 00 29  // ...)q.....t....)
    A620: 71 F3 01 FF 01 10 74 01 00 1B 00 29 71 F3 01 FF  // q.....t....)q...
    A630: 01 10 74 01 00 1C 00 29 71 F3 01 FF 01 10 74 01  // ..t....)q.....t.
    A640: 00 1D 00 29 71 F3 01 FF 01 10 74 01 00 1E 00 29  // ...)q.....t....)
    A650: 71 F3 01 FF 01 10 74 01 00 1F 00 29 71 F3 01 FF  // q.....t....)q...
    A660: 01 10 74 00 00 00 00 30 74 F1 05 00 00 10 74 01  // ..t....0t.....t.
    A670: 00 20 00 30 74 F1 06 00 00 36 74 00 00 00 00 10  // . .0t....6t.....
    A680: 74 01 00 21 00 30 74 F1 06 00 00 36 74 00 00 00  // t..!.0t....6t...
    A690: 00 10 74 01 00 22 00 30 74 F1 0B 00 00 36 74 10  // ..t..".0t....6t.
    A6A0: 00 00 00 10 74 00 00 00 00 33 74 03 0B 0E 00 00  // ....t....3t.....
    A6B0: 00 00 55 01 55 01 55 01 2D 4D 02 4D 02 4D 02 32  // ..U.U.U.-M.M.M.2
    A6C0: 9B 00 9B 00 9B 00 33 9B 00 9B 00 9B 00 34 9B 00  // ......3......4..
    A6D0: 9B 00 9B 00 35 9B 00 9B 00 9B 00 36 6C 02 6C 02  // ....5......6l.l.
    A6E0: 6C 02 37 6C 02 6C 02 6C 02 38 93 01 55 01 83 60  // l.7l.l.l.8..U..`
    A6F0: 39 55 01 93 01 41 70 FF 1A 01 01 01 04 00 37 00  // 9U...Ap.......7.
    A700: 00 01 05 0C 00 08 00 18 11 5C 05 0D 00 FC 7F FF  // .........\......
    A710: FF 02 00 00 00 01 05 0C 00 40 00 18 11 5C 05 0D  // .........@...\..
    A720: 00 FF FF 9D FF 00 10 E3 80 01 05 0C 00 84 00 18  // ................
    A730: 11 5C 05 0D 00 7F FF FF FF 80 00 00 00 01 05 0C  // .\..............
    A740: 00 00 01 18 11 5C 05 0D 00 BE 3F FF FF 40 40 01  // .....\....?..@@.
    A750: 00 01 05 0C 00 C0 01 14 11 01 05 0D 00 00 40 00  // ..............@.
    A760: 01 01 05 0C 00 80 02 14 11 5C 05 0D 00 0F FF FE  // .........\......
    A770: DF 10 00 01 60 01 05 0C 00 88 02 14 11 5C 05 0D  // ....`........\..
    A780: 00 7F F3 97 FF 86 04 88 DA 01 05 0C 00 90 02 14  // ................
    A790: 11 5C 05 0D 00 1B F0 FF FF 20 0D 40 04 01 05 0C  // .\....... .@....
    A7A0: 00 C4 02 14 11 5C 05 0D 00 FF 2D FF FF 80 52 18  // .....\....-...R.
    A7B0: 96 01 05 0C 00 8C 01 18 11 5C 05 0D 00 9F FF FF  // .........\......
    A7C0: FF 62 00 00 00 01 05 0C 00 EC 02 14 11 5C 05 0D  // .b...........\..
    A7D0: 00 FF FF DF FF 10 00 20 8A 01 05 0C 00 40 00 14  // ....... .....@..
    A7E0: 11 5C 05 0D 00 FF FF FF FC 09 00 01 02 01 05 0C  // .\..............
    A7F0: 00 44 00 18 11 5C 05 0D 00 FF FE FF C7 0F 00 00  // .D...\..........
    A800: 18 01 05 0C 00 C8 B0 00 12 01 05 0D 00 00 00 06  // ................
    A810: 00 5B 4B 00 01 01 04 00 37 00 00 52 39 02 0D 00  // .[K.....7..R9...
    A820: 01 03 52 43 02 0D 00 04 03 52 43 02 05 00 01 00  // ..RC.....RC.....
    A830: B6 03 52 43 02 05 00 04 00 84 03 52 43 02 0D 00  // ..RC.......RC...
    A840: 0A 03 52 43 02 0D 00 02 03 52 43 02 05 00 02 00  // ..RC.....RC.....
    A850: 46 05 52 43 66 04 01 A4 50 00 24 00 5B 00 D2 00  // F.RCf...P.$.[...
    A860: 01 01 08 04 37 00 00 03 01 01 00 02 01 01 00 55  // ....7..........U
    A870: 38 01 52 10 01 05 00 00 91 2D 01 00 01 05 01 00  // 8.R......-......
    A880: 0F 00 00 80 01 05 00 00 91 2D 01 00 3C 05 01 00  // .........-..<...
    A890: 0F 00 00 80 49 26 00 66 1C 2D 0C 42 0A 00 55 00  // ....I&.f.-.B..U.
    A8A0: 01 52 12 02 01 01 00 52 1E 02 05 01 08 00 00 00  // .R.....R........
    A8B0: 52 1F 4C E5 01 20 44 68 00 01 05 00 00 4F 5C 01  // R.L.. Dh.....O\.
    A8C0: 00 0D 25 01 00 20 02 25 01 FF 52 40 52 3E 03 24  // ..%.. .%..R@R>.$
    A8D0: 41 1C 00 3E 25 41 00 49 BC 00 52 03 01 05 00 00  // A..>%A.I..R.....
    A8E0: 4F 5C 01 00 03 00 00 01 00 09 05 00 C0 00 00 00  // O\..............
    A8F0: 02 01 01 00 52 1E 01 05 00 00 4F 5C 01 00 5C 22  // ....R.....O\..\"
    A900: 01 00 3F 00 52 3E 02 8C 01 12 00 3D 8D 01 00 00  // ..?.R>.....=....
    A910: 44 BC 00 02 0D 01 02 00 52 43 02 25 01 0F 52 40  // D.......RC.%..R@
    A920: 02 25 01 00 52 40 02 01 01 00 55 38 01 52 3B 5B  // .%..R@....U8.R;[
    A930: 4B 00 01 01 00 00 37 00 00 42 21 00 63 00 1F 00  // K.....7..B!.c...
    A940: 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03  // c.9.c.?.c.E.ZZ[.
    A950: 05 40 00 00 05 04 2D 19 40 00 15 05 40 02 01 02  // .@....-.@...@...
    A960: 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02  // ..@.....[.....[.
    A970: 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 2C 03 02 01  // ....[.....[.,...
    A980: 08 08 37 00 00 3D 25 00 00 44 4C 00 66 0B 03 04  // ..7..=%..DL.f...
    A990: 00 04 00 15 05 00 0A 03 04 01 04 00 1B 05 01 16  // ................
    A9A0: 2D 05 01 F4 00 00 00 42 21 00 63 01 CA 00 63 02  // -......B!.c...c.
    A9B0: 1D 02 63 03 86 02 63 04 82 00 63 05 A7 00 63 06  // ..c...c...c...c.
    A9C0: 96 00 5A 5A 55 38 00 5B 01 05 00 00 61 60 01 00  // ..ZZU8.[....a`..
    A9D0: 3C E5 01 00 80 49 54 00 01 05 00 00 62 60 01 00  // <....IT.....b`..
    A9E0: 01 01 01 00 01 56 00 40 03 A9 40 00 01 05 00 00  // .....V.@..@.....
    A9F0: 61 60 01 00 01 02 01 00 40 02 E5 00 01 5B 01 05  // a`......@....[..
    AA00: 00 00 65 60 01 00 4A 25 01 00 01 44 7D 00 55 38  // ..e`..J%...D}.U8
    AA10: 00 5B 01 05 00 00 61 60 01 00 3C E5 01 00 80 49  // .[....a`..<....I
    AA20: 9E 00 5B 01 05 00 00 80 60 01 00 01 05 01 00 00  // ..[.....`.......
    AA30: 00 03 00 01 05 00 00 80 60 01 00 4A E5 01 00 80  // ........`..J....
    AA40: 44 B7 00 43 7D 00 56 00 46 01 05 00 00 91 60 01  // D..C}.V.F.....`.
    AA50: 00 03 00 40 01 00 50 02 01 05 00 00 91 60 01 00  // ...@..P......`..
    AA60: 3C 02 01 00 40 49 00 01 2D 05 46 01 00 00 00 3E  // <...@I..-.F....>
    AA70: 05 46 D0 07 00 00 45 CD 00 43 48 00 03 05 46 00  // .F....E..CH...F.
    AA80: 00 00 00 03 02 40 00 2D 05 40 00 10 00 00 04 02  // .....@.-.@......
    AA90: 00 40 04 02 01 01 04 05 02 00 10 00 00 03 02 40  // .@.............@
    AAA0: 00 2D 05 40 00 50 00 00 04 02 03 40 04 02 04 01  // .-.@.P.....@....
    AAB0: 04 05 05 78 56 34 12 57 00 06 57 00 07 57 00 08  // ...xV4.W..W..W..
    AAC0: 57 00 09 57 00 0A 57 00 0B 57 00 0C 57 00 0D 57  // W..W..W..W..W..W
    AAD0: 00 0E 57 00 0F 2D 05 46 40 00 00 00 3E 05 46 00  // ..W..-.F@...>.F.
    AAE0: 04 00 00 45 07 01 03 05 46 00 17 00 00 57 00 00  // ...E....F....W..
    AAF0: 02 02 02 00 2C 05 02 00 17 00 00 02 02 03 00 2C  // ....,..........,
    AB00: 05 03 00 10 00 00 02 05 04 00 00 00 00 03 02 40  // ...............@
    AB10: 01 33 05 40 F4 00 00 00 02 22 04 40 02 A2 04 40  // .3.@.....".@...@
    AB20: 02 05 05 00 04 00 D0 52 35 01 05 00 00 81 60 01  // .......R5.....`.
    AB30: 00 54 00 01 00 01 05 00 00 82 60 01 00 54 00 01  // .T........`..T..
    AB40: 00 03 05 40 00 00 00 00 2D 02 40 00 01 05 00 00  // ...@....-.@.....
    AB50: 85 60 01 00 01 02 01 00 40 01 05 00 00 86 60 01  // .`......@.....`.
    AB60: 00 01 02 01 00 01 01 05 00 00 87 60 01 00 01 05  // ...........`....
    AB70: 01 00 00 10 00 00 01 05 00 00 80 60 01 00 01 05  // ...........`....
    AB80: 01 00 00 00 02 00 01 05 00 00 80 60 01 00 4A E5  // ...........`..J.
    AB90: 01 00 80 44 0A 02 43 7D 00 66 09 3E 0D 42 00 00  // ...D..C}.f.>.B..
    ABA0: 44 81 00 03 0C 40 00 00 2D 0A 40 42 2D 0D 42 24  // D....@..-.@B-.B$
    ABB0: 00 3D 64 00 00 00 44 4C 02 2D 0D 42 10 00 3E 0A  // .=d...DL.-.B..>.
    ABC0: 42 40 45 35 02 43 48 00 02 04 02 08 00 02 05 03  // B@E5.CH.........
    ABD0: 00 00 E0 0F 2C 04 03 08 00 02 05 04 00 02 00 00  // ....,...........
    ABE0: 02 05 05 00 00 00 54 2C 04 05 04 00 52 35 02 05  // ......T,....R5..
    ABF0: 01 00 00 E0 0F 2C 04 01 08 00 55 00 02 02 04 03  // .....,....U.....
    AC00: 04 00 03 05 46 00 50 00 00 57 00 00 03 05 46 00  // ....F.P..W....F.
    AC10: 10 00 00 04 05 00 00 04 00 00 04 05 01 01 00 00  // ................
    AC20: 00 04 05 02 06 00 00 00 04 01 07 01 03 01 40 02  // ..............@.
    AC30: 2D 05 40 F4 00 00 00 04 02 08 40 04 01 09 03 56  // -.@.......@....V
    AC40: 00 40 03 31 40 00 04 02 0A 40 03 05 46 00 50 00  // .@.1@....@..F.P.
    AC50: 00 04 05 00 00 00 00 00 01 05 00 00 80 60 01 00  // .............`..
    AC60: 3C 05 01 00 FF FF FF FF 44 48 00 01 05 00 00 83  // <.......DH......
    AC70: 60 01 00 03 00 40 01 00 2D 05 40 10 00 00 00 3E  // `....@..-.@....>
    AC80: 05 40 00 01 00 00 45 13 03 56 00 40 44 48 00 01  // .@....E..V.@DH..
    AC90: 02 01 00 40 03 05 46 00 50 00 00 3F 05 00 78 56  // ...@..F.P..?..xV
    ACA0: 34 12 49 1F 03 43 7D 00 7F 04 01 01 00 00 37 00  // 4.I..C}.......7.
    ACB0: 00 02 05 00 01 00 00 00 52 06 01 05 00 00 6E A0  // ........R.....n.
    ACC0: 01 00 01 05 01 00 03 00 00 00 01 05 00 00 EE A0  // ................
    ACD0: 01 00 01 05 01 00 03 00 00 00 01 05 80 29 00 F4  // .............)..
    ACE0: 00 00 01 05 00 00 2C A8 01 00 01 05 01 00 00 F4  // ......,.........
    ACF0: 00 00 1A 0D 00 04 2C 05 00 FF F3 00 00 01 01 81  // ......,.........
    AD00: 29 00 01 05 00 00 2D A8 01 00 01 01 01 00 00 01  // ).....-.........
    AD10: 05 85 29 00 00 3D 00 01 05 00 00 31 A8 01 00 01  // ..)..=.....1....
    AD20: 05 01 00 00 00 3D 00 14 05 00 06 0E 0D 00 3F 00  // .....=........?.
    AD30: 01 01 86 29 00 01 05 00 00 32 A8 01 00 01 01 01  // ...).....2......
    AD40: 00 00 01 05 ED 2A 80 3F 3F 3F 01 05 EE 2A 00 10  // .....*.???...*..
    AD50: 20 10 01 05 EF 2A 40 00 00 00 01 05 F0 2A 40 10  //  ....*@......*@.
    AD60: 04 0D 01 05 F1 2A 00 00 00 80 01 05 08 2A FF FF  // .....*.......*..
    AD70: DB 06 01 05 09 2A FF FF DB 06 01 05 E9 2A FF 07  // .....*.......*..
    AD80: 00 00 01 05 F5 2A F0 BF E0 0D 01 0D E7 2A 7F 40  // .....*.......*.@
    AD90: 01 05 50 28 EB 0F E4 60 01 05 00 00 90 A6 01 00  // ..P(...`........
    ADA0: 01 05 01 00 EB 0F E4 60 66 FF 2D 0D 42 C3 02 03  // .......`f.-.B...
    ADB0: 04 40 00 00 3E 05 40 00 00 00 00 44 2A 01 01 04  // .@..>.@....D*...
    ADC0: 00 00 00 00 01 04 01 00 04 00 2D 0D 42 08 00 43  // ..........-.B..C
    ADD0: 07 01 03 00 46 10 74 01 05 10 74 01 00 10 00 66  // ....F.t...t....f
    ADE0: FF 2D 0D 42 0F 02 03 04 40 00 00 3E 05 40 00 00  // .-.B....@..>.@..
    ADF0: 00 00 44 91 01 01 04 00 00 00 00 03 00 41 01 00  // ..D..........A..
    AE00: 03 04 40 04 00 01 02 00 00 40 01 02 01 00 41 2D  // ..@......@....A-
    AE10: 05 40 00 77 01 00 01 02 00 00 40 01 02 01 00 41  // .@.w......@....A
    AE20: 2D 05 40 40 01 00 00 01 02 00 00 40 01 02 01 00  // -.@@.......@....
    AE30: 41 2D 0D 42 08 00 43 3E 01 01 02 10 74 46 01 05  // A-.B..C>....tF..
    AE40: 00 00 4F 5C 01 00 4A 65 01 00 10 44 CB 01 0D 25  // ..O\..Je...D...%
    AE50: 43 2A 01 01 05 00 00 43 A1 01 00 5C 0D 01 00 FF  // C*.....C...\....
    AE60: 0F 01 00 01 05 00 00 83 A2 01 00 5C 0D 01 00 FF  // ...........\....
    AE70: 0F 01 00 03 05 40 08 00 00 00 01 05 00 00 4F 5C  // .....@........O\
    AE80: 01 00 4A 65 01 00 08 44 E6 01 0F 65 40 01 5C 4A  // ..Je...D...e@.\J
    AE90: 42 2A E3 FE 40 01 05 00 00 42 A1 01 00 5C 4A 01  // B*..@....B...\J.
    AEA0: 00 E3 FE 40 01 05 00 00 82 A2 01 00 5C 4A 01 00  // ...@........\J..
    AEB0: E3 FE 40 5B 7A 70 02 44 70 00 00 32 2A 00 00 45  // ..@[zp.Dp..2*..E
    AEC0: 70 00 00 33 2A 00 00 00 40 01 00 58 2A 00 00 01  // p..3*...@..X*...
    AED0: 40 01 00 59 2A 00 00 04 40 01 00 5C 2A 00 00 05  // @..Y*...@..\*...
    AEE0: 40 01 00 5D 2A 00 00 08 40 01 00 60 2A 00 00 0A  // @..]*...@..`*...
    AEF0: 40 01 00 62 2A 00 00 0C 40 01 00 64 2A 00 00 10  // @..b*...@..d*...
    AF00: 40 01 00 66 2A 00 00 14 40 01 00 68 2A 00 00 15  // @..f*...@..h*...
    AF10: 40 01 00 6A 2A 00 00 1C 40 01 00 6C 2A 00 00 1E  // @..j*...@..l*...
    AF20: 40 01 00 6E 2A 00 00 32 40 01 00 44 2A 00 00 33  // @..n*..2@..D*..3
    AF30: 40 01 00 45 2A 00 00 34 40 01 00 46 2A 00 00 35  // @..E*..4@..F*..5
    AF40: 40 01 00 47 2A 00 00 36 40 01 00 48 2A 00 00 38  // @..G*..6@..H*..8
    AF50: 40 01 00 49 2A 00 00 39 40 01 00 4A 2A 00 00 3A  // @..I*..9@..J*..:
    AF60: 40 01 00 4B 2A 00 00 00 00 00 00 00 A0 01 00 F9  // @..K*...........
    AF70: E0 5F FE 01 A0 01 00 F8 E0 5F FE 02 A0 01 00 F8  // ._......._......
    AF80: E0 5F FE 03 A0 01 00 FA E0 5F FE 0E A0 01 00 F9  // ._......._......
    AF90: E0 5F FE 0F A0 01 00 F9 E0 5F FE 2C A0 01 00 F9  // ._......._.,....
    AFA0: E0 5F FE 2D A0 01 00 F8 E0 5F FE 2E A0 01 00 F8  // ._.-....._......
    AFB0: E0 5F FE 2F A0 01 00 F9 E0 5F FE 30 A0 01 00 FA  // ._./....._.0....
    AFC0: E0 5F FE 31 A0 01 00 F9 E0 5F FE 3B A0 01 00 F9  // ._.1....._.;....
    AFD0: E0 5F FE 9D A0 01 00 81 F0 2F FF A0 A0 01 00 81  // ._......./......
    AFE0: F0 2F FF 80 A0 01 00 F8 E0 5F FE 81 A0 01 00 F8  // ./......._......
    AFF0: E0 5F FE 82 A0 01 00 F8 E0 5F FE 83 A0 01 00 F9  // ._......._......
    B000: E0 5F FE 84 A0 01 00 F9 E0 5F FE 8D A0 01 00 F0  // ._......._......
    B010: E0 5F FE 8E A0 01 00 F9 E0 5F FE AC A0 01 00 F8  // ._......._......
    B020: E0 5F FE AD A0 01 00 F8 E0 5F FE AE A0 01 00 F8  // ._......._......
    B030: E0 5F FE AF A0 01 00 F9 E0 5F FE B0 A0 01 00 F8  // ._......._......
    B040: E0 5F FE B1 A0 01 00 F9 E0 5F FE B2 A0 01 00 F9  // ._......._......
    B050: E0 5F FE BA A0 01 00 F9 E0 5F FE 24 A0 01 00 08  // ._......._.$....
    B060: 04 E1 03 57 A0 01 00 70 60 58 50 D7 A0 01 00 70  // ...W...p`XP....p
    B070: 60 58 50 ED A1 01 00 BF 3F 3F 00 2D A3 01 00 BF  // `XP.....??.-....
    B080: 3F 3F 00 EE A1 01 00 01 00 00 00 F0 A1 01 00 01  // ??..............
    B090: 00 00 00 F2 A1 01 00 01 00 00 00 2E A3 01 00 01  // ................
    B0A0: 00 00 00 30 A3 01 00 01 00 00 00 32 A3 01 00 01  // ...0.......2....
    B0B0: 00 00 00 F1 A1 01 00 01 00 00 80 F3 A1 01 00 01  // ................
    B0C0: 00 00 80 31 A3 01 00 01 00 00 80 33 A3 01 00 01  // ...1.......3....
    B0D0: 00 00 80 00 A1 01 00 81 55 55 55 02 A1 01 00 41  // ........UUU....A
    B0E0: 56 55 55 40 A2 01 00 40 55 55 51 42 A2 01 00 40  // VUU@...@UUQB...@
    B0F0: 54 55 55 EA A1 01 00 00 00 00 00 2A A3 01 00 00  // TUU........*....
    B100: 00 00 00 E7 A1 01 00 7F 40 1C 00 27 A3 01 00 7F  // ........@..'....
    B110: 40 1C 00 91 A3 01 00 00 08 01 00 9A A3 01 00 00  // @...............
    B120: 08 01 00 00 00 00 00 00 17 00 02 01 00 00 01 05  // ................
    B130: 60 0F 00 00 00 F4 01 05 62 0F 00 00 00 00 5B 00  // `.......b.....[.
    B140: 12 00 02 01 00 00 37 00 00 01 05 10 0D 10 48 D1  // ......7.......H.
    B150: 0F 5B 8E 00 01 01 04 00 37 00 00 01 05 0C 00 40  // .[......7......@
    B160: 10 41 01 01 05 0D 00 81 00 00 00 01 05 0C 00 10  // .A..............
    B170: 03 41 01 01 05 0D 00 81 00 00 00 01 05 0C 00 60  // .A.............`
    B180: 04 18 11 5C 05 0D 00 B9 FF FF FF 46 3E 80 00 01  // ...\.......F>...
    B190: 05 0C 00 5C A0 13 10 5C 05 0D 00 FE FF FF FF 81  // ...\...\........
    B1A0: 00 00 00 01 05 0C 00 00 00 41 01 01 05 0D 00 00  // .........A......
    B1B0: 00 00 80 01 05 0C 00 60 A0 13 10 01 05 0D 00 00  // .......`........
    B1C0: 00 00 01 52 0E 32 05 00 10 00 00 00 01 01 E3 0D  // ...R.2..........
    B1D0: 00 1A 05 00 0B 01 01 06 00 00 0D 25 1F 0E 03 5B  // ...........%...[
    B1E0: 6D 02 01 01 08 00 37 00 00 66 FF 2D 0D 42 E9 01  // m.....7..f.-.B..
    B1F0: 03 04 40 00 00 3E 05 40 00 00 00 00 44 33 00 01  // ..@..>.@....D3..
    B200: 04 00 00 00 00 01 04 01 00 04 00 2D 0D 42 08 00  // ...........-.B..
    B210: 43 10 00 02 05 00 C7 1E 00 01 52 45 4B 25 00 01  // C.........REK%..
    B220: 44 3A 01 02 05 00 E6 1E 00 0B 52 45 14 05 00 15  // D:........RE....
    B230: 01 05 00 00 5C 66 01 00 5C 99 01 00 1F 00 00 02  // ....\f..\.......
    B240: 05 00 C8 1E 00 0C 52 45 03 01 00 00 02 05 00 D5  // ......RE........
    B250: 1E 00 06 52 45 14 05 00 0C 0F 01 00 00 02 05 00  // ...RE...........
    B260: DB 1E 00 0B 52 45 14 05 00 12 0F 01 00 00 02 05  // ....RE..........
    B270: 00 D4 1E 00 01 52 45 14 05 00 1D 0F 01 00 00 01  // .....RE.........
    B280: 05 00 00 5D 66 01 00 01 02 01 00 00 02 05 00 B7  // ...]f...........
    B290: 1E 00 08 52 45 14 05 00 01 01 05 00 00 2E 66 01  // ...RE.........f.
    B2A0: 00 5C 09 01 00 01 FE 00 02 05 00 BF 1E 00 08 52  // .\.............R
    B2B0: 45 14 05 00 01 01 05 00 00 52 66 01 00 5C 09 01  // E........Rf..\..
    B2C0: 00 01 FE 00 02 05 00 F1 1E 00 0B 52 45 03 01 00  // ...........RE...
    B2D0: 00 02 05 00 07 1F 00 07 52 45 14 05 00 0B 0F 01  // ........RE......
    B2E0: 00 00 01 05 00 00 5E 66 01 00 01 02 01 00 00 02  // ......^f........
    B2F0: 05 00 FC 1E 00 0B 52 45 03 01 00 00 02 05 00 0E  // ......RE........
    B300: 1F 00 07 52 45 14 05 00 0B 0F 01 00 00 01 05 00  // ...RE...........
    B310: 00 5F 66 01 00 01 02 01 00 00 01 05 00 00 00 66  // ._f............f
    B320: 01 00 03 00 00 01 00 5C A5 01 00 FC 02 01 05 00  // .......\........
    B330: 00 02 66 01 00 5C 0D 01 00 3F C0 00 23 1B 05 00  // ..f..\...?..#...
    B340: 10 09 25 00 03 01 05 00 00 00 66 01 00 5C A2 01  // ..%.......f..\..
    B350: 00 FC 00 01 05 00 00 F8 74 01 00 03 00 00 01 00  // ........t.......
    B360: 15 05 00 02 09 8D 00 7F 00 15 1D 00 03 1B 0D 00  // ................
    B370: 09 15 0D 00 03 01 05 00 00 5E 66 01 00 5C 4A 01  // .........^f..\J.
    B380: 00 07 FC 00 01 05 00 00 5F 66 01 00 5C 5A 01 00  // ........_f..\Z..
    B390: 07 FC 00 01 05 00 00 6F 66 01 00 0D 25 01 00 03  // .......of...%...
    B3A0: 4A 25 01 00 10 44 C0 01 4A 25 01 00 20 44 C8 01  // J%...D..J%.. D..
    B3B0: 07 25 01 00 FC 4A 25 01 00 10 49 D5 01 4A 25 01  // .%...J%...I..J%.
    B3C0: 00 20 49 DD 01 5B 7A 84 00 62 66 01 00 96 43 81  // . I..[z..bf...C.
    B3D0: 01 63 66 01 00 87 25 09 00 64 66 01 00 35 14 BF  // .cf...%..df..5..
    B3E0: 02 59 66 01 00 01 00 00 00 6B 66 01 00 01 80 00  // .Yf......kf.....
    B3F0: 00 65 66 01 00 01 80 00 00 9F 66 01 00 5C 4F 8A  // .ef.......f..\O.
    B400: 02 A0 66 01 00 27 69 03 08 A1 66 01 00 48 E5 21  // ..f..'i...f..H.!
    B410: 00 0B 66 01 00 78 00 FF EF 5C 66 01 00 45 00 40  // ..f..x...\f..E.@
    B420: B5 5D 66 01 00 02 68 BC 31 2E 66 01 00 00 21 00  // .]f...h.1.f...!.
    B430: 00 52 66 01 00 00 21 00 00 5E 66 01 00 00 00 00  // .Rf...!..^f.....
    B440: 00 5F 66 01 00 00 00 00 00 00 00 00 00 00 CA 00  // ._f.............
    B450: 02 01 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A  // ....7..f...A..-.
    B460: 41 42 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D  // AB-.B..=$...D1.-
    B470: 0D 42 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56  // .B..>.BAE..U .[V
    B480: 00 43 03 24 43 05 00 03 04 46 00 00 33 05 46 01  // .C.$C....F..3.F.
    B490: 00 00 00 01 02 00 00 46 03 00 00 01 00 0D 02 01  // .......F........
    B4A0: 00 44 2D 05 46 02 00 00 00 01 02 00 00 46 03 24  // .D-.F........F.$
    B4B0: 43 04 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D  // C..K...I......E-
    B4C0: 05 46 01 00 00 00 01 02 00 00 46 4A 02 01 00 44  // .F........FJ...D
    B4D0: 44 90 00 03 29 43 00 0E A2 00 44 43 98 00 03 29  // D...)C....DC...)
    B4E0: 43 00 08 A2 00 45 33 05 46 03 00 00 00 01 02 00  // C....E3.F.......
    B4F0: 00 46 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00  // .F.....[....D...
    B500: 00 00 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43  // ...=...D......EC
    B510: C9 00 0D 02 01 00 44 5B 32 00 02 01 04 04 37 00  // ......D[2.....7.
    B520: 00 02 01 01 00 02 E5 01 01 52 3C 01 05 00 00 15  // .........R<.....
    B530: 7E 01 00 01 01 01 00 02 51 C8 01 05 00 00 41 7E  // ~.......Q.....A~
    B540: 01 00 01 39 01 00 01 51 0A 5B 29 00 01 01 00 04  // ...9...Q.[).....
    B550: 37 00 00 02 25 01 01 52 40 02 01 01 00 52 10 02  // 7...%..R@....R..
    B560: 01 01 00 02 E5 01 03 55 00 02 52 3F 02 25 01 02  // .......U..R?.%..
    B570: 52 40 5B 00 5D 05 01 07 0C 08 37 00 00 3D 25 01  // R@[.].....7..=%.
    B580: FF 44 33 05 3D 25 01 19 46 2F 05 3D 25 01 02 47  // .D3.=%..F/.=%..G
    B590: 2F 05 3D 25 01 14 45 33 05 3D 05 00 00 00 00 00  // /.=%..E3.=......
    B5A0: 44 DE 02 66 1B 56 00 02 3D A5 01 02 49 48 00 03  // D..f.V..=...IH..
    B5B0: 0C 40 10 00 21 0D 40 14 00 43 61 00 3D A5 01 03  // .@..!.@..Ca.=...
    B5C0: 49 5C 00 03 0C 40 14 00 21 0D 40 14 00 43 61 00  // I\...@..!.@..Ca.
    B5D0: 03 0C 40 18 00 3E 0D 40 00 00 44 70 00 03 0A 02  // ..@..>.@..Dp....
    B5E0: 40 43 74 00 0E E5 01 80 4B E5 01 02 49 A2 00 02  // @Ct.....K...I...
    B5F0: A9 02 02 55 28 02 3D 05 00 40 4B 4C 00 45 A2 00  // ...U(.=..@KL.E..
    B600: 0D A5 58 62 40 03 21 41 01 33 25 41 14 03 22 43  // ..Xb@.!A.3%A.."C
    B610: 41 0D E2 FF 55 44 66 FF 2D 0D 42 49 05 03 39 40  // A...UDf.-.BI..9@
    B620: 01 09 0D 40 30 00 1B 0D 40 04 21 0D 40 05 00 2D  // ...@0...@.!.@..-
    B630: 0A 42 40 03 04 40 00 00 27 05 40 10 27 00 00 02  // .B@..@..'.@.'...
    B640: A2 03 40 02 E4 03 04 00 56 00 00 56 00 01 02 0D  // ..@.....V..V....
    B650: 03 40 01 02 65 01 01 20 05 00 0A 00 00 00 03 02  // .@..e.. ........
    B660: 46 40 3D 05 00 80 8D 5B 00 47 0A 01 3D A5 03 64  // F@=....[.G..=..d
    B670: 45 03 01 02 65 03 03 0E E5 01 08 55 28 01 4B E5  // E...e......U(.K.
    B680: 01 08 44 15 01 1B 05 46 01 3E 05 46 A0 2F C5 01  // ..D....F.>.F./..
    B690: 48 2A 01 2C 65 01 01 15 05 46 01 43 15 01 14 2D  // H*.,e....F.C...-
    B6A0: 01 05 3D A5 01 00 44 4B 01 4B E5 01 80 49 4B 01  // ..=...DK.K...IK.
    B6B0: 3D A5 03 64 45 4B 01 0E 25 03 01 15 05 46 01 03  // =..dEK..%....F..
    B6C0: 05 01 00 00 01 00 4B E5 01 80 44 AD 01 27 04 46  // ......K...D..'.F
    B6D0: 00 00 3E 05 41 00 00 00 00 44 BF 01 03 04 40 00  // ..>.A....D....@.
    B6E0: 00 03 02 00 41 27 02 40 41 03 02 40 00 3E 05 41  // ....A'.@A..@.>.A
    B6F0: 00 00 00 00 49 6D 01 7C 05 00 00 00 01 00 7E 04  // ....Im.|......~.
    B700: 40 00 00 7C 04 40 00 00 7E 02 40 00 03 02 01 40  // @..|.@..~.@....@
    B710: 3E 05 01 33 F3 00 00 48 AD 01 03 05 01 00 00 01  // >..3...H........
    B720: 00 27 04 46 00 00 7C 02 01 41 7E 04 40 00 00 03  // .'.F..|..A~.@...
    B730: 0A 00 40 27 04 46 00 00 03 8A 00 40 56 18 01 4B  // ..@'.F.....@V..K
    B740: E5 01 80 49 4A 02 7C 02 02 00 7E 05 40 A0 86 01  // ...IJ.|...~.@...
    B750: 00 03 01 41 03 09 05 41 03 00 00 00 6F 02 40 41  // ...A...A....o.@A
    B760: 7C 05 40 4E 0C 00 00 7E 04 40 00 00 27 05 40 05  // |.@N...~.@..'.@.
    B770: 00 00 00 3E 05 40 00 00 00 00 49 0D 02 03 25 40  // ...>.@....I...%@
    B780: 01 03 8A 01 40 21 05 40 05 00 00 00 7C 04 40 00  // ....@!.@....|.@.
    B790: 00 7E 05 40 4E 0C 00 00 03 01 41 03 09 05 41 03  // .~.@N.....A...A.
    B7A0: 00 00 00 75 02 40 41 3D A5 01 00 44 42 02 1B 05  // ...u.@A=...DB...
    B7B0: 40 01 2D 02 00 40 03 02 02 00 33 02 02 40 66 FF  // @.-..@....3..@f.
    B7C0: 2D 0D 42 3D 05 56 00 40 03 21 40 01 33 25 40 14  // -.B=.V.@.!@.3%@.
    B7D0: 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 4A 65 20  // .%@.-.B@..H..Je 
    B7E0: 56 10 44 99 03 03 39 41 01 09 0D 41 30 00 1B 0D  // V.D...9A...A0...
    B7F0: 41 04 3C 22 9C 56 41 49 BD 02 3C 21 61 56 03 49  // A.<".VAI..<!aV.I
    B800: BD 02 3C 29 63 56 03 49 BD 02 03 20 41 9D 56 09  // ..<)cV.I... A.V.
    B810: 25 41 E0 3E 29 41 01 49 BD 02 4B E5 01 40 49 91  // %A.>)A.I..K..@I.
    B820: 03 3C 02 5E 56 00 49 BD 02 3C 0A 60 56 01 44 C1  // .<.^V.I..<.`V.D.
    B830: 02 0E E5 01 01 3A 00 00 4B E5 01 01 44 07 05 4B  // .....:..K...D..K
    B840: E5 01 02 49 DE 02 3D 25 02 05 46 DE 02 55 28 02  // ...I..=%..F..U(.
    B850: 52 23 56 00 40 03 21 40 01 33 25 40 14 03 0A 48  // R#V.@.!@.3%@...H
    B860: 40 07 25 60 01 FE 66 FF 2D 0D 42 3D 05 56 00 40  // @.%`..f.-.B=.V.@
    B870: 03 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42 40  // .!@.3%@..%@.-.B@
    B880: 03 0C 48 00 00 07 65 61 56 FE 54 00 5F 56 54 00  // ..H...eaV.T._VT.
    B890: 60 56 07 65 20 56 EF 4A 65 20 56 20 49 23 03 07  // `V.e V.Je V I#..
    B8A0: 65 30 56 EF 4A 65 30 56 20 49 30 03 3D 05 00 00  // e0V.Je0V I0.=...
    B8B0: 00 00 00 49 99 03 4A A5 FF 55 80 44 6D 03 56 00  // ...I..J..U.Dm.V.
    B8C0: 41 5C 25 1E 56 F8 06 51 02 4A 65 1E 56 01 44 55  // A\%.V..Q.Je.V.DU
    B8D0: 03 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04 45 4D  // .-.A.-.H..>.A.EM
    B8E0: 03 56 08 48 03 21 41 01 33 25 41 14 03 22 43 41  // .V.H.!A.3%A.."CA
    B8F0: 07 E2 FF 55 45 4A E5 FF 55 3F 49 2F 05 07 A5 58  // ...UEJ..U?I/...X
    B900: 62 BF 43 2F 05 01 02 5E 56 00 43 C3 04 01 05 19  // b.C/...^V.C.....
    B910: 56 80 88 01 00 3D A5 01 00 49 BA 03 3D 05 00 E0  // V....=...I..=...
    B920: 3B 66 00 45 BA 03 07 25 1A 56 FE 43 DA 03 0D 25  // ;f.E...%.V.C...%
    B930: 1A 56 01 3D A5 01 02 49 DA 03 4B E5 01 08 44 DA  // .V.=...I..K...D.
    B940: 03 01 05 E1 56 80 88 01 00 0D 25 E2 56 01 0D 25  // ....V.....%.V..%
    B950: 9D 56 01 03 39 40 01 09 0D 40 30 00 1B 0D 40 04  // .V..9@...@0...@.
    B960: 01 22 9C 56 40 0D 65 9D 56 80 5C 79 9D 56 FB 03  // .".V@.e.V.\y.V..
    B970: 56 00 40 03 31 40 03 03 01 41 03 09 05 41 03 00  // V.@.1@...A...A..
    B980: 00 00 75 02 40 41 03 05 41 A1 83 00 00 3E 25 40  // ..u.@A..A....>%@
    B990: 64 48 35 04 03 05 41 24 83 00 00 3E 25 40 30 48  // dH5...A$...>%@0H
    B9A0: 35 04 03 05 41 A3 76 00 00 01 0A 62 56 41 01 E2  // 5...A.v....bVA..
    B9B0: 64 56 40 0D 25 64 56 02 01 21 61 56 03 01 A5 61  // dV@.%dV..!aV...a
    B9C0: 56 E8 01 02 5E 56 00 54 00 5F 56 01 02 60 56 01  // V...^V.T._V..`V.
    B9D0: 4B E5 01 08 44 6B 04 07 65 9D 56 FE 43 70 04 0D  // K...Dk..e.V.Cp..
    B9E0: 65 9D 56 01 5C 29 9D 56 1F 01 01 8D 69 56 20 03  // e.V.\).V....iV .
    B9F0: 01 29 63 56 03 07 65 9D 56 7F 5C 65 20 56 E3 04  // .)cV..e.V.\e V..
    BA00: 4A 65 20 56 20 49 8C 04 0D 65 20 56 10 4A 65 20  // Je V I...e V.Je 
    BA10: 56 20 44 99 04 4B E5 01 02 49 C3 04 5C 65 30 56  // V D..K...I..\e0V
    BA20: E3 04 4A 65 30 56 20 49 AE 04 0D 65 30 56 10 4A  // ..Je0V I...e0V.J
    BA30: 65 30 56 20 44 BB 04 4B E5 01 80 49 D6 04 01 02  // e0V D..K...I....
    BA40: 5F 56 02 0D 65 61 56 01 51 0A 0D 65 9D 56 40 51  // _V..eaV.Q..e.V@Q
    BA50: 0A 4A 65 9D 56 20 44 DD 04 07 65 9D 56 BF 56 00  // .Je.V D...e.V.V.
    BA60: 40 03 21 40 01 33 25 40 14 03 0A 48 40 0D 25 60  // @.!@.3%@...H@.%`
    BA70: 01 01 51 0A 4B E5 01 02 49 2F 05 3A 00 00 3D 25  // ..Q.K...I/.:..=%
    BA80: 02 05 46 2F 05 02 25 03 02 02 E1 03 02 02 61 03  // ..F/..%.......a.
    BA90: 01 02 B9 03 01 08 A5 03 04 0E B1 03 02 02 01 02  // ................
    BAA0: 00 52 2E 3A 00 00 5B 02 25 01 0B 43 07 05 7A 20  // .R.:..[.%..C..z 
    BAB0: 00 00 00 C8 00 90 01 58 02 20 03 E8 03 B0 1E 04  // .......X. ......
    BAC0: 00 04 40 42 0F 00 04 B0 1E 04 00 00 40 42 0F 00  // ..@B........@B..
    BAD0: 04 00 AC 00 02 01 00 00 37 00 00 3D 65 00 01 44  // ........7..=e..D
    BAE0: AB 00 56 08 48 03 21 48 00 01 0D 88 35 02 00 52  // ..V.H.!H....5..R
    BAF0: 14 01 05 93 3A 00 00 40 00 01 25 CF 3B 02 01 A5  // ....:..@..%.;...
    BB00: E6 3A C0 01 0D 96 3A 45 01 5C 05 F4 3A F0 FF FF  // .:....:E.\..:...
    BB10: FF 02 00 00 00 07 25 1D 3B FB 0D 25 83 3A 01 5C  // ......%.;..%.:.\
    BB20: 05 3C 3B 88 08 F8 FF 00 00 08 00 01 05 41 3B 03  // .<;..........A;.
    BB30: 80 FF FF 01 25 42 3B 11 01 0D 3D 3B FF 7F 01 05  // ....%B;...=;....
    BB40: 3E 3B FF 7F 00 00 01 05 C6 3B 07 40 00 00 0D A5  // >;.......;.@....
    BB50: C9 3B 01 01 05 3B 3B 00 08 00 04 01 0D 99 3B 04  // .;...;;.......;.
    BB60: 00 5C 05 1A 3B FF FF FD FF 00 00 02 00 5C 05 DB  // .\..;........\..
    BB70: 3A 00 E0 FF FF 04 14 00 00 3A 00 00 5B 5B 31 01  // :........:..[[1.
    BB80: 02 01 00 04 37 00 00 3D 65 00 02 44 EE 00 3D 65  // ....7..=e..D..=e
    BB90: 00 07 44 1E 00 02 01 01 00 52 17 5B 5C 05 84 35  // ..D......R.[\..5
    BBA0: FF 00 FE 9F 04 2C 01 20 01 05 A2 35 00 0F 00 20  // .....,. ...5... 
    BBB0: 01 05 3B 01 1B 02 12 00 01 05 30 01 78 69 10 00  // ..;.......0.xi..
    BBC0: 01 05 87 35 AD 90 02 00 01 8D 7D 39 1B 00 01 25  // ...5......}9...%
    BBD0: 7C 39 01 01 05 31 01 3C 00 01 08 5C 65 D4 00 FC  // |9...1.<...\e...
    BBE0: 02 01 05 6D 55 00 00 00 00 01 05 42 55 00 00 00  // ...mU......BU...
    BBF0: 00 01 05 78 55 0F 00 00 00 01 05 68 4A 00 00 00  // ...xU......hJ...
    BC00: 30 01 25 32 01 00 5C 05 3E 35 0F FF FF FF 70 00  // 0.%2..\.>5....p.
    BC10: 00 00 01 05 29 35 08 00 00 00 5C 05 44 35 00 C0  // ....)5....\.D5..
    BC20: CE 60 08 60 30 14 55 00 01 52 17 52 23 2C 25 01  // .`.`0.U..R.R#,%.
    BC30: 01 3D 25 01 06 45 AB 00 55 00 01 52 4E 02 25 01  // .=%..E..U..RN.%.
    BC40: 07 52 33 02 05 01 00 07 00 00 52 4D 2C 25 01 01  // .R3.......RM,%..
    BC50: 3D 25 01 06 45 CC 00 66 16 03 0C 41 04 00 4C 0D  // =%..E..f...A..L.
    BC60: 41 02 00 44 ED 00 0D A5 4C 00 02 5B 02 05 01 01  // A..D....L..[....
    BC70: 00 00 00 52 06 03 01 40 01 33 05 40 01 00 00 00  // ...R...@.3.@....
    BC80: 01 05 EB 35 00 00 00 00 01 02 ED 35 40 1A 0D 01  // ...5.......5@...
    BC90: 04 14 05 01 10 2C 05 01 00 F4 FF F3 01 01 E6 35  // .....,.........5
    BCA0: 01 01 25 C9 00 F4 01 05 C4 00 00 00 00 00 5B 00  // ..%...........[.
    BCB0: 0E 00 02 01 00 00 52 3E 02 04 00 00 00 5B 5C 01  // ......R>.....[\.
    BCC0: 01 01 00 00 37 00 00 02 05 00 00 00 02 00 52 29  // ....7.........R)
    BCD0: 03 05 40 40 7E 05 00 27 01 40 00 01 05 00 00 15  // ..@@~..'.@......
    BCE0: 6C 01 00 01 02 01 00 40 50 02 02 05 00 50 C3 00  // l......@P....P..
    BCF0: 00 52 3C 01 05 00 00 41 6C 01 00 01 39 01 00 00  // .R<....Al...9...
    BD00: 02 05 00 00 77 01 00 52 3C 01 05 00 00 4B 6C 01  // ....w..R<....Kl.
    BD10: 00 01 39 01 00 00 02 05 00 50 C3 00 00 52 3C 01  // ..9......P...R<.
    BD20: 05 00 00 55 6C 01 00 01 39 01 00 00 02 05 00 50  // ...Ul...9......P
    BD30: C3 00 00 52 3C 01 05 00 00 5F 6C 01 00 01 39 01  // ...R<...._l...9.
    BD40: 00 00 02 05 00 60 EA 00 00 52 3C 01 05 00 00 69  // .....`...R<....i
    BD50: 6C 01 00 01 39 01 00 00 02 05 00 40 9C 00 00 52  // l...9......@...R
    BD60: 3C 01 05 00 00 91 6C 01 00 01 39 01 00 00 01 05  // <.....l...9.....
    BD70: 00 00 83 68 01 00 01 25 01 00 00 01 05 00 00 3D  // ...h...%.......=
    BD80: 7E 01 00 5C A5 01 00 FE 00 01 05 00 00 84 68 01  // ~..\..........h.
    BD90: 00 01 05 01 00 10 00 00 00 01 05 00 00 06 7F 01  // ................
    BDA0: 00 01 05 01 00 00 00 25 15 01 05 00 00 07 7F 01  // .......%........
    BDB0: 00 01 05 01 00 00 00 FF 00 01 05 00 00 08 7F 01  // ................
    BDC0: 00 01 05 01 00 17 03 10 00 01 05 00 00 09 7F 01  // ................
    BDD0: 00 01 05 01 00 07 00 00 00 01 05 00 00 0C 7F 01  // ................
    BDE0: 00 01 05 01 00 10 00 00 00 01 05 00 00 0D 7F 01  // ................
    BDF0: 00 01 05 01 00 00 00 00 20 01 05 00 00 0E 7F 01  // ........ .......
    BE00: 00 01 05 01 00 50 92 82 01 01 05 00 00 30 6B 01  // .....P.......0k.
    BE10: 00 01 05 01 00 1B 04 00 00 5B 07 00 01 01 00 00  // .........[......
    BE20: 5B 00 EE 00 01 01 00 04 37 00 00 03 F9 46 00 08  // [.......7....F..
    BE30: E5 00 7F 03 0A 41 42 2D 0D 41 04 00 03 0C 46 00  // .....AB-.A....F.
    BE40: 00 3E 0D 46 00 00 44 ED 00 15 0D 46 02 03 0A 42  // .>.F..D....F...B
    BE50: 41 2D 0A 42 46 56 30 46 03 04 40 00 00 3E 05 40  // A-.BFV0F..@..>.@
    BE60: 00 00 00 00 44 53 00 3D FA 00 40 44 5F 00 3E A5  // ....DS.=..@D_.>.
    BE70: 46 01 49 6A 00 33 0A 42 46 33 0D 42 04 00 43 76  // F.Ij.3.BF3.B..Cv
    BE80: 00 03 A5 46 01 3D 02 00 40 47 76 00 2D 0A 42 46  // ...F.=..@Gv.-.BF
    BE90: 2D 0D 42 04 00 43 36 00 4C E5 46 80 44 7E 00 5B  // -.B..C6.L.F.D~.[
    BEA0: 2D 0D 42 04 00 03 8A 46 42 03 0A 42 41 03 04 40  // -.B....FB..BA..@
    BEB0: 00 00 03 1A 42 46 4C E5 40 01 49 B8 00 3E 05 40  // ....BFL.@.I..>.@
    BEC0: 00 5C 01 00 48 AA 00 0F 0D 40 00 04 01 02 00 00  // .\..H....@......
    BED0: 40 01 04 01 00 00 00 43 D6 00 56 38 40 01 05 00  // @......C..V8@...
    BEE0: 00 88 5C 01 00 01 02 01 00 40 01 05 00 00 89 5C  // ..\......@.....\
    BEF0: 01 00 01 04 01 00 00 00 33 0D 46 04 00 2D 8D 46  // ........3.F..-.F
    BF00: 04 00 2D 0D 41 04 00 3E 0D 46 00 00 49 87 00 5B  // ..-.A..>.F..I..[
    BF10: 8E 00 01 02 00 04 66 FF 56 08 47 2D 0D 42 5C 00  // ......f.V.G-.B\.
    BF20: 03 21 47 00 09 25 47 F0 42 22 47 63 00 43 00 63  // .!G..%G.B"Gc.C.c
    BF30: 80 36 00 63 60 3E 00 63 20 2E 00 5A 5A 5B 2D 0D  // .6.c`>.c ..ZZ[-.
    BF40: 42 26 00 43 43 00 2D 0D 42 0C 00 43 43 00 2D 0D  // B&.CC.-.B..CC.-.
    BF50: 42 18 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D  // B...!G..%G.-.BG-
    BF60: 0A 42 47 03 0C 48 00 00 5B 7A 32 00 00 00 00 02  // .BG..H..[z2.....
    BF70: 00 04 00 06 00 08 00 0A 00 00 02 00 2C 00 2D 00  // ............,.-.
    BF80: 2E 00 2F 00 00 00 00 01 00 02 00 03 00 04 00 05  // ../.............
    BF90: 00 06 00 00 C8 00 90 01 58 02 20 03 E8 03 78 00  // ........X. ...x.
    BFA0: 01 01 00 00 37 00 00 52 14 0D A5 6A 3B 01 54 20  // ....7..R...j;.T 
    BFB0: 6C 3B 07 25 5E 3B FE 54 20 5F 3B 42 29 00 63 00  // l;.%^;.T _;B).c.
    BFC0: 31 00 63 01 39 00 63 02 4D 00 5A 5A 43 70 00 01  // 1.c.9.c.M.ZZCp..
    BFD0: 25 5F 3B 02 43 3E 00 01 25 5F 3B 01 54 20 5C 3B  // %_;.C>..%_;.T \;
    BFE0: 54 00 5D 3B 54 00 61 3B 43 70 00 01 0D 5D 3B 01  // T.];T.a;Cp...];.
    BFF0: 01 01 05 61 3B 01 00 01 00 0D 65 62 3B 01 0D 65  // ...a;.....eb;..e
    C000: 65 3B 01 01 0D 6B 3B 10 10 01 25 5C 3B 01 54 30  // e;...k;...%\;.T0
    C010: 6A 3B 3A 00 00 5B 74 00 01 01 00 00 37 00 00 4A  // j;:..[t.....7..J
    C020: A5 4E 00 01 44 15 00 02 65 00 01 0E 25 00 80 52  // .N..D...e...%..R
    C030: 14 03 00 46 CC 00 08 25 00 0F 52 14 54 30 B0 3B  // ...F...%..R.T0.;
    C040: 3C 69 B0 3B 00 44 65 00 01 69 B0 3B 00 3D 65 00  // <i.;.De..i.;.=e.
    C050: 00 44 65 00 4A A5 AF 3B 01 44 65 00 4C 25 46 01  // .De.J..;.De.L%F.
    C060: 44 69 00 4A 25 B6 3B 01 49 4D 00 4A 25 B6 3B 01  // Di.J%.;.IM.J%.;.
    C070: 44 55 00 4A 25 B6 3B 01 49 5D 00 3A 00 00 5B 4A  // DU.J%.;.I].:..[J
    C080: 25 B0 3B 01 44 69 00 43 65 00 3E 00 01 01 00 00  // %.;.Di.Ce.>.....
    C090: 37 00 00 52 14 3D 65 00 01 44 30 00 0D 65 AF 3B  // 7..R.=e..D0..e.;
    C0A0: 03 07 25 AF 3B FE 4A A5 AF 3B 01 49 1C 00 07 E5  // ..%.;.J..;.I....
    C0B0: 1A 3B 7F 54 20 BC 3B 43 3A 00 0D E5 1A 3B 80 0D  // .;.T .;C:....;..
    C0C0: 25 AF 3B 01 3A 00 00 5B 2C 00 02 01 00 00 37 00  // %.;.:..[,.....7.
    C0D0: 00 3C 21 FC 00 00 49 19 00 0D A5 C0 00 01 43 26  // .<!...I.......C&
    C0E0: 00 3C 61 FC 00 00 49 26 00 0D A5 C0 00 02 0D A5  // .<a...I&........
    C0F0: C1 00 01 5B CF 01 03 01 00 00 37 00 00 01 05 00  // ...[......7.....
    C100: 00 11 6C 01 00 03 05 40 8C 0A 00 00 3C 05 01 00  // ..l....@....<...
    C110: 00 00 00 00 44 2A 00 03 05 40 10 27 00 00 03 02  // ....D*...@.'....
    C120: 46 40 3D A5 00 02 49 3A 00 02 02 00 46 5B 03 05  // F@=...I:....F[..
    C130: 40 15 6C 01 00 03 05 41 00 6C 01 00 3D 25 00 00  // @.l....A.l..=%..
    C140: 44 72 00 03 05 40 15 6E 01 00 03 05 41 00 6E 01  // Dr...@.n....A.n.
    C150: 00 3D 25 00 01 44 72 00 03 05 40 15 7E 01 00 03  // .=%..Dr...@.~...
    C160: 05 41 00 7E 01 00 01 02 00 00 40 03 88 40 01 00  // .A.~......@..@..
    C170: 03 18 40 01 00 09 8D 40 FF 01 3E 8D 40 00 00 49  // ..@....@..>.@..I
    C180: C8 00 01 02 00 00 41 03 00 40 01 00 09 05 40 FF  // ......A..@....@.
    C190: 01 00 00 3E 0D 40 00 00 49 B1 00 03 05 46 44 6E  // ...>.@..I....FDn
    C1A0: 02 00 43 EB 00 21 02 40 46 03 00 41 01 00 09 05  // ..C..!.@F..A....
    C1B0: 41 00 1E 00 00 1B 05 41 09 43 E3 00 7C 02 40 46  // A......A.C..|.@F
    C1C0: 7E 05 40 00 00 01 00 03 00 41 01 00 09 05 41 00  // ~.@......A....A.
    C1D0: F0 00 00 1B 05 41 0C 75 02 40 41 03 02 46 40 3D  // .....A.u.@A..F@=
    C1E0: A5 00 01 49 F7 00 02 02 00 46 5B 3D E5 00 00 49  // ...I.....F[=...I
    C1F0: 59 01 56 00 40 03 29 40 00 21 0D 40 0A 00 03 05  // Y.V.@.)@.!.@....
    C200: 41 4A 6C 01 00 3D 25 00 00 44 2D 01 03 05 41 4A  // AJl..=%..D-...AJ
    C210: 6E 01 00 3D 25 00 01 44 2D 01 03 05 41 4A 7E 01  // n..=%..D-...AJ~.
    C220: 00 2D 02 40 41 01 02 00 00 40 03 00 41 01 00 09  // .-.@A....@..A...
    C230: 05 41 00 00 F0 07 1B 05 41 14 02 E2 00 41 3D E5  // .A......A....A=.
    C240: 00 00 49 59 01 02 05 00 10 27 00 00 5B 56 00 40  // ..IY.....'..[V.@
    C250: 03 39 40 00 55 38 00 66 FF 2D 0D 42 A7 01 3E 0C  // .9@.U8.f.-.B..>.
    C260: 40 02 00 47 7A 01 2D 0D 42 08 00 43 6A 01 33 0C  // @..Gz.-.B..Cj.3.
    C270: 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 03 09 42  // @..!.@..-.@....B
    C280: 00 55 00 00 02 0A 00 40 7C 05 46 40 42 0F 00 7E  // .U.....@|.F@B..~
    C290: 01 40 00 02 02 00 40 5B 7A 28 00 FF FF 07 00 00  // .@....@[z(......
    C2A0: 00 00 00 C8 00 3F 00 08 00 19 00 40 06 5F 00 40  // .....?.....@._.@
    C2B0: 00 32 00 80 0C 7E 00 60 00 64 00 00 32 7F 00 7F  // .2...~.`.d..2...
    C2C0: 00 64 00 00 C6 00 01 03 04 00 37 00 00 56 00 46  // .d........7..V.F
    C2D0: 56 00 00 03 21 00 00 55 20 00 3D 65 00 03 44 2C  // V...!..U .=e..D,
    C2E0: 00 3D 65 00 0D 46 BB 00 02 29 00 00 32 25 00 08  // .=e..F...)..2%..
    C2F0: 0E 25 00 60 52 14 5C 22 3E 4D F8 00 02 22 00 00  // .%.`R.\">M..."..
    C300: 52 14 03 08 41 DA 3A 09 0D 41 03 00 66 FF 2D 0D  // R...A.:..A..f.-.
    C310: 42 C2 00 2D 0A 42 41 03 24 00 00 00 3D E2 00 00  // B..-.BA.$...=...
    C320: 48 A7 00 3E 25 00 04 44 76 00 03 22 46 00 33 25  // H..>%..Dv.."F.3%
    C330: 46 01 15 25 46 04 0F 25 46 01 33 39 00 00 3E 25  // F..%F..%F.39..>%
    C340: 00 01 44 93 00 3E 25 00 02 44 8C 00 03 25 46 21  // ..D..>%..D...%F!
    C350: 03 65 00 2F 43 97 00 03 65 00 13 03 79 46 00 33  // .e./C...e...yF.3
    C360: 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01 02 07  // eF..-F..eF.R....
    C370: 3C 46 01 52 06 3C 00 54 00 0E 3C 54 00 05 3C 3A  // <F.R.<.T..<T..<:
    C380: 00 00 5B 7A 04 00 03 02 01 04 A8 01 01 04 00 08  // ..[z............
    C390: 37 00 00 3D 65 02 01 49 3D 01 4B A5 02 03 49 5D  // 7..=e..I=.K...I]
    C3A0: 00 02 05 00 00 03 00 05 02 05 01 00 05 02 00 3C  // ...............<
    C3B0: 21 FC 00 02 49 57 00 01 8D C0 00 00 02 51 02 01  // !...IW.......Q..
    C3C0: 05 C6 00 00 00 10 00 01 05 C8 00 00 00 50 00 01  // .............P..
    C3D0: 0D C3 00 02 00 54 20 CA 00 01 05 C2 00 00 01 00  // .....T .........
    C3E0: 00 56 20 40 43 83 00 0E 25 02 80 52 14 54 00 CC  // .V @C...%..R.T..
    C3F0: 00 56 08 48 08 25 02 07 0D 25 CA 00 01 01 25 C2  // .V.H.%...%....%.
    C400: 00 01 54 00 C6 00 54 00 C8 00 56 20 40 07 65 53  // ..T...T...V @.eS
    C410: 00 FF 3D A5 01 01 47 94 00 0D 65 53 00 00 03 A0  // ..=...G...eS....
    C420: 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00 46 C6  // @....F....AF-.F.
    C430: 00 2D 00 41 C8 00 52 14 01 32 21 3A 40 01 32 22  // .-.A..R..2!:@.2"
    C440: 3A 40 01 02 1E 3A 46 01 02 1F 3A 41 54 30 DB 3A  // :@...:F...:AT0.:
    C450: 54 00 6F 3B 01 01 70 3B 00 54 08 23 3A 54 08 24  // T.o;..p;.T.#:T.$
    C460: 3A 54 08 25 3A 54 08 26 3A 01 09 28 3A 00 01 19  // :T.%:T.&:..(:...
    C470: 27 3A 00 5C 19 1B 3A FC F8 01 07 A5 1B 46 0F 07  // ':.\..:......F..
    C480: 8D 1B 3A 0F FE 01 09 20 3A 01 01 25 1A 3A 01 0D  // ..:.... :..%.:..
    C490: 25 C6 3B 04 5C 62 C6 3B FE 40 54 20 3A 3A 54 20  // %.;.\b.;.@T ::T 
    C4A0: 41 3A 54 00 D9 3B 54 00 D7 3B 54 00 DB 3B 4B A5  // A:T..;T..;T..;K.
    C4B0: 02 03 49 39 01 0E 25 02 80 52 14 01 05 CC 00 01  // ..I9..%..R......
    C4C0: 00 00 00 3A 00 00 5B 52 14 3D 65 02 00 49 5A 01  // ...:..[R.=e..IZ.
    C4D0: 54 20 1A 3A 3A 00 00 3C 21 FC 00 02 49 59 01 54  // T .::..<!...IY.T
    C4E0: 08 C1 00 5B 3D 65 02 10 44 67 01 01 09 20 3A 01  // ...[=e..Dg... :.
    C4F0: 5B 03 00 40 1E 3A 09 05 40 00 00 00 FF 2D 01 40  // [..@.:..@....-.@
    C500: 00 09 0D 40 00 F0 01 02 1E 3A 40 08 0D 00 FF 0F  // ...@.....:@.....
    C510: 56 00 41 03 31 41 01 74 0A 00 41 2C 09 01 00 08  // V.A.1A.t..A,....
    C520: 25 00 FC 14 05 00 10 01 01 6F 3B 00 01 09 27 3A  // %........o;...':
    C530: 01 5B 49 00 01 01 00 00 37 00 00 52 14 07 65 C9  // .[I.....7..R..e.
    C540: 3B FE 3D 65 00 01 44 37 00 54 30 71 3A 54 30 2A  // ;.=e..D7.T0q:T0*
    C550: 3A 54 20 C8 3B 54 20 CE 3B 54 30 CE 3B 4A 25 C9  // :T .;T .;T0.;J%.
    C560: 3B 01 49 2B 00 3A 00 00 5B 0D 25 CE 3B 01 54 00  // ;.I+.:..[.%.;.T.
    C570: B1 3B 07 25 DA 3A F4 3A 00 00 5B 00 95 00 01 03  // .;.%.:.:..[.....
    C580: 00 00 37 00 00 52 14 0D 25 1D 3B 04 54 20 7E 3A  // ..7..R..%.;.T ~:
    C590: 54 00 86 3A 3D 65 00 01 49 56 00 0D 25 84 3A 07  // T..:=e..IV..%.:.
    C5A0: 01 25 85 3A 01 51 01 4A 25 85 3A 02 44 29 00 54  // .%.:.Q.J%.:.D).T
    C5B0: 20 85 3A 54 08 87 3A 54 08 88 3A 54 08 89 3A 01  //  .:T..:T..:T..:.
    C5C0: 0D 8A 3A FF FF 01 0D 8B 3A FF FF 01 0D 8C 3A FF  // ..:.....:.....:.
    C5D0: FF 5B 01 31 7F 3A 00 56 00 41 03 19 41 01 3B 02  // .[.1.:.V.A..A.;.
    C5E0: 41 3D 65 00 02 49 78 00 03 00 40 82 3A 04 02 00  // A=e..Ix...@.:...
    C5F0: 40 43 81 00 03 03 40 00 01 02 82 3A 40 2D 05 46  // @C....@....:@-.F
    C600: 04 00 00 00 2D 8D 41 01 00 3E 89 41 01 45 65 00  // ....-.A..>.A.Ee.
    C610: 5B 00 1B 00 01 01 00 00 02 05 00 01 00 00 00 52  // [..............R
    C620: 29 26 05 00 10 27 00 00 02 02 00 40 5B 00 1E 00  // )&...'.....@[...
    C630: 01 01 00 00 37 00 00 02 05 00 02 00 00 00 52 29  // ....7.........R)
    C640: 26 05 00 10 27 00 00 02 02 00 40 5B 53 01 02 03  // &...'.....@[S...
    C650: 00 18 37 00 00 66 FF 2D 0D 42 47 01 55 28 05 2D  // ..7..f.-.BG.U(.-
    C660: 09 42 05 2D 09 42 05 03 0C 48 00 00 03 09 41 03  // .B.-.B...H....A.
    C670: 2D 19 41 03 3E 0D 41 03 00 46 3F 00 5C 05 C6 3B  // -.A.>.A..F?.\..;
    C680: FB 0F F0 FF 00 30 00 00 43 4B 00 5C 05 C6 3B FF  // .....0..CK.\..;.
    C690: 0F F0 FF 04 40 00 00 03 09 41 00 2D 19 41 00 33  // ....@....A.-.A.3
    C6A0: 0D 41 01 00 01 0A 93 3B 41 54 08 95 3B 01 99 95  // .A.....;AT..;...
    C6B0: 3B 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41  // ;...A.3.A.V.A..A
    C6C0: 04 33 1A 41 41 01 8A 94 3B 41 03 19 41 00 33 09  // .3.AA...;A..A.3.
    C6D0: 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 99  // A.-.AA-.A.K%..D.
    C6E0: 00 2D 09 41 00 01 0A 94 3B 41 03 21 41 04 09 25  // .-.A....;A.!A..%
    C6F0: 41 02 1B 25 41 01 01 22 96 3B 41 54 00 71 3B 01  // A..%A..".;AT.q;.
    C700: 31 71 3B 04 01 B1 71 3B 04 03 09 41 01 2D 19 41  // 1q;...q;...A.-.A
    C710: 01 33 0D 41 01 00 01 0A 9A 3B 41 54 08 A1 3B 01  // .3.A.....;AT..;.
    C720: 99 A1 3B 03 03 19 41 01 33 09 41 03 56 18 41 03  // ..;...A.3.A.V.A.
    C730: B9 41 04 33 1A 41 41 01 8A A0 3B 41 03 19 41 01  // .A.3.AA...;A..A.
    C740: 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04 20  // 3.A.-.AA-.A.K%. 
    C750: 44 0B 01 2D 09 41 01 01 0A A0 3B 41 03 21 41 04  // D..-.A....;A.!A.
    C760: 09 25 41 04 1B 25 41 02 01 22 A2 3B 41 54 00 72  // .%A..%A..".;AT.r
    C770: 3B 01 39 72 3B 04 01 B9 72 3B 04 03 21 41 04 09  // ;.9r;...r;..!A..
    C780: 25 41 80 1B 25 41 07 01 22 B1 3B 41 3A 00 00 5B  // %A..%A..".;A:..[
    C790: 7A 0C 00 00 00 00 02 00 04 00 06 00 08 00 0A 00  // z...............
    C7A0: 54 00 01 01 00 04 37 00 00 66 1C 56 00 40 03 64  // T.....7..f.V.@.d
    C7B0: 40 14 00 2D 0D 42 18 00 54 30 50 00 3D A4 00 16  // @..-.B..T0P.=...
    C7C0: 00 49 3B 00 3D 25 00 00 44 4E 00 3D 24 00 1C 00  // .I;.=%..DN.=$...
    C7D0: 49 3B 00 3D 64 00 1A 00 44 4E 00 2D 0C 42 14 00  // I;.=d...DN.-.B..
    C7E0: 2D 25 40 01 3E 62 40 40 49 1C 00 56 20 40 01 A2  // -%@.>b@@I..V @..
    C7F0: 50 00 40 5B 4D 00 01 01 00 00 37 00 00 55 00 00  // P.@[M.....7..U..
    C800: 01 05 00 00 4F 5C 01 00 03 00 41 01 00 09 E5 41  // ....O\....A....A
    C810: 0F 3E E5 41 01 44 36 00 3E E5 41 02 44 32 00 03  // .>.A.D6.>.A.D2..
    C820: E5 41 06 43 36 00 03 E5 41 0F 09 A5 41 C0 1B 35  // .A.C6...A...A..5
    C830: 41 02 2D A5 41 15 02 3A 00 41 02 72 00 41 52 34  // A.-.A..:.A.r.AR4
    C840: 5B 00 21 01 01 01 00 00 37 00 00 52 3E 01 05 00  // [.!.....7..R>...
    C850: 00 00 44 01 00 01 05 01 00 01 00 00 00 01 05 00  // ..D.............
    C860: 00 08 44 01 00 01 05 01 00 FE FF FF FF 01 05 00  // ..D.............
    C870: 00 1C 44 01 00 5C 65 01 00 0F 10 01 05 00 00 32  // ..D..\e........2
    C880: 44 01 00 01 05 01 00 01 00 00 00 01 05 00 00 33  // D..............3
    C890: 44 01 00 01 05 01 00 01 00 00 00 01 05 00 00 34  // D..............4
    C8A0: 44 01 00 01 05 01 00 01 00 00 00 01 05 00 00 35  // D..............5
    C8B0: 44 01 00 01 05 01 00 01 00 00 00 01 05 00 00 36  // D..............6
    C8C0: 44 01 00 01 05 01 00 01 00 00 00 01 05 00 00 38  // D..............8
    C8D0: 44 01 00 01 05 01 00 09 00 00 00 03 24 40 1A 00  // D...........$@..
    C8E0: 3E 25 40 45 49 E3 00 01 05 00 00 0C 44 01 00 01  // >%@EI.......D...
    C8F0: 05 01 00 0C 40 20 00 01 05 00 00 10 44 01 00 01  // ....@ ......D...
    C900: 05 01 00 87 53 06 24 01 05 00 00 14 44 01 00 01  // ....S.$.....D...
    C910: 05 01 00 53 C7 4D FF 01 05 00 00 47 44 01 00 0D  // ...S.M.....GD...
    C920: 25 01 00 10 5B 01 05 00 00 0C 44 01 00 01 05 01  // %...[.....D.....
    C930: 00 08 40 10 00 01 05 00 00 10 44 01 00 01 05 01  // ..@.......D.....
    C940: 00 63 54 0D 13 01 05 00 00 14 44 01 00 01 05 01  // .cT.......D.....
    C950: 00 53 BA 4C FF 01 05 00 00 47 44 01 00 07 25 01  // .S.L.....GD...%.
    C960: 00 EF 5B 00 31 02 01 01 00 00 37 00 00 0D 25 64  // ..[.1.....7...%d
    C970: 4A 08 07 25 8A 4A FE 56 00 41 03 39 41 01 09 25  // J..%.J.V.A.9A..%
    C980: 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15 25 41  // A...@Bf.-.B...%A
    C990: 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07  // .-.BA..A......A.
    C9A0: A5 01 00 FE 54 08 01 00 01 0C 6B 4A 02 00 03 0A  // ....T.....kJ....
    C9B0: 42 40 03 05 40 BC 34 00 00 56 00 41 03 21 41 00  // B@..@.4..V.A.!A.
    C9C0: 27 02 40 41 01 8A 67 4A 40 01 25 67 4A 02 0D 25  // '.@A..gJ@.%gJ..%
    C9D0: 65 4A 02 01 A9 69 4A 01 4B 25 01 01 49 7F 00 54  // eJ...iJ.K%..I..T
    C9E0: 30 69 4A 01 0D 69 4A 00 31 2B A5 69 4A 01 4B 25  // 0iJ..iJ.1+.iJ.K%
    C9F0: 01 02 44 96 00 2B A5 69 4A 01 56 00 41 03 71 41  // ..D..+.iJ.V.A.qA
    CA00: 01 0F E5 41 80 01 02 6A 4A 41 03 69 41 00 2D A5  // ...A...jJA.iA.-.
    CA10: 41 01 01 02 6A 4A 41 4B 25 01 02 44 C6 00 56 28  // A...jJAK%..D..V(
    CA20: 41 2D A5 41 01 01 02 6A 4A 41 4B 25 01 01 44 E7  // A-.A...jJAK%..D.
    CA30: 00 03 71 41 00 2D A5 41 01 01 02 6A 4A 41 03 79  // ..qA.-.A...jJA.y
    CA40: 41 00 2D A5 41 01 01 02 6A 4A 41 0D 25 64 4A 01  // A.-.A...jJA.%dJ.
    CA50: 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40 01 03  // ..A.C...)@..e@..
    CA60: 99 40 00 56 00 41 03 71 41 01 0F 65 41 01 0F E5  // .@.V.A.qA..eA...
    CA70: 41 80 01 02 6A 4A 41 01 A5 69 4A 04 3D 65 01 04  // A...jJA..iJ.=e..
    CA80: 47 28 01 01 0D 69 4A 01 13 43 57 01 01 A2 69 4A  // G(...iJ..CW...iJ
    CA90: 40 01 0D 69 4A 01 31 43 57 01 07 65 69 4A EF 01  // @..iJ.1CW..eiJ..
    CAA0: A5 69 4A 03 3E 25 40 04 46 57 01 01 A2 69 4A 40  // .iJ.>%@.FW...iJ@
    CAB0: 31 A5 69 4A 01 5C 65 69 4A FD 20 0D 25 64 4A 01  // 1.iJ.\eiJ. .%dJ.
    CAC0: 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80 03 AA  // ..A.C....A......
    CAD0: 41 40 01 02 6A 4A 41 3D 65 01 01 49 82 01 02 A8  // A@..jJA=e..I....
    CAE0: 00 6A 4A 43 F9 01 56 00 41 03 1A 41 40 3B 02 41  // .jJC..V.A..A@;.A
    CAF0: 03 28 41 6A 4A 03 68 41 6A 4A 03 A8 41 6A 4A 03  // .(AjJ.hAjJ..AjJ.
    CB00: E8 41 6A 4A 04 02 00 41 56 28 40 2D 8D 40 04 00  // .AjJ...AV(@-.@..
    CB10: 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01 02 65  // >%@.G..3%@.C6..e
    CB20: 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D 41 00  // ....Ad.3.A..>.A.
    CB30: 00 44 F9 01 51 64 4A 25 66 4A 10 44 C3 01 4A 65  // .D..QdJ%fJ.D..Je
    CB40: 66 4A 06 49 F9 01 02 65 00 01 0D 25 65 4A 02 3E  // fJ.I...e...%eJ.>
    CB50: A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D 25 65  // .A.Dc.K%..D...%e
    CB60: 4A 02 01 25 64 4A 02 51 01 54 00 64 4A 54 00 6B  // J..%dJ.Q.T.dJT.k
    CB70: 4A 5B 7A 20 00 A6 55 01 00 AA 55 03 02 AE 55 05  // J[z ..U...U...U.
    CB80: 04 B2 55 42 41 B6 55 49 48 BA 55 4B 4A D6 55 29  // ..UBA.UIH.UKJ.U)
    CB90: 28 BF 55 4D 4C 00 46 00 02 02 00 04 37 00 00 55  // (.UML.F.....7..U
    CBA0: 30 00 32 25 00 01 20 25 00 08 56 08 48 03 22 48  // 0.2%.. %..V.H."H
    CBB0: 40 0D A5 C1 4A 01 02 A0 00 C0 4A 08 A5 00 03 4A  // @...J.....J....J
    CBC0: 25 C0 4A 02 44 3C 00 5C 0D C1 4A FF FE 01 00 43  // %.J.D<.\..J....C
    CBD0: 42 00 0D 0D C1 4A 01 01 3A 00 00 5B 0A 00 01 02  // B....J..:..[....
    CBE0: 00 00 5B 7A 00 00 0A 00 01 01 00 04 55 00 00 5B  // ..[z........U..[
    CBF0: 37 09 01 01 00 00 37 00 00 01 05 00 00 D2 32 01  // 7.....7.......2.
    CC00: 00 01 05 01 00 03 00 00 00 01 05 00 00 F2 32 01  // ..............2.
    CC10: 00 01 05 01 00 04 00 00 00 01 05 00 00 12 33 01  // ..............3.
    CC20: 00 01 05 01 00 05 00 00 00 01 05 00 00 32 33 01  // .............23.
    CC30: 00 01 05 01 00 06 00 00 00 01 05 00 00 4F 5C 01  // .............O\.
    CC40: 00 03 00 41 01 00 09 E5 41 0F 3E E5 41 01 49 3B  // ...A....A.>.A.I;
    CC50: 02 01 05 00 00 88 5C 01 00 01 05 01 00 07 00 00  // ......\.........
    CC60: 00 01 05 00 00 89 5C 01 00 03 00 41 01 00 4C A5  // ......\....A..L.
    CC70: 41 10 44 3B 02 52 3E 03 24 40 1A 00 3E 25 40 45  // A.D;.R>.$@..>%@E
    CC80: 49 9D 00 66 FF 2D 0D 42 3F 02 43 A4 00 66 FF 2D  // I..f.-.B?.C..f.-
    CC90: 0D 42 BB 05 03 04 41 00 00 3E 05 41 00 00 00 00  // .B....A..>.A....
    CCA0: 44 D0 01 26 05 00 30 11 00 00 33 25 40 01 15 05  // D..&..0...3%@...
    CCB0: 40 07 0F 05 40 02 00 00 00 01 05 00 00 0D 5C 01  // @...@.........\.
    CCC0: 00 01 02 01 00 40 01 05 00 00 0B 5C 01 00 01 04  // .....@.....\....
    CCD0: 01 00 00 00 01 05 00 00 0B 5C 01 00 03 00 46 01  // .........\....F.
    CCE0: 00 03 00 46 01 00 03 00 46 01 00 03 00 46 01 00  // ...F....F....F..
    CCF0: 4A 05 01 00 00 00 00 10 44 00 01 01 05 00 00 0D  // J.......D.......
    CD00: 5C 01 00 0F 05 40 00 80 00 00 01 02 01 00 40 01  // \....@........@.
    CD10: 05 00 00 0C 5C 01 00 01 04 01 00 04 00 01 05 00  // ....\...........
    CD20: 00 0D 5C 01 00 5E 25 40 9F 20 01 02 01 00 40 01  // ..\..^%@. ....@.
    CD30: 05 00 00 0C 5C 01 00 01 04 01 00 08 00 01 05 00  // ....\...........
    CD40: 00 0D 5C 01 00 5E 25 40 9F 40 01 02 01 00 40 01  // ..\..^%@.@....@.
    CD50: 05 00 00 0C 5C 01 00 01 04 01 00 0C 00 01 05 00  // ....\...........
    CD60: 00 0D 5C 01 00 5E 25 40 9F 60 01 02 01 00 40 01  // ..\..^%@.`....@.
    CD70: 05 00 00 0C 5C 01 00 01 04 01 00 10 00 01 05 00  // ....\...........
    CD80: 00 0B 5C 01 00 01 04 01 00 14 00 01 05 00 00 0B  // ..\.............
    CD90: 5C 01 00 03 00 46 01 00 03 00 46 01 00 03 00 46  // \....F....F....F
    CDA0: 01 00 03 00 46 01 00 4A 05 01 00 00 00 00 10 44  // ....F..J.......D
    CDB0: B7 01 51 C8 51 C8 51 64 2D 0D 42 18 00 43 A4 00  // ..Q.Q.Qd-.B..C..
    CDC0: 01 05 00 00 0D 5C 01 00 09 0D 40 9F 7F 01 02 01  // .....\....@.....
    CDD0: 00 40 01 05 00 00 0B 5C 01 00 01 05 01 00 01 03  // .@.....\........
    CDE0: 00 00 01 05 00 00 0B 5C 01 00 03 00 46 01 00 03  // .......\....F...
    CDF0: 00 46 01 00 03 00 46 01 00 03 00 46 01 00 4A 05  // .F....F....F..J.
    CE00: 01 00 00 00 00 10 44 0E 02 01 05 00 00 0D 5C 01  // ......D.......\.
    CE10: 00 0F 25 40 03 01 02 01 00 40 01 05 00 00 0D 5C  // ..%@.....@.....\
    CE20: 01 00 09 25 40 FD 01 02 01 00 40 5B 7A F8 06 01  // ...%@.....@[z...
    CE30: 03 B0 0F 08 00 50 00 0E 00 00 00 00 00 00 00 00  // .....P..........
    CE40: 00 00 00 42 09 B0 0F 01 03 B0 0F 40 00 04 04 0C  // ...B.......@....
    CE50: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CE60: 03 B0 0F 40 00 04 02 0C 00 00 00 00 00 00 00 00  // ...@............
    CE70: 00 00 00 42 09 B0 0F 01 03 B0 02 02 08 00 20 0C  // ...B.......... .
    CE80: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 02 01  // ...........B....
    CE90: 03 B0 03 02 08 00 20 0C 00 00 00 00 00 00 00 00  // ...... .........
    CEA0: 00 00 00 42 09 B0 03 01 03 B0 06 02 08 00 20 0C  // ...B.......... .
    CEB0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 06 01  // ...........B....
    CEC0: 03 B0 07 02 08 00 20 0C 00 00 00 00 00 00 00 00  // ...... .........
    CED0: 00 00 00 42 09 B0 07 01 03 B0 0F 00 0C 00 04 0C  // ...B............
    CEE0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CEF0: 03 B0 0F 80 00 02 08 0C 00 00 00 00 00 00 00 00  // ................
    CF00: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 00 80 0C  // ...B............
    CF10: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CF20: 03 B0 0F 00 02 10 80 0C 00 00 00 00 00 00 00 00  // ................
    CF30: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 82 40 00 0C  // ...B.........@..
    CF40: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CF50: 03 B0 0F 00 82 00 08 0C 00 00 00 00 00 00 00 00  // ................
    CF60: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00 80 0C  // ...B........B...
    CF70: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CF80: 03 B0 0F 00 42 00 10 0C 00 00 00 00 00 00 00 00  // ....B...........
    CF90: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00 08 0C  // ...B........B...
    CFA0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CFB0: 03 B0 0F 00 02 10 04 0C 00 00 00 00 00 00 00 00  // ................
    CFC0: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 02 10 02 0C  // ...B............
    CFD0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    CFE0: 03 B0 0F 00 02 10 40 0C 00 00 00 00 00 00 00 00  // ......@.........
    CFF0: 00 00 00 42 09 B0 0F 01 03 B0 02 08 80 00 02 0C  // ...B............
    D000: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 02 01  // ...........B....
    D010: 03 B0 03 08 80 00 02 0C 00 00 00 00 00 00 00 00  // ................
    D020: 00 00 00 42 09 B0 03 01 03 B0 06 08 80 00 02 0C  // ...B............
    D030: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 06 01  // ...........B....
    D040: 03 B0 07 08 80 00 02 0C 00 00 00 00 00 00 00 00  // ................
    D050: 00 00 00 42 09 B0 07 01 03 B0 02 08 80 00 20 0C  // ...B.......... .
    D060: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 02 01  // ...........B....
    D070: 03 B0 03 08 80 00 20 0C 00 00 00 00 00 00 00 00  // ...... .........
    D080: 00 00 00 42 09 B0 03 01 03 B0 06 08 80 00 20 0C  // ...B.......... .
    D090: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 06 01  // ...........B....
    D0A0: 03 B0 07 08 80 00 20 0C 00 00 00 00 00 00 00 00  // ...... .........
    D0B0: 00 00 00 42 09 B0 07 01 03 B0 0F 08 00 02 80 0C  // ...B............
    D0C0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D0D0: 03 B0 0F 08 00 02 04 0C 00 00 00 00 00 00 00 00  // ................
    D0E0: 00 00 00 42 09 B0 0F 01 03 B0 0F 08 00 02 02 0C  // ...B............
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D100: 03 B0 0F 00 82 00 04 0C 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 00 42 09 B0 0F 01 03 B0 0F 00 42 00 02 0C  // ...B........B...
    D120: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D130: 03 B0 0F 80 00 42 00 0C 00 00 00 00 00 00 00 00  // .....B..........
    D140: 00 00 00 42 09 B0 0F 01 03 B0 0F 80 00 82 00 0C  // ...B............
    D150: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D160: 03 B0 0F 01 00 02 08 10 00 00 00 00 00 00 00 00  // ................
    D170: 00 00 00 42 09 B0 0F 01 03 B0 0F 10 80 00 20 10  // ...B.......... .
    D180: 00 00 00 00 00 00 00 00 00 00 00 42 09 B0 0F 01  // ...........B....
    D190: 03 00 0F 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1A0: 00 00 00 42 00 00 0F 00 00 00 00 01 03 B0 0F 08  // ...B............
    D1B0: 00 50 00 06 00 00 00 00 00 00 00 00 00 00 00 42  // .P.............B
    D1C0: 09 B0 0F 01 03 B0 0F 40 00 04 04 04 00 00 00 00  // .......@........
    D1D0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 40  // .......B.......@
    D1E0: 00 04 02 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D1F0: 09 B0 0F 01 03 B0 02 02 08 00 20 04 00 00 00 00  // .......... .....
    D200: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 02  // .......B........
    D210: 08 00 20 04 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D220: 09 B0 03 01 03 B0 06 02 08 00 20 04 00 00 00 00  // .......... .....
    D230: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 02  // .......B........
    D240: 08 00 20 04 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D250: 09 B0 07 01 03 B0 0F 00 0C 00 04 04 00 00 00 00  // ................
    D260: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 80  // .......B........
    D270: 00 02 08 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D280: 09 B0 0F 01 03 B0 0F 00 82 00 80 04 00 00 00 00  // ................
    D290: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D2A0: 02 10 80 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D2B0: 09 B0 0F 01 03 B0 0F 00 82 40 00 04 00 00 00 00  // .........@......
    D2C0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D2D0: 82 00 08 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D2E0: 09 B0 0F 01 03 B0 0F 00 42 00 80 04 00 00 00 00  // ........B.......
    D2F0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D300: 42 00 10 04 00 00 00 00 00 00 00 00 00 00 00 42  // B..............B
    D310: 09 B0 0F 01 03 B0 0F 00 42 00 08 04 00 00 00 00  // ........B.......
    D320: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D330: 02 10 04 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D340: 09 B0 0F 01 03 B0 0F 00 02 10 02 04 00 00 00 00  // ................
    D350: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D360: 02 10 40 04 00 00 00 00 00 00 00 00 00 00 00 42  // ..@............B
    D370: 09 B0 0F 01 03 B0 02 08 80 00 02 04 00 00 00 00  // ................
    D380: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 08  // .......B........
    D390: 80 00 02 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D3A0: 09 B0 03 01 03 B0 06 08 80 00 02 04 00 00 00 00  // ................
    D3B0: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 08  // .......B........
    D3C0: 80 00 02 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D3D0: 09 B0 07 01 03 B0 02 08 80 00 20 04 00 00 00 00  // .......... .....
    D3E0: 00 00 00 00 00 00 00 42 09 B0 02 01 03 B0 03 08  // .......B........
    D3F0: 80 00 20 04 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D400: 09 B0 03 01 03 B0 06 08 80 00 20 04 00 00 00 00  // .......... .....
    D410: 00 00 00 00 00 00 00 42 09 B0 06 01 03 B0 07 08  // .......B........
    D420: 80 00 20 04 00 00 00 00 00 00 00 00 00 00 00 42  // .. ............B
    D430: 09 B0 07 01 03 B0 0F 08 00 02 80 04 00 00 00 00  // ................
    D440: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 08  // .......B........
    D450: 00 02 04 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D460: 09 B0 0F 01 03 B0 0F 08 00 02 02 04 00 00 00 00  // ................
    D470: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 00  // .......B........
    D480: 82 00 04 04 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D490: 09 B0 0F 01 03 B0 0F 00 42 00 02 04 00 00 00 00  // ........B.......
    D4A0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 80  // .......B........
    D4B0: 00 42 00 04 00 00 00 00 00 00 00 00 00 00 00 42  // .B.............B
    D4C0: 09 B0 0F 01 03 B0 0F 80 00 82 00 04 00 00 00 00  // ................
    D4D0: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 B0 0F 01  // .......B........
    D4E0: 00 02 08 10 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D4F0: 09 B0 0F 01 03 B0 0F 10 80 00 20 10 00 00 00 00  // .......... .....
    D500: 00 00 00 00 00 00 00 42 09 B0 0F 01 03 00 0F 00  // .......B........
    D510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42  // ...............B
    D520: 00 00 0F 00 00 00 00 00 A0 01 01 08 08 00 03 01  // ................
    D530: 00 00 3D E5 00 01 44 33 00 3D E5 00 02 44 33 00  // ..=...D3.=...D3.
    D540: 02 05 00 00 00 01 00 52 29 20 05 00 64 00 00 00  // .......R) ..d...
    D550: 03 02 46 40 02 02 00 00 43 E4 00 02 05 00 01 00  // ..F@....C.......
    D560: 02 00 52 29 03 01 01 00 02 02 00 00 03 01 46 00  // ..R)..........F.
    D570: 56 38 46 03 05 40 80 C3 C9 01 27 02 40 46 2D 05  // V8F..@....'.@F-.
    D580: 40 31 00 00 00 27 05 40 32 00 00 00 21 05 40 32  // @1...'.@2...!.@2
    D590: 00 00 00 21 02 46 40 03 02 46 40 55 00 03 27 05  // ...!.F@..F@U..'.
    D5A0: 46 19 00 00 00 7C 05 40 00 40 00 00 7E 02 40 01  // F....|.@.@..~.@.
    D5B0: 02 8A 01 40 02 1A 01 40 3D E5 00 01 49 E1 00 02  // ...@...@=...I...
    D5C0: A5 03 01 03 02 00 40 21 05 01 F4 01 00 00 03 02  // ......@!........
    D5D0: 01 40 7C 05 00 32 00 00 00 7E 05 40 10 27 00 00  // .@|..2...~.@.'..
    D5E0: 7C 05 40 4E 0C 00 00 7E 02 40 01 02 0A 03 40 21  // |.@N...~.@....@!
    D5F0: 02 40 01 27 05 40 4E 0C 00 00 33 02 00 40 02 8A  // .@.'.@N...3..@..
    D600: 02 00 02 1A 02 00 43 E4 00 55 00 02 03 01 00 00  // ......C..U......
    D610: 55 38 00 03 05 40 00 32 00 00 3D 05 00 00 00 00  // U8...@.2..=.....
    D620: 00 44 26 01 03 02 40 46 27 01 40 00 3E 05 40 9C  // .D&...@F'.@.>.@.
    D630: 18 00 00 47 15 01 03 05 40 00 32 00 00 3E 05 40  // ...G....@.2..>.@
    D640: C8 00 00 00 46 26 01 03 05 40 C8 00 00 00 66 FF  // ....F&...@....f.
    D650: 2D 0D 42 80 01 3E 0C 40 02 00 47 3D 01 2D 0D 42  // -.B..>.@..G=.-.B
    D660: 08 00 43 2D 01 33 0C 40 00 00 3E E5 00 03 49 53  // ..C-.3.@..>...IS
    D670: 01 2D 0C 40 06 00 33 0D 40 01 00 27 0C 40 06 00  // .-.@..3.@..'.@..
    D680: 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00 21 0C  // -.@.....@3.@..!.
    D690: 40 06 00 2D 0C 40 00 00 27 02 46 40 02 0A 00 40  // @..-.@..'.F@...@
    D6A0: 02 B2 00 40 5B 7A 20 00 C8 00 40 06 08 00 19 00  // ...@[z ...@.....
    D6B0: 40 06 80 0C 40 00 32 00 80 0C 38 18 60 00 64 00  // @...@.2...8.`.d.
    D6C0: 00 32 00 32 7F 00 64 00 51 00 02 01 00 00 01 05  // .2.2..d.Q.......
    D6D0: 00 00 74 21 01 00 01 05 01 00 0A 00 F0 FF 01 05  // ..t!............
    D6E0: 00 00 75 21 01 00 01 05 01 00 25 00 00 00 01 05  // ..u!......%.....
    D6F0: 00 00 74 21 01 00 01 05 01 00 09 00 F0 FF 01 05  // ..t!............
    D700: 00 00 75 21 01 00 01 05 01 00 01 00 00 00 0D 25  // ..u!...........%
    D710: B6 F0 01 07 25 B6 F0 FE 5B 00 EA 00 02 01 08 08  // ....%...[.......
    D720: 37 00 00 66 1C 2D 0C 42 06 00 02 01 02 00 02 F0  // 7..f.-.B........
    D730: 02 50 00 3D E5 00 03 44 21 00 5B 56 00 40 20 0D  // .P.=...D!.[V.@ .
    D740: 01 20 00 03 05 00 00 01 00 00 33 02 00 40 0E E5  // . ........3..@..
    D750: 02 80 52 12 55 38 00 20 05 00 03 00 00 00 27 05  // ..R.U8. ......'.
    D760: 40 10 27 00 00 01 05 00 00 88 5C 01 00 01 02 01  // @.'.......\.....
    D770: 00 00 01 05 00 00 89 5C 01 00 01 02 01 00 40 2D  // .......\......@-
    D780: 05 00 01 00 00 00 56 00 41 01 05 00 00 88 5C 01  // ......V.A.....\.
    D790: 00 01 05 01 00 01 00 00 00 01 05 00 00 89 5C 01  // ..............\.
    D7A0: 00 03 00 01 01 00 01 05 00 00 88 5C 01 00 01 02  // ...........\....
    D7B0: 01 00 00 3E 25 41 12 49 C4 00 3E E5 01 00 44 C4  // ...>%A.I..>...D.
    D7C0: 00 2D E5 01 07 03 04 40 04 00 03 BA 40 01 01 05  // .-.....@....@...
    D7D0: 00 00 89 5C 01 00 01 02 01 00 40 43 D2 00 01 05  // ...\......@C....
    D7E0: 00 00 89 5C 01 00 01 04 01 00 04 00 2D 05 00 01  // ...\........-...
    D7F0: 00 00 00 2D 25 41 01 2D 0D 42 04 00 3E 25 41 16  // ...-%A.-.B..>%A.
    D800: 45 8C 00 5B 17 01 01 02 10 04 37 00 00 3D 25 00  // E..[......7..=%.
    D810: FF 49 CE 00 01 05 00 00 28 68 01 00 01 05 01 00  // .I......(h......
    D820: 00 70 03 00 01 05 00 00 29 68 01 00 03 00 40 01  // .p......)h....@.
    D830: 00 66 18 03 00 40 01 00 03 00 00 01 00 03 00 41  // .f...@.........A
    D840: 01 00 3E 05 40 00 00 00 00 44 CD 00 03 05 01 10  // ..>.@....D......
    D850: 70 03 00 01 05 00 00 28 68 01 00 01 02 01 00 01  // p......(h.......
    D860: 01 05 00 00 29 68 01 00 03 00 02 01 00 03 00 03  // ....)h..........
    D870: 01 00 01 05 00 00 88 5C 01 00 01 02 01 00 02 01  // .......\........
    D880: 05 00 00 89 5C 01 00 01 02 01 00 03 2D 05 01 08  // ....\.......-...
    D890: 00 00 00 33 0D 40 01 00 3E 0D 40 00 00 49 4F 00  // ...3.@..>.@..IO.
    D8A0: 01 05 00 00 28 68 01 00 01 02 01 00 01 01 05 00  // ....(h..........
    D8B0: 00 3E 5C 01 00 01 05 01 00 08 00 00 00 01 05 01  // .>\.............
    D8C0: 00 04 00 00 00 01 05 01 00 01 00 00 00 51 32 50  // .............Q2P
    D8D0: 02 5B 01 05 00 00 58 5C 01 00 01 65 01 00 FF 01  // .[....X\...e....
    D8E0: 21 01 00 00 01 05 00 00 3E 5C 01 00 01 05 01 00  // !.......>\......
    D8F0: 05 00 00 00 51 0A 01 05 00 00 3E 5C 01 00 01 05  // ....Q.....>\....
    D900: 01 00 01 00 00 00 51 0A 01 05 00 00 58 5C 01 00  // ......Q.....X\..
    D910: 3C 61 01 00 00 49 04 01 51 64 5B 00 30 00 01 03  // <a...I..Qd[.0...
    D920: 00 04 02 01 01 00 02 E5 01 02 52 3C 01 05 00 00  // ..........R<....
    D930: 15 6E 01 00 01 01 01 00 02 50 02 01 05 00 00 41  // .n.......P.....A
    D940: 6E 01 00 01 39 01 00 01 51 C8 5B 5B AF 01 01 04  // n...9...Q.[[....
    D950: 00 04 37 00 00 3D 65 00 03 44 5C 01 02 01 01 00  // ..7..=e..D\.....
    D960: 02 65 01 07 52 50 3D 05 02 00 00 00 00 44 0B 01  // .e..RP=......D..
    D970: 01 05 00 00 00 68 01 00 4A E5 01 00 80 49 24 00  // .....h..J....I$.
    D980: 3D 25 00 01 49 46 00 01 05 00 00 01 68 01 00 43  // =%..IF......h..C
    D990: 4E 00 01 05 00 00 00 68 01 00 03 24 40 04 00 09  // N......h...$@...
    D9A0: 25 40 DF 01 22 01 00 40 01 05 00 00 00 68 01 00  // %@.."..@.....h..
    D9B0: 4A E5 01 00 80 49 5C 00 56 00 40 3D 25 00 01 49  // J....I\.V.@=%..I
    D9C0: 95 00 03 0C 40 05 00 15 0D 40 07 09 65 40 7F 01  // ....@....@..e@..
    D9D0: 05 00 00 09 68 01 00 5C 8A 01 00 7F 00 40 43 B3  // ....h..\.....@C.
    D9E0: 00 03 24 40 05 00 15 0D 40 01 1B 25 40 01 0F 65  // ..$@....@..%@..e
    D9F0: 40 40 01 05 00 00 0A 68 01 00 01 0A 01 00 40 01  // @@.....h......@.
    DA00: 05 00 00 0B 68 01 00 03 00 46 01 00 09 25 46 FC  // ....h....F...%F.
    DA10: 3D 25 00 01 44 CF 00 0F 25 46 01 56 00 40 03 19  // =%..D...%F.V.@..
    DA20: 40 00 21 05 40 64 00 00 00 03 05 41 78 5D 02 00  // @.!.@d.....Ax]..
    DA30: 33 02 41 40 27 05 41 71 02 00 00 03 A2 46 40 01  // 3.A@'.Aq.....F@.
    DA40: 02 01 00 46 01 05 00 00 00 68 01 00 4A E5 01 00  // ...F.....h..J...
    DA50: 80 49 F8 00 51 32 5B 02 01 01 00 52 50 3D 05 02  // .I..Q2[....RP=..
    DA60: 00 00 00 00 44 58 01 01 05 00 00 86 68 01 00 54  // ....DX......h..T
    DA70: 20 01 00 03 05 41 FF FF FF FF 69 01 41 02 01 05  //  ....A....i.A...
    DA80: 00 00 87 68 01 00 09 00 41 01 00 0F 01 41 01 01  // ...h....A....A..
    DA90: 02 01 00 41 01 05 00 00 8A 68 01 00 0D 01 01 00  // ...A.....h......
    DAA0: 02 51 32 5B 55 00 00 5B 02 01 01 00 52 50 3D 05  // .Q2[U..[....RP=.
    DAB0: 02 00 00 00 00 44 58 01 02 E4 00 05 00 02 A4 00  // .....DX.........
    DAC0: 06 00 02 0D 02 01 01 03 24 41 08 00 4C 25 41 01  // ........$A..L%A.
    DAD0: 44 8B 01 02 65 02 02 02 64 01 0C 00 02 8C 01 0E  // D...e...d.......
    DAE0: 00 3D 65 01 FF 44 AE 01 02 99 02 00 02 25 01 32  // .=e..D.......%.2
    DAF0: 52 36 2D 0D 42 04 00 43 8B 01 5B 00 79 00 01 03  // R6-.B..C..[.y...
    DB00: 04 00 37 00 00 03 0A 00 42 66 20 03 0C 41 00 00  // ..7.....Bf ..A..
    DB10: 2D 0A 41 42 2D 0D 42 04 00 3E 0A 42 41 44 75 00  // -.AB-.B..>.BADu.
    DB20: 3D 0C 00 00 00 44 34 00 2D 0C 42 02 00 43 1D 00  // =....D4.-.B..C..
    DB30: 02 0A 01 42 3D 65 00 00 44 46 00 3D 65 00 04 49  // ...B=e..DF.=e..I
    DB40: 74 00 03 E4 41 05 00 02 04 01 08 00 3E E5 41 00  // t...A.......>.A.
    DB50: 44 75 00 3D 8C 00 10 00 47 6B 00 2D 0D 42 06 00  // Du.=....Gk.-.B..
    DB60: 33 E5 41 01 43 50 00 02 04 00 0C 00 03 0A 42 00  // 3.A.CP........B.
    DB70: 5B 55 00 01 5B 00 07 00 02 02 04 04 5B 00 62 02  // [U..[.......[.b.
    DB80: 01 05 00 00 37 00 00 03 20 46 52 00 0E 25 00 60  // ....7... FR..%.`
    DB90: 52 14 08 25 00 0F 42 29 00 63 0F 58 00 63 11 4F  // R..%..B).c.X.c.O
    DBA0: 01 63 12 C7 01 63 01 1F 02 63 00 48 02 63 08 1E  // .c...c...c.H.c..
    DBB0: 01 63 09 FF 00 63 0A 06 01 63 13 0E 01 63 14 16  // .c...c...c...c..
    DBC0: 01 63 0B 26 01 63 0C 0F 02 63 0D 2E 01 63 10 47  // .c.&.c...c...c.G
    DBD0: 01 5A 5A 43 FB 00 54 00 B0 4D 01 0D 41 4D 1F 00  // .ZZC..T..M..AM..
    DBE0: 3D A5 00 00 44 77 00 3D A5 00 02 44 E9 00 3D A5  // =...Dw.=...D..=.
    DBF0: 00 05 49 F1 00 54 08 DF 4D 3D 25 02 00 49 86 00  // ..I..T..M=%..I..
    DC00: 02 25 02 02 32 25 02 01 01 E1 DF 4D 02 4A 25 E2  // .%..2%.....M.J%.
    DC10: 4D 01 49 CC 00 7B 05 01 00 80 00 00 7E 05 40 8C  // M.I..{......~.@.
    DC20: 0A 00 00 56 00 46 03 29 46 02 27 02 40 46 07 65  // ...V.F.)F.'.@F.e
    DC30: E6 4D FE 01 05 E7 4D 00 80 00 00 01 02 E8 4D 40  // .M....M.......M@
    DC40: 0D E5 E9 4D 10 0D 65 3E 4D 04 02 20 00 3E 4D 08  // ...M..e>M.. .>M.
    DC50: 25 00 07 0E 25 00 00 52 14 14 3D 00 04 5C B9 AF  // %...%..R..=..\..
    DC60: 3B 8F 00 3A 00 00 5B 01 05 B0 4D 01 00 00 00 07  // ;..:..[...M.....
    DC70: E5 3E 4D 2F 0D 65 3E 4D 04 3A 00 00 5B 54 20 EE  // .>M/.e>M.:..[T .
    DC80: 4D 43 FB 00 01 25 EE 4D 01 43 FB 00 01 25 EE 4D  // MC...%.M.C...%.M
    DC90: 02 43 FB 00 01 25 EE 4D 03 43 FB 00 07 25 DE 4D  // .C...%.M.C...%.M
    DCA0: EF 43 FB 00 0D 25 DE 4D 10 43 FB 00 0D 65 E6 4D  // .C...%.M.C...e.M
    DCB0: 01 51 0A 07 25 E3 4D FE 51 0A 01 0D E2 4D 01 02  // .Q..%.M.Q....M..
    DCC0: 51 C8 43 FB 00 0D 25 F4 4D 10 43 FB 00 01 69 85  // Q.C...%.M.C...i.
    DCD0: 4D 02 4C 25 46 10 49 72 01 3D A5 00 03 49 72 01  // M.L%F.Ir.=...Ir.
    DCE0: 4A 25 4B 4D 10 49 72 01 01 A5 85 4D 02 43 77 01  // J%KM.Ir....M.Cw.
    DCF0: 01 B1 85 4D 00 3D 25 02 00 44 8C 01 32 25 02 01  // ...M.=%..D..2%..
    DD00: 14 25 02 04 5C E1 85 4D 8F 02 3D E5 00 04 47 9B  // .%..\..M..=...G.
    DD10: 01 0D 25 85 4D 01 43 A0 01 07 25 85 4D FE 3D A5  // ..%.M.C...%.M.=.
    DD20: 00 05 44 AE 01 3D A5 00 00 49 BF 01 02 A5 00 00  // ..D..=...I......
    DD30: 03 39 40 00 33 25 40 01 01 22 E1 4D 40 02 E0 02  // .9@.3%@..".M@...
    DD40: 86 4D 43 FB 00 02 E0 02 86 4D 4B E5 02 01 44 FB  // .MC......MK...D.
    DD50: 00 02 B0 00 85 4D 02 E5 00 04 4A 25 85 4D 01 44  // .....M....J%.M.D
    DD60: E8 01 02 E5 00 08 3D A5 00 02 44 F6 01 3D A5 00  // ......=...D..=..
    DD70: 03 49 FF 01 54 00 86 4D 50 02 43 FB 00 02 A5 00  // .I..T..MP.C.....
    DD80: 00 03 31 43 00 4A 62 85 4D 44 44 FB 00 54 08 E2  // ..1C.Jb.MDD..T..
    DD90: 4D 51 C8 0D 25 E3 4D 01 51 32 43 FB 00 0D 25 86  // MQ..%.M.Q2C...%.
    DDA0: 4D 01 3D A5 00 00 44 34 02 01 0D B7 4D 0F 01 43  // M.=...D4....M..C
    DDB0: FB 00 03 39 43 00 03 02 40 44 33 25 40 01 01 0A  // ...9C...@D3%@...
    DDC0: B7 4D 40 43 FB 00 54 00 B7 4D 07 25 86 4D FE 07  // .M@C..T..M.%.M..
    DDD0: 0D 85 4D FE 80 54 20 DE 4D 54 20 EE 4D 43 FB 00  // ..M..T .MT .MC..
    DDE0: 29 00 01 01 00 00 37 00 00 66 1C 2D 0D 42 18 00  // ).....7..f.-.B..
    DDF0: 03 30 40 50 00 3E 25 40 00 44 28 00 33 25 40 01  // .0@P.>%@.D(.3%@.
    DE00: 2D 0C 42 14 00 43 15 00 5B 00 46 01 01 06 00 00  // -.B..C..[.F.....
    DE10: 37 00 00 42 29 00 63 07 24 01 63 01 25 00 63 00  // 7..B).c.$.c.%.c.
    DE20: C0 00 63 0B 27 01 63 04 2C 01 5A 5A 43 3F 01 02  // ..c.'.c.,.ZZC?..
    DE30: 65 00 11 52 04 4B E5 02 01 49 20 01 02 65 00 0A  // e..R.K...I ..e..
    DE40: 55 08 02 52 4D 3D E5 00 04 47 50 00 68 25 00 01  // U..RM=...GP.h%..
    DE50: 02 25 02 01 52 4D 68 25 00 01 3D A5 00 00 49 82  // .%..RMh%..=...I.
    DE60: 00 20 05 01 64 00 00 00 02 05 01 14 1E 00 02 2C  // . ..d..........,
    DE70: 21 01 00 02 01 02 00 02 02 00 40 52 0C 26 05 00  // !.........@R.&..
    DE80: 64 00 00 00 02 02 01 40 02 01 00 02 02 65 00 01  // d......@.....e..
    DE90: 55 08 02 52 4D 3D E5 00 04 47 A0 00 68 25 00 01  // U..RM=...G..h%..
    DEA0: 02 25 02 01 52 4D 68 25 00 01 51 05 02 65 00 01  // .%..RMh%..Q..e..
    DEB0: 52 04 51 0A 02 65 00 09 52 4D 3D E5 00 04 47 20  // R.Q..e..RM=...G 
    DEC0: 01 68 25 00 01 52 4D 43 20 01 02 65 00 12 52 04  // .h%..RMC ..e..R.
    DED0: 4B E5 02 01 44 20 01 02 65 00 08 52 4D 3D E5 00  // K...D ..e..RM=..
    DEE0: 04 47 E4 00 68 25 00 01 52 4D 68 25 00 01 02 65  // .G..h%..RMh%...e
    DEF0: 00 00 52 04 02 65 00 00 52 4D 3D E5 00 04 47 01  // ..R..e..RM=...G.
    DF00: 01 68 25 00 01 52 4D 68 25 00 01 3D A5 00 00 49  // .h%..RMh%..=...I
    DF10: 20 01 02 01 02 00 02 05 01 14 00 00 00 2C 21 01  //  ............,!.
    DF20: 00 55 00 00 52 0C 02 01 00 02 3A 00 00 5B 43 20  // .U..R.....:..[C 
    DF30: 01 52 4D 43 20 01 66 06 02 29 00 00 02 68 00 4E  // .RMC .f..)...h.N
    DF40: 00 02 8C 00 20 00 52 33 5B 02 29 00 00 52 33 5B  // .... .R3[.)..R3[
    DF50: 38 03 02 01 00 00 37 00 00 0E 25 00 20 52 14 08  // 8.....7...%. R..
    DF60: 25 00 0F 42 29 00 63 07 35 00 63 0A 3D 00 63 01  // %..B).c.5.c.=.c.
    DF70: 21 01 63 00 7B 01 63 09 BB 01 63 08 E9 01 63 0B  // !.c.{.c...c...c.
    DF80: 01 02 5A 5A 5B 0D 65 02 56 08 43 AD 02 03 0A 46  // ..ZZ[.e.V.C....F
    DF90: 48 66 FF 2D 0D 42 1A 03 56 00 40 20 25 00 05 2D  // Hf.-.B..V.@ %..-
    DFA0: 0A 42 40 20 25 00 02 03 0A 48 40 01 04 44 55 00  // .B@ %....H@..DU.
    DFB0: 00 01 64 43 55 04 00 07 E5 43 55 FC 07 A5 43 55  // ..dCU....CU...CU
    DFC0: 8F 03 0A 48 46 56 00 41 3D E5 00 04 47 96 00 03  // ...HFV.A=...G...
    DFD0: 05 41 00 80 01 01 4B 25 02 01 44 96 00 09 4D 41  // .A....K%..D...MA
    DFE0: 7F FF 03 E5 41 02 5C FA 11 56 FC 41 5C 52 03 56  // ....A.\..V.A\R.V
    DFF0: 7F FE 41 3D A5 00 00 49 CC 00 07 A5 FF 55 7F 66  // ..A=...I.....U.f
    E000: FF 2D 0D 42 DE 02 2D 0D 42 06 00 56 00 41 3D A5  // .-.B..-.B..V.A=.
    E010: 02 14 49 49 02 03 25 41 20 43 49 02 0D A5 FF 55  // ..II..%A CI....U
    E020: 80 66 FF 2D 0D 42 B6 02 03 04 40 00 00 3E 05 40  // .f.-.B....@..>.@
    E030: 00 00 00 00 44 AD 02 03 21 43 00 03 E2 41 44 4C  // ....D...!C...ADL
    E040: E4 41 05 00 44 07 01 3D A4 00 04 00 49 07 01 3D  // .A..D..=....I..=
    E050: 04 01 00 00 47 0F 01 2D 0D 42 0C 00 43 D8 00 03  // ....G..-.B..C...
    E060: 04 40 06 00 03 24 41 0A 00 03 64 41 0B 00 43 52  // .@...$A...dA..CR
    E070: 02 07 65 02 56 F7 03 0A 46 48 56 00 41 3D E5 00  // ..e.V...FHV.A=..
    E080: 04 47 3C 01 07 25 20 56 F9 43 42 01 5C 25 20 56  // .G<..% V.CB.\% V
    E090: F9 02 4A 65 1E 56 01 44 42 01 07 25 1E 56 F8 4A  // ..Je.V.DB..%.V.J
    E0A0: 65 1E 56 01 44 4F 01 2D E5 41 01 2D 0D 48 10 00  // e.V.DO.-.A.-.H..
    E0B0: 3E E5 41 04 45 2D 01 03 0A 48 46 0D 25 0F 56 02  // >.A.E-...HF.%.V.
    E0C0: 4A 25 0F 56 04 44 70 01 43 AD 02 07 25 0F 56 FD  // J%.V.Dp.C...%.V.
    E0D0: 4A 25 0F 56 04 49 80 01 0D 65 02 56 08 56 00 41  // J%.V.I...e.V.V.A
    E0E0: 4A 65 1E 56 01 44 90 01 5C 25 1E 56 F8 04 51 02  // Je.V.D..\%.V..Q.
    E0F0: 4A 65 1E 56 01 44 A0 01 2D A5 41 01 2D 0D 48 10  // Je.V.D..-.A.-.H.
    E100: 00 3E A5 41 04 45 90 01 43 AD 02 03 0A 46 48 56  // .>.A.E..C....FHV
    E110: 08 48 20 25 00 02 03 22 48 40 0D 25 43 55 01 0D  // .H %..."H@.%CU..
    E120: E5 44 55 10 03 0A 48 46 0D A5 11 56 01 51 14 0D  // .DU...HF...V.Q..
    E130: 25 11 56 01 51 14 43 AD 02 07 A5 11 56 FE 56 00  // %.V.Q.C.....V.V.
    E140: 40 20 25 00 02 03 0A 48 40 07 E5 44 55 EF 43 AD  // @ %....H@..DU.C.
    E150: 02 08 A5 00 1B 66 FF 2D 0D 42 DE 02 03 21 43 00  // .....f.-.B...!C.
    E160: 03 A2 40 44 03 0C 40 02 00 4C A4 40 00 00 49 29  // ..@D..@..L.@..I)
    E170: 02 2D 0C 42 04 00 43 14 02 2D 0D 42 06 00 3D A4  // .-.B..C..-.B..=.
    E180: 00 00 00 44 49 02 03 24 41 00 00 3E 25 41 FF 44  // ...DI..$A..>%A.D
    E190: 49 02 2D 0A 42 40 43 2E 02 03 04 40 01 00 03 65  // I.-.B@C....@...e
    E1A0: 41 08 01 0A 01 56 40 01 05 19 56 88 88 01 00 01  // A....V@...V.....
    E1B0: F2 1A 56 40 01 BA 20 56 40 01 BA 30 56 40 01 BA  // ..V@.. V@..0V@..
    E1C0: 40 56 40 01 BA 50 56 40 01 25 1F 56 20 01 25 2F  // @V@..PV@.%.V .%/
    E1D0: 56 20 01 25 3F 56 20 01 25 4F 56 20 01 2A 1F 56  // V .%?V .%OV .*.V
    E1E0: 41 01 2A 2F 56 41 01 2A 3F 56 41 01 2A 4F 56 41  // A.*/VA.*?VA.*OVA
    E1F0: 3D 65 00 0B 44 AD 02 5C A2 06 56 DF 41 3A 00 00  // =e..D..\..V.A:..
    E200: 5B 7A 84 00 0C 00 FF FF FF 00 02 3F 00 00 00 5F  // [z.........?..._
    E210: 00 08 40 9C 00 00 03 3F 00 00 00 5F 00 08 FF FF  // ..@....?..._....
    E220: FF 00 03 3F 00 00 2A 57 20 10 00 00 00 00 3F 00  // ...?..*W .....?.
    E230: 05 00 39 00 00 4B 00 00 80 01 3A 00 00 80 02 1B  // ..9..K....:.....
    E240: 00 00 80 03 00 00 00 80 08 34 25 00 80 09 1C 25  // .........4%....%
    E250: 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00  // .........?....8.
    E260: 9F 18 00 4A 00 9F FF 00 00 FF 03 02 01 00 01 03  // ...J............
    E270: 02 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02  // ................
    E280: 01 00 01 03 02 01 00 01 4C 02 01 02 00 00 37 00  // ........L.....7.
    E290: 00 3D 0D 00 00 00 44 CE 01 56 00 41 03 21 41 01  // .=....D..V.A.!A.
    E2A0: 09 25 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D  // .%A...A...@Bf.-.
    E2B0: 42 34 02 2D 0A 42 41 03 0C 48 02 00 0D A5 A6 55  // B4.-.BA..H.....U
    E2C0: 01 54 08 A6 55 03 0C 48 00 00 03 F9 41 01 15 3D  // .T..U..H....A..=
    E2D0: 41 04 5C BA 26 4C 8F 41 03 0A 42 40 4A 25 26 4C  // A.\.&L.A..B@J%&L
    E2E0: 01 49 81 00 0D 0D 26 4C 01 01 0D 25 26 4C 10 4A  // .I....&L...%&L.J
    E2F0: 25 26 4C 20 44 67 00 07 25 26 4C EF 4A 25 26 4C  // %&L Dg..%&L.J%&L
    E300: 20 49 74 00 0D 25 29 4C 40 56 00 41 03 09 41 00  //  It..%)L@V.A..A.
    E310: 3B 02 41 03 3B 41 00 1B 25 41 04 01 A2 27 4C 41  // ;.A.;A..%A...'LA
    E320: 03 69 41 01 15 2D 41 04 01 2A 27 4C 41 56 00 40  // .iA..-A..*'LAV.@
    E330: 0F E5 40 80 03 73 40 00 01 02 2C 4C 40 56 00 40  // ..@..s@...,L@V.@
    E340: 03 6B 40 00 01 02 2C 4C 40 03 63 40 00 01 02 2C  // .k@...,L@.c@...,
    E350: 4C 40 03 7B 40 00 09 65 40 0F 01 02 2C 4C 40 3E  // L@.{@..e@...,L@>
    E360: 25 41 04 47 10 01 33 25 41 04 2D 05 46 04 00 00  // %A.G..3%A.-.F...
    E370: 00 03 63 40 00 01 02 2C 4C 40 03 6B 40 00 01 02  // ..c@...,L@.k@...
    E380: 2C 4C 40 03 73 40 00 01 02 2C 4C 40 03 7B 40 00  // ,L@.s@...,L@.{@.
    E390: 01 02 2C 4C 40 43 D7 00 0D 25 29 4C 02 0D 25 27  // ..,L@C...%)L..%'
    E3A0: 4C 01 03 29 40 01 21 25 40 0A 2D 25 40 32 4A 25  // L..)@.!%@.-%@2J%
    E3B0: 2A 4C 01 49 42 01 51 0A 33 25 40 01 3E 25 40 00  // *L.IB.Q.3%@.>%@.
    E3C0: 49 26 01 02 65 01 01 43 CA 01 4A 05 2A 4C F0 8F  // I&..e..C..J.*L..
    E3D0: FF 00 44 54 01 02 65 01 02 43 CA 01 01 05 2C 4C  // ..DT..e..C....,L
    E3E0: 01 00 00 80 03 00 40 2C 4C 02 6A 01 40 02 B8 01  // ......@,L.j.@...
    E3F0: 2A 4C 08 A5 01 1F 3D A5 01 00 46 7C 01 02 65 01  // *L....=...F|..e.
    E400: 03 43 CA 01 32 A5 01 01 3D 8D 00 00 00 44 CA 01  // .C..2...=....D..
    E410: 3D A5 01 00 44 CA 01 03 31 41 01 03 19 40 00 56  // =...D...1A...@.V
    E420: 18 40 3B 02 40 03 28 40 2C 4C 03 68 40 2C 4C 03  // .@;.@.(@,L.h@,L.
    E430: A8 40 2C 4C 03 E8 40 2C 4C 04 02 00 40 3E 25 41  // .@,L..@,L...@>%A
    E440: 04 47 CA 01 33 25 41 04 2D 05 46 04 00 00 00 43  // .G..3%A.-.F....C
    E450: 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34 02 03 0C 48  // ..:..[f.-.B4...H
    E460: 00 00 01 8D 2E 4C 0D 00 01 05 2F 4C 00 1C 02 00  // .....L..../L....
    E470: 01 05 30 4C 10 11 3D 12 2D 0D 42 04 00 2C 25 00  // ..0L..=.-.B..,%.
    E480: 01 3D 25 00 06 49 D5 01 56 08 48 03 25 41 10 0D  // .=%..I..V.H.%A..
    E490: 65 D5 55 40 07 65 D5 55 BF 33 25 41 01 3E 25 41  // e.U@.e.U.3%A.>%A
    E4A0: 00 49 07 02 0D 25 79 55 01 54 30 79 55 0D 25 7A  // .I...%yU.T0yU.%z
    E4B0: 55 01 54 30 7A 55 51 32 5B 7A 18 00 00 00 00 00  // U.T0zUQ2[z......
    E4C0: 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00 10 00  // ....8...T...p...
    E4D0: 8C 00 14 00 5C 00 01 02 00 04 02 25 01 04 03 31  // ....\......%...1
    E4E0: 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42  // A...A....A.f.-.B
    E4F0: 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 A6 55 FE  // P.-.BA..H.....U.
    E500: 01 0D A6 55 11 11 50 02 4A 0D A9 55 01 00 49 41  // ...U..P.J..U..IA
    E510: 00 02 25 01 13 54 08 A6 55 54 00 A8 55 3A 00 00  // ..%..T..UT..U:..
    E520: 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00 14 00  // [z..............
    E530: 78 00 01 01 00 04 37 00 00 55 00 01 52 3E 02 E4  // x.....7..U..R>..
    E540: 01 1B 00 66 1C 2D 0C 42 04 00 52 12 4B E5 00 02  // ...f.-.B..R.K...
    E550: 44 34 00 01 05 00 00 4F 5C 01 00 0D 0D 01 00 02  // D4.....O\.......
    E560: 04 43 42 00 01 05 00 00 4F 5C 01 00 07 0D 01 00  // .CB.....O\......
    E570: FD FB 52 07 02 05 01 24 71 01 03 55 00 02 52 3F  // ..R....$q..U..R?
    E580: 02 05 01 80 38 01 03 02 25 02 01 52 3F 02 05 01  // ....8...%..R?...
    E590: 50 C3 00 03 02 25 02 02 52 3F 02 05 01 3C 41 00  // P....%..R?...<A.
    E5A0: 03 02 25 02 03 52 3F 5B 88 00 01 01 08 04 37 00  // ..%..R?[......7.
    E5B0: 00 01 05 00 00 91 2D 01 00 03 88 00 01 00 56 20  // ......-.......V 
    E5C0: 00 03 22 43 00 03 02 40 44 03 62 40 00 01 05 00  // .."C...@D.b@....
    E5D0: 00 91 2D 01 00 0F E5 40 80 01 02 01 00 40 01 05  // ..-....@.....@..
    E5E0: 00 00 91 2D 01 00 03 02 41 01 42 21 00 63 08 4E  // ...-....A.B!.c.N
    E5F0: 00 5A 5A 43 6E 00 15 2D 40 06 01 05 00 00 52 5C  // .ZZCn..-@.....R\
    E600: 01 00 5C EA 01 00 3F 40 43 63 00 2D 25 00 01 3E  // ..\...?@Cc.-%..>
    E610: 25 00 04 45 19 00 01 05 00 00 91 2D 01 00 01 1A  // %..E.......-....
    E620: 01 00 00 01 05 00 00 91 2D 01 00 03 02 41 01 5B  // ........-....A.[
    E630: C9 01 02 01 04 04 37 00 00 42 21 00 63 07 29 00  // ......7..B!.c.).
    E640: 63 03 66 00 63 02 CD 00 63 04 F2 00 63 0C 7D 01  // c.f.c...c...c.}.
    E650: 63 0D A0 01 5A 5A 43 C8 01 01 0D 5B 55 9F 0F 01  // c...ZZC....[U...
    E660: 05 5C 55 00 00 00 00 01 05 5D 55 7D 00 00 00 66  // .\U......]U}...f
    E670: 06 01 4C 5D 55 31 00 03 24 46 3B 00 3E 25 46 00  // ..L]U1..$F;.>%F.
    E680: 44 58 00 01 25 5D 55 00 4A 25 59 55 10 49 C8 01  // DX..%]U.J%YU.I..
    E690: 0D E5 59 55 02 5B 4A 25 59 55 01 44 C8 01 4A 25  // ..YU.[J%YU.D..J%
    E6A0: 5A 55 10 44 6E 00 4A E5 59 55 02 49 89 00 4A 25  // ZU.Dn.J.YU.I..J%
    E6B0: 5A 55 08 49 C8 01 43 BD 00 4A E5 59 55 01 49 C8  // ZU.I..C..J.YU.I.
    E6C0: 01 4A 25 59 55 10 44 BD 00 0D A5 59 55 03 0D 65  // .J%YU.D....YU..e
    E6D0: 59 55 03 01 0D 5B 55 00 00 5C 25 59 55 EF 01 4A  // YU...[U..\%YU..J
    E6E0: 25 5A 55 10 44 AF 00 01 0D 5B 55 9F 0F 07 E5 59  // %ZU.D....[U....Y
    E6F0: 55 FC 0D E5 5D 55 01 0D 25 59 55 11 5B 66 06 03  // U...]U..%YU.[f..
    E700: 24 46 3B 00 3E 25 46 00 49 C8 01 4A 25 59 55 01  // $F;.>%F.I..J%YU.
    E710: 44 C8 01 4A 25 5A 55 10 44 E3 00 5C E5 59 55 FE  // D..J%ZU.D..\.YU.
    E720: 02 5B 4A 65 53 00 02 44 FF 00 0D 25 61 55 01 3D  // .[JeS..D...%aU.=
    E730: 8D 00 00 00 44 7C 01 03 05 46 60 FE CD 00 56 00  // ....D|...F`...V.
    E740: 41 03 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40  // A..A.!.A....'.F@
    E750: 3E 05 41 00 00 00 00 44 2F 01 2D 0D 40 01 00 01  // >.A....D/.-.@...
    E760: 8A 5B 55 40 56 00 41 03 19 41 00 21 02 40 41 27  // .[U@V.A..A.!.@A'
    E770: 02 46 40 01 A5 60 55 0C 01 0A 60 55 40 15 05 40  // .F@..`U...`U@..@
    E780: 04 56 00 41 03 29 41 00 2D 0D 41 01 00 21 02 40  // .V.A.)A.-.A..!.@
    E790: 41 1B 05 40 08 01 0A 5E 55 40 0D E5 5E 55 C0 07  // A..@...^U@..^U..
    E7A0: 25 61 55 FE 4A 65 61 55 01 49 74 01 5B 4A 25 59  // %aU.JeaU.It.[J%Y
    E7B0: 55 01 44 95 01 4A 25 59 55 10 49 C8 01 4A 25 5A  // U.D..J%YU.I..J%Z
    E7C0: 55 10 44 8D 01 07 E5 5D 55 FE 0D 25 59 55 11 5B  // U.D....]U..%YU.[
    E7D0: 4A 25 59 55 01 44 C8 01 4A 25 59 55 10 44 C8 01  // J%YU.D..J%YU.D..
    E7E0: 4A 25 5A 55 10 44 B0 01 07 A5 59 55 FC 07 65 59  // J%ZU.D....YU..eY
    E7F0: 55 FC 5C 25 59 55 EF 01 5B 00 83 00 03 01 08 00  // U.\%YU..[.......
    E800: 37 00 00 56 00 01 3D E5 00 20 48 1B 00 03 39 43  // 7..V..=.. H...9C
    E810: 00 03 02 01 44 56 00 00 03 09 00 00 1B 05 00 05  // ....DV..........
    E820: 2D 05 00 00 74 01 00 01 02 00 00 00 03 00 40 01  // -...t.........@.
    E830: 00 56 00 41 03 21 41 00 09 25 41 1F 75 02 40 41  // .V.A.!A..%A.u.@A
    E840: 03 65 41 20 33 62 41 41 3D EA 00 41 47 73 00 2D  // .eA 3bAA=..AGs.-
    E850: 0D 00 01 00 01 02 00 00 00 02 00 00 01 00 03 2A  // ...............*
    E860: 41 41 56 28 41 6E 02 00 41 0F 01 40 00 02 02 00  // AAV(An..A..@....
    E870: 40 33 05 01 01 00 00 00 08 02 00 01 5B 00 AE 00  // @3..........[...
    E880: 03 01 00 10 37 00 00 56 00 40 4A 25 00 EC 01 44  // ....7..V.@J%...D
    E890: 30 00 4A 25 05 EC 1E 49 30 00 03 25 40 01 01 05  // 0.J%...I0..%@...
    E8A0: 05 EC 03 00 00 00 4A 65 05 EC 0F 49 28 00 3D 65  // ......Je...I(.=e
    E8B0: 02 00 49 3B 00 2C 25 02 F4 3D E5 02 00 49 46 00  // ..I;.,%..=...IF.
    E8C0: 2C A5 02 F4 3D 65 02 02 49 61 00 01 05 00 00 28  // ,...=e..Ia.....(
    E8D0: 68 01 00 01 01 01 00 00 02 05 00 A4 A0 05 00 54  // h..............T
    E8E0: 00 63 C0 01 01 64 C0 00 01 21 65 C0 02 01 01 66  // .c...d...!e....f
    E8F0: C0 01 01 31 67 C0 02 01 01 E8 C0 03 3D 65 02 01  // ...1g.......=e..
    E900: 44 8E 00 3D E5 02 01 44 8E 00 51 02 4A E5 A0 21  // D..=...D..Q.J..!
    E910: 80 49 8E 00 3E 25 40 01 49 AD 00 01 05 05 EC 01  // .I..>%@.I.......
    E920: 00 00 00 4A 65 05 EC 0F 49 A5 00 5B FD 02 02 01  // ...Je...I..[....
    E930: 00 00 37 00 00 3D 25 01 01 44 7F 00 3D 25 01 02  // ..7..=%..D..=%..
    E940: 44 6C 01 3D 25 01 00 49 CE 02 3D 05 00 00 00 00  // Dl.=%..I..=.....
    E950: 00 49 39 00 3A 00 00 0D 25 90 4A 01 4A 65 90 4A  // .I9.:...%.J.Je.J
    E960: 01 44 30 00 5B 54 20 90 4A 02 E5 00 03 52 3C 03  // .D0.[T .J....R<.
    E970: 00 40 24 01 3E 39 40 00 44 7B 00 4A A5 24 01 08  // .@$.>9@.D{.J.$..
    E980: 44 4F 00 03 39 40 00 3E E5 40 00 49 66 00 03 E5  // DO..9@.>.@.If...
    E990: 40 20 01 02 24 01 40 4A A5 24 01 08 44 6B 00 4A  // @ ..$.@J.$..Dk.J
    E9A0: A5 24 01 10 44 73 00 55 38 00 5B 3D 65 01 02 44  // .$..Ds.U8.[=e..D
    E9B0: DB 00 02 05 00 08 E8 00 00 52 3C 3C F9 24 01 00  // .........R<<.$..
    E9C0: 44 C5 00 07 25 15 01 FE 4A A5 24 01 10 44 9C 00  // D...%...J.$..D..
    E9D0: 03 00 40 24 01 03 F9 40 00 3E 25 40 00 49 B8 00  // ..@$...@.>%@.I..
    E9E0: 03 25 40 68 01 02 24 01 40 4A A5 24 01 10 44 BD  // .%@h..$.@J.$..D.
    E9F0: 00 5D 05 00 00 00 00 FF 00 00 00 00 52 29 07 0D  // .]..........R)..
    EA00: 18 01 F8 FE 43 3E 01 02 05 00 40 7F 95 23 07 25  // ....C>....@..#.%
    EA10: 15 01 FE 4A A5 F9 34 03 44 3E 01 56 08 40 03 31  // ...J..4.D>.V.@.1
    EA20: 40 01 15 0D 40 0E 0F 0D 40 0F 04 01 0A 10 35 40  // @...@...@.....5@
    EA30: 5C B1 11 35 FC 01 51 05 07 A5 F9 34 FC 01 25 FD  // \..5..Q....4..%.
    EA40: 34 40 01 05 FA 34 00 00 DD 00 01 65 14 35 01 54  // 4@...4.....e.5.T
    EA50: 08 FC 34 01 A5 FD 34 E8 0D A5 11 35 10 4A 65 1C  // ..4...4....5.Je.
    EA60: 35 02 44 31 01 0D 65 11 35 03 01 01 42 01 00 01  // 5.D1..e.5...B...
    EA70: 01 46 01 00 01 01 4A 01 00 01 01 4E 01 00 01 01  // .F....J....N....
    EA80: 52 01 00 01 01 56 01 00 3D 65 01 02 49 6B 01 5C  // R....V..=e..Ik.\
    EA90: 0D 18 01 F8 FF 01 01 5B 56 00 41 03 31 41 01 09  // .......[V.A.1A..
    EAA0: 25 41 03 15 25 41 02 66 FF 2D 0D 42 D5 02 2D 0A  // %A..%A.f.-.B..-.
    EAB0: 42 41 26 05 00 0A 00 00 00 03 04 41 00 00 27 02  // BA&........A..'.
    EAC0: 41 40 3E 05 40 00 00 01 00 45 A5 01 03 0D 40 FF  // A@>.@....E....@.
    EAD0: FF 66 FF 2D 0D 42 E5 02 56 00 41 03 39 41 01 15  // .f.-.B..V.A.9A..
    EAE0: 25 41 02 2D 0A 42 41 03 0C 48 00 00 01 0A 3A 3B  // %A.-.BA..H....:;
    EAF0: 40 3A 00 00 3D 65 01 0B 49 30 02 20 05 00 64 00  // @:..=e..I0. ..d.
    EB00: 00 00 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10  // ....H....A@..%A.
    EB10: 09 0D 41 DF F7 4B A5 01 04 44 F4 01 0F 65 41 08  // ..A..K...D...eA.
    EB20: 03 0C 48 00 00 4A 05 AF 3B 01 00 00 00 44 19 02  // ..H..J..;....D..
    EB30: 03 0C 48 02 00 3C 02 41 01 40 49 19 02 3C 02 40  // ..H..<.A.@I..<.@
    EB40: 01 41 44 CE 02 03 0C 48 02 00 07 25 40 01 EF 01  // .AD....H...%@...
    EB50: 02 41 01 40 01 0A 40 01 41 43 CE 02 56 00 40 03  // .A.@..@.AC..V.@.
    EB60: 8D 40 0C 00 3D 65 01 18 44 53 02 03 8D 40 3E 00  // .@..=e..DS...@>.
    EB70: 3D 65 01 19 44 53 02 03 A9 40 01 33 A5 40 14 03  // =e..DS...@.3.@..
    EB80: 31 40 01 09 25 40 03 15 25 40 04 0F 0D 40 01 01  // 1@..%@..%@...@..
    EB90: 4B A5 01 04 44 70 02 0F 0D 40 00 02 56 00 41 03  // K...Dp...@..V.A.
    EBA0: 29 41 01 33 25 41 14 03 0C 48 00 00 4A 05 AF 3B  // )A.3%A...H..J..;
    EBB0: 01 00 00 00 44 AC 02 03 0C 48 02 00 4A 25 40 01  // ....D....H..J%@.
    EBC0: 10 49 AC 02 3C 22 43 01 41 49 AC 02 03 1A 48 40  // .I..<"C.AI....H@
    EBD0: 3C 0A 00 01 40 44 CE 02 03 1A 48 40 07 25 00 01  // <...@D....H@.%..
    EBE0: FE 03 0C 48 02 00 01 22 43 01 41 07 0D 40 01 EF  // ...H..."C.A..@..
    EBF0: F7 03 1A 48 40 01 0A 00 01 40 3A 00 00 5B 7A 28  // ...H@....@:..[z(
    EC00: 00 00 CA 9A 3B 80 7C 81 4A 00 2F 68 59 00 94 35  // ....;.|.J./hY..5
    EC10: 77 00 00 00 00 00 02 04 00 00 04 08 00 00 06 0C  // w...............
    EC20: 00 00 08 10 00 00 0A 14 00 FF FF FF FF FF FF FF  // ................
    EC30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EC60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    EC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EC80: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Migrations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


