
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000E0D  0x02  "AMD   "  "CPMDFIG2"  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x05  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 04)  CRAT  0x00001D28  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x000003F1  0x02  "ALASKA"  "CPUSSDT "  0x00000001  "AMI "   0x00000001
 06)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 07)  VFCT  0x00019AA0  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  SSDT  0x0000013D  0x02  "AMD   "  "EXTGPP00"  0x00000001  "INTL"   0x20120913
 09)  SSDT  0x00000114  0x01  "AMD Am"  "AmdTable"  0x00001000  "INTL"   0x20120913
 10)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 11)  DSDT  0x0002F9AE  0x02  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20120913
 12)  SSDT  0x00008868  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20120913
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 14)  SSDT  0x000000BC  0x02  "AMD   "  "MEMTOOL0"  0x00000002  "INTL"   0x20120913
 15)  SSDT  0x0000250B  0x02  "AMD   "  "CDFAAIG2"  0x00000001  "INTL"   0x20120913
 16)  SSDT  0x000000A7  0x02  "AMD   "  "GPIO    "  0x00000001  "INTL"   0x20120913
 17)  SSDT  0x00009964  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 18)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 19)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 20)  WPBT  0x00000036  0x01  "ALASKA"  "A M I   "  0x00000001  "MSFT"   0x00010013
 21)  SSDT  0x00007CC1  0x02  "AMD   "  "Splinter"  0x00000002  "MSFT"   0x04000000
 22)  SSDT  0x0000228F  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20120913
 23)  SSDT  0x00000042  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20120913
 24)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000005
 25)  SSDT  0x00000325  0x02  "AMD   "  "CPMDFDG1"  0x00000001  "INTL"   0x20120913
 26)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 27)  FACS  0x00000040  0x02
 28)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00010013
 29)  SSDT  0x00000241  0x02  "AMD   "  "USB     "  0x00000001  "INTL"   0x20120913

Found 29 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 67
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 10
[06Fh 0111   1]                Local Apic ID : 10
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 12
[077h 0119   1]                Local Apic ID : 12
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 14
[07Fh 0127   1]                Local Apic ID : 14
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 16
[087h 0135   1]                Local Apic ID : 16
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 18
[08Fh 0143   1]                Local Apic ID : 18
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 1A
[097h 0151   1]                Local Apic ID : 1A
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 1C
[09Fh 0159   1]                Local Apic ID : 1C
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 1E
[0A7h 0167   1]                Local Apic ID : 1E
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 01
[0AFh 0175   1]                Local Apic ID : 01
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 03
[0B7h 0183   1]                Local Apic ID : 03
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 05
[0BFh 0191   1]                Local Apic ID : 05
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 07
[0C7h 0199   1]                Local Apic ID : 07
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 09
[0CFh 0207   1]                Local Apic ID : 09
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 0B
[0D7h 0215   1]                Local Apic ID : 0B
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 0D
[0DFh 0223   1]                Local Apic ID : 0D
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 0F
[0E7h 0231   1]                Local Apic ID : 0F
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 11
[0EFh 0239   1]                Local Apic ID : 11
[0F0h 0240   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 13
[0F7h 0247   1]                Local Apic ID : 13
[0F8h 0248   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 15
[0FFh 0255   1]                Local Apic ID : 15
[100h 0256   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 17
[107h 0263   1]                Local Apic ID : 17
[108h 0264   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 19
[10Fh 0271   1]                Local Apic ID : 19
[110h 0272   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1B
[117h 0279   1]                Local Apic ID : 1B
[118h 0280   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1D
[11Fh 0287   1]                Local Apic ID : 1D
[120h 0288   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 1F
[128h 0296   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 20
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 21
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 05 67 41 4C 41 53 4B 41  // APIC^....gALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 10 10  // ................
    0070: 01 00 00 00 00 08 12 12 01 00 00 00 00 08 14 14  // ................
    0080: 01 00 00 00 00 08 16 16 01 00 00 00 00 08 18 18  // ................
    0090: 01 00 00 00 00 08 1A 1A 01 00 00 00 00 08 1C 1C  // ................
    00A0: 01 00 00 00 00 08 1E 1E 01 00 00 00 00 08 01 01  // ................
    00B0: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00C0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00D0: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00E0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 11 11  // ................
    00F0: 01 00 00 00 00 08 13 13 01 00 00 00 00 08 15 15  // ................
    0100: 01 00 00 00 00 08 17 17 01 00 00 00 00 08 19 19  // ................
    0110: 01 00 00 00 00 08 1B 1B 01 00 00 00 00 08 1D 1D  // ................
    0120: 01 00 00 00 00 08 1F 1F 01 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C0
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 0000000067582018
[030h 0048   4]                Image OffsetX : 0000042C
[034h 0052   4]                Image OffsetY : 000001BE

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 C0 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 01 00 01 00 18 20 58 67 00 00 00 00  // ......... Xg....
    0030: 2C 04 00 00 BE 01 00 00                          // ,.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00001D28
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6F
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 7464 (0x1D28)

    0000: 43 52 41 54 28 1D 00 00 01 6F 41 4D 44 00 00 00  // CRAT(....oAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 75 00 00 00 01 00 00 00 00 00 00 00  // ....u...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  //  ...............
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 80 07 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0570: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0630: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    06F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0720: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0730: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0760: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0770: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    07A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    07B0: 10 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    07E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    07F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0820: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0830: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0860: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0870: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    08A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    08B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    08E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    08F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0920: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0930: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0960: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0970: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    09B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    09F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0A20: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0A30: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0A60: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0A70: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0AA0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0AB0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0AE0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B20: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0B30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B60: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0B70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0BA0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0BE0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0C20: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0C30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0C60: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CA0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CE0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0D60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0D70: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0DE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0DF0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0E60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0E70: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0EE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0EF0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0F20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0F30: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0F60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0F70: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0FA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0FB0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0FE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0FF0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1010: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1020: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1030: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1050: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1060: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1070: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    10A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    10B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    10E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    10F0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1120: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1130: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1150: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1160: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1170: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    11A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    11B0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    11C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    11E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    11F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1210: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1220: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1230: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1250: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1260: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1270: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1290: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    12A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    12B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    12E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    12F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1310: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1320: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1330: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1360: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1370: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1390: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    13A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    13B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    13C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    13E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    13F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1410: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1420: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1430: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1450: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1460: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1470: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    14A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    14B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    14C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    14E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    14F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1510: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1520: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1530: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1550: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1560: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1570: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    15A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    15B0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    15C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    15E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    15F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1620: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1630: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1650: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1660: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1670: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    16A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    16B0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    16C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    16E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    16F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1710: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1730: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1750: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1760: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1770: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    17A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    17B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    17E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    17F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1810: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1830: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1860: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1870: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    18A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    18B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    18E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    18F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1910: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1930: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1960: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1970: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    19A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    19B0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    19E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    19F0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1A30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1A60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1A70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1AB0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1AE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1B30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1B60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1B70: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1BE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1C30: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1C60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1CE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1D20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x00000001)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.DADR, UnknownObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.RPRM, UnknownObj)
    External (_SB_.PCI0.SPCH, IntObj)
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HDVD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, IntObj)
    External (M083, UnknownObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M4F0, IntObj)
    External (M4F1, IntObj)
    External (M600, IntObj)
    External (M601, IntObj)
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0280)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x02A0)
    Name (IO3L, 0x10)
    Name (IO4B, 0x02B0)
    Name (IO4L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0x73654000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0x73658000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0x7767EA18)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1C
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0x80000000)
            Name (MBL, 0x7D000000)
            Name (MAB, 0x0000000880000000)
            Name (MAL, 0x000000F480000000)
            Name (MAM, 0x000000FCFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000020000000)
                    Name (UMAB, 0x0000000858000000)
                    Name (UMAM, 0x0000000877FFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG07) /* \_SB_.AG07 */
                    }

                    Return (PG07) /* \_SB_.PG07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG09) /* \_SB_.AG09 */
                    }

                    Return (PG09) /* \_SB_.PG09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00F)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.AR24 */
                    }

                    Return (PD24) /* \_SB_.PD24 */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D021)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GPPG)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D023)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPH)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D025)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D026)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D02B)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (D032)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x10)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        SCF7,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2F), 
                        SCFF,   8, 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y24)
                        IRQNoFlags (_Y21)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y22)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y27)
                        IRQ (Level, ActiveLow, Shared, _Y25)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y26)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 &= 0xCF
                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                OPT2 |= One
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x0A
                                OPT0 |= 0x20
                                RGE4 |= 0x10
                                LDN = 0x0B
                                OPT7 = 0x45
                                If ((OPT7 == 0x87))
                                {
                                    OPT7 = 0x45
                                }
                            }

                            If ((Arg0 == 0x03))
                            {
                                LDN = 0x07
                                RGE0 &= 0x7F
                                RGE1 &= 0x7F
                            }

                            If ((Arg0 == 0x04))
                            {
                                LDN = 0x07
                                RGE0 &= 0x7F
                                RGE1 &= 0x7F
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        If ((Arg0 == One))
                        {
                            PMFG = OPT3 /* \_SB_.PCI0.SBRG.SIO1.OPT3 */
                            OPT3 = 0xFF
                            OPT6 &= 0xCF
                            OPT2 &= 0xFE
                        }

                        If ((Arg0 >= 0x03))
                        {
                            PMFG = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                            RGE0 &= 0x9F
                            RGE4 &= 0xFE
                        }

                        LDN = 0x0B
                        If ((OPT7 != Zero))
                        {
                            OPT7 = 0x87
                        }

                        LDN = 0x0F
                        RGE5 &= 0xDF
                        SCFF &= 0xF7
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (CIRW)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (LDN, 0x0E)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D02E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3D) /* \_SB_.AG3D */
                    }

                    Return (PG3D) /* \_SB_.PG3D */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1A, 0x04))
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3F) /* \_SB_.AG3F */
                    }

                    Return (PG3F) /* \_SB_.PG3F */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG40) /* \_SB_.AG40 */
                    }

                    Return (PG40) /* \_SB_.PG40 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG41) /* \_SB_.AG41 */
                    }

                    Return (PG41) /* \_SB_.PG41 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG43) /* \_SB_.AG43 */
                    }

                    Return (PG43) /* \_SB_.PG43 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, SPTS (Arg0), \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2E)
                    IRQNoFlags (_Y2F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y30)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y31)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y32)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y33)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y34,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                )
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                )
            Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y35)
            {
                0x00000031,
            }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y30._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y30._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y31._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y31._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y32._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y32._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y33._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y33._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y34._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y31._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02))
                {
                    CreateDWordField (Arg0, 0x1D, SRQ0)
                    CreateDWordField (CRSI, \_SB.TPM._Y35._INT, SIRQ)  // _INT: Interrupts
                    SIRQ = SRQ0 /* \_SB_.TPM_._SRS.SRQ0 */
                    CreateBitField (Arg0, 0xD9, ITRS)
                    CreateBitField (CRSI, \_SB.TPM._Y35._HE, LTRS)  // _HE_: High-Edge
                    LTRS = ITRS /* \_SB_.TPM_._SRS.ITRS */
                    ITRV = ITRS /* \_SB_.TPM_._SRS.ITRS */
                    CreateBitField (Arg0, 0xDA, SILV)
                    CreateBitField (CRSI, \_SB.TPM._Y35._LL, SLLV)  // _LL_: Low Level
                    SLLV = SILV /* \_SB_.TPM_._SRS.SILV */
                    ILVV = SILV /* \_SB_.TPM_._SRS.SILV */
                }
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y34._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y34._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Name (GPB1, 0xFEC30000)
    Name (GPB2, 0x5A5A5A5A)
    Name (IOR1, 0x00001F00)
    Name (IOR2, 0x0003FFFC)
    Name (IOR3, 0x00001F00)
    Name (IOR4, 0x00000000)
    Name (IOR5, 0x5A5A5A5A)
    Name (IOR6, 0x5A5A5A5A)
    Name (IOR7, 0x5A5A5A5A)
    Name (IOR8, 0x5A5A5A5A)
    Scope (\_SB.PCI0.GPP7)
    {
        Name (XHGP, 0x02)
        Method (SREG, 2, NotSerialized)
        {
        }

        Method (SPRW, 1, NotSerialized)
        {
        }

        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x02, 
            0x04
        })
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (DPSA, 0xEE)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GPP7.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x0D))
            {
                Local1 = Zero
                While ((Local1 <= Zero))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            ^^DADR = ^^SPCH /* External reference */
                            0x10
                            Local2
                            If (((One = (^^RPRM & (^^DADR + (Local2 + 0x14)))) == 
                                0x40))
                            {
                                Zero
                                0x40
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    XHGP = M4F1 /* External reference */
                    Local0
                }

                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    XHGP = M4F1 /* External reference */
                    Local0
                }

                PWST = 0xD3
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            }

            Return (DSTA) /* \_SB_.PCI0.GPP7.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            ^SREG (Arg0, Arg1)
            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (HPRW, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
            ^SPRW (Arg0)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                Return (PW3S) /* \_SB_.PCI0.GPP7.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    HPRW (One)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    HPRW (Zero)
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }
            }
        }

        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                    One
                }
            }
        })
        Device (UP00)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (XHGP, 0x02)
            Method (SPRW, 1, NotSerialized)
            {
                If (CondRefOf (\HDVD))
                {
                    If ((Arg0 == One))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        \HDVD (Zero)
                    }
                }
            }

            Method (SREG, 2, NotSerialized)
            {
                Local2 = \GPB1
                If ((Local2 != 0x5A5A5A5A))
                {
                    Local0 = (\_SB.PCI0.GPP7.UP00.DADR + 0x40)
                    OperationRegion (VARM, SystemMemory, Local0, 0x09)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        GPBR,   32, 
                        Offset (0x08), 
                        GPEN,   1, 
                        Offset (0x09)
                    }

                    OperationRegion (VARN, SystemMemory, Local2, 0x10)
                    Field (VARN, AnyAcc, NoLock, Preserve)
                    {
                        IOW1,   32, 
                        IOW2,   32, 
                        IOW3,   32, 
                        IOW4,   32
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        GPBR = Local2
                        GPEN = One
                        IOW1 = IOR1 /* \IOR1 */
                        IOW2 = IOR2 /* \IOR2 */
                        IOW3 = IOR3 /* \IOR3 */
                        IOW4 = IOR4 /* \IOR4 */
                        M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (DPSA, 0xEE)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.RPRM.VARR */
                If ((Arg1 == One))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == One))
                {
                    OperationRegion (VARA, SystemMemory, Local0, One)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = Zero
                Local0 = Zero
                While ((Local0 <= 0x0D))
                {
                    Local1 = Zero
                    While ((Local1 <= Zero))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != Zero)))
                        {
                            Local2 |= (One << Local0)
                        }
                        ElseIf ((Local1 == Zero))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = RPRM ((Arg0 + 0x34), One)
                While ((Local1 != Zero))
                {
                    Local2 = RPRM ((DADR + Local1), One)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.EBUS */
                        }
                        Else
                        {
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), One)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                One) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                One) & 0x40) == Zero))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                    0x40) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        XHGP = M4F1 /* External reference */
                        Local0
                    }

                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        XHGP = M4F1 /* External reference */
                        Local0
                    }

                    PWST = 0xD3
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + Zero), 0x04)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                ^SREG (Arg0, Arg1)
                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (HPRW, 1, NotSerialized)
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                ^SPRW (Arg0)
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        HPRW (One)
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        HPRW (Zero)
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (DP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP00.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP08)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP08.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP10)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (WN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP10.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP18)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (LN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP18.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP20)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP20.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP28)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP28.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP30)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP30.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP38)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP38.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP40)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (UP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                        If (CondRefOf (\HDVD))
                        {
                            If ((Arg0 == One))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                \HDVD (One)
                            }
                        }
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                        Local2 = \GPB2
                        If ((Local2 != 0x5A5A5A5A))
                        {
                            Local0 = (\_SB.PCI0.GPP7.UP00.DP40.UP00.DADR + 0x40)
                            OperationRegion (VARM, SystemMemory, Local0, 0x09)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                GPBR,   32, 
                                Offset (0x08), 
                                GPEN,   1, 
                                Offset (0x09)
                            }

                            OperationRegion (VARN, SystemMemory, Local2, 0x10)
                            Field (VARN, AnyAcc, NoLock, Preserve)
                            {
                                IOW1,   32, 
                                IOW2,   32, 
                                IOW3,   32, 
                                IOW4,   32
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                GPBR = Local2
                                GPEN = One
                                IOW1 = IOR5 /* \IOR5 */
                                IOW2 = IOR6 /* \IOR6 */
                                IOW3 = IOR7 /* \IOR7 */
                                IOW4 = IOR8 /* \IOR8 */
                                M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                            }
                        }
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (DP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP08)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP10)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (WN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP18)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (LN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP20)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP28)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP30)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP38)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP40)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (UP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP48)
                    {
                        Name (_ADR, 0x00090000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP50)
                    {
                        Name (_ADR, 0x000A0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP58)
                    {
                        Name (_ADR, 0x000B0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP60)
                    {
                        Name (_ADR, 0x000C0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (XH00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP68)
                    {
                        Name (_ADR, 0x000D0000)  // _ADR: Address
                        Name (XHGP, 0xFF)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    XHGP = M4F1 /* External reference */
                                    Local0
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (SA00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0xFF)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                        XHGP = M4F1 /* External reference */
                                        Local0
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }
                }
            }

            Device (DP48)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP48.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP50)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP50.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP58)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP58.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP60)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (XH00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP60.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                0x0A
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                One
                                One
                                0x0101
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                0x0A
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                One
                                One
                                0x0101
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0103
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0103
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0104
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0104
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0105
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0105
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0106
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTA)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0106
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTB)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0107
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTC)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0108
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTG)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0102
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTD)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0109
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTE)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x010A
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTF)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x010B
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTH)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x010B
                                One
                                0x25
                                Zero
                            }
                        }
                    }
                }
            }

            Device (DP68)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
                Name (XHGP, 0xFF)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            XHGP = M4F1 /* External reference */
                            Local0
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (SA00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0xFF)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP68.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                XHGP = M4F1 /* External reference */
                                Local0
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Name (SPTA, 0x55555555)
        Method (AIE2, 0, NotSerialized)
        {
            If (((\_GPE.SPTA != 0x55555555) && (\_GPE.SPTA != Zero)))
            {
                \_GPE.SIE3 ()
            }
        }

        Method (SP52, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If (((\_SB.PCI0.GPP7.UP00.DP40.UP00.DSTA == 0x0F) && (\_SB.PCI0.GPP7.UP00.DP40.UP00.ESTA == Zero)))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP72, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP53, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP73, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP54, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP74, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : CA
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 77663000
[028h 0040   4]                 DSDT Address : 74965000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 04
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 0000000074965000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 CA 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 00 30 66 77 00 50 96 74 00 01 09 00  // .....0fw.P.t....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 04 00 00 00 00 00 00 00 00 00 50 96 74  // .............P.t
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 88ABF237
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 37 F2 AB 88 00 00 00 00  // FACS@...7.......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 9F 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 32 38 36 34  // ....$FID.x.A2864
    0030: 30 31 32 00 96 8E 9C 72 93 EF 7E F8 03 07 53 39  // 012....r..~...S9
    0040: AA 3A AA B7 30 35 00 32 36 00 30 30 00 31 32 00  // .:..05.26.00.12.
    0050: E6 07 0B 04 12 1F 2E FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C7
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 0000000073660000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 000000007367D000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 C7 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 00 66 73  // ..............fs
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 D0 67 73  // ..............gs
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : ED
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 ED 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 24
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 24 41 4C 41 53 4B 41  // MCFG<....$ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 4D 53 46 54  // A M I.......MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG2", 0x00000001)
{
    /*
     * iASL Warning: There were 35 external control methods found during
     * disassembly, but only 0 were resolved (35 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, IntObj)
    External (M087, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M105, IntObj)
    External (M106, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M23A, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M378, IntObj)
    External (M379, IntObj)
    External (M380, IntObj)
    External (M381, IntObj)
    External (M382, IntObj)
    External (M383, IntObj)
    External (M384, IntObj)
    External (M385, IntObj)
    External (M386, IntObj)
    External (M387, IntObj)
    External (M388, IntObj)
    External (M389, IntObj)
    External (M390, IntObj)
    External (M391, IntObj)
    External (M392, IntObj)
    External (M444, IntObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M207 = M100 (M160,  = \_SB.ALIB /* External reference */)
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB
                0xAA
                Local0
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A (M240, One))
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "Splinter", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x01, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x18,  // ........
            /* 00A0 */  0x1B, 0xFF, 0xFF, 0x02, 0x00, 0x02, 0x02, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, 0x01)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, 0x00, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 = 0x00
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = 0x00
                A040 = 0x00
                A041 = 0x00
                A042 = 0x00
                A043 = 0x00
                A044 = 0x00
                A045 (Arg1)
                A007 (0xAA99)
            }

            Return (0x00)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A096 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A097 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A023)
            CreateByteField (Local7, 0x02, A047)
            CreateByteField (Local7, 0x03, A098)
            A023 = 0x04
            A047 = 0x00
            If ((Local2 == 0x00))
            {
                A098 = 0x00
            }
            Else
            {
                A098 = 0x01
            }

            Return (Local7)
        }

        Method (A096, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A091 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A091 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A091 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A091 (Arg1))
            }
        }

        Method (A097, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A092 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A092 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A092 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A092 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A092 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A092 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A092 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A092 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A092 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A046, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A047)
            A047 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A047 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A047 = 0x01
                Return (Local7)
            }

            A048 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A049 ()
            A047 = 0x02
            Return (Local7)
        }

        Method (A050, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A049 ()
        }

        Method (A051, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A052, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A053, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A054 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A049 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A055, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A048, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                If ((A056 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A057 (Local0)
                        A058 (Local0, Local1)
                    }
                    Else
                    {
                        A058 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A059, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A060 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A061, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A062 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A049, 0, NotSerialized)
        {
            A061 ()
            A059 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A060 (Local0)
                Local2 = A063 (Local0)
                If ((Local1 != Local2))
                {
                    A064 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A064 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A064, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A065 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A065 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A065 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A065 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A065 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A065 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A065 (Arg1))
            }
        }

        Method (A063, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A066 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A066 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A066 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A066 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A066 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A066 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A066 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A066 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A066 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A066 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A066 ())
            }
        }

        Method (A060, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A067 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A067 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A067 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A067 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A067 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A067 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A067 ())
            }
        }

        Method (A062, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A068 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A068 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A068 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A068 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A068 ())
            }
        }

        Method (A057, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A069 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A069 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A069 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A069 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A069 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A069 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A069 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A069 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A069 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A069 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A069 ())
            }
        }

        Method (A058, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A070 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A070 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A070 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A070 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A070 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A070 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A070 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A070 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A070 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A070 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A070 (Arg1))
            }
        }

        Method (A056, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A071 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A071 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A071 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A071 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A071 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A071 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A071 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A071 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A071 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A071 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A071 (Arg1))
            }
        }

        Method (A054, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A072 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A072 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A072 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A072 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A072 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A072 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A072 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A072 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A072 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A072 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A072 ())
            }
        }

        OperationRegion (A127, SystemMemory, AGRB, 0x1000)
        Field (A127, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A128,   32
        }

        BankField (A127, A128, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A126,   32
        }

        BankField (A127, A128, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A119,   32
        }

        BankField (A127, A128, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A120,   32
        }

        BankField (A127, A128, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A127, A128, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A127, A128, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A127, A128, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A127, A128, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A125,   32
        }

        BankField (A127, A128, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        BankField (A127, A128, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A127, A128, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A127, A128, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A127, A128, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A127, A128, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A127, A128, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        BankField (A127, A128, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A127, A128, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A127, A128, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A110,   32
        }

        BankField (A127, A128, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A127, A128, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        Method (A099, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A080 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A080 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A080 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A080 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A080 (Arg1))
            }
        }

        Method (A100, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A101 /* \_SB_.A101 */
                Local1 &= 0xFF00FCFF
                A101 = (Local0 | Local1)
                Local1 = A101 /* \_SB_.A101 */
                A101 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A105 /* \_SB_.A105 */
                    A105 = (0x00400000 | Local1)
                    Local1 = A105 /* \_SB_.A105 */
                    A105 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A106 /* \_SB_.A106 */
                    A106 = (0x00400000 | Local1)
                    Local1 = A106 /* \_SB_.A106 */
                    A106 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A107 /* \_SB_.A107 */
                    A107 = (0x00400000 | Local1)
                    Local1 = A107 /* \_SB_.A107 */
                    A107 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A108 /* \_SB_.A108 */
                    A108 = (0x00400000 | Local1)
                    Local1 = A108 /* \_SB_.A108 */
                    A108 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A109 /* \_SB_.A109 */
                    A109 = (0x00400000 | Local1)
                    Local1 = A109 /* \_SB_.A109 */
                    A109 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A110 /* \_SB_.A110 */
                    A110 = (0x00400000 | Local1)
                    Local1 = A110 /* \_SB_.A110 */
                    A110 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A111 /* \_SB_.A111 */
                    A111 = (0x00400000 | Local1)
                    Local1 = A111 /* \_SB_.A111 */
                    A111 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A112 /* \_SB_.A112 */
                    A112 = (0x00400000 | Local1)
                    Local1 = A112 /* \_SB_.A112 */
                    A112 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A099 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A100 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A113)
            CreateDWordField (Arg1, 0x04, A114)
            CreateDWordField (Arg1, 0x08, A115)
            CreateDWordField (Arg1, 0x0C, A116)
            CreateDWordField (Arg1, 0x10, A117)
            CreateDWordField (Arg1, 0x14, A118)
            A119 = 0x00
            While ((A119 != 0x00)){}
            A120 = A113 /* \_SB_.A018.A113 */
            A121 = A114 /* \_SB_.A018.A114 */
            A122 = A115 /* \_SB_.A018.A115 */
            A123 = A116 /* \_SB_.A018.A116 */
            A124 = A117 /* \_SB_.A018.A117 */
            A125 = A118 /* \_SB_.A018.A118 */
            A126 = Arg0
            While ((A119 == 0x00)){}
            Release (\_SB.AM00)
        }

        Method (A094, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg0
            A013 = Arg1
            A014 = Arg2
            A015 = Arg3
            A018 (0x09, Local7)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A127, A128, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A129,   32
            }

            Release (\_SB.AM00)
            Return (A129) /* \_SB_.AMNR.A129 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A127, A128, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A130,   32
            }

            A130 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A131)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A131))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR0.ABR0.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR0.ABR0.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR0.ABR1.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR0.ABR1.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR0.ABR2.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR0.ABR2.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR0.ABR3.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR0.ABR3.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR4.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR4.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR5.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR5.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR6.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR6.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR7.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR7.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR8.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR8.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABR9.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABR9.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A084, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A084, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A078,   8, 
                    A079,   8, 
                    Offset (0x68), 
                    A085,   2, 
                        ,   2, 
                    A086,   1, 
                    A087,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A088,   1, 
                    Offset (0x88), 
                    A089,   4, 
                        ,   1, 
                    A090,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A073, 0, NotSerialized)
                {
                    Local0 = A055 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A074, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A074 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A073 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A066, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A069, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A065, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A075 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A076 (0x00)
                    Name (A077, 0x00)
                    A076 (0x01)
                }

                Method (A070, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A071, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A078) && (Local0 <= A079)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A072, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A075, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A081, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A082 (Local0, 0x00)
                    Local2 = A082 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A082 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A082 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A083 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A083 (0x64, Local5, 0x00)
                                            A083 (0x67, 0x00, 0x00)
                                            A083 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A083 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A095, 2, NotSerialized)
                {
                    If ((A082 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A082 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A082 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A076, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A082 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A082 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A095 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A082 (Local0, (Local1 + 0x10))
                                A093 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A093 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A093, 3, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A082, 2, Serialized)
                {
                    Local0 = (AGRB + (A079 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A082.ADRR */
                }

                Method (A091, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A080 (Arg0))
                }

                Method (A092, 1, NotSerialized)
                {
                    Name (A077, 0x00)
                    Local2 = 0x00
                    A077 = A085 /* \_SB_.AWR1.ABRA.A085 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A086 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A076 (0x00)
                        Local0 = A082 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A093 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A082 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A093 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A086 = 0x01
                        Local0 = 0x05
                    }

                    A085 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A094 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A082 (0x00, 0x00)
                            A094 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A085 = A077 /* \_SB_.AWR1.ABRA.A092.A077 */
                    If ((A077 != 0x00))
                    {
                        A076 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A134, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A135 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A083, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A135, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A081 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A081 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A081 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A081 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A081 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A081 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A081 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A081 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A081 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A081 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A081 (Arg1))
            }
        }

        Method (A045, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((Local1 == 0x00))
            {
                A012 = Local2
                A134 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A012 = Local2
                A134 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, 0x01)
        Name (A009, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((AD00 == 0x00))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020026, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set SMTEn", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x44)
    {
        0x43, 
        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x42, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x58, 0x02, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00,  // X.......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3A, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x6C, 0x0A, 0x00, 0x00,  // ....l...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x36, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0xF2, 0x12, 0x00, 0x00, 0xA2, 0x17, 0x00, 0x00,  // ........
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x90, 0xD0, 0x03, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x20, 0xBF, 0x02, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2F, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0xEA, 0x00, 0x00, 0x00,  // =.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0x20, 0x01, 0x00, 0x00,  // .... ...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0x12, 0x02, 0x00, 0x00,  // <.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x36, 0x00, 0x00, 0x00,  // ....6...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x57, 0x00, 0x00, 0x00,  // ....W...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x3A, 0x00, 0x00, 0x00,  // ....:...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00,  // ;.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,  // ....@...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00020026, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x26, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // &.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (DSMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x7700E018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID)
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE)
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFDG1", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.M241, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.M434, UnknownObj)
    External (M049, UnknownObj)
    External (M097, UnknownObj)
    External (M128, UnknownObj)

    Scope (\_SB.PCI0.GPP0)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (VGA)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (HDAU)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M097 != Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x06)
            {
                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                Package (0x00){}, 
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (M432, Zero)
            Name (M433, Zero)
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (M435, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (M435, Zero, M436)
                        CreateBitField (M435, 0x05, M445)
                        CreateBitField (M435, 0x0A, M437)
                        CreateBitField (M435, 0x0B, M438)
                        If ((Arg1 >= 0x04))
                        {
                            M436 = One
                            M445 = One
                            ((0x66 = (M049 >> M128)) /* External reference */ & 0x04)
                            One
                            M432
                            ((0x66 = (M049 >> M128)) /* External reference */ & 0x05)
                            One
                            M433
                            If ((M432 == One))
                            {
                                M437 = One
                            }

                            If ((M433 == One))
                            {
                                M438 = One
                            }
                        }
                        Else
                        {
                            M436 = One
                            M445 = One
                        }

                        Return (M435) /* \_SB_.PCI0.GPP0._DSM.M435 */
                    }
                    Case (0x05)
                    {
                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Return (One)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        If ((Local0 <= 0x2710))
                        {
                            \_SB.PCI0.GPP0.M434 = 0x2710
                        }
                        Else
                        {
                            Local0 = 0x2710
                        }

                        Return (Local0)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "AMD", "USB     ", 0x00000001)
{
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (M600, IntObj)
    External (M601, IntObj)

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x09
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x03
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x04
                    One
                    0x15
                    Zero
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x00000001)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (C010)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (C011)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (C012)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (C013)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (C014)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (C015)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (C016)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (C017)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }

            Device (C018)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
            }

            Device (C019)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
            }

            Device (C01A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
            }

            Device (C01B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
            }

            Device (C01C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
            }

            Device (C01D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
            }

            Device (C01E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
            }

            Device (C01F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "EXTGPP00", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB.PCI0.GPP0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_GPE)
    {
        Name (NGP0, 0x01)
        Name (NGP2, 0x01)
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP0 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            }

            If ((\_GPE.NGP2 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00001000)
{
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68, DeviceObj)

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68)
    {
        Name (SPTS, 0x0F)
        Device (SPTO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xAAAAAAAA,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SPTS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    /*
     * iASL Warning: There were 96 external control methods found during
     * disassembly, but only 0 were resolved (96 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.PTS0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP10, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP11, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP12, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP13, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP14, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP15, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP16, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP17, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP20, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP21, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP22, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP23, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP24, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP25, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP26, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP27, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP30, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP31, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP32, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP33, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP34, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP35, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP36, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP37, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP40, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP41, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP42, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP43, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP44, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP45, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP46, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP47, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP50, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP51, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP52, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP53, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP54, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP55, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP56, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP57, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP60, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP61, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP62, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP63, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP64, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP65, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP66, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP67, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP70, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP71, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP72, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP73, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP74, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP75, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP76, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP77, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.WAK0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.AM00, UnknownObj)
    External (_SB_.BPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.BWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)
    External (NFPC, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    OperationRegion (CPNV, SystemMemory, 0x77668018, 0x0001010F)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
            }
        }
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        If (((Arg0 != Zero) && (Arg0 != One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x06)
    {
        0x05, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (XL0B, 0, Serialized)
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local3 = \_SB.ALIB (0x0C)
                Local4
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "MEMTOOL0", 0x00000002)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (M049, IntObj)
    External (M04E, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M610, MethodObj)    // Warning: Unknown method, guessing 6 arguments

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 (Zero, M610 (0x10, Local2, Local3 = MEMI /* \MGRT.MEMI */, 
            Local4 = MEMD /* \MGRT.MEMD */, M04E (M610 (0x11, Local3, M04E (M610 (0x15, Local4, M232 (Local2, 
            Zero, Zero)))))) = M049 /* External reference */) != )){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CDFAAIG2", 0x00000001)
{
    /*
     * iASL Warning: There were 22 external control methods found during
     * disassembly, but only 0 were resolved (22 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M04A, IntObj)
    External (M04B, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M099, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M101, IntObj)
    External (M102, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M103, UnknownObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unk

SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "GPIO    ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.UBTC, UnknownObj)
    External (M31D, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUFF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
            })
            Return (BUFF) /* \_SB_.GPIO._AEI.BUFF */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x0A)
                {
                    If (CondRefOf (M31D))
                    {
                        M31D ()
                        Notify (\_SB.UBTC, 0x80) // Status Change
                    }
                }

            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C010.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C011.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C012.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C013.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C014.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C015.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C016.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C017.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C018)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C018.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C019)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C019.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 6F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FD210510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 0000000077653000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 6F 41 4C 41 53 4B 41  // TPM2L....oALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 30 65 77 00 00 00 00              // .....0ew....


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 00019AA0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 73
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 105120 (0x19AA0)

    0000: 56 46 43 54 A0 9A 01 00 01 73 41 4C 41 53 4B 41  // VFCT.....sALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 EC 00 00 55 AA 76 E9 AD 02 00 00  // ........U.v.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 50 02 00 00 00 00 49 42 4D F0 84 92 00 00 00 00  // P.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 A5 02 00 00 00 00 00 00  // 20..............
    00B0: 2A 02 00 00 00 00 00 00 30 33 2F 33 30 2F 31 37  // *.......03/30/17
    00C0: 20 30 36 3A 33 35 00 00 31 00 00 00 E9 B8 03 00  //  06:35..1.......
    00D0: E9 C7 03 00 00 00 F4 00 00 13 00 00 00 D0 01 00  // ................
    00E0: F2 46 20 E1 02 80 7E 00 22 23 45 02 12 00 00 00  // .F ...~."#E.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 0C 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D E6 0F  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 31 31 33 2D  // ............113-
    0160: 44 30 30 30 33 34 30 30 5F 31 30 30 00 50 4F 4C  // D0003400_100.POL
    0170: 41 52 49 53 32 30 00 50 43 49 5F 45 58 50 52 45  // ARIS20.PCI_EXPRE
    0180: 53 53 00 47 44 44 52 35 00 0D 0A 44 30 30 30 33  // SS.GDDR5...D0003
    0190: 34 20 50 6F 6C 61 72 69 73 32 30 20 58 4C 20 41  // 4 Polaris20 XL A
    01A0: 31 20 47 44 44 52 35 20 31 32 38 4D 78 33 32 20  // 1 GDDR5 128Mx32 
    01B0: 4A 30 33 33 30 4F 41 53 2E 53 4A 43 20 32 30 31  // J0330OAS.SJC 201
    01C0: 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // 7               
    01D0: 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00  //        ..... ...
    01E0: 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41  // (C) 1988-2010, A
    01F0: 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65  // dvanced Micro De
    0200: 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D  // vices, Inc..ATOM
    0210: 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31  // BIOSBK-AMD VER01
    0220: 35 2E 30 35 30 2E 30 30 30 2E 30 30 31 2E 30 30  // 5.050.000.001.00
    0230: 30 30 30 30 00 4A 30 33 33 30 4F 41 53 2E 53 4A  // 0000.J0330OAS.SJ
    0240: 43 00 31 33 39 32 35 38 35 20 00 33 37 38 39 37  // C.1392585 .37897
    0250: 31 20 20 00 20 20 20 20 20 20 20 20 00 54 55 4C  // 1  .        .TUL
    0260: 5F 50 31 30 46 5F 4C 4B 35 58 5F 44 4C 5F 35 39  // _P10F_LK5X_DL_59
    0270: 35 5F 35 37 30 5F 52 58 35 37 30 4E 45 57 31 32  // 5_570_RX570NEW12
    0280: 37 30 47 30 39 31 5C 63 6F 6E 66 69 67 2E 68 00  // 70G091\config.h.
    0290: 00 00 24 00 01 01 41 54 4F 4D 00 C0 D1 03 CD 01  // ..$...ATOM......
    02A0: 75 02 21 01 F6 03 00 00 00 00 8C 14 79 23 50 02  // u.!.........y#P.
    02B0: 5C 97 02 98 A0 00 00 00 50 43 49 52 02 10 DF 67  // \.......PCIR...g
    02C0: 00 00 18 00 00 00 00 03 76 00 32 0F 00 00 00 00  // ........v.2.....
    02D0: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 CB 56 E1  // AMD ATOMBIOS..V.
    02E0: 61 00 00 00 00 00 00 00 00 A0 36 F2 F4 FC B8 17  // a.........6.....
    02F0: 44 4F 68 35 74 35 21 C8 E0 01 00 00 00 00 00 00  // DOh5t5!.........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 56 1E 0E  // .............V..
    0310: 1F E8 3E 2A 81 4D 50 00 20 1F 5E 1E 06 66 50 66  // ..>*.MP. .^..fPf
    0320: 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 3E 02  // QfRfSfUfVfW...>.
    0330: 8C 0E 32 02 B2 20 E8 F6 2D 0B C0 75 14 A2 02 00  // ..2.. ..-..u....
    0340: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0350: CB E8 0C 2F E8 D7 2C 32 D2 89 16 40 02 A1 3E 02  // .../..,2...@..>.
    0360: 66 C1 C0 10 A1 32 02 E8 0B 04 E8 1E 04 E8 E6 03  // f....2..........
    0370: E8 54 05 E8 4B 03 E8 D9 29 F7 45 50 00 20 75 13  // .T..K...).EP. u.
    0380: E8 AF 29 0B C0 74 0C E8 49 00 E8 F7 57 E8 DB 03  // ..)..t..I...W...
    0390: E8 3E 58 E8 B9 00 B4 80 E8 C8 2C 8A C7 66 C1 E0  // .>X.......,..f..
    03A0: 10 8A E3 B0 14 66 50 BB 08 00 E8 13 28 A8 01 66  // .....fP.....(..f
    03B0: 58 74 02 B0 20 66 A3 84 92 E8 68 03 E8 D6 03 E8  // Xt.. f....h.....
    03C0: C3 2E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    03D0: 07 1F CB 2E 8B 1E 32 02 83 3E E3 03 00 75 04 89  // ......2..>...u..
    03E0: 1E E1 03 1E 2E 8E 1E D9 03 9C FA 66 C7 06 08 01  // ...........f....
    03F0: 65 F0 00 F0 C7 06 40 00 F6 03 89 1E 42 00 C7 06  // e.....@.....B...
    0400: B4 01 F6 03 89 1E B6 01 C7 06 7C 00 A2 60 89 1E  // ..........|..`..
    0410: 7E 00 C7 06 0C 01 B5 64 89 1E 0E 01 C7 06 A8 04  // ~......d........
    0420: E2 5A 89 1E AA 04 2E 8E 1E E1 03 8B C3 A3 E4 5A  // .Z.............Z
    0430: A3 F4 5A A3 06 5B 9D 1F C3 50 4D 49 44 F6 03 0A  // ..Z..[...PMID...
    0440: 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB  // H...............
    0450: 00 00 E8 6B 27 66 C1 E8 10 A3 56 02 C3 00 E8 FF  // ...k'f....V.....
    0460: 2D E8 48 02 75 1B 2E 3A 26 4C 02 75 05 E8 47 00  // -.H.u..:&L.u..G.
    0470: EB 11 80 FC 4F 75 05 E8 EE 42 EB 07 E8 3B 4A EB  // ....Ou...B...;J.
    0480: 02 B4 01 E8 FF 2D CF E8 D6 2D E8 1F 02 75 05 E8  // .....-...-...u..
    0490: 25 00 EB 02 B4 01 E8 EC 2D CB E8 C3 2D E8 0C 02  // %.......-...-...
    04A0: 75 0F 80 FC 4F 75 05 E8 BE 42 EB 07 E8 0B 4A EB  // u...Ou...B....J.
    04B0: 02 B4 01 E8 CF 2D CB 1E 06 66 50 66 51 66 52 66  // .....-...fPfQfRf
    04C0: 53 66 55 66 56 66 57 0E 1F 3C 04 75 23 BB 0B 00  // SfUfVfW..<.u#...
    04D0: E8 ED 26 8D 36 1E 01 8A 3C 80 EF 30 B3 02 8B EC  // ..&.6...<..0....
    04E0: 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 9A 01  // .^..F.f....F....
    04F0: 3C 05 75 18 E8 77 02 E8 34 2B 8B EC 89 56 10 89  // <.u..w..4+...V..
    0500: 46 00 66 C1 E8 10 89 46 04 E9 7E 01 3C 06 75 39  // F.f....F..~.<.u9
    0510: E8 69 02 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 9F  // .i.f.....F......
    0520: 26 88 46 18 E8 59 02 66 0B C0 0F 84 54 01 66 89  // &.F..Y.f....T.f.
    0530: 46 0C BB 06 00 E8 88 26 33 C0 66 89 46 00 2E 8B  // F......&3.f.F...
    0540: 16 56 02 89 56 10 E9 41 01 3C 0B 75 24 0A DB 75  // .V..V..A.<.u$..u
    0550: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    0560: 28 01 8A C7 E8 3B 01 E8 D8 0E 0F 84 14 01 E9 19  // (....;..........
    0570: 01 3C 17 75 21 E8 6A 06 74 06 E8 5E 0D E8 A7 18  // .<.u!.j.t..^....
    0580: E8 8B 07 E8 AF 0E 33 C9 66 C1 E8 10 0A E8 8B EC  // ......3.f.......
    0590: 89 4E 14 E9 F4 00 3C 18 75 6A 0A FF 75 18 E8 9B  // .N....<.uj..u...
    05A0: 05 8B EC 89 46 0C 66 C1 E8 10 89 46 14 E8 3C 08  // ....F.f....F..<.
    05B0: 89 4E 10 E9 D4 00 80 FF 0F 74 0E 23 C9 0F 84 C1  // .N.......t.#....
    05C0: 00 E8 C5 05 E8 1B 06 75 2D BB 00 1C E8 51 2C 66  // .......u-....Q,f
    05D0: 0B C0 0F 84 AC 00 E8 35 07 0B C9 0F 84 A3 00 BE  // .......5........
    05E0: 00 1C E8 C6 01 0F 84 99 00 BE 00 1C B0 40 E8 23  // .............@.#
    05F0: 02 E8 48 05 EB 06 E8 3E 06 E8 2D 06 8B EC 89 46  // ..H....>..-....F
    0600: 0C E9 86 00 3C 19 75 05 E8 00 06 EB 7D 3C 82 75  // ....<.u.....}<.u
    0610: 2C 80 FB 01 75 0D 8B EC BE 74 06 89 76 00 8C 4E  // ,...u....t..v..N
    0620: 10 EB 67 80 FB 05 75 15 0A FF 75 0A E8 86 03 8B  // ..g...u...u.....
    0630: EC 89 46 14 EB 54 E8 45 03 74 3F EB 4D 3C 8E 75  // ..F..T.E.t?.M<.u
    0640: 12 80 FF 01 74 08 80 FF 02 75 2F 80 C1 02 E8 CA  // ....t....u/.....
    0650: 03 EB 37 3C 8F 75 23 80 FF 05 75 05 E8 1C 06 EB  // ..7<.u#...u.....
    0660: 29 80 FF 07 75 0A E8 20 06 8B EC 88 5E 0C EB 1A  // )...u.. ....^...
    0670: 80 FF 85 75 05 E8 03 06 EB 10 8B EC C6 46 19 02  // ...u.........F..
    0680: EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66  // .....F....2....f
    0690: 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    06A0: 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 50 32 C0 53  // ..Q.......Y.P2.S
    06B0: BB 15 00 E8 0A 25 5B 3C FF 74 04 24 03 0A C0 58  // .....%[<.t.$...X
    06C0: C3 E8 E7 2B E8 A8 06 F7 C1 02 00 74 0E 06 0E 07  // ...+.......t....
    06D0: 8D 3E 74 06 B8 02 00 E8 C1 05 07 C3 00 00 00 00  // .>t.............
    06E0: 07 00 08 08 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 01 C3 00  // ................
    0700: 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61  // PQ...C.3.B...B.a
    0710: 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 98 27 E6 61  // .....a.......'.a
    0720: 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6  // YX...V...>...v..
    0730: 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00  // ..............!.
    0740: 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26  // .3.2...........&
    0750: 21 00 5E 1F C3 00 E8 76 26 75 03 E8 20 28 E8 B9  // !.^....v&u.. (..
    0760: 26 E8 83 26 E8 DD 25 E8 71 0B C3 B0 01 C3 BB 01  // &..&..%.q.......
    0770: 00 E8 38 24 C3 BB 01 00 E8 3B 24 C3 E8 C5 27 C3  // ..8$.....;$...'.
    0780: 53 BB 04 00 E8 39 24 33 C0 5B C3 E8 8E 27 BB 0A  // S....9$3.[...'..
    0790: 00 E8 22 24 C3 BB 0A 00 E8 11 24 66 8B C8 E8 7B  // .."$......$f...{
    07A0: 27 BB 0A 00 66 2B C1 E8 0C 24 C3 E8 29 00 0B C9  // '...f+...$..)...
    07B0: 74 22 E8 66 06 E8 FB 15 66 51 66 8B C8 BB 07 00  // t".f....fQf.....
    07C0: E8 E9 23 66 25 00 FE 00 00 66 0B C1 E8 E7 23 66  // ..#f%....f....#f
    07D0: 59 0C 01 C3 32 C0 C3 E8 9D 03 0B C9 75 0A 33 D2  // Y...2.......u.3.
    07E0: E8 4F 25 8B C8 E8 A1 03 0B D1 E8 FF 05 23 CA 66  // .O%..........#.f
    07F0: C1 E6 10 33 F6 E8 8A 0A 74 15 E8 97 0B 85 C1 74  // ...3....t......t
    0800: F4 51 E8 A2 11 59 75 ED E8 89 0B 33 C8 EB E6 66  // .Q...Yu....3...f
    0810: C1 EE 10 C3 A8 10 75 5A E8 AA 15 66 C1 E6 10 33  // ......uZ...f...3
    0820: F6 E8 5E 0A 74 24 E8 2E 0A 74 0B E8 AB 0B 24 03  // ..^.t$...t....$.
    0830: 3C 03 75 ED EB 0A E8 A0 0B A8 01 74 E4 E8 15 07  // <.u........t....
    0840: E8 A3 16 B5 00 E8 98 0B EB D7 E8 7C 01 32 C9 33  // ...........|.2.3
    0850: F6 E8 72 0A E8 19 16 E8 F9 25 FE C1 38 C1 72 F1  // ..r......%..8.r.
    0860: 66 C1 EE 10 E8 57 15 A8 20 75 57 A8 40 75 03 E8  // f....W.. uW.@u..
    0870: 36 1C E8 3E 15 0A C0 75 19 32 C9 33 F6 E8 46 0A  // 6..>...u.2.3..F.
    0880: 0B F6 74 05 B5 01 E8 D6 1C E8 C7 25 FE C1 38 C1  // ..t........%..8.
    0890: 72 EB 33 F6 E8 E0 09 74 26 E8 1D 0B E8 8F 22 75  // r.3....t&....."u
    08A0: 14 E8 E5 03 0A DB 74 0D E8 AA 06 E8 38 16 B5 00  // ......t.....8...
    08B0: E8 2D 0B EB DF E8 10 16 B5 01 E8 23 0B EB D5 E8  // .-.........#....
    08C0: 14 01 C3 E8 6C 24 C3 E8 5D 15 33 C9 33 D2 E8 B8  // ....l$..].3.3...
    08D0: 02 66 33 D2 66 33 C0 E8 3E 0B E8 58 00 B1 FF E8  // .f3.f3..>..X....
    08E0: 9C 00 33 F6 E8 9B 09 74 10 E8 CD 0A E8 3B 22 74  // ..3....t.....;"t
    08F0: 03 E8 6F 16 E8 9C 16 EB EB B3 01 E8 6A 02 32 C9  // ..o.........j.2.
    0900: E8 08 03 E8 D2 24 E8 29 24 0B C0 C3 E8 CC 09 E8  // .....$.)$.......
    0910: 15 15 66 33 C0 66 BA 00 F0 00 F0 E8 2D 02 51 B1  // ..f3.f......-.Q.
    0920: 01 E8 D8 02 59 33 F6 E8 58 09 74 05 E8 34 16 EB  // ....Y3..X.t..4..
    0930: F6 E8 84 1B C3 B8 02 00 E8 29 09 74 40 B1 07 E8  // .........).t@...
    0940: 27 20 E8 31 0B A8 04 75 12 E8 A0 26 83 3D 00 75  // ' .1...u...&.=.u
    0950: 0A E8 DE 23 83 E0 FD E8 E1 23 C3 66 BA FF FF FB  // ...#.....#.f....
    0960: FF 66 B8 00 00 04 00 E8 AE 0A E8 D1 0C E8 0F 26  // .f.............&
    0970: 8A C8 BB 04 00 E8 34 22 8A E1 E8 39 22 C3 E8 4B  // ......4"...9"..K
    0980: 22 74 31 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A  // "t18.v.....8.s..
    0990: C8 BB 02 00 E8 15 22 8A E1 E8 1A 22 BB 02 00 E8  // ......"...."....
    09A0: 0A 22 66 C1 E8 18 A8 20 75 08 B1 04 E8 BA 1F 0C  // ."f.... u.......
    09B0: 01 C3 0C 01 C3 51 E8 13 22 74 0C 8A CC BB 02 00  // .....Q.."t......
    09C0: E8 E9 21 8A C4 8A E1 59 C3 33 F6 E8 A9 08 74 05  // ..!....Y.3....t.
    09D0: E8 7F 14 EB F6 C3 33 F6 E8 9C 08 74 05 E8 81 14  // ......3....t....
    09E0: EB F6 C3 E8 49 25 75 1B 80 F9 01 75 17 33 F6 E8  // ....I%u....u.3..
    09F0: 85 08 74 0C 51 E8 D0 14 B5 01 E8 E3 09 59 EB EF  // ..t.Q........Y..
    0A00: E8 D3 FF C3 E8 C2 FF 33 F6 E8 6B 08 74 0C 51 E8  // .......3..k.t.Q.
    0A10: 51 15 B5 00 E8 C9 09 59 EB EF C3 B8 02 00 E8 43  // Q......Y.......C
    0A20: 08 74 03 E8 43 1F C3 E8 0D 1B 8B C8 66 C1 E8 10  // .t..C.......f...
    0A30: 8B D0 C3 8A C3 24 80 E8 8B 13 32 C9 B5 10 E8 AF  // .....$....2.....
    0A40: 1A E8 0F 24 FE C1 38 C1 72 F2 C3 E8 04 13 3B C1  // ...$..8.r.....;.
    0A50: 7C 3A 8B C1 E8 44 13 E8 D5 1C 8B C8 51 E8 74 13  // |:...D......Q.t.
    0A60: E8 38 13 59 E8 C8 1C 3B C8 72 02 8B C1 8D 5C 04  // .8.Y...;.r....\.
    0A70: E8 25 27 32 C9 B5 0F E8 76 1A E8 D6 23 FE C1 38  // .%'2....v...#..8
    0A80: C1 72 F2 8D 5C 04 E8 97 27 0B C0 C3 33 C0 C3 52  // .r..\...'...3..R
    0A90: E8 9C 00 8A C2 8B D1 66 C1 E2 10 8A D0 32 C0 B9  // .......f.....2..
    0AA0: 00 02 E8 69 1C 66 C1 EA 10 8B CA 5A E8 80 00 E8  // ...i.f.....Z....
    0AB0: 6E 27 66 C1 E8 02 0A F6 75 04 66 C1 E8 02 67 26  // n'f.....u.f...g&
    0AC0: 88 07 66 C1 E8 0A 67 26 88 47 01 66 C1 E8 0A 67  // ..f...g&.G.f...g
    0AD0: 26 88 47 02 66 83 C7 04 83 C3 04 E2 D2 C3 51 E8  // &.G.f.........Q.
    0AE0: 4D 00 53 67 26 8A 47 02 66 C1 E0 0A 67 26 8A 47  // M.Sg&.G.f...g&.G
    0AF0: 01 66 C1 E0 0A 67 26 8A 07 66 C1 E0 02 0A F6 75  // .f...g&..f.....u
    0B00: 04 66 C1 E0 02 E8 78 26 66 83 C7 04 83 C3 04 E2  // .f....x&f.......
    0B10: D2 5B 59 8A C2 8B D1 66 C1 E2 10 8A D0 B9 00 03  // .[Y....f........
    0B20: 53 E8 EA 1B 5B E8 2B 23 FE C1 38 C1 72 F2 C3 BB  // S...[.+#..8.r...
    0B30: 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00  // ..3.........S...
    0B40: E8 69 20 66 25 FF 0F FF 0F 5B C3 53 66 50 66 51  // .i f%....[.SfPfQ
    0B50: 66 8B C8 BB 03 00 E8 53 20 66 23 C2 66 0B C1 E8  // f......S f#.f...
    0B60: 54 20 66 59 66 58 5B C3 B8 2C 06 F6 C3 01 75 03  // T fYfX[..,....u.
    0B70: B8 0C 06 E8 37 00 C3 BB 05 00 E8 2F 20 25 FF 0F  // ....7....../ %..
    0B80: 8B C8 66 C1 E0 10 8B D0 C3 E8 A6 21 23 C8 81 E2  // ..f........!#...
    0B90: 15 01 23 D1 66 C1 E2 10 8B D1 BB 05 00 E8 0C 20  // ..#.f.......... 
    0BA0: 66 25 00 F0 EA FE 66 0B C2 E8 0A 20 C3 66 50 53  // f%....f.... .fPS
    0BB0: 51 66 52 66 33 D2 33 DB 8A DC 8A E8 8A C8 80 E1  // QfRf3.3.........
    0BC0: 1F 66 BA 01 00 00 00 66 D3 E2 E8 DF 1F 66 0B C2  // .f.....f.....f..
    0BD0: F6 C5 20 75 03 66 33 C2 E8 DB 1F 66 5A 59 5B 66  // .. u.f3....fZY[f
    0BE0: 58 C3 66 50 53 BB 06 00 E8 C1 1F A8 10 75 09 BB  // X.fPS........u..
    0BF0: F0 16 E8 2B 26 3D 5A A5 5B 66 58 C3 B8 04 06 80  // ...+&=Z.[fX.....
    0C00: F1 01 C0 E1 05 0A C1 E8 A3 FF C3 53 66 50 BB F8  // ...........SfP..
    0C10: 16 E8 0C 26 8A C1 E8 67 25 66 58 5B C3 53 BB F8  // ...&...g%fX[.S..
    0C20: 16 E8 FC 25 83 E0 01 5B C3 BB 06 00 E8 7D 1F 66  // ...%...[.....}.f
    0C30: C1 E8 10 25 FF 0F C3 BB 06 00 E8 6F 1F 66 25 FF  // ...%.......o.f%.
    0C40: FF 00 F0 66 C1 E2 10 66 0B C2 E8 69 1F C3 53 66  // ...f...f...i..Sf
    0C50: 50 BB 07 00 E8 55 1F F6 C4 01 66 58 B0 06 74 02  // P....U....fX..t.
    0C60: B0 08 5B C3 53 BB 07 00 E8 41 1F 80 E4 FE 80 FD  // ..[.S....A......
    0C70: 06 74 03 80 CC 01 E8 3D 1F 5B C3 53 B8 06 06 C0  // .t.....=.[.S....
    0C80: E3 05 0A C3 E8 26 FF 5B C3 66 50 BB 06 00 E8 1B  // .....&.[.fP.....
    0C90: 1F 24 40 C0 E8 06 8A D8 66 58 C3 57 66 50 66 33  // .$@.....fX.WfPf3
    0CA0: C0 B9 08 00 FC F3 66 AB 66 58 5F E8 3E 01 0B C0  // ......f.fX_.>...
    0CB0: 75 09 E8 E3 05 74 3C 85 C1 74 F7 E8 A6 05 8D 9C  // u....t<..t......
    0CC0: 6A 01 E8 5B 25 26 89 05 8D 9C 6E 01 E8 51 25 26  // j..[%&....n..Q%&
    0CD0: 89 45 02 8D 9C B5 02 E8 46 25 02 C0 04 04 26 88  // .E......F%....&.
    0CE0: 45 06 26 88 45 07 26 88 45 08 B0 07 26 88 45 04  // E.&.E.&.E...&.E.
    0CF0: 0A C0 C3 32 C0 C3 C3 66 50 53 51 52 56 57 E8 E1  // ...2...fPSQRVW..
    0D00: FE 74 03 E8 D5 05 5F 5E 5A 59 5B 66 58 C3 33 C9  // .t...._^ZY[fX.3.
    0D10: E8 1C 22 75 48 66 BA FF FF 0C FF 66 33 C0 E8 F7  // .."uHf.....f3...
    0D20: 06 33 F6 E8 5C 05 74 18 E8 69 06 A9 C8 0E 74 F3  // .3..\.t..i....t.
    0D30: E8 43 07 A8 04 75 04 A8 18 74 E8 E8 7B 00 EB E3  // .C...u...t..{...
    0D40: E8 2C 00 75 03 E8 A4 00 33 F6 E8 35 05 74 0E E8  // .,.u....3..5.t..
    0D50: 42 06 85 C1 74 F4 51 E8 F9 07 59 EB ED C3 8D 5D  // B...t.Q...Y....]
    0D60: 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 0C 21 C3 66  // (f....\(.I...!.f
    0D70: 50 53 52 56 33 C9 33 D2 8D 36 48 0D E8 B6 06 A8  // PSRV3.3..6H.....
    0D80: 03 74 03 83 CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74  // .t....f........t
    0D90: 15 66 A9 01 00 00 00 74 07 BB 01 00 D3 E3 0B D3  // .f.....t........
    0DA0: 66 D1 E8 46 EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3  // f..F......^Z[fX.
    0DB0: 03 07 01 05 06 09 0A 0B FF 66 50 53 51 E8 D4 05  // .........fPSQ...
    0DC0: 0F BC D8 81 C3 78 0D 8A 0F 66 B8 01 00 00 00 66  // .....x...f.....f
    0DD0: D3 E0 66 BA FF FF FF FF E8 3D 06 59 5B 66 58 C3  // ..f......=.Y[fX.
    0DE0: 01 12 0B 10 09 13 14 11 0C 15 16 17 50 53 52 E8  // ............PSR.
    0DF0: 7D FF 75 13 B9 01 00 E8 38 1F 23 C8 75 19 33 C0  // }.u.....8.#.u.3.
    0E00: E8 95 04 8B C8 EB 10 83 F9 02 74 0B E8 7A FE 80  // ..........t..z..
    0E10: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B  // ..u....Z[X.V....
    0E20: EC 66 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 1A  // .f3.f.F.f.......
    0E30: FD 66 C1 E6 10 E8 60 04 0B C0 74 1E 85 C1 74 F5  // .f....`...t...t.
    0E40: 55 E8 56 00 5D 74 04 33 C8 EB EA E8 BB 05 66 3B  // U.V.]t.3......f;
    0E50: 56 00 76 E1 66 89 56 00 EB DB E8 DF FC 74 07 66  // V.v.f.V......t.f
    0E60: 8B 46 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8  // .F.......^.3.fP.
    0E70: 05 04 66 58 8D 9C D8 02 E8 05 23 66 8B D0 E8 BB  // ..fX......#f....
    0E80: FC E8 DD 18 8D 9C 1C 03 E8 95 23 38 D0 74 0A 8A  // ..........#8.t..
    0E90: C2 E8 EC 22 B0 02 E8 5F 05 C3 50 51 E8 C5 03 32  // ..."..._..PQ...2
    0EA0: C0 E8 54 05 E8 3A 03 E8 AB 00 8D 9C 40 03 E8 6F  // ..T..:......@..o
    0EB0: 23 38 E8 74 0A 8A C5 E8 C6 22 B0 02 E8 39 05 E8  // #8.t....."...9..
    0EC0: BD 00 E8 D8 00 75 73 E8 9E 00 8D 9C 4C 01 E8 4F  // .....us.....L..O
    0ED0: 23 8B C8 8B D3 8D 9C 00 03 E8 44 23 3B C1 74 05  // #.........D#;.t.
    0EE0: B0 02 E8 13 05 E8 65 0A 8D 9C 00 03 E8 4F 18 8D  // ......e......O..
    0EF0: 9C D8 02 E8 8A 22 66 C1 CE 10 8B FE 66 C1 CE 10  // ....."f.....f...
    0F00: E8 C9 00 E8 FF 00 E8 94 04 8A E9 8D 9C DC 02 32  // ...............2
    0F10: C9 E8 B0 22 E8 7D 04 66 25 FF 0F 00 00 E8 F9 03  // ...".}.f%.......
    0F20: 80 F9 01 75 04 66 C1 E0 10 59 58 66 BA FF FF FF  // ...u.f...YXf....
    0F30: FF 66 33 D0 E8 14 FC 33 D2 C3 E8 05 00 0C 01 59  // .f3....3.......Y
    0F40: 58 C3 53 66 50 8D 9C D4 02 E8 D4 22 8A C4 E8 2F  // X.SfP......".../
    0F50: 22 66 58 5B C3 53 66 50 8D 9C D4 02 E8 C1 22 8A  // "fX[.SfP......".
    0F60: E0 E8 1C 22 66 58 5B C3 E8 CE 03 E8 91 03 8A DD  // ..."fX[.........
    0F70: E8 6B 19 8D 9C 3C 03 8A E9 32 C9 E8 46 22 C3 83  // .k...<...2..F"..
    0F80: EC 08 8B EC E8 B2 03 E8 75 03 E8 FF 18 8A 6E 00  // ........u.....n.
    0F90: 8D 9C 4C 03 32 C9 E8 2B 22 83 C4 08 C3 33 C9 56  // ..L.2..+"....3.V
    0FA0: E8 23 03 0B F6 5E 74 0C FE C1 E8 A6 1E 38 C1 75  // .#...^t......8.u
    0FB0: EE 0C 01 C3 8D 9C D4 02 E8 65 22 38 C8 74 0A 8A  // .........e"8.t..
    0FC0: C1 E8 BC 21 B0 02 E8 2F 04 32 C0 C3 E8 0A 00 8D  // ...!.../.2......
    0FD0: 9C D0 02 32 C9 E8 EC 21 C3 8D 1D E8 42 22 66 8B  // ...2...!....B"f.
    0FE0: D0 8D 9C 02 03 E8 38 22 51 8B C8 8D 9C 06 03 E8  // ......8"Q.......
    0FF0: 2E 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00  // ."f.....Yf;.u...
    1000: EB 02 B5 02 C3 E8 6D 03 8D 9C 40 03 B1 03 E8 B3  // ......m...@.....
    1010: 21 E8 B2 06 8D 9C 40 03 B1 02 E8 A7 21 E8 DF 02  // !.....@.....!...
    1020: 80 FD 00 75 1D E8 94 00 66 81 FA F0 D2 00 00 75  // ...u....f......u
    1030: 06 66 BA 78 69 00 00 E8 B6 00 E8 EF 00 E8 AB 03  // .f.xi...........
    1040: EB 38 E8 81 03 E8 A3 03 66 52 E8 F7 02 0B D2 74  // .8......fR.....t
    1050: 07 E8 82 18 66 5A EB 22 E8 5E 03 E8 00 1B 66 5A  // ....fZ.".^....fZ
    1060: 51 E8 9B 02 80 FD 02 59 75 10 B5 04 66 81 FA 74  // Q......Yu...f..t
    1070: 40 00 00 76 05 B5 08 66 D1 EA 8D 9C 54 03 66 8B  // @..v...f....T.f.
    1080: C2 E8 FC 20 8D 9C 40 03 E8 95 21 8A E5 E8 F0 20  // ... ..@...!.... 
    1090: E8 1E 01 8D 9C 48 03 32 C9 E8 28 21 E8 9A 02 E8  // .....H.2..(!....
    10A0: 5D 02 E8 34 18 8D 9C 58 03 32 C9 E8 16 21 E8 88  // ]..4...X.2...!..
    10B0: 02 E8 4B 02 8D 9C 60 03 E8 EC 17 C3 53 8D 9C 29  // ..K...`.....S..)
    10C0: 01 E8 5C 21 66 33 D2 0A C0 75 05 BA 48 3F 5B C3  // ..\!f3...u..H?[.
    10D0: 8A D0 66 B8 8C 0A 00 00 66 F7 E2 66 8B F8 E8 58  // ..f.....f..f...X
    10E0: 02 B3 00 E8 3F 17 66 3B D7 76 03 66 8B D7 5B C3  // ....?.f;.v.f..[.
    10F0: B7 01 53 8D 9C 42 03 E8 26 21 8A C8 5B 66 52 E8  // ..S..B..&!..[fR.
    1100: 83 00 E8 C1 02 66 3B D1 66 5A 76 09 D0 E7 E8 07  // .....f;.fZv.....
    1110: 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01 E8 00 21  // .8.r....S..*...!
    1120: 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51 83 EC 08  // $.....u...[.Q...
    1130: 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46 04 F0 D2  // ..f.F.H?xif.F...
    1140: 00 00 E8 FF 01 0B D2 74 03 E8 9B 17 8A FD 53 8D  // .......t......S.
    1150: 9C 42 03 E8 CA 20 8A C8 5B E8 60 FF 66 33 C0 8B  // .B... ..[.`.f3..
    1160: 46 00 66 3B C2 73 19 66 8B D0 E8 18 00 E8 56 02  // F.f;.s.f......V.
    1170: 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2 8B 56 00  // f;.r......f3..V.
    1180: 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02 B8 06 00  // ...Y.fRR2.......
    1190: F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B C2 8A CF  // ..f3...ZQf3.....
    11A0: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    11B0: C3 E8 90 01 0B D2 74 0B E8 16 00 0A ED 75 11 E8  // ......t......u..
    11C0: B8 16 C3 B5 00 E8 F1 01 E8 5F 19 75 03 E8 01 00  // ........._.u....
    11D0: C3 B5 00 8D 9C 31 01 E8 46 20 A8 01 74 02 B5 01  // .....1..F ..t...
    11E0: C3 53 E8 5F 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02  // .S._.f....M.....
    11F0: E8 2D 20 8A E8 E8 5F 16 8A EB 5B C3 57 53 53 E8  // .- ..._...[.WSS.
    1200: DF FF E8 34 01 5B E8 A2 16 74 49 80 FD 00 75 24  // ...4.[...tI...u$
    1210: 53 E8 A8 FE E8 AF 04 8A CD E8 FC FE 8A FD E8 64  // S..............d
    1220: FF 5B E8 FB 1F 66 25 FF FF 00 00 66 3B C8 73 21  // .[...f%....f;.s!
    1230: 32 DB EB 20 80 FD 02 75 18 53 E8 7C 01 E8 FB 18  // 2.. ...u.S.|....
    1240: 5B 74 0E 8D 1D E8 D8 1F 3D 74 40 76 04 32 DB EB  // [t......=t@v.2..
    1250: 03 80 CB 01 5B 5F C3 53 E8 39 01 8B D8 E8 DC F8  // ....[_.S.9......
    1260: 85 C3 5B C3 53 8B F0 E8 C8 1A 23 F0 74 07 8B C6  // ..[.S.....#.t...
    1270: E8 69 19 8B F3 5B C3 E8 08 00 74 05 E8 D8 FF 74  // .i...[....t....t
    1280: F6 C3 33 C0 0B F6 74 03 E8 09 01 33 F6 E8 08 00  // ..3...t....3....
    1290: 74 03 E8 CF FF 0B F6 C3 57 53 E8 E0 1A 0B C0 74  // t.......WS.....t
    12A0: 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74  // ......;.u......t
    12B0: 0E 83 C7 02 E8 7B 1A 85 D8 74 EF 8B C3 EB 02 33  // .....{...t.....3
    12C0: C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8 A9 FF 74 07  // ...[_.Q3......t.
    12D0: E8 46 00 38 E9 75 F4 0B F6 59 C3 33 C0 E8 B8 FF  // .F.8.u...Y.3....
    12E0: 74 13 E8 7F FF 8B DE B9 FB 00 E8 78 1B 83 C6 08  // t..........x....
    12F0: E8 C2 19 EB E8 BB F0 16 B8 5A A5 E8 9A 1E C3 53  // .........Z.....S
    1300: 66 50 8D 9C 40 03 E8 17 1F 8A E8 66 58 5B C3 8D  // fP..@......fX[..
    1310: 9C 64 03 E8 0A 1F 0B C0 C3 53 66 50 8D 9C D4 02  // .d.......SfP....
    1320: E8 FD 1E 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02  // .....fX[.SfP....
    1330: E8 ED 1E 8A C8 66 58 5B C3 53 8D 5C 14 E8 E0 1E  // .....fX[.S.\....
    1340: 8B D0 5B C3 53 66 50 8D 5C 16 E8 D3 1E 8B D0 66  // ..[.SfP.\......f
    1350: 58 5B C3 53 66 50 8D 9C 50 03 E8 C3 1E 66 8B D0  // X[.SfP..P....f..
    1360: 66 58 5B C3 53 66 50 8D 9C 54 03 E8 B2 1E 66 8B  // fX[.SfP..T....f.
    1370: D0 66 58 5B C3 53 66 50 8D 5C 10 E8 A2 1E 8B C8  // .fX[.SfP.\......
    1380: 66 58 5B C3 66 50 53 8D 9C 41 03 E8 92 1E 5B 8A  // fX[.fPS..A....[.
    1390: D8 66 58 C3 53 8D 5C 08 E8 85 1E 5B C3 53 50 8D  // .fX.S.\....[.SP.
    13A0: 9C 4C 03 E8 7A 1E 8A C8 58 5B C3 53 50 8D 9C 4D  // .L..z...X[.SP..M
    13B0: 03 E8 6C 1E 8A C8 58 5B C3 53 50 8D 5C 0C E8 5F  // ..l...X[.SP.\.._
    13C0: 1E 8B D0 58 5B C3 53 66 50 8D 9C 00 03 E8 50 1E  // ...X[.SfP.....P.
    13D0: 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 41 1E C3  // f3...fX[..\..A..
    13E0: 51 8D 5C 04 32 C9 E8 DB 1D 59 C3 8D 9C 50 03 E8  // Q.\.2....Y...P..
    13F0: 2E 1E 8B C2 E8 89 1D C3 53 51 8A E8 E8 DA FF 24  // ........SQ.....$
    1400: FD 0A E8 E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8  // ......Y[.fP.....
    1410: 0E 1E 66 8B D0 66 58 C3 53 66 50 66 51 66 8B C8  // ..f..fX.SfPfQf..
    1420: BB 00 00 E8 86 17 66 23 C2 66 0B C1 E8 87 17 66  // ......f#.f.....f
    1430: 59 66 58 5B C3 BB 00 00 E8 71 17 66 25 03 03 FF  // YfX[.....q.f%...
    1440: 00 C3 57 0B C0 75 10 33 F6 E8 36 FE 74 26 E8 25  // ..W..u.3..6.t&.%
    1450: 00 A8 04 74 F4 EB 13 8B C8 E8 D6 18 23 C1 74 14  // ...t........#.t.
    1460: E8 01 FE E8 10 00 A8 04 74 0A 5F 8D 5C 28 E8 2D  // ........t._.\(.-
    1470: 05 0B F6 C3 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF  // ...._......tr.9.
    1480: E8 B4 16 74 30 0A ED 74 10 8A CD B5 02 E8 A0 19  // ...t0..t........
    1490: B1 02 8D 9C 48 01 E8 2B 1D E8 34 02 A8 04 74 15  // ....H..+..4...t.
    14A0: 8D 5C 28 E8 56 00 74 0D E8 0E FF E8 80 16 74 3F  // .\(.V.t.......t?
    14B0: 80 FD 02 74 3A 8D 5C 28 E8 38 00 E8 20 0B 33 C9  // ...t:.\(.8.. .3.
    14C0: 50 8D 9C 28 01 E8 58 1D 66 0B C0 74 03 B9 00 08  // P..(..X.f..t....
    14D0: 58 0A C0 75 13 8D 5C 28 E8 3F 00 75 0B 80 CD 02  // X..u..\(.?.u....
    14E0: E8 19 00 74 03 80 CD 04 8D 9C 48 01 E8 D5 1C E8  // ...t......H.....
    14F0: DE 01 C3 51 B9 49 00 E8 6B 19 59 C3 51 E8 1A 00  // ...Q.I..k.Y.Q...
    1500: 75 14 E8 9C 01 3C 01 75 0D B9 20 00 E8 27 00 75  // u....<.u.. ..'.u
    1510: 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 02 1D 66 3D  // ......3.Y.S...f=
    1520: 00 FF FF FF 75 0E 83 C3 04 E8 F4 1C 66 3D FF FF  // ....u.......f=..
    1530: FF 00 75 00 5B C3 50 52 32 D2 E8 E3 1C 02 D0 02  // ..u.[.PR2.......
    1540: D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2  // .f..............
    1550: 5A 58 C3 8D 9C 4C 01 E8 1F 01 E8 73 01 B5 13 A8  // ZX...L.....s....
    1560: 08 75 0C E8 53 FE 8A EA 80 FD 13 75 02 B5 03 8D  // .u..S......u....
    1570: 9C B8 02 66 33 C0 8A C5 E8 05 1C E8 16 FE A9 11  // ...f3...........
    1580: 00 74 37 B5 01 E8 22 01 E8 45 01 A8 04 75 17 55  // .t7..."..E...u.U
    1590: BD 00 00 B8 61 40 E8 F0 02 B8 45 40 E8 EA 02 5D  // ....a@....E@...]
    15A0: B5 02 E8 8A 00 C3 E8 2F 01 B5 02 8D 5C 28 E8 DD  // ......./....\(..
    15B0: 00 75 02 B5 01 E8 77 00 EB 67 A9 C8 0E 74 3E E8  // .u....w..g...t>.
    15C0: 0E 01 A8 08 74 08 8D 5C 28 E8 B4 00 74 B5 B5 02  // ....t..\(...t...
    15D0: E8 D7 00 E8 FA 00 A8 04 74 0B 8D 5C 28 E8 F8 00  // ........t..\(...
    15E0: E8 F8 02 EB 0A 8D 9C 68 01 B8 3C 6A E8 60 05 E8  // .......h..<j.`..
    15F0: D4 00 80 FD 00 75 37 B5 02 E8 C0 00 C3 A9 22 00  // .....u7.......".
    1600: 74 2C B5 04 E8 A3 00 8D 9C 68 01 56 E8 DD 19 8B  // t,.......h.V....
    1610: F7 E8 58 03 5E E8 85 19 E8 A1 00 8D 5C 28 E8 AB  // ..X.^.......\(..
    1620: 19 8D 9C 68 01 E8 4F 03 66 8B D1 E8 C0 07 C3 8D  // ...h..O.f.......
    1630: 9C B4 02 B1 02 E8 8C 1B B5 02 E8 7F 00 C3 8D 9C  // ................
    1640: 4C 01 E8 34 00 E8 88 00 A8 04 74 23 8D 5C 28 E8  // L..4......t#.\(.
    1650: 86 00 E8 97 19 8D 9C 68 01 06 0E 07 B9 07 00 E8  // .......h........
    1660: 3D 18 07 E8 60 00 E8 50 FD 8D 5C 28 E8 88 19 8D  // =...`..P..\(....
    1670: 5C 28 E8 37 19 E8 DB FE C3 B9 61 00 E8 E6 17 C3  // \(.7......a.....
    1680: 53 81 C3 05 01 E8 98 1B 24 06 3C 02 5B C3 E8 10  // S.......$.<.[...
    1690: 00 3D 01 04 75 0A 53 83 C3 18 E8 83 1B 5B A8 01  // .=..u.S......[..
    16A0: C3 53 83 C3 12 E8 78 1B 5B C3 8D 9C B4 02 32 C9  // .S....x.[.....2.
    16B0: E8 11 1B C3 8D 9C B4 02 E8 65 1B C3 8D 9C B4 02  // .........e......
    16C0: B1 01 E8 FF 1A C3 8D 9C B4 02 B1 01 E8 0D 1B C3  // ................
    16D0: 8D 9C 48 01 E8 49 1B C3 55 57 51 B9 08 00 BD 00  // ..H..I..UWQ.....
    16E0: 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 32 1B E8 98  // ....+....XN.2...
    16F0: 01 E2 EE 8D 5C 4B E8 27 1B B9 04 00 8B D0 BF FD  // ....\K.'........
    1700: 16 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 70 1A  // ..U.t.f.......p.
    1710: 8B 45 04 8D 9A F8 01 E8 7E 1A 83 C5 08 83 C7 08  // .E......~.......
    1720: E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 F1 1A 0B  // ...|^...3.......
    1730: C0 74 09 E8 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2  // .t.....L........
    1740: E9 32 ED E8 76 FF 8D 5C 28 E8 55 FF 3D 01 04 75  // .2..v..\(.U.=..u
    1750: 10 83 C3 14 E8 C9 1A 24 70 C0 E8 04 8A E8 E8 5B  // .......$p......[
    1760: FF 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00  // .Y_]. .X.<......
    1770: 03 3C 00 00 08 00 05 00 04 4B 00 00 01 80 02 E0  // .<.......K......
    1780: 01 3C 00 20 00 51 8D 1D E8 95 1A 8D 9A 68 01 E8  // .<. .Q.......h..
    1790: 06 1A 8D 5D 02 E8 88 1A 8D 9A 6A 01 E8 89 00 8D  // ...]......j.....
    17A0: 5D 05 E8 7B 1A 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8  // ]..{...n..|..]..
    17B0: 6E 1A 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // n.....f.........
    17C0: F0 C0 EE 04 8A EC C0 E5 06 8A FC C0 E7 04 80 E7  // ................
    17D0: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    17E0: EC 02 0A F4 8B C3 8D 9A 74 01 E8 AB 19 8D 9A 72  // ........t......r
    17F0: 01 8B C1 E8 A2 19 8D 9A 76 01 33 C0 8A C6 E8 97  // ........v.3.....
    1800: 19 8D 9A 78 01 33 C0 8A C2 E8 8C 19 8D 5D 0C E8  // ...x.3.......]..
    1810: 0E 1A 8D 9A 7A 01 E8 0F 00 8D 5D 0F E8 01 1A 8D  // ....z.....].....
    1820: 9A 7E 01 E8 72 19 59 C3 8B C8 8A D4 66 C1 C8 10  // .~..r.Y.....f...
    1830: 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 59 19 83  // .............Y..
    1840: C3 02 8B C2 E8 51 19 C3 8D 5D 11 E8 D2 19 8A E0  // .....Q...]......
    1850: BA 06 02 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03  // ......t.........
    1860: 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0  // $.<.u...@<.u....
    1870: E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B  // ...t......t.....
    1880: C2 8D 9A 80 01 E8 10 19 C3 3C 01 74 3D 8B D0 0F  // .........<.t=...
    1890: B6 C6 24 3F 04 3C 8D 9A F8 01 E8 FB 18 0F B6 C2  // ..$?.<..........
    18A0: 83 C0 1F C1 E0 03 8D 9A F4 01 E8 EB 18 0F B6 DE  // ................
    18B0: C1 EB 06 C1 E3 02 2E F7 A7 65 18 2E F7 B7 63 18  // .........e....c.
    18C0: 8D 9A F6 01 E8 D1 18 83 C5 08 C3 01 00 01 00 04  // ................
    18D0: 00 03 00 05 00 04 00 10 00 09 00 57 8D 9C 68 01  // ...........W..h.
    18E0: 8B FB 8B DF E8 90 00 0B C9 74 44 8D 5D 18 E8 2F  // .........tD.]../
    18F0: 19 A8 80 74 0D 8B DF 56 8D 36 C9 18 E8 6D 00 5E  // ...t...V.6...m.^
    1900: EB 28 66 8B D1 E8 E6 04 8D 9C A6 00 E8 11 19 3C  // .(f............<
    1910: 01 75 17 66 81 F9 80 07 38 04 74 09 66 81 F9 00  // .u.f....8.t.f...
    1920: 05 D0 02 75 05 B5 03 E8 80 FD 83 C7 1C EB B3 5F  // ...u..........._
    1930: C3 8C 0A D0 02 8A 00 E0 01 2D 00 10 00 3E 00 09  // .........-...>..
    1940: 00 06 00 00 00 00 00 00 00 06 00 00 00 50 53 51  // .............PSQ
    1950: B9 07 00 53 8B DA E8 C7 18 83 F8 00 5B 74 09 66  // ...S........[t.f
    1960: C1 E3 10 8B DA E8 12 15 59 5B 58 C3 51 53 B9 07  // ........Y[X.QS..
    1970: 00 E8 1F 15 5B 59 C3 66 50 53 83 C3 06 E8 A0 18  // ....[Y.fPS......
    1980: 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 92 18 8B C8  // [..f...S........
    1990: 5B 66 58 C3 8D 9C 48 01 32 C9 E8 27 18 C3 57 B9  // [fX...H.2..'..W.
    19A0: 20 00 E8 FA 14 5F C3 E8 0A FD 3C 01 75 57 8D 9C  //  ...._....<.uW..
    19B0: B6 02 E8 6B 18 A8 02 74 71 66 C1 CE 10 E8 F3 03  // ...k...tqf......
    19C0: 66 C1 CE 10 0A C0 75 0E 8D 9C 4C 01 B8 3C 6A E8  // f.....u...L..<j.
    19D0: 7D 01 0C 01 EB 7A 8D 9C 68 01 B0 00 E8 36 01 75  // }....z..h....6.u
    19E0: 07 B0 00 E8 DF 00 74 68 8D 9C 68 01 B0 01 E8 24  // ......th..h....$
    19F0: 01 75 52 B0 01 E8 B0 00 75 56 B0 00 E8 A9 00 EB  // .uR.....uV......
    1A00: 4F 0B F6 EB 4B 3C 04 74 21 3C 03 74 1D 66 C1 CE  // O...K<.t!<.t.f..
    1A10: 10 E8 9F 03 66 C1 CE 10 0A C0 74 07 B0 01 E8 A4  // ....f.....t.....
    1A20: 00 75 2D B0 00 E8 9D 00 75 26 8D BC 68 01 8D 1D  // .u-.....u&..h...
    1A30: E8 ED 17 0B C0 74 19 8B DF B0 00 E8 D7 00 75 05  // .....t........u.
    1A40: 83 C7 1C EB E9 8B D3 8D 9C 4C 01 E8 FF FE 0B F6  // .........L......
    1A50: C3 57 53 51 E8 44 13 3B 55 02 75 18 66 C1 CA 10  // .WSQ.D.;U.u.f...
    1A60: 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A  // ..f...;].u...t.:
    1A70: 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B  // E.t......3......
    1A80: D2 59 5B 5F C3 51 66 52 E8 10 13 3A 65 1A 75 09  // .Y[_.QfR...:e.u.
    1A90: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF  // ..t.:E.t......3.
    1AA0: EB 00 0B FF 66 5A 59 C3 51 E8 EF 12 56 8D 9C 4C  // ....fZY.Q...V..L
    1AB0: 01 8B F7 E8 B6 FE 5E E8 5B 00 75 07 83 C7 1C E2  // ......^.[.u.....
    1AC0: EB 33 FF 59 C3 8D BC F4 01 8A C8 8D 1D E8 50 17  // .3.Y..........P.
    1AD0: 0B C0 74 40 66 50 E8 DB FB 3C 01 66 58 74 05 3D  // ..t@fP...<.fXt.=
    1AE0: 40 06 73 2B 66 8B D0 8D 5D 04 E8 33 17 E8 61 FF  // @.s+f...]..3..a.
    1AF0: 74 1D 8D 9C 4C 01 56 8B F2 E8 70 FE 5E 53 8D 9C  // t...L.V...p.^S..
    1B00: 62 01 33 C0 E8 91 16 5B 8A C1 E8 08 00 75 05 83  // b.3....[.....u..
    1B10: C7 08 EB B7 C3 66 51 50 53 66 C1 CE 10 8B DE 66  // .....fQPSf.....f
    1B20: C1 CE 10 E8 FA 16 5B 66 8B D0 E8 4A FE 58 3C 01  // ......[f...J.X<.
    1B30: 75 0A 66 3B CA 75 13 E8 C2 F6 75 10 3B CA 72 0A  // u.f;.u....u.;.r.
    1B40: 66 3B CA 72 05 E8 B4 F6 75 02 32 C0 66 59 C3 56  // f;.r....u.2.fY.V
    1B50: 57 E8 31 FF 8B F7 E8 13 FE 5F 5E C3 66 50 53 66  // W.1......_^.fPSf
    1B60: 51 52 57 56 51 8B DE B9 08 00 E8 F8 12 59 8D 5C  // QRWVQ........Y.\
    1B70: 08 8B C1 66 C1 E0 10 8A C2 E8 04 16 F6 C2 03 75  // ...f...........u
    1B80: 24 8B C1 24 7F BF 3F 1C 80 3D FF 0F 84 0F 01 3A  // $..$..?..=.....:
    1B90: 05 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00  // .u.f.E.f........
    1BA0: 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 61 01 0F  // ........t%...a..
    1BB0: 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08  // ...3.......u..\.
    1BC0: 66 25 FF FF 00 00 66 C1 E0 08 E8 B3 15 EB B2 8A  // f%....f.........
    1BD0: E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A  // ................
    1BE0: EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4  // ...pr*..us%..p..
    1BF0: 32 E4 50 E8 21 02 8B D8 58 38 D8 72 05 33 C0 E9  // 2.P.!...X8.r.3..
    1C00: 9C 00 E8 19 02 E8 18 16 0B C0 0F 84 90 00 EB 1B  // ................
    1C10: 32 C0 E8 70 FE 0F 84 85 00 8D 5C 16 8B 05 E8 77  // 2..p......\....w
    1C20: 15 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 00 0B 66  // ..E.f....E.P...f
    1C30: C1 E1 10 8B C8 58 8D 1C E8 45 15 66 50 8D 5C 04  // .....X...E.fP.\.
    1C40: 66 8B C1 E8 3A 15 66 58 66 C1 E8 10 66 81 E1 FF  // f...:.fXf...f...
    1C50: FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 C2 15 8B C8  // ...f..fP.\......
    1C60: 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 28 15  // fXf..f...@.\..(.
    1C70: BF 90 1C 83 F9 01 74 11 BF 98 1C 81 F9 01 01 74  // ......t........t
    1C80: 08 BF A0 1C 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8  // .......u..\.f...
    1C90: EE 14 8D 5C 10 66 8B 45 04 E8 E4 14 0B DB 5E 5F  // ...\.f.E......^_
    1CA0: 5A 66 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90  // ZfY[fX..@....@..
    1CB0: 01 02 80 02 90 01 03 80 02 90 01 04 40 01 90 01  // ............@...
    1CC0: 05 40 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D  // .@...........^..
    1CD0: 40 01 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80  // @...........^...
    1CE0: 02 5E 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02  // .^..............
    1CF0: 90 01 62 80 02 E0 01 FF 05 0A 05 05 05 00 00 00  // ..b.............
    1D00: 05 0B 06 05 05 00 00 00 08 10 08 08 08 00 00 00  // ................
    1D10: 56 E8 77 12 80 E4 01 3B 04 74 09 83 C6 04 E2 F7  // V.w....;.t......
    1D20: 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8 5A  // 3....D...^.WSP.Z
    1D30: 12 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1  // ..........v.....
    1D40: E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B  // ..............X[
    1D50: 5F C3 66 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8  // _.fSQfR.A..w.f..
    1D60: 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33  // .f...f.....f..f3
    1D70: D2 66 F7 F3 E8 B8 09 66 5A 59 66 5B C3 53 66 50  // .f.....fZYf[.SfP
    1D80: BB 07 00 E8 26 0E 0A C0 66 58 5B C3 53 66 50 BB  // ....&...fX[.SfP.
    1D90: 07 00 E8 17 0E A8 01 66 58 5B C3 53 66 50 8D 5C  // .......fX[.SfP.\
    1DA0: 06 E8 7C 14 8A C8 66 58 5B C3 51 B9 08 00 E8 C9  // ..|...fX[.Q.....
    1DB0: 10 59 C3 53 8D 5C 08 E8 66 14 24 03 5B C3 8D 5C  // .Y.S.\..f.$.[..\
    1DC0: 09 E8 5C 14 C3 51 53 B1 01 8A E8 8D 5C 08 E8 F3  // ..\..QS.....\...
    1DD0: 13 5B 59 C3 53 8D 1C E8 46 14 5B C3 53 8D 5C 04  // .[Y.S...F.[.S.\.
    1DE0: E8 3D 14 5B C3 53 8D 5C 16 E8 34 14 5B C3 53 66  // .=.[.S.\..4.[.Sf
    1DF0: 52 33 C0 E8 5B FC 66 5A 75 1B E8 34 00 74 16 E8  // R3..[.fZu..4.t..
    1E00: 15 00 40 83 F8 05 73 0D E8 75 13 48 E8 0F 00 66  // ..@...s..u.H...f
    1E10: 8B C2 E8 6B 13 5B C3 BB 00 1E E8 03 14 C3 BB 08  // ...k.[..........
    1E20: 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32 00 E8 35 10  // ...........2..5.
    1E30: C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 1E E8 DF  // .Q.....t........
    1E40: 13 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3  // .f;.t........Y..
    1E50: C3 00 BB 20 DF E8 69 35 E8 BE F4 B5 01 E8 2B 07  // ... ..i5......+.
    1E60: C3 BB 00 DF E8 5A 35 E8 AF F4 B5 00 E8 1C 07 C3  // .....Z5.........
    1E70: 80 F9 00 75 0A E8 E1 0F 8A C8 B5 02 E8 E5 08 0B  // ...u............
    1E80: F6 74 29 E8 93 F4 B5 01 E8 14 07 56 33 F6 B5 00  // .t)........V3...
    1E90: E8 5D 06 5E B5 01 E8 04 F5 E8 C8 08 E8 85 09 E8  // .].^............
    1EA0: 77 F4 8D 9C 00 03 E8 FD 06 E8 46 07 66 C1 CE 10  // w.........F.f...
    1EB0: B5 01 E8 3B 06 E8 06 FF A8 40 75 07 32 C0 B5 01  // ...;.....@u.2...
    1EC0: E8 4B 08 66 C1 CE 10 C3 E8 4E F4 B5 01 E8 96 06  // .K.f.....N......
    1ED0: B5 00 E8 CA 06 E8 2D 07 B1 0F E8 16 0A B1 10 E8  // ......-.........
    1EE0: 11 0A E8 2B 00 C3 E8 7A 00 E8 3D F4 B5 00 E8 75  // ...+...z..=....u
    1EF0: 06 B5 00 E8 A9 06 E8 B2 F4 E8 5D 0F 38 C1 74 0F  // ..........].8.t.
    1F00: 80 F9 08 72 05 80 F9 0B 76 05 B5 03 E8 55 08 C3  // ...r....v....U..
    1F10: 53 66 50 BB 02 00 E8 93 0C 66 A9 00 00 01 00 66  // SfP......f.....f
    1F20: 58 5B 75 3E E8 1D F4 0B D2 74 0C E8 AB F4 3C 01  // X[u>.....t....<.
    1F30: 74 05 B1 0F E8 FA 09 B1 0C E8 75 00 B1 01 E8 28  // t.........u....(
    1F40: 0A E8 BB F3 80 FD 00 75 0D E8 E6 01 B1 0D E8 A2  // .......u........
    1F50: 09 B1 03 E8 5B 00 E8 EB F3 0B D2 74 05 B1 01 E8  // ....[......t....
    1F60: CF 09 C3 E8 DE F3 0B D2 74 05 B1 00 E8 C2 09 B1  // ........t.......
    1F70: 02 E8 3D 00 E8 62 F4 A8 01 74 0D E8 81 F3 80 FD  // ..=..b...t......
    1F80: 00 75 05 B0 02 E8 12 04 B1 00 E8 DC 09 B1 0D E8  // .u..............
    1F90: 1F 00 C3 B1 07 E8 D1 09 E8 A9 F3 0B D2 75 0C E8  // .............u..
    1FA0: 17 F4 E8 85 0B 75 09 E8 6D 0A C3 B1 07 E8 81 09  // .....u..m.......
    1FB0: C3 E8 05 F4 E8 73 0B 75 24 51 E8 AC 09 59 80 F9  // .....s.u$Q...Y..
    1FC0: 0C 75 1A 33 D2 56 83 C6 08 E8 9C 0B 5E 0A C0 75  // .u.3.V......^..u
    1FD0: 0C B9 0A 00 E8 DF 0E 42 83 FA 1E 75 E8 C3 56 83  // .......B...u..V.
    1FE0: C6 08 E8 24 0B 5E E8 5B F3 0B D2 74 03 E8 99 08  // ...$.^.[...t....
    1FF0: 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C  // ................
    2000: E8 AE FF 56 83 C6 08 E8 5E 0B 5E 0A C0 0F 84 DF  // ...V....^.^.....
    2010: 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8 FF  // ............5...
    2020: 11 A8 01 74 03 E8 7F 03 E8 19 F3 0B D2 74 05 B1  // ...t.........t..
    2030: 14 E8 FD 08 66 33 C9 E8 3B F3 66 BA 50 01 40 50  // ....f3..;.f.P.@P
    2040: 66 C1 C9 10 8A C1 66 C1 C9 10 E8 15 0A 0F 85 9F  // f.....f.........
    2050: 00 66 BA 50 01 50 4F 52 E8 E9 F2 80 FA 22 5A 74  // .f.P.POR....."Zt
    2060: 0D 8D 9C 2D 01 E8 B8 11 24 06 3C 02 75 02 B6 02  // ...-....$.<.u...
    2070: 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 E2 09  // .\(f.....f......
    2080: 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10  // un..2.f.....f...
    2090: 66 BA 50 01 10 30 33 DB E8 C7 09 75 53 66 C1 C9  // f.P..03....uSf..
    20A0: 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75 0F  // ...f.....tE...u.
    20B0: 8D 5C 28 E8 6A 11 66 0B C0 0F 85 7D FF EB 31 3D  // .\(.j.f....}..1=
    20C0: 80 00 0F 82 74 FF EB 25 E8 AA F2 8A E9 B1 A0 BA  // ....t..%........
    20D0: 00 80 BF 32 00 8D 5C 28 E8 5C 09 80 FF 01 74 0D  // ...2..\(.\....t.
    20E0: B1 A2 8D 5C 28 E8 4F 09 80 FF 01 75 03 B0 00 C3  // ...\(.O....u....
    20F0: B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21 E8  // ....+.t......u!.
    2100: 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8 51  // ..u.f....C..0..Q
    2110: 09 66 BA 20 00 90 41 8D 9C 34 01 E8 44 09 33 DB  // .f. ..A..4..D.3.
    2120: C3 E8 51 F2 66 BA 00 00 90 47 8D 9C 28 01 E8 31  // ..Q.f....G..(..1
    2130: 09 C3 E8 A4 F2 3C 01 75 0E E8 ED 02 80 FD 01 75  // .....<.u.......u
    2140: 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8 14  // ................
    2150: 0D B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19 01  // ....D.t.........
    2160: B1 08 E8 8E 07 E8 66 02 B1 09 E8 86 07 E8 AC 01  // ......f.........
    2170: 8D 9C B8 03 66 33 C0 E8 06 10 E8 47 01 B9 90 01  // ....f3.....G....
    2180: E8 28 0D B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01  // .(............[.
    2190: E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00  // ...........3....
    21A0: F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04  // ...u............
    21B0: 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8  // t...............
    21C0: CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9 00  // .....8.u..3.....
    21D0: E8 54 01 FE C1 E8 AC F1 38 D9 75 C1 8D 9C AC 03  // .T......8.u.....
    21E0: E8 3D 10 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0 03  // .=.<.t..........
    21F0: 66 33 C0 E8 8A 0F 8D 9C 2A 01 E8 23 10 A8 40 74  // f3......*..#..@t
    2200: 0C B1 13 E8 ED 06 B0 03 E8 74 01 EB 0A B1 0A E8  // .........t......
    2210: E1 06 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00 E8  // .....h....F.....
    2220: 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00 80  // X..8....8.3..X..
    2230: FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02 59  // ..u..s.u'Q...#.Y
    2240: F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00 8A  // ...u....$..-.e..
    2250: D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74 19  // .....].8.u....t.
    2260: FE C1 E8 1F F1 38 D9 75 C3 8D 9C AC 03 E8 B0 0F  // .....8.u........
    2270: 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B  // <.u..M..........
    2280: E8 70 06 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8  // .p..............
    2290: C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 7F  // .S.......[...Q..
    22A0: 0F C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 6F  // ......$.Y......o
    22B0: 0F A8 01 C3 8D 9C B8 03 E8 21 0F C3 8D 9C B8 03  // .........!......
    22C0: E8 01 0F C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A  // ....3.3....8.v..
    22D0: D5 FE C1 E8 AE F0 38 D9 72 EE 33 C9 8A EA 8D 9C  // ......8.r.3.....
    22E0: 5C 03 E8 DF 0E B1 0B E8 7F 06 C3 E8 87 F0 8D 9C  // \...............
    22F0: B8 03 E8 2B 0F 66 BA 03 01 80 83 E8 64 07 C3 51  // ...+.f......d..Q
    2300: 53 8D 9C B0 03 E8 D4 0E FE C5 E8 B7 0E 80 FD 06  // S...............
    2310: 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0 8D  // r....W.3.[Y.f3..
    2320: 9C B0 03 E8 5A 0E C3 32 ED E8 65 FF 80 E3 0C C0  // ....Z..2..e.....
    2330: EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03  // ....*.........r.
    2340: 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80  // .. .K....8.r....
    2350: FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 15 F0  // ..u.......`.....
    2360: 8D 9C C0 03 66 BA 02 02 90 45 E8 F5 06 C3 E8 04  // ....f....E......
    2370: F0 66 BA 00 01 90 42 8D 9C B4 03 E8 E4 06 C3 E8  // .f....B.........
    2380: F3 EF 66 BA 02 01 80 50 E8 D7 06 C3 E8 D5 EF 8B  // ..f....P........
    2390: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 D8 EF 66 BA 00  // .f3..........f..
    23A0: 06 80 50 E8 BC 06 C3 E8 CB EF 66 BA 11 01 80 50  // ..P.......f....P
    23B0: B0 04 E8 AD 06 C3 E8 BC EF 66 BA 00 06 90 40 8D  // .........f....@.
    23C0: 9C C8 03 E8 9C 06 8D 9C C8 03 E8 53 0E C3 E8 BB  // ...........S....
    23D0: FF E8 B0 EF 8A E3 80 CC 80 50 E8 98 EF 58 66 BA  // .........P...Xf.
    23E0: 00 01 80 61 E8 7B 06 33 C9 E8 23 EF 0B C0 74 02  // ...a.{.3..#...t.
    23F0: B5 10 8D 9C BC 03 E8 CB 0D 8A C5 E8 77 EF 66 BA  // ............w.f.
    2400: 07 01 80 50 E8 5B 06 E8 AF EF E8 21 07 75 19 8D  // ...P.[.....!.u..
    2410: 9C 48 03 E8 0A 0E 0A C0 74 0E E8 58 EF 66 BA 0A  // .H......t..X.f..
    2420: 01 80 50 B0 01 E8 3A 06 C3 E8 42 FF E8 2E FF E8  // ..P...:...B.....
    2430: 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47 FE  // ..<.u..q.t.3..G.
    2440: 80 FD 07 75 0D FE C1 E8 3A EF 38 D9 75 EF B5 01  // ...u....:.8.u...
    2450: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 63  // ...............c
    2460: 0D C3 51 8D 9C AC 03 32 C9 E8 58 0D 59 C3 51 8D  // ..Q....2..X.Y.Q.
    2470: 9C AC 03 B1 01 E8 4C 0D 59 C3 8D 9C 32 01 E8 9F  // ......L.Y...2...
    2480: 0D 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 91 0D 3C  // ...u..d........<
    2490: 02 74 03 B9 90 01 E8 12 0A C3 32 E4 B1 04 33 D2  // .t........2...3.
    24A0: F6 E1 8B C8 E8 0F 0A C3 51 8D 5C 14 E8 71 0D 66  // ........Q.\..q.f
    24B0: C1 E0 10 E8 98 01 59 C3 33 C9 E8 96 09 38 C1 73  // ......Y.3....8.s
    24C0: 05 B5 00 E8 A7 00 B5 00 E8 9B 00 FE C1 E8 86 09  // ................
    24D0: 38 C1 72 E6 B1 14 8A E9 E8 7E 09 38 C1 74 05 B5  // 8.r......~.8.t..
    24E0: 03 E8 80 02 FE C1 E8 67 09 04 14 38 C1 76 E7 C3  // .......g...8.v..
    24F0: 83 EC 0C 8B EC 0B F6 74 29 E8 D8 F8 66 C1 C8 10  // .......t)...f...
    2500: 80 FD 10 75 06 8D 5C 18 E8 15 0D 66 89 46 00 8D  // ...u..\....f.F..
    2510: 5C 04 E8 0B 0D 66 89 46 04 8D 5C 08 E8 01 0D 88  // \....f.F..\.....
    2520: 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00  // F..N...f......+.
    2530: E8 7B 08 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E  // .{.....3.......^
    2540: 00 8C D0 66 C1 E0 10 8B C4 BB 01 00 E8 5F 08 8B  // ...f........._..
    2550: EC 8B 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB  // ..N..V.f.F......
    2560: 25 00 E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00  // %......#........
    2570: E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // ..........N...f.
    2580: E0 10 8B C4 E8 27 08 83 C4 04 C3 BB 22 00 E8 E3  // .....'......"...
    2590: FF 80 FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB  // ....t...........
    25A0: 2C 00 E8 CF FF C3 E8 77 0C 66 A9 00 00 FF FF 74  // ,......w.f.....t
    25B0: 40 83 EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 5F  // @.....UQ......._
    25C0: 0C 66 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04  // .f.F............
    25D0: E8 4D 0C 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14  // .M.f...f.F.Y].N.
    25E0: 8C D0 66 C1 E0 10 8B C4 BB 31 00 E8 C0 07 83 C4  // ..f......1......
    25F0: 18 C3 E8 24 ED 8D 9C D0 02 E8 24 0C 8A E8 BB 21  // ...$......$....!
    2600: 00 E8 70 FF C3 8D 9C 3C 03 E8 14 0C 8A F8 E8 EE  // ..p....<........
    2610: EC 8A DD 53 8D 9C 42 03 E8 05 0C 8A E8 5B E8 F8  // ...S..B......[..
    2620: EC E8 95 ED E8 07 05 75 02 B3 01 83 EC 04 8B EC  // .......u........
    2630: 88 4E 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1  // .N..~..^..n...f.
    2640: E0 10 8B C4 BB 2A 00 E8 64 07 83 C4 04 C3 83 EC  // .....*..d.......
    2650: 10 8B EC 66 8B C8 66 33 C0 66 89 46 04 BB 00 17  // ...f..f3.f.F....
    2660: E8 1D 0B 66 B8 00 80 20 50 66 89 46 0C 66 33 C0  // ...f... Pf.F.f3.
    2670: 66 89 46 08 56 E8 11 07 66 8B 44 04 66 50 66 C1  // f.F.V...f.D.fPf.
    2680: E8 16 88 46 08 66 58 66 C1 E0 0A 66 05 00 17 00  // ...F.fXf...f....
    2690: 00 66 89 46 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35  // .f.F.^..f......5
    26A0: 00 E8 0A 07 8B EC 66 B8 00 80 00 00 66 2B C8 66  // ......f.....f+.f
    26B0: 89 46 04 66 05 00 00 20 40 66 89 46 0C 66 33 C0  // .F.f... @f.F.f3.
    26C0: 66 89 46 08 66 89 46 00 8C D0 66 C1 E0 10 8B C4  // f.F.f.F...f.....
    26D0: BB 35 00 E8 D8 06 8B EC 66 8B 46 0C 66 25 FF FF  // .5......f.F.f%..
    26E0: 1F 00 66 01 46 04 66 3B C8 76 1F 66 2B C8 66 8B  // ..f.F.f;.v.f+.f.
    26F0: 46 04 66 3D 00 FF 01 00 76 06 66 B8 00 FF 01 00  // F.f=....v.f.....
    2700: 66 3B C8 73 AE 66 8B C1 EB A9 83 C4 10 C3 83 EC  // f;.s.f..........
    2710: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    2720: C1 E0 10 8B C4 BB 2D 00 E8 83 06 83 C4 08 C3 3D  // ......-........=
    2730: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2740: DE 0A 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 D1 0A 03  // ..f3............
    2750: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2760: C3 32 D2 C3 80 FD 02 75 19 E8 9D EC 66 BB 00 08  // .2.....u....f...
    2770: 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00 E8 82  // .....f3.f.......
    2780: 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33 D2 66  // .....u.f3...f3.f
    2790: BB FF 00 00 00 EB 36 51 33 D2 E8 62 EB 8A D5 66  // ......6Q3..b...f
    27A0: C1 E2 10 E8 93 EB 8A F2 8A D1 66 8B C2 66 0D 00  // ..........f..f..
    27B0: 00 00 80 E8 CE EB 80 FB 04 76 06 66 0D 00 00 00  // .........v.f....
    27C0: 08 E8 02 EC E8 52 EB 66 33 DB 8A D9 59 83 EC 14  // .....R.f3...Y...
    27D0: 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66 33 D2  // ..f.F.f.^.f..f3.
    27E0: 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB 0C 00  // f.d...f..f.F....
    27F0: 8C D0 66 C1 E0 10 8B C4 E8 B3 05 8B EC B3 01 83  // ..f.............
    2800: C4 14 C3 83 EC 10 8B EC 66 89 56 00 66 89 5E 04  // ........f.V.f.^.
    2810: BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 90 05 B3 01  // .....f..........
    2820: 83 C4 10 C3 C3 53 51 66 50 B9 A0 8C 80 FB 00 75  // .....SQfP......u
    2830: 1C B9 90 7E E8 0E 05 83 E3 03 80 FB 03 75 0E E8  // ...~.........u..
    2840: E4 05 66 3D 50 C3 00 00 72 03 B9 F0 D2 66 33 D2  // ..f=P...r....f3.
    2850: 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00  // ..fXY[.fR..f....
    2860: FF FF 75 13 80 FD 13 74 0E 80 FD 14 74 09 B3 01  // ..u....t....t...
    2870: 80 FD 0E 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74  // ...t...fZ.....#t
    2880: 07 80 FA 22 74 02 B5 00 C3 B5 02 C3 B1 01 80 FD  // ..."t...........
    2890: 00 75 06 C7 46 00 0B 01 C3 50 33 C0 E8 79 01 04  // .u..F....P3..y..
    28A0: 14 89 46 00 58 C3 C3 C3 0C 01 C3 E8 72 09 66 C1  // ..F.X.......r.f.
    28B0: E8 10 0B C0 74 1A 53 83 C3 06 E8 63 09 5B 3D E0  // ....t.S....c.[=.
    28C0: 01 72 0D 53 83 C3 18 E8 56 09 5B A9 10 00 74 03  // .r.S....V.[...t.
    28D0: 32 C0 C3 0C 01 C3 B5 0C C3 32 ED B5 02 C3 57 E8  // 2........2....W.
    28E0: 01 01 8B 4D 06 5F C3 80 FA 22 75 05 C7 46 00 78  // ...M._..."u..F.x
    28F0: 69 C3 C3 E8 04 01 80 FD FF 74 35 83 EC 0C 8B EC  // i........t5.....
    2900: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F  // .N..n....u..$...
    2910: 80 F9 10 75 0A 8D 9C 48 03 E8 04 09 88 46 02 8C  // ...u...H.....F..
    2920: D0 66 C1 E0 10 8B C4 BB 04 00 E8 81 04 83 C4 0C  // .f..............
    2930: C3 C3 66 53 E8 2D EA 66 8B C2 66 33 D2 66 BB 8C  // ..fS.-.f..f3.f..
    2940: 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40  // ...f..f[...n...@
    2950: 03 E8 CC 08 88 46 02 88 66 03 66 C1 E8 10 88 46  // .....F..f.f....F
    2960: 08 E8 EF E9 66 89 56 04 C3 80 F9 04 74 03 E8 C8  // ....f.V.....t...
    2970: E9 83 EC 10 8B EC 80 F9 04 75 0A 88 4E 01 32 C0  // .........u..N.2.
    2980: 88 46 00 EB 4C E8 90 00 88 46 00 88 4E 01 E8 28  // .F..L....F..N..(
    2990: EA 88 56 0A 80 F9 01 74 11 80 F9 0B 75 33 8D 9C  // ..V....t....u3..
    29A0: 5C 03 E8 7B 08 88 46 02 EB 27 E8 C8 E9 88 6E 08  // \..{..F..'....n.
    29B0: E8 A0 E9 66 89 56 04 E8 CA E9 88 5E 03 E8 3F E9  // ...f.V.....^..?.
    29C0: 88 6E 02 51 E8 33 00 8A CD B0 01 D2 E0 59 88 46  // .n.Q.3.......Y.F
    29D0: 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 CF 03 83  // ...f......L.....
    29E0: C4 10 C3 E8 AC 03 03 7D 04 83 3D FF 74 0B 3B 15  // .......}..=.t.;.
    29F0: 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C 03 E8 1F  // t...........<...
    2A00: 08 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77 05 2C  // .2.<.t.<.r.<.w.,
    2A10: 08 8A E8 C3 B5 FF C3 C3 52 32 C0 80 EE 21 80 FA  // ........R2...!..
    2A20: 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80 FA 21 74  // .t..... t.....!t
    2A30: 02 B0 06 02 C6 5A C3 83 EC 08 8B EC 89 7E 00 89  // .....Z.......~..
    2A40: 5E 02 89 56 04 89 4E 06 8C D0 66 C1 E0 10 8B C4  // ^..V..N...f.....
    2A50: BB 36 00 E8 58 03 8B EC 8B 5E 02 8A 7E 01 83 C4  // .6..X....^..~...
    2A60: 08 C3 56 33 F6 66 F7 C2 00 00 80 00 75 0A 50 33  // ..V3.f......u.P3
    2A70: C0 8A C6 8B F0 32 F6 58 53 BB 04 3E E8 01 07 66  // .....2.XS..>...f
    2A80: 8B C2 BB 00 3E E8 F8 06 5B 66 F7 C2 00 00 10 00  // ....>...[f......
    2A90: 75 02 33 DB 8B D3 66 C1 E2 10 BA 00 3E 83 EC 08  // u.3...f.....>...
    2AA0: 8B EC 66 89 56 00 88 4E 04 8A C5 FE C8 88 46 07  // ..f.V..N......F.
    2AB0: C6 46 05 00 C6 46 06 00 8C D0 66 C1 E0 10 8B C4  // .F...F....f.....
    2AC0: BB 4E 00 E8 E8 02 8B EC 8A 5E 05 8A 7E 06 83 C4  // .N.......^..~...
    2AD0: 08 0A DB 74 32 51 B9 90 01 80 FB 20 74 05 80 FB  // ...t2Q..... t...
    2AE0: 80 75 13 B9 0A 00 8B C6 0A C0 74 0A B9 90 01 3C  // .u........t....<
    2AF0: 01 74 03 B9 E8 03 E8 B2 03 59 8B C6 FE C4 8B F0  // .t.......Y......
    2B00: 80 FC 06 76 98 0A DB 5E C3 8D 5C 04 E8 11 07 8B  // ...v...^..\.....
    2B10: D0 B5 02 E8 14 00 74 11 B5 01 80 FA 13 75 0A E8  // ......t......u..
    2B20: 61 00 80 FA 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9  // a....u..........
    2B30: FF 74 03 80 FA 0E C3 80 FA 05 C3 80 FA 02 74 03  // .t............t.
    2B40: 80 FA 04 C3 80 FA 01 74 03 80 FA 02 C3 80 FA 02  // .......t........
    2B50: 75 03 B2 01 C3 80 FA 04 75 03 B2 03 C3 C3 B5 08  // u.......u.......
    2B60: E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8 B2 06 8A C8  // ...t.....\......
    2B70: 0A C9 75 03 32 C0 C3 B5 02 E8 B4 02 8A C5 24 02  // ..u.2.........$.
    2B80: D0 E8 C3 8D 5C 08 E8 97 06 8A D0 B6 01 83 EC 08  // ....\...........
    2B90: 8B EC 89 56 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00  // ...V...f......O.
    2BA0: E8 0B 02 8B EC 8A 56 04 83 C4 08 C3 53 81 C3 C9  // ......V.....S...
    2BB0: 05 E8 3A 06 5B C3 53 81 C3 C9 05 E8 8B 05 5B C3  // ..:.[.S.......[.
    2BC0: 66 53 81 C3 00 10 E8 25 06 66 5B C3 57 E8 82 01  // fS.....%.f[.W...
    2BD0: 8A 45 2D B4 FF F7 45 50 20 00 5F C3 50 56 0F BC  // .E-...EP ._.PV..
    2BE0: D8 8D 36 83 2B E8 63 03 5E 58 C3 00 20 00 24 00  // ..6.+.c.^X.. .$.
    2BF0: 00 00 28 00 2C 00 30 00 34 00 38 00 00 00 3C 00  // ..(.,.0.4.8...<.
    2C00: 40 00 44 53 56 51 8B F7 B3 00 E8 30 00 0B F6 74  // @.DSVQ.....0...t
    2C10: 16 49 0B C9 75 04 33 FF EB 0D 8B DF 03 7D 02 3B  // .I..u.3......}.;
    2C20: F3 74 04 E2 F5 33 FF 0B FF 59 5E 5B C3 0E 00 00  // .t...3...Y^[....
    2C30: 00 0A 00 06 00 08 00 0C 00 0E 00 10 00 56 8D 36  // .............V.6
    2C40: C5 2B E8 06 03 E8 13 01 03 DE 8B 3F 0B FF 74 0B  // .+.........?..t.
    2C50: 03 FE 33 C9 8A 0D 83 C7 04 0B FF 5E C3 51 56 53  // ..3........^.QVS
    2C60: C1 EB 0C E8 D7 FF 5B 75 04 33 FF EB 0B 3B 1D 74  // ......[u.3...;.t
    2C70: 07 83 C7 08 E2 F7 33 FF 0B FF 5E 59 C3 57 E8 DC  // ......3...^Y.W..
    2C80: FF 75 04 33 DB 5F C3 E8 02 00 5F C3 52 51 8B 5D  // .u.3._...._.RQ.]
    2C90: 04 0B DB 74 1B 56 E8 C2 00 03 DE 5E 33 C9 8A 4F  // ...t.V.....^3..O
    2CA0: 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB  // ..?.t.:.t.....3.
    2CB0: 0B DB 59 5A C3 50 8D 1C E8 C5 04 8B D8 E8 72 00  // ..YZ.P........r.
    2CC0: 23 C3 74 6C 33 FF E8 3A FF 0B FF 74 63 39 05 75  // #.tl3..:...tc9.u
    2CD0: F5 66 33 C0 8B 45 08 8B 4D 02 83 F9 0A 74 18 8B  // .f3..E..M....t..
    2CE0: 4D 0A 8B D1 81 E2 00 70 80 FE 20 75 0A 66 C1 C8  // M......p.. u.f..
    2CF0: 10 8B C1 66 C1 C8 10 8D 5C 0C E8 83 04 66 33 C0  // ...f....\....f3.
    2D00: 8B 45 04 8D 5C 04 E8 77 04 33 C9 8B D8 50 B0 01  // .E..\..w.3...P..
    2D10: E8 6A FF 58 74 0F 8A 4F 02 8B D8 B0 02 E8 5D FF  // .j.Xt..O......].
    2D20: 74 03 8A 6F 02 8D 5C 08 66 33 C0 8B C1 E8 50 04  // t..o..\.f3....P.
    2D30: 58 C3 56 E8 25 00 8B 44 04 5E C3 56 E8 1C 00 89  // X.V.%..D.^.V....
    2D40: 44 04 5E C3 C3 8B DA B0 14 E8 31 FF 74 03 8B 5F  // D.^.......1.t.._
    2D50: 02 C3 BF 4A 02 8B 3D 8B 7D 0C C3 BE 4A 02 8B 34  // ...J..=.}...J..4
    2D60: 8B 74 30 C3 1E 0E 1F BF 4A 02 8B 3D 8B 7D 0E 83  // .t0.....J..=.}..
    2D70: C7 04 1F C3 BE 4A 02 8B 34 8B 74 10 C3 BF 4A 02  // .....J..4.t...J.
    2D80: 8B 3D 8B 7D 26 83 C7 04 C3 BE 4A 02 8B 34 8B 74  // .=.}&.....J..4.t
    2D90: 1A C3 BF 4A 02 8B 3D 8B 7D 3A C3 BF 4A 02 8B 3D  // ...J..=.}:..J..=
    2DA0: 8B 7D 0A 83 C7 04 B9 08 00 C3 E8 01 00 CB 83 EC  // .}..............
    2DB0: 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02  // ....F.f3..F...F.
    2DC0: 06 52 8A D3 8B C5 E8 7F 16 5A 07 83 C4 06 C3 E8  // .R.......Z......
    2DD0: 80 FF F7 45 50 01 00 C3 E8 77 FF 83 4D 50 01 C3  // ...EP....w..MP..
    2DE0: E8 6F FF 88 45 58 C3 66 53 83 EC 28 8B EC 66 89  // .o..EX.fS..(..f.
    2DF0: 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00  // ^.f.N...f.......
    2E00: 00 E8 AA FF 83 C4 28 66 5B E8 48 01 BB 04 00 E8  // ......(f[.H.....
    2E10: 9A FD 66 C1 E8 10 E8 C7 FF C3 E8 35 FF 66 8B 5D  // ..f........5.f.]
    2E20: 08 66 8B 4D 0C C3 57 E8 28 FF 66 8B 45 28 5F C3  // .f.M..W.(.f.E(_.
    2E30: 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4  // ......N...f.....
    2E40: BB 38 00 E8 68 FF 8B EC 8A 6E 02 83 C4 04 C3 C3  // .8..h....n......
    2E50: B0 06 C3 B0 02 C3 B0 06 C3 B0 08 C3 E8 F3 FE 8B  // ................
    2E60: 45 56 0B C0 C3 53 66 50 66 33 C0 E8 12 03 83 C3  // EV...SfPf3......
    2E70: 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 A2 03 66 C1  // ...fX[.2......f.
    2E80: CB 10 E8 FB 02 66 C1 CB 10 66 81 C3 04 00 04 00  // .....f...f......
    2E90: E2 E9 C3 FC 66 AD E8 E7 02 83 C3 04 E2 F6 C3 FC  // ....f...........
    2EA0: E8 7D 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 19 00  // .}.f.......fP...
    2EB0: E8 10 00 66 58 C3 66 50 B8 D4 30 D1 E1 E8 03 00  // ...fX.fP..0.....
    2EC0: 66 58 C3 52 F7 E1 8B CA E8 63 01 66 53 8B D9 66  // fX.R.....c.fS..f
    2ED0: C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2  // .....f.......f..
    2EE0: 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF  // .f3.f.f.......f.
    2EF0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    2F00: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    2F10: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8  // ;.r.....f[Z..B..
    2F20: CC 02 66 33 D2 66 BB 19 00 00 00 66 F7 F3 C3 66  // ..f3.f.....f...f
    2F30: 50 53 BB 07 00 E8 74 FC 25 00 02 35 00 02 0B C0  // PS....t.%..5....
    2F40: 5B 66 58 C3 BB 0A 15 E8 A4 02 C3 32 FF D1 E3 03  // [fX........2....
    2F50: F3 8B 1C C3 E8 ED FF 66 C1 E0 0A 66 83 E8 20 E8  // .......f...f.. .
    2F60: 27 FE 66 89 44 04 C7 44 08 20 00 C3 56 1E 0E 1F  // '.f.D..D. ..V...
    2F70: E8 16 FE 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 56  // ...f.D.f....^..V
    2F80: E8 F1 FD 8B 4C 22 8A 44 29 5E C3 BE 4A 02 8B 34  // ....L".D)^..J..4
    2F90: 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF C3 56 E8 D3  // .t........3..V..
    2FA0: FD 8A 6C 28 80 E5 70 C0 ED 04 5E C3 56 E8 C4 FD  // ..l(..p...^.V...
    2FB0: 53 81 C3 09 01 E8 68 02 8A E8 5B 53 81 C3 00 01  // S.....h...[S....
    2FC0: E8 5D 02 5B 8A C5 66 89 44 3C 5E C3 56 E8 A4 FD  // .].[..f.D<^.V...
    2FD0: 66 8B 44 3C 53 81 C3 00 01 E8 A4 01 5B 53 81 C3  // f.D<S.......[S..
    2FE0: 08 01 B1 01 8A E8 E8 DB 01 5B 5E C3 56 E8 84 FD  // .........[^.V...
    2FF0: 8B FE 83 C7 04 5E C3 56 E8 79 FD 8A 44 28 80 FD  // .....^.V.y..D(..
    3000: 00 74 0E 24 8F C0 E5 04 0A C5 80 FD 20 75 02 0C  // .t.$........ u..
    3010: 02 24 FE 81 7C 04 34 21 76 02 0C 01 88 44 28 E8  // .$..|.4!v....D(.
    3020: 08 FB 75 04 80 4C 30 01 5E C3 32 C0 C3 00 66 50  // ..u..L0.^.2...fP
    3030: 8C C8 3D 00 C0 75 10 BA C3 03 EC 8A F0 0A F6 74  // ..=..u.........t
    3040: 06 B2 4C 66 ED EB 17 53 2E 8B 1E 3E 02 B2 20 E8  // ..Lf...S...>.. .
    3050: DD 00 A8 01 75 05 B2 14 E8 D4 00 8A F4 5B 32 D2  // ....u........[2.
    3060: 66 58 C3 2E 8B 1E 3E 02 C3 0B C9 75 1A 4B 74 16  // fX....>....u.Kt.
    3070: 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3  // C;.w.....+......
    3080: 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77  // ....+..;.r.u.;.w
    3090: 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B  // .+...+.+.....+.+
    30A0: DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72  // .....UV+.......r
    30B0: 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D  // .E;.r.w.;.v....M
    30C0: 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D  // x ....+....r...M
    30D0: 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3  // x.........s.....
    30E0: 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92  // ........3.^]..P.
    30F0: 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58  // ..t......t.....X
    3100: F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10  // .....RfP....f...
    3110: 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52  // ....$....f.fXZ.R
    3120: BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8  // ...f.Z.R...f.Z..
    3130: 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C  // 1............$..
    3140: FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06  // .........RfSfP..
    3150: 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8  // .fXf[Z.f...f....
    3160: CC FE E8 71 01 C3 66 50 66 C1 E3 10 66 C1 EB 10  // ...q..fPf...f...
    3170: E8 F9 FD 66 03 D8 66 81 CB 00 00 00 80 66 58 C3  // ...f..f......fX.
    3180: 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 9F FE E8  // RfS...f[Z.fP....
    3190: D4 FF E8 41 01 66 58 C3 52 51 66 53 66 50 8A CB  // ...A.fX.RQfSfP..
    31A0: 80 E3 FC 80 E1 03 C0 E1 03 E8 82 FE E8 B7 FF E8  // ................
    31B0: 0B 01 66 D3 C8 58 50 66 D3 C0 E8 19 01 66 58 66  // ..f..XPf.....fXf
    31C0: 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8  // [YZ.fPQ....S.f..
    31D0: 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0  // ..f.....YfX.fPQ.
    31E0: E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F  // ...;.f..Y..fX.._
    31F0: 00 C3 E8 39 FE 66 C1 E3 10 66 C1 EB 0E E8 BD 00  // ...9.f...f......
    3200: C3 E8 2A FE 66 C1 E3 02 E8 B2 00 C3 52 66 53 E8  // ..*.f.......RfS.
    3210: 04 00 66 5B 5A C3 E8 15 FE E8 4A FF E8 9E 00 C3  // ..f[Z.....J.....
    3220: 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC  // QfR.............
    3230: E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB  // ......t.f.......
    3240: FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3  // ....f.f.....fZY.
    3250: 52 66 53 E8 9C FF 66 5B 5A C3 52 E8 A3 FF 5A C3  // RfS...f[Z.R...Z.
    3260: 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 BD  // fPURfP...V..V...
    3270: FD 2E A1 95 02 B2 18 EF B2 00 66 ED 66 89 46 0A  // ..........f.f.F.
    3280: 66 58 5A 5D C3 66 50 55 52 8B EC E8 A0 FD B2 00  // fXZ].fPUR.......
    3290: 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04  // f.F.f..V..V.f.F.
    32A0: 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8 7D  // f.F.Z]fXfX.fPR.}
    32B0: FD B2 18 66 ED 2E A3 95 02 5A 66 58 C3 66 81 FB  // ...f.....ZfX.f..
    32C0: FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66  // ....w.....f....f
    32D0: EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A  // ...f..f......w..
    32E0: D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3  // ...f...f.f...f..
    32F0: C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51 8B  // ..........U..SQ.
    3300: F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC 59  // .&.\.&.L..(..f.Y
    3310: 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14 00  // [].SQ..&.\$3....
    3320: 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26 8B  // Y[.U..SQ..&.\.&.
    3330: 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E FE  // L...RVW.......N.
    3340: 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20 00  // ....&.|&.E.2.. .
    3350: 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A  // +...............
    3360: 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0  // M.2.............
    3370: F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B  // ..&!D.&!|.....&.
    3380: 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66 C7  // |&.M.2.. .+...f.
    3390: 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2 F8  // F........n..^...
    33A0: 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8  // .M.2....V.......
    33B0: E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06 D1  // ..#F.#V..M.2....
    33C0: E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F 5E  // .....&.D.&.T.._^
    33D0: 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F 26  // Z.U..SQRWP..&..&
    33E0: 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3  // .E.2.. .+.......
    33F0: 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7  // ........M..N..F.
    3400: 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09  // ....N.........&.
    3410: 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51  // G.&....f._Z...SQ
    3420: 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01 32  // RW......&.w&.L.2
    3430: ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1  // .. .+...........
    3440: EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6  // .....&..&.M.2...
    3450: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C  // ............&!G.
    3460: 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E C2  // &!W._...SV......
    3470: 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A 44  // &.w&.<.ts.<.uX.D
    3480: 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75 46  // .2.&....uL&;G.uF
    3490: 8A 04 6B F0 03 8A 84 44 95 26 01 47 26 8C D0 8E  // ..k....D.&.G&...
    34A0: C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B F0  // .&.w&.<.t...2.k.
    34B0: 03 8B C3 FF 94 42 95 26 8B 77 26 8A 04 32 E4 EB  // .....B.&.w&..2..
    34C0: D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47 1C  // ..D.&)G&&.G&&.G.
    34D0: 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B F0  // &.w...&.w&..2.k.
    34E0: 03 8A 84 44 95 26 01 47 26 E9 80 FF 33 C0 33 F6  // ...D.&.G&...3.3.
    34F0: 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26 8B  // ..^[.SQRV...w5&.
    3500: 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26 8B  // T.&.W.&.G.....&.
    3510: 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E C1  // G 3.&.G.&.T.....
    3520: 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75 22  // &.G/.....&..4.u"
    3530: 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26 D1  // &.w.&.w.u.&.g.&.
    3540: 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11 E9  // W.&.g.&.W....y..
    3550: E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47 1C  // ..&.G42.....&.G.
    3560: 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B D8  // &.W.........SV..
    3570: 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37 26  // .w5&.D.2....&.7&
    3580: 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04 26  // .4..&.G.&._.&..&
    3590: 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77 35  // .\.^[.SRV.....w5
    35A0: 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02 32  // ..&.T...@s!&.w.2
    35B0: F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26 8B  // ....&.t...&.W.&.
    35C0: 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41 75  // G.&..&.D......Au
    35D0: 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89 57  // .&.G.&.W.&.G.&.W
    35E0: 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57 0A  // ..h..@u.&.G.&.W.
    35F0: 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A 26  // &.G.&.W..Q..Bu.&
    3600: 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26 8A  // .G.&.G".B..Cu.&.
    3610: 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B 57  // G.&.G3.3..Fu.&.W
    3620: 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C 80  // .&.G.&.W.&.G....
    3630: FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80 FA  // .Gu.&.G.&.G$....
    3640: 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3 53  // Hu.&.G.&.G ^Z[.S
    3650: 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47 14  // V...w5&.D.2.&.G.
    3660: 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B 77  // &.G...^[.SV..&.w
    3670: 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7 47  // .&.t...2.&.G.&.G
    3680: 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53 56  // ...&._.&.G.^[.SV
    3690: 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77 14  // ..&.w.&.t..4&.w.
    36A0: 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02 5E  // &.G...&._.&.G..^
    36B0: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 04  // [.SV..&.w.&.t...
    36C0: 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02 26  // .t.&.G.&.w.&._.&
    36D0: 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B  // .G..^[.SRV...p..
    36E0: F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1  // .&.G.&.W........
    36F0: D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9 4A  // .&.G.&.T....+..J
    3700: FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53 8B  // .S..&._.&.G.[.S.
    3710: D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B D8  // .&._.&.G..[.SV..
    3720: E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14 26  // .k...&.W 3.&.W.&
    3730: 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4 06  // .D.....&.G.2....
    3740: 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E  // =..u.2.3.^[.&.G.
    3750: 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00 75  // 2....=..t.&..4.u
    3760: 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4 26  // ..../.^[.&.G42.&
    3770: 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B  // .G.&.G........^[
    3780: C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B  // .S.....&.G....&.
    3790: 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3 A5  // .&....&..&.W.[..
    37A0: 37 9A 37 B0 37 FF 37 B6 37 CE 37 E8 37 F3 37 F9  // 7.7.7.7.7.7.7.7.
    37B0: 37 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F  // 7SQV.........&..
    37C0: 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02 26  // ..u"&...@s.&.w.&
    37D0: 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07 26  // ._....&.D...&..&
    37E0: 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83 C6  // .W..{.&.w.&.G...
    37F0: C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF A4  // ....uq...wl.....
    3800: 37 37 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B 47  // 77&.G.&.W..T.&.G
    3810: 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26 8A  // .&.W..I.&.G".K&.
    3820: 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2  // O32....3........
    3830: FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00 33  // ....+.&.O32....3
    3840: D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05  // ................
    3850: 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24 EB  // &.G.&.W....&.G$.
    3860: 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53 56  // .&.G ..3.3....SV
    3870: 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A D1  // .......&.G.&.W..
    3880: EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B  // .......&.G.&.T..
    3890: C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8  // ....^[.3.3..SV..
    38A0: E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54 02  // ...&.w.&.w"...T.
    38B0: 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B  // ^[.S..&.G+....&.
    38C0: 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B 01  // G.&.W.[.S..&.G+.
    38D0: E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD  // .....S..&.G+....
    38E0: EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03 80  // ..S....5&._.....
    38F0: E3 07 32 FF 03 DB FF 97 D2 94 5B C3 53 52 56 8B  // ..2.......[.SRV.
    3900: D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE  // .&.G,2..........
    3910: 94 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4 8B  // .&.G.&.W.&.G-2..
    3920: F0 03 F0 8B C3 FF 94 06 95 26 89 47 04 26 89 57  // .........&.G.&.W
    3930: 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B  // ....SQV..&.O+2..
    3940: F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...6...&.o.&._..
    3950: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 16 95  // .&.O+2..........
    3960: 8B B4 18 95 26 21 4F 04 26 21 77 06 26 8A 4F 2A  // ....&!O.&!w.&.O*
    3970: 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1 67 04 26 D1  // 2.....>...&.g.&.
    3980: 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F 14  // W...&.O.&.w.&.O.
    3990: 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C D0  // &.w....SQRVW....
    39A0: 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  // ..&.G+2......&.G
    39B0: 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94 18  // *....>.2........
    39C0: 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    39D0: 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 3E  // .&!W.&.G*2.....>
    39E0: 95 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .2...&.o.&._...&
    39F0: 8A 47 2B 8B F0 C1 E6 02 8B 84 16 95 8B 94 18 95  // .G+.............
    3A00: 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3A10: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 08 26 D1 57 0A  // ..>.2...&.g.&.W.
    3A20: E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3A30: 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A 4F  // W._^ZY[.SQV..&.O
    3A40: 2B 32 ED 8B F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26  // +2.....6...&.o.&
    3A50: D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02  // ._...&.O+2......
    3A60: 8B 8C 16 95 8B B4 18 95 26 21 4F 04 26 21 77 06  // ........&!O.&!w.
    3A70: 26 8A 4F 2A 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1  // &.O*2.....>...&.
    3A80: 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    3A90: C1 E6 02 8B 8C 16 95 8B B4 18 95 26 21 4F 08 26  // ...........&!O.&
    3AA0: 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0 26  // !w....QRW......&
    3AB0: 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0  // ..+.t.&.G,2.....
    3AC0: 8B C3 FF 94 EE 94 26 89 47 08 26 89 57 0A EB 10  // ......&.G.&.W...
    3AD0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94  // &.G,2...........
    3AE0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 06 95  // &.G-2...........
    3AF0: 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F 2B  // &.G.&.W.....&..+
    3B00: 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // .tJ&.G+2......&.
    3B10: 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94  // G*....>.2.......
    3B20: 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3B30: 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26  // G.&!W......&.G.&
    3B40: 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B 57  // .W.&.G.&.W...&.W
    3B50: 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A 47  // .&.G.&.W.&.G.&.G
    3B60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5F 5A 59  // ,2..........._ZY
    3B70: C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B F0  // .SQRVW..&.G*2...
    3B80: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 04 26 D1 57 06  // ..>.2...&.g.&.W.
    3B90: E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6  // ......&.G+2.....
    3BA0: 02 26 8A 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16  // .&.G*....>.2....
    3BB0: 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ................
    3BC0: D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B 57  // .&.G.&.W.&.G.&.W
    3BD0: 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC 51  // .&!G.&!W..V.U..Q
    3BE0: 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RP..&.G,2.......
    3BF0: FF 94 EE 94 26 89 47 08 26 89 57 0A 26 8A 47 2B  // ....&.G.&.W.&.G+
    3C00: 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57 06  // .F......&.G.&.W.
    3C10: 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 06 95  // &.O-2...........
    3C20: 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46 FA  // &.G.&.W....D..F.
    3C30: 32 E4 8B F0 8A 8C 36 95 E3 0A 26 D1 6F 16 26 D1  // 2.....6...&.o.&.
    3C40: 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B  // _...&.W+2.......
    3C50: 84 16 95 8B 94 18 95 26 21 47 14 26 21 57 16 26  // .......&!G.&!W.&
    3C60: 8A 47 2A 32 E4 8B F0 8A 8C 3E 95 32 ED E3 0A 26  // .G*2.....>.2...&
    3C70: D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    3C80: 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4 8B  // .&.G.&.W.&.G,2..
    3C90: F0 03 F0 8B C3 FF 94 E2 94 8D 66 FC 5A 59 5D C3  // ..........f.ZY].
    3CA0: 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C  // Q...V.&.O+2.....
    3CB0: 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3  // 6...&.o.&._.....
    3CC0: E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF  // ...&.O,2........
    3CD0: 94 E2 94 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26  // ...Y...."....U.&
    3CE0: 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A 26  // .G.&.w.&.G.&.w.&
    3CF0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 C3  // .G,2............
    3D00: 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04  // SV........(.&.G.
    3D10: 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47 2C  // &.w.&1G.&1w.&.G,
    3D20: 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5E 5B C3 53  // 2...........^[.S
    3D30: 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04  // QV..........&.O.
    3D40: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8 46  // ..&.g.&.W......F
    3D50: FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 E2  // .&.O,2..........
    3D60: 94 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3 E8  // .^Y[.SQV........
    3D70: C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..&.O...&.o.&._.
    3D80: E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B  // ....R...r.......
    3D90: F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11 54  // .&.G.&.W.&.G.&.T
    3DA0: 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0  // ......&.G,2.....
    3DB0: 8B C3 FF 94 E2 94 5A C3 52 8B D8 E8 3E FB 8B C3  // ......Z.R...>...
    3DC0: E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29 47  // .q...&.G.&.W.&)G
    3DD0: 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B C6  // .&.T...QR.......
    3DE0: E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // .U.&.D.&.T.&.\.&
    3DF0: 8B 4C 06 E8 F7 F2 26 89 44 0C 26 89 54 0E 5A 59  // .L....&.D.&.T.ZY
    3E00: C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8 5C  // .R........,....\
    3E10: 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18 FC  // .Z.QRW..........
    3E20: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    3E30: E8 36 F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26  // .6.&.D.&.T.....&
    3E40: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    3E50: 17 F2 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B D0  // ..&.\.&.L....R..
    3E60: E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3 51  // .............Z.Q
    3E70: 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1 26  // R..............&
    3E80: 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47  // .G.&.W.&;W.u.&;G
    3E90: 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47  // .u.&.G0.ZY...&.G
    3EA0: 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04 33  // .&;G.r.u.&;W.s.3
    3EB0: C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52 57  // ......&.G0ZY.QRW
    3EC0: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3ED0: EE 94 26 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A  // ..&.G.&.W.....&.
    3EE0: 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32  // G+2..........6.2
    3EF0: ED 8B 84 16 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2  // ................
    3F00: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D FC  // .....&!G.&!W..M.
    3F10: 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32  // U..QRW.....&.G+2
    3F20: E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32 ED 8B 84  // ..........6.2...
    3F30: 16 95 89 46 F4 8B 84 18 95 89 46 F6 E3 08 D1 66  // ...F......F....f
    3F40: F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26  // ..V....~..F..F.&
    3F50: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 94 26  // .G,2...........&
    3F60: 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47 04  // .G.&.W....G.&.G.
    3F70: 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47  // &.W......V...&#G
    3F80: 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21 7F  // .&#W.&.G.&.W.&!.
    3F90: 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26  // ..F.&!G....w5..&
    3FA0: 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26  // .<.s.&.O...&.g.&
    3FB0: D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F  // .W.....&.O...&.o
    3FC0: 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21  // .&._...&!...F.&!
    3FD0: 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26 09  // G.&.W.&.G.&.W.&.
    3FE0: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3FF0: E2 94 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8 8B  // ...f._...R......
    4000: C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57 06  // ..4.&.G.&.W.&.W.
    4010: 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01 00  // u.&.G.t.........
    4020: 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D  // &.G0Z.SQRV..&.O-
    4030: 32 ED 8B F1 03 F1 FF 94 06 95 26 89 47 04 26 89  // 2.........&.G.&.
    4040: 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 36 95 E3 0A  // W.&.G+2.....6...
    4050: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0  // &.o.&._...&.G+..
    4060: C1 E6 02 8B 84 16 95 8B 94 18 95 26 21 47 04 26  // ...........&!G.&
    4070: 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47 04  // !W....R.....&.G.
    4080: 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51 52  // &.W.&.G.&.W.Z.QR
    4090: 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74  // .........&.w.&.t
    40A0: 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80  // ..<ZZt[&.w.&.t..
    40B0: 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8 21  // <cu.&.w.&.D....!
    40C0: F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26 89  // .&.G.&.W......&.
    40D0: 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B  // G.&.W.....&.W.&.
    40E0: 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B  // G.&;G.u.&;W.u.&.
    40F0: 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02 5A  // w.&..&.G...&.G.Z
    4100: 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57  // Y.&._.&.G..ZY.RW
    4110: 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54  // ......&.w.&.t..T
    4120: 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF  // ...u.&.G".../...
    4130: 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02  // u.&.w.&.?&.4&+u.
    4140: 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A C2  // &.w"..&.........
    4150: 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02  // 2.......&.G"&._.
    4160: 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26  // &.G.._Z...&.g/.&
    4170: 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26 8B  // .w.&.t..D.&.G4&.
    4180: 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B  // _.&.G.....&.w.&.
    4190: 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26 8A  // t..t.&.w ..S..&.
    41A0: 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26 09  // G,2.$.&.g/....&.
    41B0: 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02 8A  // G..O...&.w.&.t..
    41C0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
    41D0: E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26  // .@.&._.&.G.....&
    41E0: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  // .w.&.t..D.2.&.G.
    41F0: 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56 8B  // &.G..........SV.
    4200: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    4210: 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86 F4  // G.&.G...........
    4220: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // SV..&.w.&.t..D.2
    4230: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0 03  // .&.G.&.G........
    4240: E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F  // .c.SV..&.w...&._
    4250: 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52  // .._....&.\.^[.QR
    4260: 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8 A0  // ..&.w.&.D..&....
    4270: 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1  // ...&.w(.D.2.....
    4280: 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6  // ...<.tO&.w(.T.2.
    4290: 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B 34  // .....&.G1&.w.&.4
    42A0: 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24  // .D....2.$....2.$
    42B0: 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37  // .&.g/....&.G.&.7
    42C0: 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47  // &.G.......&..&.G
    42D0: 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32  // 2.&.O(ZY.S..&.G2
    42E0: 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74  // .[.W......&..,.t
    42F0: 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26  // .&.G,&:G0u.&.w.&
    4300: 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26  // .t.&...&.=.t...&
    4310: 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83 47  // ._.&.w._.&._.&.G
    4320: 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F  // .._.SVW......&..
    4330: 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B  // 0.t.&.G0&:G,u &.
    4340: 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01  // w.&.t.&...&.=.t.
    4350: 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B  // ..&._.&.w._^[.&.
    4360: 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C D0  // _.&.G....SVW....
    4370: 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51  // ..&..0.t...U..SQ
    4380: 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26 C6  // RW..&.w.&.t...&.
    4390: 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26 8B  // G=.....&..=.s &.
    43A0: 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B F3  // w.&.W=2.&.|.....
    43B0: 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26 8B  // ....&.T5&.G=..&.
    43C0: 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 63 95 26  // ....2........c.&
    43D0: 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88 57  // .U.&..(.U....&.W
    43E0: 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26 88  // -&..(.U.......&.
    43F0: 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57 2A  // W+&..(.U....&.W*
    4400: 8A 94 62 95 26 88 57 2C 8D 66 F8 5F 5A 59 5B 5D  // ..b.&.W,.f._ZY[]
    4410: C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0  // .SV..&.w....tH..
    4420: 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53  // ...t........^[.S
    4430: 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8  // V..&.w....tH....
    4440: 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51 56  // .t .......U..SQV
    4450: 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46  // W..@...F.......F
    4460: E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE  // .&.E.._....^..F.
    4470: 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4  // .......F.2..F...
    4480: FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F  // ...2....^....?..
    4490: 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46  // .e..F..f...F...F
    44A0: D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00 00  // ...f.F......F...
    44B0: C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A  // .F....<......V..
    44C0: C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75 26  // .2....^....?.tu&
    44D0: 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1  // .E......G.2.....
    44E0: 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0 50  // .2.......t...3.P
    44F0: E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0 08  // .......F...tA...
    4500: 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26  // &.G...2....^...&
    4510: 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26 8B  // .E....^.&...^.&.
    4520: 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26 89  // ....&.G..^..v.&.
    4530: 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6 46  // w..^..^..F.....F
    4540: EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8 10  // .....F...F.2....
    4550: 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F  // .....f..F.2.....
    4560: 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0  // .....^...&._..^.
    4570: 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10  // .^.&._..?[uJ.F..
    4580: 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F  // .^.&._..^..^.&..
    4590: 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 03  // .G.2......2.....
    45A0: E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47  // ..^..^...t.&...G
    45B0: 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E  // ....2.$........^
    45C0: B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D 46  // .&)....F.......F
    45D0: B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97  // ......2.....F...
    45E0: 60 95 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E EA  // `..r..~.......~.
    45F0: 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9  // .t..F...2..f._^.
    4600: 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 9B E8  // ...SQ..&.O.2....
    4610: 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 96 E8  // Y[.SQ..&.O.2....
    4620: 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B C3  // Y[.S..&.G.2...[.
    4630: 53 51 8B D8 26 8A 4F 04 32 ED E8 13 D8 59 5B C3  // SQ..&.O.2....Y[.
    4640: 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26  // S..fPfRfQf&.G.f&
    4650: 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47 0C  // .W.f&.O.f..f&.G.
    4660: 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B D8  // f&.W.fYfZfX[.S..
    4670: 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F 04  // fPfRfQf&.G.f&.O.
    4680: 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59 66  // f..f&.G.f&.W.fYf
    4690: 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 52 EB  // ZfX[.SW..&._..R.
    46A0: 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26 8B  // ..f...._[.SW..&.
    46B0: 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA  // G.&.W.....f.....
    46C0: C1 E3 02 E8 50 EB EB D8 53 52 57 8B D8 26 8B 47  // ....P...SRW..&.G
    46D0: 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14  // .&.W..f.....&._.
    46E0: E8 74 EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C 26  // .t._Z[.SR..&.G.&
    46F0: 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F  // .W..f.....&._&._
    4700: 01 E8 53 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C 26  // ..S.Z[.SRV..&.\&
    4710: 8B 5F 01 E8 DC EA 8B D0 66 C1 E8 10 92 26 89 44  // ._......f....&.D
    4720: 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8 26  // .&.T.^Z[.SQRW..&
    4730: 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8  // .G.&.W..f.......
    4740: 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10  // &.G.&.W.....f...
    4750: 8B DA C1 E3 02 8B C1 E8 30 EA 5F 5A 59 5B C3 8B  // ........0._ZY[..
    4760: D0 66 C1 E8 10 92 C3 00 1E 06 66 50 66 51 66 52  // .f........fPfQfR
    4770: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 37  // fSfUfVfW....u..7
    4780: 01 E9 D8 00 3C 01 75 06 E8 67 01 E9 CE 00 3C 02  // ....<.u..g....<.
    4790: 75 06 E8 9B 02 E9 C4 00 3C 03 75 0B E8 CF 03 8B  // u.......<.u.....
    47A0: EC 89 5E 0C E9 B5 00 3C 04 75 0B E8 DE 03 8B EC  // ..^....<.u......
    47B0: 89 5E 0C E9 A6 00 3C 05 75 0B E8 09 05 8B EC 89  // .^....<.u.......
    47C0: 56 10 E9 97 00 3C 06 75 11 E8 86 04 8B EC 89 5E  // V....<.u.......^
    47D0: 0C 89 4E 14 89 56 10 E9 82 00 3C 07 75 10 E8 78  // ..N..V....<.u..x
    47E0: 05 8B EC 88 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08  // ....~..N..V..n<.
    47F0: 75 0A E8 BB 04 8B EC 88 7E 0D EB 60 3C 09 75 05  // u.......~..`<.u.
    4800: E8 B4 05 EB 57 3C 0A 75 10 E8 FC 05 8B EC 89 4E  // ....W<.u.......N
    4810: 14 89 7E 00 8C 46 1C EB 43 3C 0B 75 0B E8 F6 05  // ..~..F..C<.u....
    4820: 8B EC 66 89 4E 14 EB 34 3C 10 75 0A E8 EB 05 8B  // ..f.N..4<.u.....
    4830: EC 89 5E 0C EB 26 3C 11 75 0D E8 1F 06 8B EC 89  // ..^..&<.u.......
    4840: 5E 0C 89 4E 14 EB 15 3C 15 75 0F E8 4A 06 8B EC  // ^..N...<.u..J...
    4850: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    4860: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4870: 1F C3 50 1E 2E 8E 1E E1 03 8C D8 A3 E4 5A A3 F4  // ..P..........Z..
    4880: 5A A3 06 5B 2E 8E 1E D9 03 A3 AA 04 1F 58 CB 00  // Z..[.........X..
    4890: 30 31 2E 30 30 00 56 45 53 41 00 03 68 02 00 00  // 01.00.VESA..h...
    48A0: 01 00 00 00 00 00 00 00 00 03 32 0F 78 01 00 00  // ..........2.x...
    48B0: 05 01 00 00 28 48 00 00 B9 3F 00 8B DF 83 C7 04  // ....(H...?......
    48C0: FC 66 33 C0 F3 66 AB 8B FB BE 2E 48 B9 22 00 F3  // .f3..f.....H."..
    48D0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    48E0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 3E D4 B0 4F 32  // O .."......>..O2
    48F0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    4900: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    4910: 00 C7 45 06 40 00 C6 45 1B 04 C6 45 18 01 C6 45  // ..E.@..E...E...E
    4920: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    4930: E8 4D BE 66 0B C0 0F 84 EE 00 06 1F 66 89 45 28  // .M.f........f.E(
    4940: 8C C8 66 C1 E0 10 B8 BB 4C 66 89 45 0C 81 F9 FF  // ..f.....Lf.E....
    4950: 81 0F 84 CF 00 80 E5 03 B2 01 53 8E DB BE 80 1C  // ..........S.....
    4960: E8 F9 D1 5B 06 1F 0F 84 BE 00 53 E8 66 D4 66 89  // ...[......S.f.f.
    4970: 45 12 C7 45 16 08 10 8D 5C 0C E8 A3 E8 66 89 45  // E..E....\....f.E
    4980: 1F 66 89 45 36 8D 5C 10 E8 95 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    4990: 89 45 3A 8D 5C 08 E8 87 E8 0A C0 75 04 5B E9 87  // .E:.\......u.[..
    49A0: 00 E8 30 D4 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01  // ..0.f...=X.t.=^.
    49B0: 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E E8 DA  // t.w..E.....E....
    49C0: D3 80 F9 00 74 04 C6 45 1B 06 2E A1 DB 03 89 45  // ....t..E.......E
    49D0: 08 8D 5C 04 E8 49 E8 66 8B C8 66 C1 E9 10 D3 E0  // ..\..I.f..f.....
    49E0: 89 45 10 89 45 32 B0 08 D2 E0 88 45 19 8D 5C 14  // .E..E2.....E..\.
    49F0: E8 2D E8 5B 3D 00 03 77 2F 53 8B D8 B8 00 03 33  // .-.[=..w/S.....3
    4A00: D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88 45 34 8E  // ...[...E..E5.E4.
    4A10: DB 57 53 BE 80 1C E8 BE BD 5B 5F 0B C9 75 05 06  // .WS......[_..u..
    4A20: 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3  // ..%.2......O..^.
    4A30: 81 FB FF 81 74 6A 0A FF 75 04 8B C3 EB 21 F6 C7  // ....tj..u....!..
    4A40: 08 75 63 8B CB B2 01 BE 20 1C E8 0F D1 74 57 E8  // .uc..... ....tW.
    4A50: 61 D3 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8  // a...u.f.........
    4A60: 91 04 EB 3C E8 7B C1 74 05 E8 A0 BE EB 00 E8 9D  // ...<.{.t........
    4A70: C2 BE 20 1C E8 34 BD 74 2D E8 A5 00 E8 2C 00 66  // .. ..4.t-....,.f
    4A80: BB 20 1C 00 1C E8 22 D3 BE 00 1C E8 25 D3 66 C1  // . ....".....%.f.
    4A90: E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8 74 BD  // ....2....t..@.t.
    4AA0: B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33 C0 8E  // .O2....O...V.3..
    4AB0: C0 BE 20 1C E8 1D D3 8B C8 66 C1 E8 10 8B D0 C1  // .. ......f......
    4AC0: E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88 16 84  // ..&..J......&...
    4AD0: 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26 C6 06  // .&..Q..&..P..&..
    4AE0: 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85 04 10  // I.b&..L...&.....
    4AF0: 26 C7 06 0C 01 B5 64 8C C8 26 A3 0E 01 07 5E C3  // &.....d..&....^.
    4B00: 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00 01 02  // .........@......
    4B10: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    4B20: 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01 BE 98  // ................
    4B30: 4A AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9  // J...............
    4B40: 09 00 BA CE 03 32 E4 BE 9C 4A 8A C4 EE AC 42 EE  // .....2...J....B.
    4B50: 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0 03 32  // J..............2
    4B60: E4 BE A5 4A 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00  // ...J............
    4B70: 1C E8 3F D2 66 C1 E8 10 8B D8 E8 0F D2 75 05 E8  // ..?.f........u..
    4B80: FB D1 75 04 B8 4F 00 C3 B8 4F 03 C3 83 E1 0F 0F  // ..u..O...O......
    4B90: 84 BB 00 0A D2 75 0C B8 00 1C E8 1D 03 83 C3 11  // .....u..........
    4BA0: E9 A6 00 80 FA 01 75 33 8B FB BB C9 05 B9 08 00  // ......u3........
    4BB0: FC E8 3A E6 66 AB 43 E2 F8 66 C1 E7 10 66 C1 EF  // ..:.f.C..f...f..
    4BC0: 10 B9 00 01 BA 00 01 0E 1F E8 C3 BE 06 1F B8 01  // ................
    4BD0: 1C B9 07 00 8B DF E8 E1 02 EB 6E 80 FA 02 75 6E  // ..........n...un
    4BE0: 8B F3 06 1F FC BB C9 05 B9 08 00 66 AD E8 59 E5  // ...........f..Y.
    4BF0: 43 E2 F8 06 56 0E 1F BB D0 05 E8 F1 E5 8A D0 80  // C...V...........
    4C00: E2 03 66 C1 E8 10 8B C8 BE 00 1C E8 4E CF BB CE  // ..f.........N...
    4C10: 05 E8 DA E5 8B C8 66 C1 E8 10 8B D0 B0 18 B7 01  // ......f.........
    4C20: E8 94 B8 5B 07 53 81 C3 00 04 B8 02 1C B9 07 00  // ...[.S..........
    4C30: E8 87 02 5E 8B FE 66 C1 E7 10 66 C1 EF 10 B9 00  // ...^..f...f.....
    4C40: 01 BA 00 01 0E 1F E8 95 BE B0 4F 32 E4 C3 32 C0  // ..........O2..2.
    4C50: C3 00 E8 37 D1 74 53 BE 00 1C 80 FB 00 74 18 80  // ...7.tS......t..
    4C60: FB 01 75 05 E8 75 D1 EB 1D 80 FB 02 75 10 8B C1  // ..u..u......u...
    4C70: E8 28 D1 D3 E8 8B C8 E8 D1 BD 74 2E EB 08 80 FB  // .(........t.....
    4C80: 03 75 24 E8 CC D0 E8 12 D1 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4C90: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4CA0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4CB0: 0A DB 75 07 8A EF E8 AB BF EB 05 E8 90 BF 8A F8  // ..u.............
    4CC0: B0 4F 32 E4 C3 00 E8 C3 D0 74 2C BE 00 1C E8 E2  // .O2......t,.....
    4CD0: D0 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4CE0: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 00 E5 D1 E8  // ......u.........
    4CF0: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4D00: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4D10: 8B C2 BB 13 00 E8 31 E4 BB 12 00 E8 2B E4 66 58  // ......1.....+.fX
    4D20: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4D30: 66 56 66 57 0E 1F E8 27 E5 E8 8A FF E8 46 E5 8B  // fVfW...'.....F..
    4D40: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D50: 5A 66 59 66 58 07 1F 9D CB E8 30 D0 74 54 F6 C3  // ZfYfX.....0.tT..
    4D60: 7F 75 38 53 BE 00 1C E8 72 D0 F7 E2 66 C1 E2 10  // .u8S....r...f...
    4D70: 8B D0 66 81 E1 FF FF 00 00 66 03 D1 E8 1C D0 80  // ..f......f......
    4D80: E2 FC 66 D3 E2 66 81 E2 FF FF FF 02 8D 5C 18 66  // ..f..f.......\.f
    4D90: 8B C2 E8 EB E3 5B E8 9A BC EB 0F 80 FB 82 74 C3  // .....[........t.
    4DA0: 80 FB 01 75 0A E8 7F BC 32 FF B0 4F 32 E4 C3 32  // ...u....2..O2..2
    4DB0: C0 C3 B0 4F B4 03 C3 E8 D2 CF 74 47 80 FF 20 74  // ...O......tG.. t
    4DC0: 08 66 C1 E7 10 66 C1 EF 10 81 F9 00 01 77 31 0A  // .f...f.......w1.
    4DD0: DB 74 05 80 FB 80 75 10 32 F6 E8 71 BE 3C 06 74  // .t....u.2..q.<.t
    4DE0: 02 B6 01 E8 F8 BC EB 13 80 FB 01 75 13 32 F6 E8  // ...........u.2..
    4DF0: 5C BE 3C 06 74 02 B6 01 E8 94 BC B0 4F 32 E4 C3  // \.<.t.......O2..
    4E00: 32 C0 C3 B0 4F B4 03 C3 0E 07 BF 7C 92 2E 8B 0E  // 2...O......|....
    4E10: 7A 92 B8 4F 00 C3 32 C0 C3 00 0A DB 75 06 B7 04  // z..O..2.....u...
    4E20: B3 10 EB 2F 80 FB 01 75 1D 53 32 C9 0A FF 74 02  // .../...u.S2...t.
    4E30: B1 01 E8 D6 BD B1 01 0A FF 74 02 B1 00 E8 B7 BE  // .........t......
    4E40: E8 A0 BB 5B EB 0D 80 FB 02 75 0D E8 CF BD 8A F8  // ...[.....u......
    4E50: C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB 01 75  // ....O2...O.....u
    4E60: 09 33 C0 E8 35 BE 74 2B EB 24 80 FB 07 75 24 0A  // .3..5.t+.$...u$.
    4E70: FF 75 0E B0 82 E8 3F B6 0A C9 74 12 B9 03 03 EB  // .u....?...t.....
    4E80: 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 29 B6 B0 4F  // .....t......)..O
    4E90: 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75 05 BB  // 2...O........u..
    4EA0: 02 01 EB 0C 33 C0 53 E8 4D BE E8 95 C5 5B 74 05  // ....3.S.M....[t.
    4EB0: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  // .O2...O......r..
    4EC0: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // B...fPfQfRfSfUfV
    4ED0: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  // fW..P.......X...
    4EE0: 9C 4E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .Nf_f^f]f[fZfYfX
    4EF0: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  // .....P.......X..
    4F00: 94 9C 4E C3 D6 4E 20 89 39 89 56 89 CB 4F 59 80  // ..N..N .9.V..OY.
    4F10: 8B 80 FE 80 81 81 0F 83 13 83 1C 86 ED 86 70 87  // ..............p.
    4F20: D7 87 72 89 97 89 40 8C E4 51 87 90 8A 4E 8A 4E  // ..r...@..Q...N.N
    4F30: 8A 4E 8A 4E 8A 4E 8A 4E 57 91 97 75 EB 76 2E 8E  // .N.N.N.NW..u.v..
    4F40: 1E D9 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C6  // ....&...P.......
    4F50: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  // .;.u.X........0&
    4F60: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  // .G..t.... ..uI..
    4F70: EB 06 A8 01 74 41 B5 0B 53 E8 67 42 0A FF 5B 75  // ....tA..S.gB..[u
    4F80: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  // ..&........+X...
    4F90: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  // ...&.........c..
    4FA0: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 A2 5C  // ...............\
    4FB0: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  // .....B..&.......
    4FC0: 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C E8 8B  // XSP..3......@...
    4FD0: CB E8 0E BC 74 05 E8 33 B9 EB 00 E8 30 BD BE 40  // ....t..3....0..@
    4FE0: 1C E8 C7 B7 58 5B 0F 84 6C FF 2E 8E 1E D9 03 0E  // ....X[..l.......
    4FF0: 07 E8 4B 2A 0E 1F 53 66 BB 40 1C 00 1C E8 AA CD  // ..K*..Sf.@......
    5000: BE 00 1C B0 20 E8 0C B8 5B 2E 8E 1E D9 03 0E 07  // .... ...[.......
    5010: E8 54 2F E8 24 00 E8 23 3E E8 D1 01 E8 8E 01 E8  // .T/.$..#>.......
    5020: A9 3F 0E 1F BE 00 1C B0 10 E8 E8 B7 E8 2F 2F E8  // .?...........//.
    5030: 27 2F C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00  // '/....F..../....
    5040: E8 BD 00 E8 52 00 E8 94 0B C3 53 83 C3 0A 8B 16  // ....R.....S.....
    5050: 63 04 B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43  // c......0.2.&.'.C
    5060: FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03  // ....[...2...S...
    5070: 83 C3 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80  // ........&.'<.u..
    5080: CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03  // . .C....[&.G....
    5090: EE B2 C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03  // ............#...
    50A0: 26 F6 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D  // &.G..u........t.
    50B0: 83 C6 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07  // ..............t.
    50C0: 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B  // ...&...F.....S..
    50D0: DE B9 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07  // ....2........&..
    50E0: EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 81 2E 0B  // .C.....2........
    50F0: ED 74 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3  // .t........F...[.
    5100: 53 83 C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF  // S..7...2....&.'.
    5110: 43 FE C0 E2 F7 5B C3 BB A2 53 0E 07 8B D3 0A E4  // C....[...S......
    5120: 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6  // }......3.....<J.
    5130: 06 89 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C  // ....u ...$.<.~$<
    5140: 08 74 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03  // .t <.t.<.t..@...
    5150: D8 81 C3 C0 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3  // .......@........
    5160: C0 05 C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6  // ....@........u..
    5170: 06 89 04 10 75 05 81 C3 C0 01 C3 81 C3 40 06 C3  // ....u........@..
    5180: BF 24 51 BE 45 51 33 C9 E8 4E 00 C3 04 00 01 05  // .$Q.EQ3..N......
    5190: 40 01 06 80 01 0D 40 03 0E 80 03 0F 40 04 10 80  // @.....@.....@...
    51A0: 04 11 80 06 12 C0 06 13 00 07 62 00 02 53 8A 1E  // ..........b..S..
    51B0: 49 04 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 61 51  // I......2......aQ
    51C0: A2 65 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29  // .e..&f.[.,0(0-0)
    51D0: 30 2A 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03  // 0*0.0.?)0.8%u...
    51E0: 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E  // ].3.....;.u.....
    51F0: 8E 1E D9 03 F6 06 87 04 80 75 49 83 3E 4C 04 00  // .........uI.>L..
    5200: 74 42 A0 49 04 B9 00 20 2E 8B 3E DF 03 26 F6 47  // tB.I... ..>..&.G
    5210: 33 01 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E DD 03  // 3.u.&.G..u...>..
    5220: EB 14 3C 06 7E 0B 2E 8B 3E DB 03 26 8A 67 37 B5  // ..<.~...>..&.g7.
    5230: 40 66 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33  // @f3...f. . ...f3
    5240: FF F3 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E D9  // ..f..&..........
    5250: 03 80 FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B  // ....u..z... u...
    5260: 01 80 FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02  // ...2u......u....
    5270: B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2  // .............$..
    5280: C2 EE E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E  // .......5u(<.u...
    5290: 89 04 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A  // ..@.......@.....
    52A0: C0 0F 84 CA 00 FE C8 75 06 E8 D8 08 E9 BA 00 E9  // .......u........
    52B0: BD 00 80 FB 30 74 03 E9 96 00 50 E8 25 3F 8A EF  // ....0t....P.%?..
    52C0: BA CC 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01  // ......X..u0.....
    52D0: 75 12 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7  // u...u....$0<0u..
    52E0: 02 E9 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80  // .......$0<0u....
    52F0: 26 89 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80  // &..o......6<.uA.
    5300: 26 89 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04  // &..o.....u......
    5310: 24 30 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11  // $0<0t.....t.....
    5320: A0 10 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7  // ...$0<0u.....t..
    5330: 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29  // ...............)
    5340: 3C 02 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4  // <.u+.&..o.......
    5350: 80 FB 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89  // ..1u...t.<.u....
    5360: 04 08 EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3  // .....&......F...
    5370: 80 FB 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89  // ..3u.<.t.<.u..&.
    5380: 04 FD EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17  // .............4u.
    5390: 3C 00 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80  // <.u..&.....<.u..
    53A0: 0E 87 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C  // .........6u&. .<
    53B0: 01 74 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB  // .t....<.t.......
    53C0: A8 9C FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE  // .........B."....
    53D0: 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7  // .............u..
    53E0: 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B  // ..........%.....
    53F0: EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06  // ..^..N..F.......
    5400: 14 00 84 7A 8C 0E 16 00 9D C3 28 18 08 00 08 09  // ...z......(.....
    5410: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5420: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5430: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5440: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 08 09  // ..........(.....
    5450: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5460: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5470: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5480: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    5490: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54A0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    54C0: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    54D0: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54E0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54F0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5500: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09  // ..........(...@.
    5510: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5520: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5530: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5540: 00 00 00 00 00 00 30 0F 00 FF 28 18 08 00 40 09  // ......0...(...@.
    5550: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5560: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5570: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5580: 00 00 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01  // ......0...P...@.
    5590: 01 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00  // ...c_OP.T.......
    55A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17  // .......(........
    55B0: 17 17 17 17 17 17 17 17 17 17 17 17 17 01 00 01  // ................
    55C0: 00 00 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00  // ..........P.....
    55D0: 03 00 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    55E0: 00 00 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08  // ......](.c......
    55F0: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5600: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5610: 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5620: 00 00 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02  // .......P........
    5630: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    5640: 00 10 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B  // ......@.........
    5650: 14 28 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11  // .(..-2 $8?......
    5660: 14 18 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18  // ... $(-28?......
    5670: 16 15 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23  // ....%/83.*%')*,#
    5680: 19 10 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39  // ..#%'*,+*))-27;9
    5690: 37 34 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34  // 74234551,'/02344
    56A0: 33 33 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37  // 33258:=<:98899:7
    56B0: 34 31 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17  // 41..............
    56C0: 15 13 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13  // ................
    56D0: 13 13 12 14 16 18 1A 19 18 17 16 17 17 17 18 15  // ................
    56E0: 14 11 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B  // ................
    56F0: 1A 19 19 19 19 19 1A 18 17 16 02 03 04 05 07 06  // ................
    5700: 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09  // ................
    5710: 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F  // ................
    5720: 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D  // ................
    5730: 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E  // ................
    5740: 0D 0C 00 00 00 00 00 00 00 00 28 18 08 00 20 09  // ..........(... .
    5750: 0F 00 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00  // ...c-'(.+.......
    5760: 00 00 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02  // ................
    5770: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    5780: 00 00 00 00 00 00 00 05 0F FF 50 18 08 00 40 01  // ..........P...@.
    5790: 0F 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00  // ...c_OP.T.......
    57A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02  // .......(........
    57B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    57C0: 00 00 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B  // ................
    57D0: 25 28 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E  // %(... ..(,..%*..
    57E0: 32 36 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18  // 26..',. 49...$..
    57F0: 2C 30 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24  // ,0..!&...3..+0.$
    5800: 38 3D 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8=..-2 $8?......
    5810: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5820: 38 3F 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8?..-2 $8?......
    5830: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5840: 38 3F 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01  // 8?..-2 $8?P.....
    5850: 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    5860: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00  // ......](.c......
    5870: 00 18 18 00 00 00 08 00 00 00 18 00 00 0B 00 05  // ................
    5880: 00 00 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01  // ..........P.....
    5890: 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    58A0: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02  // ......](.c......
    58B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    58C0: 00 00 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09  // ..........(.....
    58D0: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    58E0: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    58F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5900: 00 00 00 00 00 00 10 0E 00 FF 28 18 0E 00 08 09  // ..........(.....
    5910: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    5920: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    5930: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5940: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5950: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    5960: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    5970: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5980: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5990: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    59A0: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    59B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    59C0: 00 00 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08  // ..........(.....
    59D0: 03 00 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E  // ...g-'(.+....O..
    59E0: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    59F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A00: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A10: 03 00 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...g_OP.U....O..
    5A20: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    5A30: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A40: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A50: 03 00 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...f_OP.U....O..
    5A60: 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08  // .......(........
    5A70: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5A80: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5A90: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AA0: 00 00 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F  // .......(......??
    5AB0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F  // ?????????????...
    5AC0: 00 00 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01  // ..........P.....
    5AD0: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AE0: 00 00 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02  // .......(........
    5AF0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    5B00: 00 00 00 00 00 00 00 05 0F FF 28 18 08 00 20 01  // ..........(... .
    5B10: 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00  // ...c_OP.T....A..
    5B20: 00 00 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02  // .......(@.......
    5B30: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F  // .............A..
    5B40: 00 00 00 00 00 00 40 05 0F FF A2 53 00 C0 00 00  // ......@....S....
    5B50: 00 00 00 00 00 00 00 00 00 00 02 5B 00 C0 00 00  // ...........[....
    5B60: 00 00 00 00 00 00 00 00 00 00 1A 00 55 92 00 C0  // ............U...
    5B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B80: 00 00 00 00 1E E8 10 00 2E 8E 1E D9 03 E8 B3 36  // ...............6
    5B90: E8 8A 36 E8 68 1A 1F C3 2E 8E 1E D9 03 C7 06 87  // ..6.h...........
    5BA0: 04 60 F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2  // .`...........$..
    5BB0: 89 04 B4 01 E8 65 1E A0 89 04 80 26 10 04 CF 80  // .....e.....&....
    5BC0: 0E 10 04 20 C7 06 63 04 D4 03 B8 03 00 E8 23 F3  // ... ..c.......#.
    5BD0: C3 1E 2E 8E 1E D9 03 0E 07 EB 00 1F C3 F6 06 89  // ................
    5BE0: 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2  // ..t..S..........
    5BF0: C8 80 3E 63 04 B4 75 2F BE 56 5C B9 40 00 33 DB  // ..>c..u/.V\.@.3.
    5C00: 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E  // ................
    5C10: 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3  // ..B...E....E....
    5C20: 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06  // J......&.G+.....
    5C30: 74 31 B9 F8 00 BF E2 55 3C 08 74 11 B9 40 00 BF  // t1.....U<.t..@..
    5C40: 62 57 3C 38 74 07 3C 3F 74 03 BF A2 57 33 DB 9C  // bW<8t.<?t...W3..
    5C50: FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1  // .......B.....J..
    5C60: 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9  // ..I<.t%<8t.<?t*.
    5C70: 08 00 33 DB 51 E8 EC D0 B9 08 00 F7 C3 10 00 74  // ..3.Q..........t
    5C80: 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 D5 D0 B9  // .....g.Y... ....
    5C90: 10 00 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8  // ..3..W....@.3.Q.
    5CA0: 28 00 8A C3 E8 7A 2F FE C3 59 E2 F2 5B C3 00 2A  // (....z/..Y..[..*
    5CB0: 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A  // .*.*.*.?.?.?.?.*
    5CC0: 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83  // .?.*.?.*.?......
    5CD0: E7 0F 2E 8A B5 46 5C 8B FB D1 EF 83 E7 0F 2E 8A  // .....F\.........
    5CE0: AD 46 5C 8B FB 83 E7 0F 2E 8A 8D 46 5C C3 9C 8A  // .F\........F\...
    5CF0: C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A  // ......B.G....G..
    5D00: 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00  // ..G..J..........
    5D10: 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE  // ..~......~|.....
    5D20: 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38  // |.....|8...8|.|8
    5D30: 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10  // ...8....8.8|..l.
    5D40: 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7  // 8...<~<.........
    5D50: FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3  // ....<ff<........
    5D60: E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E  // .....6x..x~..~.~
    5D70: 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66  // .......p.`>>66.f
    5D80: 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0  // ...<f.f<........
    5D90: 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C  // .....>.....<~.~<
    5DA0: 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B  // ..fffff.f...{;..
    5DB0: 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE  // ..<f8ll8.x......
    5DC0: FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18  // ...<~.~<.~.<~...
    5DD0: 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18  // ......~<........
    5DE0: 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE  // ...0p.p0........
    5DF0: 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE  // ...$f.f$....8||.
    5E00: 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00  // ....||8.........
    5E10: 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00  // ...<<.....lll...
    5E20: 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC  // ..ll.l.ll..~.|..
    5E30: 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC  // ......0`..8l8v..
    5E40: 76 00 18 18 30 00 00 00 00 00 18 30 60 60 60 30  // v...0......0```0
    5E50: 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE  // ..`0...0`...|.|.
    5E60: 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 18 18  // .....~..........
    5E70: 30 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 38  // 0..............8
    5E80: 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6  // 8....0`...|.....
    5E90: 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66  // |..x....~.|...0f
    5EA0: FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C  // ..|..<..|...<l..
    5EB0: 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6  // ........|.|.....
    5EC0: 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6  // |.........|..|..
    5ED0: 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C  // |.|..~..|.......
    5EE0: 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60 30 18  // .........0..0`0.
    5EF0: 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30  // ..........`0...0
    5F00: 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0  // `.|.......|.....
    5F10: 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66  // ~.8l.......ff|ff
    5F20: FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C  // ..<f...f<..lfffl
    5F30: F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60  // ...........b`|``
    5F40: F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6  // ..|.....|.......
    5F50: C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8  // ..<.....<.<.....
    5F60: 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62  // p..........````b
    5F70: FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE  // ................
    5F80: C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60  // ..|.....|..ff|``
    5F90: F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC  // ..|.....|.......
    5FA0: C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18  // ..|..|..|.~Z....
    5FB0: 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38  // <.......|.....l8
    5FC0: 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C  // ...........l888l
    5FD0: C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62  // ..fff<..<.....0b
    5FE0: FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06  // ..|`````|..`0...
    5FF0: 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00  // ..|.....|..8l...
    6000: 00 00 00 00 00 00 00 00 00 FF 30 30 18 00 00 00  // ..........00....
    6010: 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66  // ....x.|.~..`|fff
    6020: FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC  // ....|...|...|...
    6030: 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30  // ~...|...|..60.00
    6040: 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66  // x...v..~.|.`|fff
    6050: E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C  // ....8...<.......
    6060: CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18  // .x.`flxl........
    6070: 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66  // ....l........fff
    6080: 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C  // f...|...|....ff|
    6090: 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60  // `...v..|.....f``
    60A0: F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36  // ....|.|.|.00.006
    60B0: 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38  // ........v.....l8
    60C0: 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C  // ........l....l8l
    60D0: C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64  // .......v.|....0d
    60E0: FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18  // .....p..........
    60F0: 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00  // ..p.....p.v.....
    6100: 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18  // ....88ll..<f.f<.
    6110: CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0  // .x......v...|...
    6120: 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC  // |.|.x.|.~...x.|.
    6130: 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC  // ~...x.|.~.88x.|.
    6140: 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0  // ~...|.|.l8|.|...
    6150: 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0  // |...|...|...|...
    6160: 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18  // |.f.8...<.|.8...
    6170: 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6  // <...8...<..8l...
    6180: C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0  // ..88.|..........
    6190: FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8  // ....l.~.n.~.....
    61A0: DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6  // ..|..|..|....|..
    61B0: 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE  // |....|..|.|.....
    61C0: 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18  // v.......v...<...
    61D0: 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6  // <..8l..l8.......
    61E0: 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6  // |...~..~..8l`.f.
    61F0: 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E  // l..f<~.<..>c8.c>
    6200: 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC  // ...>a<.|....x.|.
    6210: 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6  // ~...8...<....|..
    6220: 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66  // |.......v.....ff
    6230: E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63  // ..........>.>`gc
    6240: 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66  // =.>.v..~.|...0`f
    6250: 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C  // <....|``.....|..
    6260: 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C  // .....0|6.>...0l<
    6270: 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36  // ~.....<<...6l.l6
    6280: 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88  // ....l6l...".".".
    6290: 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77  // ".U.U.U.U..w.w.w
    62A0: DD 77 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // .w..............
    62B0: 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36  // ..........6666.6
    62C0: 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18  // 66.....666......
    62D0: 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // ..66...666666666
    62E0: 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00  // 66.....66666....
    62F0: 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00  // ..6666..........
    6300: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00  // ................
    6310: 00 00 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18  // ................
    6320: 18 18 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00  // ................
    6330: 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18  // ................
    6340: 18 18 36 36 36 36 37 36 36 36 36 36 37 30 3F 00  // ..666676666670?.
    6350: 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00  // ....?0766666....
    6360: 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36  // .......666667076
    6370: 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36  // 66........66...6
    6380: 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00  // 66........6666..
    6390: 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36  // ...............6
    63A0: 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00  // 666666?.........
    63B0: 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36  // ..............?6
    63C0: 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18  // 666666.666......
    63D0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18  // ................
    63E0: 18 18 FF FF FF FF FF FF FF FF 00 00 00 00 FF FF  // ................
    63F0: FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F  // ................
    6400: 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC  // ............f...
    6410: 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60  // f..x........b```
    6420: E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6  // ....lllll...`0`.
    6430: FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C  // ...~....p..ffff|
    6440: C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38  // ...v....8..8l.l8
    6450: FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C  // ..8l...l8.8l..ll
    6460: EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E  // ..>`8f..x...~..~
    6470: 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60  // ...|...|..8`...`
    6480: 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE  // 8.|.............
    6490: 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00  // ....~...~.0...0.
    64A0: 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18  // ~...0...~.......
    64B0: 18 18 18 18 18 18 18 78 30 00 00 00 18 00 7E 00  // .......x0.....~.
    64C0: 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00  // ...v..v...|..|..
    64D0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 18 00  // ................
    64E0: 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00  // .......8...lll..
    64F0: 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C  // ..p.0.......||||
    6500: 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 24  // ...............$
    6510: 66 FF 66 24 00 00 00 00 00 00 00 10 00 00 00 00  // f.f$............
    6520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7E  // ...............~
    6530: 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C  // ........~......|
    6540: FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00  // ........|.......
    6550: 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00 00 00  // l.....|8........
    6560: 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00  // .8|.|8..........
    6570: 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10  // .88.l.l.8.......
    6580: 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00  // 8||...l.8.......
    6590: 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF  // ...<<<..........
    65A0: FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00  // ................
    65B0: 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF  // ..<fff<.........
    65C0: FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E  // ................
    65D0: 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C  // ..6x....x......<
    65E0: 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E  // fff<.~..........
    65F0: 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E  // ......x.p......>
    6600: 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18  // 6>66v.f.........
    6610: DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00  // .~<ff<~.........
    6620: 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00  // ................
    6630: 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18  // ..>~.~>.........
    6640: 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66  // <~....~<.......f
    6650: 66 66 66 66 66 66 00 66 66 00 00 00 00 00 00 7F  // ffffff.ff.......
    6660: DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C  // ....{..........|
    6670: C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00  // ..`|..|...|.....
    6680: 00 00 00 00 00 FE FE FE FE 00 00 00 00 00 00 18  // ................
    6690: 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18  // <~...~<.~.......
    66A0: 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00 00 18  // <~..............
    66B0: 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00  // ......~<........
    66C0: 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00  // ................
    66D0: 00 00 30 70 FE 70 30 00 00 00 00 00 00 00 00 00  // ..0p.p0.........
    66E0: 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00  // ................
    66F0: 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 00 00  // ..$f.f$.........
    6700: 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00  // .888||..........
    6710: FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00  // ..|||88.........
    6720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    6730: 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36  // <<<<..........66
    6740: 36 36 14 00 00 00 00 00 00 00 00 00 00 00 00 6C  // 66.............l
    6750: 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18  // ll.ll.lll.......
    6760: 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00  // .|..x<..|.......
    6770: 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38  // ..bf..0f.......8
    6780: 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C  // l80v~...v.......
    6790: 0C 18 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  // ................
    67A0: 18 30 30 30 30 30 30 18 0C 00 00 00 00 00 00 30  // .000000........0
    67B0: 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00  // ........0.......
    67C0: 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00  // ..l8.8l.........
    67D0: 00 00 18 18 7E 18 18 00 00 00 00 00 00 00 00 00  // ....~...........
    67E0: 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    67F0: 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    6800: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    6810: 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C  // .....0`........|
    6820: C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6830: 78 18 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C  // x.......~......|
    6840: C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C  // .....0`........|
    6850: C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C  // ...<....|.......
    6860: 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE  // .<l.............
    6870: C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C  // ........|......|
    6880: C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE  // ........|.......
    6890: C6 06 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C  // ....00000......|
    68A0: C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C  // ...|....|......|
    68B0: C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00  // ....~...|.......
    68C0: 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00  // ................
    68D0: 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    68E0: 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00  // ..0`.`0.........
    68F0: 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C  // `0.....0`......|
    6910: C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C  // ...............|
    6920: C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38  // ........~......8
    6930: 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC  // l...............
    6940: 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C  // fff|ffff.......<
    6950: 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8  // f......f<.......
    6960: 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE  // lffffffl........
    6970: 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE  // f`d|d``f........
    6980: 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C  // f`d|d```.......|
    6990: C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    69A0: C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C  // ...............<
    69B0: 18 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C  // ........<......<
    69C0: 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6  // ........p.......
    69D0: C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0  // ................
    69E0: 60 60 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6  // ``````bf........
    69F0: C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6  // ................
    6A00: C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C  // ...............|
    6A10: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC  // ........|.......
    6A20: 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C  // ffff|```.......|
    6A30: C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC  // ........|.......
    6A40: 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C  // fff|xlff.......|
    6A50: C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E  // ...p....|......~
    6A60: 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6  // Z.......<.......
    6A70: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    6A80: C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6  // ......l8........
    6A90: C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6  // ................
    6AA0: C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66  // ..l88l.........f
    6AB0: 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE  // ffff<...<.......
    6AC0: C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C  // ....0`.........|
    6AD0: 60 60 60 60 60 60 60 60 7C 00 00 00 00 00 00 00  // ````````|.......
    6AE0: 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C  // ...`0..........|
    6AF0: 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38  // ........|......8
    6B00: 6C C6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // l...............
    6B10: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 18 18  // ................
    6B20: 18 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B30: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0  // ..x.|...v.......
    6B40: 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00  // ``|fffff........
    6B50: 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B60: 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00  // ..|.....~.......
    6B70: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B80: 36 30 30 FC 30 30 30 30 78 00 00 00 00 00 00 00  // 600.0000x.......
    6B90: 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0  // ..v....v..|.....
    6BA0: 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18  // ``|fffff........
    6BB0: 18 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C  // ..8.....<.......
    6BC0: 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0  // ..........x.....
    6BD0: 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18  // ``fflxlf........
    6BE0: 18 18 18 18 18 18 18 18 1C 00 00 00 00 00 00 00  // ................
    6BF0: 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00  // ..l.............
    6C00: 00 00 DC 66 66 66 66 66 66 00 00 00 00 00 00 00  // ...ffffff.......
    6C10: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00  // ..|.....|.......
    6C20: 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00  // ...ffff|``......
    6C30: 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00  // ..v....|........
    6C40: 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00 00 00  // ...f````........
    6C50: 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30  // ..|..|..|......0
    6C60: 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00 00 00  // 00.00006........
    6C70: 00 00 CC CC CC CC CC CC 76 00 00 00 00 00 00 00  // ........v.......
    6C80: 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00  // ......l8........
    6C90: 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00  // ........l.......
    6CA0: 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00  // ....l8l.........
    6CB0: 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00  // .......v..|.....
    6CC0: 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E  // ......0b........
    6CD0: 18 18 18 70 18 18 18 18 0E 00 00 00 00 00 00 18  // ...p............
    6CE0: 18 18 18 00 18 18 18 18 18 00 00 00 00 00 00 70  // ...............p
    6CF0: 18 18 18 0E 18 18 18 18 70 00 00 00 00 00 00 76  // ........p......v
    6D00: DC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D10: 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C  // ...88ll........<
    6D20: 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6  // f....f<...8.....
    6D30: 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18  // ........v.......
    6D40: 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78  // 0.|.....|.....0x
    6D50: CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC  // ..x.|...v.......
    6D60: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30  // ..x.|...v.....`0
    6D70: 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C  // ..x.|...v.....8l
    6D80: 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00  // 8.x.|...v.......
    6D90: 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78  // .|....|..l8...0x
    6DA0: CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC  // ..|.....|.......
    6DB0: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6DC0: 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66  // ..|.....|......f
    6DD0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C  // ..8.....<......<
    6DE0: 66 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 00  // f.8.....<.......
    6DF0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // ..8.....<.......
    6E00: 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38  // 8l...........8l8
    6E10: 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30  // .8l............0
    6E20: 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00  // ..``|```........
    6E30: 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E  // .f......v......~
    6E40: D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78  // ..............0x
    6E50: CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ..|.....|.......
    6E60: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6E70: 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78  // ..|.....|.....0x
    6E80: CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30  // ........v.....`0
    6E90: 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00  // ........v.......
    6EA0: 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // <.......<.......
    6EB0: 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00  // |.......|.......
    6EC0: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6ED0: 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C  // .|....|.......8l
    6EE0: 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66  // ``.```f.l.....ff
    6EF0: 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E  // ff<.~.<........>
    6F00: 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00  // cc0..cc>........
    6F10: 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18  // ..>c8.c>........
    6F20: 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18  // 0.x.|...v.......
    6F30: 30 00 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18  // 0.8.....<.......
    6F40: 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30  // 0.|.....|......0
    6F50: 60 00 CC CC CC CC CC DC 76 00 00 00 00 00 00 76  // `.......v......v
    6F60: DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC  // ...fffff......v.
    6F70: 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E  // ..............!.
    6F80: 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C  // ..3``gc3......B<
    6F90: 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30  // .;fff>.f<......0
    6FA0: 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00  // 0.000`..|.......
    6FB0: 00 00 00 00 7E 60 60 60 00 00 00 00 00 00 00 00  // ....~```........
    6FC0: 00 00 00 00 7E 06 06 06 00 00 00 00 00 00 60 60  // ....~.........``
    6FD0: 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60  // bfl.0`.6..>...``
    6FE0: 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18  // bfl.6n.6~.......
    6FF0: 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00  // ....<<<<........
    7000: 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00  // ..6l.l6.........
    7010: 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11  // ...l6l........D.
    7020: 44 11 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA  // D.D.D.D.D.D.D.U.
    7030: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD  // U.U.U.U.U.U.U.w.
    7040: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18  // w.w.w.w.w.w.w...
    7050: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7060: 18 18 18 18 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7070: 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7080: 36 36 36 36 F6 36 36 36 36 36 36 36 36 00 00 00  // 6666.66666666...
    7090: 00 00 00 00 FE 36 36 36 36 36 36 36 36 00 00 00  // .....66666666...
    70A0: 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    70B0: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    70C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 00 00 00  // 6666666666666...
    70D0: 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    70E0: 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36 36 36  // 66...........666
    70F0: 36 36 36 36 FE 00 00 00 00 00 00 00 00 18 18 18  // 6666............
    7100: 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 00 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7120: 18 18 18 18 1F 00 00 00 00 00 00 00 00 18 18 18  // ................
    7130: 18 18 18 18 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7140: 00 00 00 00 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7150: 18 18 18 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7160: 00 00 00 00 FF 00 00 00 00 00 00 00 00 18 18 18  // ................
    7170: 18 18 18 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7180: 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7190: 36 36 36 36 37 36 36 36 36 36 36 36 36 36 36 36  // 6666766666666666
    71A0: 36 36 37 30 3F 00 00 00 00 00 00 00 00 00 00 00  // 6670?...........
    71B0: 00 00 3F 30 37 36 36 36 36 36 36 36 36 36 36 36  // ..?0766666666666
    71C0: 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    71D0: 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    71E0: 36 36 37 30 37 36 36 36 36 36 36 36 36 00 00 00  // 6670766666666...
    71F0: 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7200: 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18 18 18  // 66...66666666...
    7210: 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7220: 36 36 36 36 FF 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    7230: 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00 00 00  // ................
    7240: 00 00 00 00 FF 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    7250: 36 36 36 36 3F 00 00 00 00 00 00 00 00 18 18 18  // 6666?...........
    7260: 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00  // ................
    7270: 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7280: 00 00 00 00 3F 36 36 36 36 36 36 36 36 36 36 36  // ....?66666666666
    7290: 36 36 36 36 FF 36 36 36 36 36 36 36 36 18 18 18  // 6666.66666666...
    72A0: 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    72B0: 18 18 18 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    72C0: 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF  // ................
    72D0: FF FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00  // ................
    72E0: 00 00 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0  // ................
    72F0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F  // ................
    7300: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF  // ................
    7310: FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7320: 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78  // .v......v......x
    7330: CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE  // ................
    7340: 66 62 60 60 60 60 60 60 60 00 00 00 00 00 00 00  // fb```````.......
    7350: 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE  // ...llllll.......
    7360: C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00  // .b0..0b.........
    7370: 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00  // ..~.....p.......
    7380: 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00  // .fffff|`........
    7390: 00 00 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE  // ..v.............
    73A0: 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00  // 88l..l88........
    73B0: 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38  // 8l.....l8......8
    73C0: 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E  // l....lll.......>
    73D0: 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00  // ``<f....x.......
    73E0: 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02  // ..~...~.........
    73F0: 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00  // .|....|`........
    7400: 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C  // .0``|``0.......|
    7410: C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00  // ................
    7420: 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00  // ................
    7430: 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30  // ...~....~......0
    7440: 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C  // .....0..~.......
    7450: 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00  // .0`0....~.......
    7460: 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7470: 18 18 18 18 18 18 18 58 78 30 00 00 00 00 00 00  // .......Xx0......
    7480: 00 18 18 00 7E 00 18 18 00 00 00 00 00 00 00 00  // ....~...........
    7490: 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78  // ...v..v........x
    74A0: CC CC 78 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..x.............
    74B0: 00 00 00 00 18 18 00 00 00 00 00 00 00 00 00 00  // ................
    74C0: 00 00 00 00 00 18 00 00 00 00 00 00 00 00 00 1F  // ................
    74D0: 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8  // .......x8.......
    74E0: 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70  // lllll..........p
    74F0: D8 18 30 60 F8 00 00 00 00 00 00 00 00 00 00 00  // ..0`............
    7500: 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00  // ..~~~~~~........
    7510: 00 00 00 00 00 00 00 00 00 00 00 00 00 1D 00 00  // ................
    7520: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00  // ...$f.f$....../.
    7530: 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30  // .......0`......0
    7540: 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00  // ..~........~....
    7550: 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00  // M...............
    7560: 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00  // .T...........<..
    7570: 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00  // ..V.........f<..
    7580: 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66  // ...W...........f
    7590: 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3  // ....X.....f<<f..
    75A0: C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18  // .....Y......f<..
    75B0: 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C  // .<....\.....`0..
    75C0: 06 03 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB  // .......m.....f..
    75D0: DB DB C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3  // ........v.......
    75E0: C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3  // ..f<.....w......
    75F0: C3 DB DB DB FF 66 00 00 00 00 00 00 B5 64 C3 0B  // .....f.......d..
    7600: DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB  // .t..F.W2..@..._.
    7610: 45 92 26 89 1D 26 8C 4D 02 2E 8E 1E D9 03 57 BE  // E.&..&.M......W.
    7620: 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47  // I..........&..FG
    7630: E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26  // .._.....&.E"...&
    7640: 89 45 23 57 E8 9C 1B 5F 26 88 5D 25 26 88 7D 26  // .E#W..._&.]%&.}&
    7650: 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF  // ..I....t......2.
    7660: D1 E3 2E 8A 87 1D 92 32 E4 0A C0 74 01 40 26 89  // .......2...t.@&.
    7670: 45 27 2E 8A 87 1E 92 26 88 45 29 A1 85 04 8A 16  // E'.....&.E).....
    7680: 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D  // ........=..~...=
    7690: 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01  // ^.~...=..~...=..
    76A0: 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0  // ~.&.U*.&....$...
    76B0: 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A  // ..............$.
    76C0: 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0  // ........0.B.$...
    76D0: 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8  // .....&.E-..&.E1.
    76E0: 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE  // w...2.........;.
    76F0: 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26  // t4&.w.....t....&
    7700: C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08  // .w.....t....&.w.
    7710: 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B  // ....t....&.w....
    7720: F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4  // .t......&.U2....
    7730: 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81  // ................
    7740: E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46  // ...%....&.E+...F
    7750: 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B  // .....t...t6..tV.
    7760: EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0  // ..F.... ....t...
    7770: 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03  // `...t...:...t...
    7780: 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C  // ...?......F..F..
    7790: C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1  // ..... ...t......
    77A0: 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC  // .t.......t......
    77B0: C6 46 1A 1C C3 F6 C1 01 74 06 E8 D9 14 E8 25 01  // .F......t.....%.
    77C0: F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02  // ...t.......t....
    77D0: EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B  // .....B....J....k
    77E0: 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42  // .......2.......B
    77F0: EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3  // ....J........ ..
    7800: 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE  // &....GF...&.%.G.
    7810: C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE  // .........&..G...
    7820: E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7  // .....QW..+.&....
    7830: E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26  // ....&.D.&.TA...&
    7840: 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44  // .D....&.D....&.D
    7850: 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8  // ....&...........
    7860: 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32  // p.&........&.TA2
    7870: E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2  // .....[.&.D..._..
    7880: CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59  // .2.....I.&.D.._Y
    7890: 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51  // ..`......+.&.G.Q
    78A0: 57 2E 8E 1E D9 03 A0 10 04 24 30 AA BE 49 04 B9  // W........$0..I..
    78B0: 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04  // ................
    78C0: F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4  // ..........t.....
    78D0: BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59  // .|............_Y
    78E0: 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B  // ..:....&.?....Q.
    78F0: FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00  // ................
    7900: E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03  // ...G..&.D.......
    7910: EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32  // .&...&.TA......2
    7920: C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04  // ....&.D.....&.D.
    7930: EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0  // ....2..... ...2.
    7940: B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26  // .....&.D..Y....&
    7950: 8B 7F 02 03 FB 06 51 2E 8E 1E D9 03 26 8A 05 80  // ......Q.....&...
    7960: 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8  // &.......G.I.....
    7970: 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8  // ................
    7980: 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8  // ~.......v..t....
    7990: 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8  // n..|....f.......
    79A0: 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04  // ^.Y.......+.&.G.
    79B0: E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03  // ......4.B.&.....
    79C0: EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03  // .&.E.PJJ.&.E....
    79D0: B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE  // ...B2..BB....XJ.
    79E0: 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0  // ....&.w....l....
    79F0: 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42  // 4.&......&.D..VB
    7A00: 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46  // B...2..B...&...F
    7A10: E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC  // ..^..&.D........
    7A20: 24 FE 0A C4 B2 C2 EE C3 E8 6B 12 B2 C0 86 C4 EE  // $........k......
    7A30: EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50  // ............ ..P
    7A40: 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F  // ......&....&..$.
    7A50: 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74  // ..<.~.&.G3.u.<#t
    7A60: 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01  // .<2t.<3t...&.G..
    7A70: 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02  // u....&I.........
    7A80: 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16  // &.G..t....&.....
    7A90: 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00  // c...N.....b.....
    7AA0: BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32  // .P.....3....&..2
    7AB0: E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3  // ..J.&.G....&.G..
    7AC0: 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3  // ..&.G..L.&.G....
    7AD0: 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29  // `.X.R2.3.......)
    7AE0: 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E  // u.2.3.....Z...`.
    7AF0: 8E 1E D9 03 2E 83 0E E3 03 00 75 6E 80 3E 00 05  // ..........un.>..
    7B00: 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3  // .tg.......b.2...
    7B10: 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84  // ....P..>b.P2....
    7B20: 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4  // .2.AQ..J.2......
    7B30: 29 75 3D 51 52 89 95 50 04 B4 08 E8 7C D3 0A C0  // )u=QR..P....|...
    7B40: 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A  // u.. 3.2.....)u.Z
    7B50: FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2  // ..Y....Y...w.2..
    7B60: 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59  // ..X..P....a...ZY
    7B70: 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E  // Y....R*.8.}.2...
    7B80: 06 DB 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA  // ...Z............
    7B90: BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED  // ..........m...2.
    7BA0: 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8  // ..........Ku.2..
    7BB0: 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03  // W..S..b...u...t.
    7BC0: E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4  // .5.[..+.......2.
    7BD0: C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85  // ...2.+...t**..&.
    7BE0: 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A  // ...R... .......Z
    7BF0: 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5  // .............Hu.
    7C00: 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42  // ...............B
    7C10: EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A  // .$....J....B...J
    7C20: 9D C3 1E 2E 8E 1E D9 03 8B 16 63 04 80 C2 06 1F  // ..........c.....
    7C30: C3 1E 2E 8E 1E D9 03 8B 16 63 04 1F C3 50 BA CC  // .........c...P..
    7C40: 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80  // ......u...X.....
    7C50: C2 06 C3 1E 2E 8E 1E D9 03 80 3E 49 04 03 74 13  // ..........>I..t.
    7C60: 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E  // .>I..t..>I..t..>
    7C70: 49 04 00 1F C3 50 2E 8E 06 DD 03 A0 10 04 24 30  // I....P........$0
    7C80: 3C 30 74 05 2E 8E 06 DF 03 58 0B C0 74 03 E8 E1  // <0t......X..t...
    7C90: 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A  // ...N.....+.2...J
    7CA0: 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75  // ...............u
    7CB0: 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8  // ...8.~..........
    7CC0: B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3  // ....:.J.t.......
    7CD0: 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF  // ...@............
    7CE0: F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32  // ..+.......S..*.2
    7CF0: ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03  // .2.+.+..........
    7D00: F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD  // .....u.X. ......
    7D10: FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8  // ..u..S..*.t.....
    7D20: F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8  // ..X...... ......
    7D30: 2E 00 2E 8E 1E DF 03 8A C3 22 DF D3 E3 A8 80 74  // .........".....t
    7D40: 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A  // .0.....4".......
    7D50: FC E8 0C 00 2E 8E 1E DF 03 8A 04 D2 E8 22 C7 C3  // ............."..
    7D60: B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE  // .(.....t........
    7D70: 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7  // ................
    7D80: 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A  // ................
    7D90: D8 2E 8E 06 DF 03 8B C1 E8 86 00 75 02 8A DE 03  // ...........u....
    7DA0: F0 E8 24 00 C3 FC 8A D8 2E 8E 06 DF 03 8A C1 8A  // ..$.............
    7DB0: E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7  // ..m.u...........
    7DC0: F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A  // ..+.......*..,Q.
    7DD0: CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B  // .VW..........+.+
    7DE0: F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3  // .... ... .......
    7DF0: A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA  // ._^....Y........
    7E00: 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00  // W..........+....
    7E10: 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE  //  ........_....u.
    7E20: C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB  // ........+.8.v.2.
    7E30: 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49  // Q......Y2..P..>I
    7E40: 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50  // ..t............P
    7E50: F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50  // .....RS..2.....P
    7E60: 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B  // ....P...L...[..[
    7E70: 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0  // Z.R...J...2.....
    7E80: 5A C3 8B E8 83 E5 0F 2E 8A A6 32 7E 8B E8 C1 ED  // Z.........2~....
    7E90: 04 83 E5 0F 2E 8A 86 32 7E C3 00 03 0C 0F 30 33  // .......2~.....03
    7EA0: 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA  // <?........&.....
    7EB0: 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2  // .....t........u.
    7EC0: 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1  // .V.E...c........
    7ED0: FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02  // ....R.....&J....
    7EE0: 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50  // 2...Z.S..2.....P
    7EF0: 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4  // ......[.R..2.R..
    7F00: F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03  // .&...&J.Z....t..
    7F10: 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6  // .L...u.Z.R...J..
    7F20: E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4  // .2.......N......
    7F30: 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF  // ....Z....&J.....
    7F40: 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03  // .....t...2..&L..
    7F50: F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8  // ................
    7F60: FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3  // .... .......2...
    7F70: C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E  // .>..&.}......S..
    7F80: E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF  // ................
    7F90: B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8  // ..U......<.t....
    7FA0: 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE  // v.<Ut.2.[.......
    7FB0: C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04  // ........[....6..
    7FC0: 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32  // ....t%..*.....R2
    7FD0: F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B  // ........+.Q....+
    7FE0: FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A  // .+.Y..Z.........
    7FF0: C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA  // .........2......
    8000: D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3  // ....+.....+.Nu..
    8010: 2E 8E 1E D9 03 89 0E 60 04 8A C5 24 60 A8 20 74  // .......`...$`. t
    8020: 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00  // ................
    8030: 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87  // .>I..t....t.....
    8040: 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38  // ..t..B..6......8
    8050: CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38  // .~...td.......\8
    8060: D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9  // .tX.....|.......
    8070: EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38  // .I...~D..*...u.8
    8080: CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E  // .t8..8.t2....8.~
    8090: 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF  // ....~.........}.
    80A0: 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9  // ....8.t.........
    80B0: 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE  // *...............
    80C0: C3 2E 8E 1E D9 03 A2 62 04 32 E4 8B F0 F7 26 4C  // .......b.2....&L
    80D0: 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07  // ..N....z.t..>I..
    80E0: 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8  // w............P..
    80F0: 27 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8 7E 9C 74  // '........&I..~.t
    8100: 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07  // ...P.....H.t....
    8110: 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C  // t.w..w.........|
    8120: 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E  // .t...N..........
    8130: 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90  // J.R.&........Z..
    8140: FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52  // ...0......g....R
    8150: 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03  // ..J.....&.......
    8160: F0 5A E8 55 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8  // .Z.U........&I..
    8170: E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04  // ..t....t.w@.....
    8180: E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A  // .S..............
    8190: E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26  // ......+>J....R.&
    81A0: 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E  // ...&J......+.Z..
    81B0: 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03  // J.............|.
    81C0: 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2  // t...............
    81D0: F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7  // .R..J..&....+...
    81E0: 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E D9 03 2E 8E  // +.Z.............
    81F0: 06 DF 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E  // ....].t..>I..|..
    8200: 8E 06 DD 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B  // ....t.....I...&.
    8210: 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB  // ....F...P.......
    8220: 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00  // ..+....>I..u....
    8230: 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45  // &...F.E&... .F.E
    8240: 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04  // ..P.............
    8250: 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2  // ..V.... .O......
    8260: F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09  // ...+..>..2....u.
    8270: 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6  // &.}..u..........
    8280: C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03  // ..t.GVW.._^t#...
    8290: FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E  // ....t.G..u...t..
    82A0: 8E 1E D9 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0  // .....>|.......2.
    82B0: 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C  // .......F...>I..|
    82C0: 05 75 02 EB 5A C3 2E 8E 06 DB 03 E8 18 FC 8B F0  // .u..Z...........
    82D0: 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE  // ....+...........
    82E0: 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4  // ..>I..r.....`u..
    82F0: 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9  // .....u..........
    8300: 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03  // ...Q..&.....F.E.
    8310: 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E  // 6J...X....2..D..
    8320: 8E 06 DB 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4  // .....P...2.R..2.
    8330: F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85  // .&J..&..Z.......
    8340: 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6  // .+...S.>J.O.....
    8350: 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80  // ....2.&......t..
    8360: CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8  // ..F...f.E..Ku.[.
    8370: 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E  // ..2....3........
    8380: 1E D9 03 2E 8E 06 DF 03 8A 26 49 04 E8 C4 F8 74  // .........&I....t
    8390: 0F 2E 8E 06 DD 03 80 FC 07 74 05 7C 3D E9 0B 02  // .........t.|=...
    83A0: 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0  // ......2.....P...
    83B0: A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74  // .J...2.........t
    83C0: 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED  // ....L.....u.....
    83D0: 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 DF 03  // u.....G...P.....
    83E0: A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B  // .P.......P..&J..
    83F0: E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36  // .X..t.$..6|....6
    8400: 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69  // ....2.........ti
    8410: D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B  // .....U..........
    8420: C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB  // .P.....u'..U.#..
    8430: AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA  // ..N.#.&......N..
    8440: 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3  // u......>.X.r....
    8450: AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26  // ....#.&1...%.#.&
    8460: 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF  // 1.. ..P..u......
    8470: 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3  // >.X.I......P....
    8480: 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50  // .t..&0..&0.. ..P
    8490: FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2  // .........?.X. ..
    84A0: DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F  // .....&......O...
    84B0: F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE  // ......?.X.......
    84C0: C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04  // .8.r.2..........
    84D0: F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2  // ....2...f...Q...
    84E0: 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA  // f...J...du..h...
    84F0: 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52  // Zu..`.....u....R
    8500: F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66  // ..f...f...P.f..f
    8510: C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7  // .....f.......f..
    8520: 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01  // .Z..J....P.P....
    8530: 03 F0 2E 8E 06 DB 03 58 57 51 50 9C FC 8B CD E8  // .......XWQP.....
    8540: 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26  // ;..........s...&
    8550: 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59  // ..fG..u.f.....XY
    8560: 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49  // _.....8.r.Q2...I
    8570: 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33  // .......Y+.....R3
    8580: C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 ED 97  // ...f.....f......
    8590: 74 16 38 E0 74 12 0F B6 D0 E8 63 C7 8A E0 66 C1  // t.8.t.....c...f.
    85A0: C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B  // ....f...Z.....|.
    85B0: 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80  // ......b.........
    85C0: FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF  // ..u.......PS..2.
    85D0: D1 E3 8B 97 50 04 5B 2E 8E 06 DB 03 E8 07 F9 8B  // ....P.[.........
    85E0: F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26  // .....X2.R.6J.V.&
    85F0: 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75  // ...6.....u..|..u
    8600: 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2  // ...F.........um.
    8610: C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57  // .....ZXPRJ..WQQW
    8620: 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76  // ..2......_G..8.v
    8630: 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F  // .2...I..G..Y..Y_
    8640: BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC  // ........[KZQW...
    8650: 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76  // &.%....._G+.B;.v
    8660: 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE  // .3...I..G..Y....
    8670: 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03  // ................
    8680: 18 EF EB BC 2E 8E 1E D9 03 80 3E 63 04 B4 74 0B  // ..........>c..t.
    8690: BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A  // ......u..B......
    86A0: FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66  // .u.......&f...&f
    86B0: 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8  // ..-...f... .....
    86C0: 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20  // ..t..f.$....t.. 
    86D0: A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8  // .f.$......S...~.
    86E0: C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF  // .SP.............
    86F0: E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03  // .`.t......,...t.
    8700: 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10  // &.........t.&.].
    8710: 58 5B C3 8A E0 1E 2E 8E 1E D9 03 80 3E 49 04 33  // X[..........>I.3
    8720: 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C  // ............0...
    8730: FA E8 62 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3  // ..b.............
    8740: EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB  // ...t.G&.........
    8750: B0 20 EE 9D C3 2E 8E 1E D9 03 8A 26 49 04 E8 F2  // . .........&I...
    8760: F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC  // .t....w.t.......
    8770: 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08  // .|.tL...........
    8780: EF 2E 8E 1E DB 03 F6 C3 80 75 1C B2 C4 B8 02 FF  // .........u......
    8790: EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF  // ..%.......%...%.
    87A0: B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A  // ................
    87B0: E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB  // ...%...%........
    87C0: E1 50 2E 8E 06 DB 03 A1 4A 04 C1 E0 03 F7 E2 03  // .P......J.......
    87D0: C1 8B F8 58 26 88 05 C3 2E 8E 1E D9 03 8A 26 49  // ...X&.........&I
    87E0: 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5  // ..o.t....w.t.._.
    87F0: 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35  // ...F.....|.t)..5
    8800: F7 8A CC 2E 8E 1E DB 03 BA CE 03 32 FF B8 04 03  // ...........2....
    8810: EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0  // .....".t......}.
    8820: 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1  // ...~...J........
    8830: 8B F8 2E 8E 1E DB 03 8A 05 8B EC 88 46 1A C3 2E  // ............F...
    8840: 8E 1E D9 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50  // .....>b.....2..P
    8850: 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06  // .......I.<.vJ...
    8860: DF 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6  // .....u3..J......
    8870: E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA  // .........N......
    8880: D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0  // ..A..8.sY....c..
    8890: 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 DD 03 80  // ................
    88A0: F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75  // ..t....u.2...<.u
    88B0: 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92  // .:6..u..........
    88C0: F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07  // .u.........L..<.
    88D0: 75 04 E8 2B 7E C3 3C 08 75 83 0A D2 74 DE FE CA  // u..+~.<.u...t...
    88E0: EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6  // ..2.2.+.:6..t...
    88F0: 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A  // ........c.......
    8900: E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E  // ....+.+.&.e.P.>N
    8910: 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F  // ................
    8920: F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8  // ....X. .........
    8930: 88 C5 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32  // ....:.J.t....2.2
    8940: D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E  // ...:6..t........
    8950: 8E 06 DF 03 E8 FC F2 74 0E 2E 8E 06 DD 03 80 F9  // .......t........
    8960: 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7  // .t.2............
    8970: 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A  // O..J...3..6....J
    8980: 04 FE CA B0 01 E9 70 F7 2E 8E 1E D9 03 F6 06 87  // ......p.........
    8990: 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00  // ..t..B..v....F..
    89A0: C3 2E 8E 1E D9 03 8A DF 32 FF D1 E3 89 97 50 04  // ........2.....P.
    89B0: D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E  // ..8.b.u....\....
    89C0: 1E D9 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60  // .....2.....P...`
    89D0: 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E D9 03 A0  // ....N..V........
    89E0: 87 04 24 80 0A 06 49 04 8A 26 4A 04 8A 3E 62 04  // ..$...I..&J..>b.
    89F0: 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 2E  // ...F..^..N..V...
    8A00: 8E 1E D9 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01  // ....<...PR......
    8A10: 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04  // ZXt..>c..t...>c.
    8A20: B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6  // .u.<.s.2........
    8A30: CA 89 02 8A 22 8A 34 8A 69 8A B3 89 B3 89 B3 89  // ....".4.i.......
    8A40: 8E 8A A6 8A AA 8A B3 89 B3 89 B3 89 B3 89 B3 89  // ................
    8A50: B3 89 D8 8A B3 89 DC 8A F7 8A B3 89 36 8B B3 89  // ............6...
    8A60: 44 8B 5F 8B 66 8B 72 8B 96 8B 80 3E 49 04 13 74  // D._.f.r....>I..t
    8A70: 15 E8 FC F4 8B C3 86 E0 E8 AD EF 0B ED 74 07 8A  // .............t..
    8A80: C7 32 FF 26 88 01 E8 D0 F4 C3 E8 E3 F4 8A C7 E8  // .2.&............
    8A90: 81 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04  // ....t.&.}....>I.
    8AA0: 13 74 E3 06 E8 C9 F4 1F 0B ED 74 07 8B F2 B9 11  // .t........t.....
    8AB0: 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C  // ........2.......
    8AC0: FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 44 FC EB  // .............D..
    8AD0: B5 80 FB 01 77 B0 E8 80 F4 B2 C0 B0 30 E8 38 F1  // ....w.......0.8.
    8AE0: 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E  // $..&e.....t.....
    8AF0: 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 18 F1  // e. .............
    8B00: 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11  // .... ....N..x...
    8B10: EB E4 8B FA E8 42 F4 B9 10 00 32 E4 B2 C0 8A C4  // .....B....2.....
    8B20: 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE  // ...B.&....J..G..
    8B30: 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 20 F4 EB 5A  // .....B..&... ..Z
    8B40: E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01  // ......Q..&.5&.m.
    8B50: 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A  // &.M.......CY....
    8B60: DB 75 1A E8 F3 F3 B2 C0 B0 30 E8 AB F0 24 7F F6  // .u.......0...$..
    8B70: C7 01 74 02 0C 80 B4 30 E8 AD EE EB 1D FE CB 75  // ..t....0.......u
    8B80: 1C E8 D5 F3 B2 C0 B0 30 E8 8D F0 EE A8 80 75 03  // .......0......u.
    8B90: C0 E7 02 B4 34 8A C7 E8 8E EE E8 BC F3 C3 8A C3  // ....4...........
    8BA0: E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B  // ......N..v....Q.
    8BB0: C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83  // ....&.5&.m.&.M..
    8BC0: C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6  // ..CY............
    8BD0: 03 EC 32 E4 8B EC 89 46 0E C3 E8 7C F3 B2 C0 B0  // ..2....F...|....
    8BE0: 34 E8 34 F0 8A F8 EE B0 30 E8 2C F0 B3 01 A8 80  // 4.4.....0.,.....
    8BF0: 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B  // u.........^...Q.
    8C00: C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE  // ..s..*....R.CY..
    8C10: C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00  // ......t.......9.
    8C20: C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00  // ......t.........
    8C30: C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1  // .P....P.;..P....
    8C40: 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE  // Y..Y...d....2|..
    8C50: C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B  // .......X.R.9.ZS.
    8C60: DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1  // .......B........
    8C70: EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42  // ..[....S......BB
    8C80: EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A  // ................
    8C90: C8 8A F7 9D 5B C3 50 51 E8 BE F2 B9 FF 7F EC A8  // ....[.PQ........
    8CA0: 08 75 02 E2 F9 59 58 C3 2E 8E 1E D9 03 8B F8 24  // .u...YX........$
    8CB0: 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5  // ................
    8CC0: 5A 8C 62 8C 77 8C 15 8D 71 8D 3C 03 74 08 3C 04  // Z.b.w...q.<.t.<.
    8CD0: 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C  // ...............<
    8CE0: 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 28 EF  // .w.PSPR..c....(.
    8CF0: 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12  // ........@t......
    8D00: E8 15 EF 40 A3 85 04 B0 09 E8 0C EF A8 80 74 04  // ...@..........t.
    8D10: D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0  // .........=..s...
    8D20: 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E  // .=..s....=|.s..^
    8D30: 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6  // .=J.s........ZX.
    8D40: 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74  // .....].[X..2...t
    8D50: 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A  // ...<.t...<.t....
    8D60: CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01  // ..........~.....
    8D70: 87 1E 85 04 53 E8 98 F2 5B E8 85 02 C3 0A C0 74  // ....S...[......t
    8D80: 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74  // ...t...t8..t<..t
    8D90: 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE  // @...|...~.......
    8DA0: CA 0A DB 74 07 32 FF 2E 8A 97 55 8D 89 0E 85 04  // ...t.2....U.....
    8DB0: 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18  // ................
    8DC0: 2A E8 09 03 B9 0E 00 EB D6 BD A2 5C B9 08 00 EB  // *..........\....
    8DD0: CA BD B5 64 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85  // ...d.......u....
    8DE0: 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A  // ........w5...w..
    8DF0: FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80  // .u...|..&..... .
    8E00: FF 02 75 0B 8C CD 8E C5 2E 8B 2E 94 75 EB 10 0E  // ..u.........u...
    8E10: 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF C8 8D 8B  // ...2............
    8E20: C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3  // ....N..V..F..F..
    8E30: B5 64 A2 5C A2 60 A2 64 B5 64 B5 74 53 06 8A 26  // .d.\.`.d.d.tS..&
    8E40: 49 04 E8 D2 C2 26 8A 47 02 26 8A 67 33 F6 C4 01  // I....&.G.&.g3...
    8E50: 74 22 BD B5 64 3C 10 7D 0E E8 71 02 8C 06 0E 01  // t"..d<.}..q.....
    8E60: 3C 0E 7D 07 BD A2 5C 8C 0E 0E 01 89 2E 0C 01 E8  // <.}...\.........
    8E70: 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D  // ...-..<.}...<.t.
    8E80: 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47  // ....<.t......&.G
    8E90: 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9  // ..t......2......
    8EA0: 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF  // ..[.............
    8EB0: B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B  // ................
    8EC0: D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00  // ...P$...t"..3...
    8ED0: 01 3C 04 75 07 B7 10 BD B5 64 EB 10 FE C8 75 07  // .<.u.....d....u.
    8EE0: B7 0E E8 E8 01 EB 05 B7 08 BD A2 5C E8 2D 00 58  // ...........\.-.X
    8EF0: A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2  // ..t.............
    8F00: CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58  // .......u.....P.X
    8F10: EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75  // ....2..........u
    8F20: 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD  // .....u.&.~..u...
    8F30: 80 1E 06 1F 2E 8E 06 DB 03 8B FA C1 E7 05 B0 40  // ...............@
    8F40: 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0  // S.....[...t.. ..
    8F50: 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6  // .......(2...2.Q.
    8F60: C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20  // ..t.F...... t.. 
    8F70: 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE  // .+...Y...t.F..u.
    8F80: 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D  // ...&I.P.W.>..&.}
    8F90: 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C  // .....t0.....&..<
    8FA0: FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE  // .t$8.t.G....&...
    8FB0: C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89  // ....&.E....&.}..
    8FC0: 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01  // >......_.X.&.G3.
    8FD0: 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74  // t......&._.....t
    8FE0: 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04  // ....&..<.t.G8.I.
    8FF0: 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00  // u.&..2..........
    9000: C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA  // ...c..&.........
    9010: 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A  // ...t....B.$....J
    9020: B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A  // ...B.$..........
    9030: 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE  // ......>...u.....
    9040: 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0  // ........t...H...
    9050: 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6  // ...c...J..&.....
    9060: E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06  // .......L...&I.P.
    9070: 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B  // W.>..&.}.....tJ.
    9080: EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47  // ....&..<.t>8.t.G
    9090: EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26  // ....&.=&.].&.M.&
    90A0: 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84  // .U.&.E.<.t...P..
    90B0: 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4  // ....&.....X...&.
    90C0: 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51  // }...2...._.X.PSQ
    90D0: 52 2E A1 E3 03 0B C0 74 09 2E 8B 2E 94 75 0E 07  // R......t.....u..
    90E0: EB 08 B8 30 11 B7 02 E8 D0 BD 5A 59 5B 58 C3 3C  // ...0......ZY[X.<
    90F0: 04 7C 01 C3 E3 FD 53 2E 8E 1E D9 03 86 FB 32 FF  // .|....S.......2.
    9100: D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0  // ......P..5[..V..
    9110: 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB  // QS&.F.E<...u.2..
    9120: 40 3C 0A 74 32 3C 07 75 05 E8 D4 75 EB 62 3C 08  // @<.t2<.u...u.b<.
    9130: 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05  // u...tZ...'....t.
    9140: 26 8A 5E 00 45 B9 01 00 B4 09 E8 6D BD FE C2 3A  // &.^.E......m...:
    9150: 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE  // .J.r.2...:6..s..
    9160: C6 89 15 EB 2B 50 E8 EA EA 75 08 B8 00 08 E8 49  // ....+P...u.....I
    9170: BD EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04  // ....>I..t.2..>b.
    9180: 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15  // S..U.%.][.>b.X..
    9190: 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A  // [Y..Z....u.....:
    91A0: 3E 62 04 75 03 E8 71 ED C3 E9 64 FF 33 C9 8A 36  // >b.u..q...d.3..6
    91B0: 84 04 8A 16 4A 04 FE CA B8 01 06 E8 FC BC C3 2E  // ....J...........
    91C0: 8E 1E D9 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E  // ......u.......^.
    91D0: C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46  // .F...<.u..A....F
    91E0: 1A 1A C3 A0 8A 04 BF 55 92 2E 3A 05 72 04 BB FF  // .......U..:.r...
    91F0: FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05  // ..2.......]...t.
    9200: 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74  // ..u........$0<0t
    9210: 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 55 92  // ....u.....t...U.
    9220: 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E  // ...2.....;.t....
    9230: 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2  // ;.t......8.~....
    9240: 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00  // ...........t....
    9250: BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 1C  // ......t.........
    9260: ED 74 21 B7 01 E8 C9 E9 80 FA D4 74 17 86 FB C3  // .t!........t....
    9270: BA D4 03 E8 07 ED 74 0C B7 02 E8 B4 E9 80 FA B4  // ......t.........
    9280: 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03  // t...............
    9290: 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F  // ................
    92A0: 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F  // ................
    92B0: 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08  // ...........?....
    92C0: 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02  // ................
    92D0: 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06  // ................
    92E0: 07 00 55 02 34 00 90 00 D2 00 00 00 00 00 00 00  // ..U.4...........
    92F0: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    9300: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    9310: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    9320: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    9330: BB D0 05 E8 00 01 00 00 C1 E8 10 F6 C4 40 75 2B  // .............@u+
    9340: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    9350: 66 8B C2 66 BB 13 00 E8 E8 00 00 00 66 BB 12 00  // f..f........f...
    9360: E8 DF 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .....fX2.fPX_[f^
    9370: 66 5A C3 90 66 B8 4F 03 52 51 53 57 66 56 50 8A  // fZ..f.O.RQSWfVP.
    9380: FB 80 E3 7F 0A DB 75 26 E8 67 FF FF FF C1 E2 10  // ......u&.g......
    9390: 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7 00 00 00 66  // f.....f........f
    93A0: BE 00 02 E8 BE 00 00 00 66 58 32 E4 66 50 58 66  // ........fX2.fPXf
    93B0: 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51 57 56 53 52  // ^_[YZ.f.O.fQWVSR
    93C0: 50 8A FB 80 E3 7F 0A DB 75 39 8A DA 57 5A E8 21  // P.......u9..WZ.!
    93D0: FF FF FF 66 33 F6 66 53 66 BB D0 05 E8 57 00 00  // ...f3.fSf....W..
    93E0: 00 80 E4 01 66 5B 80 E7 FE 0A FC 66 BE 00 00 E8  // ....f[.....f....
    93F0: DE 00 00 00 66 BE 00 02 E8 D5 00 00 00 66 58 32  // ....f........fX2
    9400: E4 66 50 58 5A 5B 5E 5F 66 59 C3 90 53 50 51 F6  // .fPXZ[^_fY..SPQ.
    9410: C7 80 74 20 66 BB 9C 1B E8 1B 00 00 00 A8 01 74  // ..t f..........t
    9420: 13 66 B9 FF FF 66 BB A3 1B E8 0A 00 00 00 A8 01  // .f...f..........
    9430: 75 02 E2 F1 59 58 5B C3 66 52 E8 11 00 00 00 ED  // u...YX[.fR......
    9440: 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90  // fZ..fR......fZ..
    9450: 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF  // f..P3.f..f......
    9460: 66 83 C2 04 58 C3 52 E8 A0 FF FF FF 81 E2 FF FF  // f...X.R.........
    9470: FF 02 66 BB 04 1A E8 BD FF FF FF 25 00 00 00 FD  // ..f........%....
    9480: 03 C2 66 25 00 F0 E8 B9 FF FF FF 66 BB 05 1A E8  // ..f%.......f....
    9490: B0 FF FF FF 66 81 E2 FF 0F 66 BB 01 1A E8 96 FF  // ....f....f......
    94A0: FF FF 24 03 8A C8 66 D3 EA 66 BB 06 1A E8 86 FF  // ..$...f..f......
    94B0: FF FF 66 03 C2 66 BB 0D 1A E8 86 FF FF FF 66 8B  // ..f..f........f.
    94C0: C2 24 FC C1 E0 10 66 BB 5C 1B E8 75 FF FF FF 5A  // .$....f.\..u...Z
    94D0: C3 90 52 66 53 66 51 E8 30 FF FF FF 33 C0 8A C3  // ..RfSfQ.0...3...
    94E0: 66 53 66 BB 79 1A E8 59 FF FF FF 66 5B 66 49 66  // fSf.y..Y...f[fIf
    94F0: 81 E1 FF 00 66 41 32 C0 66 53 66 BB 78 1A E8 41  // ....fA2.fSf.x..A
    9500: FF FF FF 66 5B 26 8A 42 02 C1 E0 0A 26 8A 42 01  // ...f[&.B....&.B.
    9510: C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01 75 03 C1 E0  // ...&........u...
    9520: 02 66 53 66 BB 7C 1A E8 18 FF FF FF 66 5B 83 C2  // .fSf.|......f[..
    9530: 04 E2 D2 66 59 66 5B 5A C3 00 6D 38 60 38 60 38  // ...fYf[Z..m8`8`8
    9540: 60 38 4B 38 4B 38 4B 38 4B 38 8D 34 04 35 2E 35  // `8K8K8K8K8.4.5.5
    9550: 6F 36 6E 36 6E 36 B4 36 19 37 49 37 06 38 2F 38  // o6n6n6.6.7I7.8/8
    9560: 2F 38 A6 36 99 36 99 36 99 36 99 36 99 36 B4 36  // /8.6.6.6.6.6.6.6
    9570: 19 37 49 37 06 38 34 38 7A 38 2F 38 2F 38 FF FF  // .7I7.848z8/8/8..
    9580: FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00  // ................
    9590: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00  // ................
    95A0: 08 10 00 08 10 18 00 08 10 18 91 32 01 91 32 02  // ...........2..2.
    95B0: 9F 46 03 7F 46 03 B6 33 03 6A 33 03 92 32 04 AB  // .F..F..3.j3..2..
    95C0: 32 04 BB 32 04 91 32 03 00 00 00 00 3E 3A 00 02  // 2..2..2.....>:..
    95D0: 3E 3A 01 02 3E 3A 02 02 3E 3A 03 02 3E 3A 04 02  // >:..>:..>:..>:..
    95E0: 3E 3A 05 02 38 3C 00 02 38 3C 01 02 38 3C 02 02  // >:..8<..8<..8<..
    95F0: 38 3C 03 02 38 3C 04 02 38 3C 05 02 6D 3C 00 02  // 8<..8<..8<..m<..
    9600: 6D 3C 01 02 6D 3C 02 02 6D 3C 03 02 6D 3C 04 02  // m<..m<..m<..m<..
    9610: 6D 3C 05 02 A8 3E 00 02 A8 3E 01 02 A8 3E 02 02  // m<...>...>...>..
    9620: A8 3E 03 02 A8 3E 04 02 A8 3E 05 02 A8 3E 00 02  // .>...>...>...>..
    9630: A8 3E 01 02 A8 3E 02 02 A8 3E 03 02 A8 3E 04 02  // .>...>...>...>..
    9640: A8 3E 05 02 6F 3D 00 02 6F 3D 01 02 6F 3D 02 02  // .>..o=..o=..o=..
    9650: 6F 3D 03 02 6F 3D 04 02 6F 3D 05 02 AB 3D 00 02  // o=..o=..o=...=..
    9660: AB 3D 01 02 AB 3D 02 02 AB 3D 03 02 AB 3D 04 02  // .=...=...=...=..
    9670: AB 3D 05 02 1C 3D 00 02 1C 3D 01 02 1C 3D 02 02  // .=...=...=...=..
    9680: 1C 3D 03 02 1C 3D 04 02 1C 3D 05 02 50 3D 00 02  // .=...=...=..P=..
    9690: 50 3D 01 02 50 3D 02 02 50 3D 03 02 50 3D 04 02  // P=..P=..P=..P=..
    96A0: 50 3D 05 02 00 41 00 00 33 41 01 00 33 41 02 00  // P=...A..3A..3A..
    96B0: 20 41 00 00 0E 40 00 02 07 3E 00 02 07 3E 01 02  //  A...@...>...>..
    96C0: 07 3E 02 02 07 3E 03 02 07 3E 04 02 07 3E 05 02  // .>...>...>...>..
    96D0: 26 40 00 02 7B 42 05 00 7B 42 01 00 7B 42 00 00  // &@..{B..{B..{B..
    96E0: 7B 42 02 00 BC 42 00 00 BC 42 02 00 01 43 00 00  // {B...B...B...C..
    96F0: 91 3F 00 02 91 3F 01 02 91 3F 02 02 91 3F 03 02  // .?...?...?...?..
    9700: 91 3F 04 02 91 3F 05 02 4D 41 00 00 75 41 00 00  // .?...?..MA..uA..
    9710: F6 41 00 00 71 42 00 00 55 3E 00 02 55 3E 01 02  // .A..qB..U>..U>..
    9720: 55 3E 02 02 55 3E 03 02 55 3E 04 02 55 3E 05 02  // U>..U>..U>..U>..
    9730: 70 42 00 01 70 42 00 01 74 3B 00 02 74 3B 01 02  // pB..pB..t;..t;..
    9740: 74 3B 02 02 74 3B 03 02 74 3B 04 02 74 3B 05 02  // t;..t;..t;..t;..
    9750: 95 41 00 00 71 42 00 00 71 42 00 00 71 42 00 00  // .A..qB..qB..qB..
    9760: A6 40 00 00 98 3C 00 02 98 3C 01 02 98 3C 02 02  // .@...<...<...<..
    9770: 98 3C 03 02 98 3C 04 02 98 3C 05 02 C7 3C 00 02  // .<...<...<...<..
    9780: C7 3C 01 02 C7 3C 02 02 C7 3C 03 02 C7 3C 04 02  // .<...<...<...<..
    9790: C7 3C 05 02 FD 3C 00 02 FD 3C 01 02 FD 3C 02 02  // .<...<...<...<..
    97A0: FD 3C 03 02 FD 3C 04 02 FD 3C 05 02 B8 41 00 00  // .<...<...<...A..
    97B0: DB 41 00 00 99 3D 01 02 99 3D 02 02 F5 3D 01 02  // .A...=...=...=..
    97C0: F5 3D 02 02 A6 00 01 01 C2 AD 60 AE B8 AE E0 CC  // .=........`.....
    97D0: 30 D8 70 AF 00 00 7E CD 00 00 84 B0 84 B1 30 B3  // 0.p...~.......0.
    97E0: 52 B4 1E B9 A6 BA AE BA A6 D5 D8 D5 CE BF E0 C0  // R...............
    97F0: 02 C1 00 00 00 00 00 00 00 00 00 00 00 00 90 C1  // ................
    9800: 00 00 00 00 E8 E1 88 E2 12 E4 50 C4 C8 C4 3C C5  // ..........P...<.
    9810: 00 00 7A C5 A6 C5 00 00 C8 C5 E2 C5 62 C6 28 C7  // ..z.........b.(.
    9820: D8 C8 22 C9 DC E8 B8 C9 F6 C9 CE CA 00 00 CA E5  // ..".............
    9830: 22 CC 0E E8 98 CD E4 E4 CA CF 2A D0 AC D0 B6 D0  // ".........*.....
    9840: F2 D0 A2 D2 98 DA AA D2 1A D4 1A D5 00 00 E8 D5  // ................
    9850: 00 00 9C E7 00 00 38 BB 7C BF 00 00 00 00 00 00  // ......8.|.......
    9860: C2 DA 08 DC 40 DF 8C E1 AC D7 4A 00 01 01 00 00  // ....@.....J.....
    9870: 00 00 00 00 4C 98 30 99 9C 99 D0 99 00 00 34 AD  // ....L.0.......4.
    9880: 00 00 1E 9A FA 9A 06 9B 26 9B 9A 9B B2 9B 00 00  // ........&.......
    9890: 1C AD 00 00 00 00 00 00 00 00 F4 9E 26 A3 52 A0  // ............&.R.
    98A0: 00 00 90 AC B8 AC A4 A3 00 00 00 00 EA AA F6 AB  // ................
    98B0: 00 00 6C AD E4 00 01 02 4E 0C 80 02 C0 00 90 01  // ..l.....N.......
    98C0: 2D 00 20 00 40 00 01 00 03 00 00 00 00 00 00 00  // -. .@...........
    98D0: 02 00 E6 55 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ...U........-...
    98E0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    98F0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    9900: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    9910: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    9920: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    9930: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    9940: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    9950: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    9960: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    9970: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    9980: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    9990: 00 00 00 00 00 00 EC 3C 6C 00 02 02 01 00 32 0F  // .......<l.....2.
    99A0: 30 75 00 00 30 75 00 00 00 00 00 00 40 7E 05 00  // 0u..0u......@~..
    99B0: 00 00 00 00 00 00 00 00 C0 27 09 00 00 00 00 00  // .........'......
    99C0: 92 F4 00 00 00 00 84 03 9A 0B 70 17 00 00 00 00  // ..........p.....
    99D0: 28 88 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    99E0: 40 9C C4 09 10 27 52 03 1F 40 10 27 10 27 10 27  // @....'R..@.'.'.'
    99F0: 01 00 00 00 0E 06 00 00 00 00 00 00 00 00 00 00  // ................
    9A00: 00 00 00 00 34 00 02 01 00 00 00 00 00 2A 00 2A  // ....4........*.*
    9A10: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    9A20: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    9A30: 15 3F 3F 3F 15 3F 3F 3F 4E 00 01 03 00 00 00 00  // .???.???N.......
    9A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A50: 00 00 00 00 06 00 00 00 00 00 20 00 00 00 00 00  // .......... .....
    9A60: 1D 3C 01 00 00 00 00 00 00 48 C8 00 07 5A 5A 07  // .<.......H...ZZ.
    9A70: 7D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // }...............
    9A80: 00 00 00 00 00 00 DC 00 01 01 68 48 6A 48 6B 48  // ..........hHjHkH
    9A90: 69 48 68 48 6A 48 6B 48 69 48 90 00 00 00 00 08  // iHhHjHkHiH......
    9AA0: 08 08 08 00 00 6C 48 6E 48 6F 48 6D 48 6C 48 6E  // .....lHnHoHmHlHn
    9AB0: 48 6F 48 6D 48 91 00 00 00 00 08 08 08 08 00 00  // HoHmH...........
    9AC0: 70 48 72 48 73 48 71 48 70 48 72 48 73 48 71 48  // pHrHsHqHpHrHsHqH
    9AD0: 92 00 00 00 00 08 08 08 08 00 00 74 48 76 48 77  // ...........tHvHw
    9AE0: 48 75 48 74 48 76 48 77 48 75 48 93 00 00 00 00  // HuHtHvHwHuH.....
    9AF0: 08 08 08 08 00 00 78 48 7A 48 7B 48 79 48 78 48  // ......xHzH{HyHxH
    9B00: 7A 48 7B 48 79 48 94 00 00 00 00 08 08 08 08 00  // zH{HyH..........
    9B10: 00 7C 48 7E 48 7F 48 7D 48 7C 48 7E 48 7F 48 7D  // .|H~H.H}H|H~H.H}
    9B20: 48 95 00 00 00 00 08 08 08 08 00 00 98 48 9A 48  // H............H.H
    9B30: 9B 48 99 48 98 48 9A 48 9B 48 99 48 96 00 00 00  // .H.H.H.H.H.H....
    9B40: 00 01 01 01 01 00 00 80 48 82 48 83 48 81 48 80  // ........H.H.H.H.
    9B50: 48 82 48 83 48 81 48 97 00 00 00 00 08 08 08 08  // H.H.H.H.........
    9B60: 00 00 0C 00 01 05 E0 FF 3F 00 20 00 20 00 20 00  // ........?. . . .
    9B70: 01 01 8D 48 00 01 8D 48 08 02 8D 48 10 03 8D 48  // ...H...H...H...H
    9B80: 18 04 8D 48 1A 05 8D 48 1C 06 83 01 05 3D 74 00  // ...H...H.....=t.
    9B90: 01 01 10 01 06 12 11 01 16 12 13 01 06 6A 14 01  // .............j..
    9BA0: 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01  // .j...U...U......
    9BB0: 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01  // ..e...f...!...".
    9BC0: 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01  // .j#..U$...E...F.
    9BD0: 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01  // ..u...v......p..
    9BE0: 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01  // .p...q...q...r..
    9BF0: 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01  // .r...s...s...t..
    9C00: 0A 74 18 00 02 03 01 08 04 08 09 01 02 08 00 00  // .t..............
    9C10: 00 00 00 00 00 00 00 00 00 00 41 03 07 01 00 4D  // ..........A....M
    9C20: 00 95 06 00 00 6F 28 00 00 19 00 00 00 00 80 06  // .....o(.........
    9C30: 01 40 0D 03 00 E8 6E 03 00 32 00 19 00 4D 00 A1  // .@....n..2...M..
    9C40: 02 98 02 00 00 B5 01 3B 01 77 00 F9 00 DE 01 06  // .......;.w......
    9C50: 03 00 00 D1 02 00 00 20 03 3A 03 CC EB 01 00 53  // ....... .:.....S
    9C60: 07 00 00 00 00 00 00 01 02 00 00 00 00 00 00 00  // ................
    9C70: 00 08 00 00 00 00 00 00 00 00 00 00 00 07 00 02  // ................
    9C80: 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00  // ................
    9C90: 00 00 10 EE 02 00 00 00 00 00 00 02 FF 00 00 00  // ................
    9CA0: 00 00 00 03 FF 00 00 00 00 00 00 04 FF 00 00 00  // ................
    9CB0: 00 00 00 05 FF 00 00 00 00 00 00 06 FF 00 00 00  // ................
    9CC0: 00 00 00 07 FF 00 00 00 00 00 00 08 FF 00 00 00  // ................
    9CD0: 00 00 00 20 03 00 00 00 00 00 00 52 03 00 00 00  // ... .......R....
    9CE0: 00 00 00 84 03 00 00 00 00 00 00 B6 03 00 00 00  // ................
    9CF0: 00 00 00 E8 03 00 00 00 00 00 00 1A 04 00 00 00  // ................
    9D00: 00 00 00 4C 04 00 00 00 00 00 00 7E 04 00 00 00  // ...L.......~....
    9D10: 00 00 00 00 08 84 03 00 00 00 00 00 00 02 FF 00  // ................
    9D20: 00 00 00 00 00 03 FF 00 00 00 00 00 00 04 FF 00  // ................
    9D30: 00 00 00 00 00 05 FF 00 00 00 00 00 00 06 FF 00  // ................
    9D40: 00 00 00 00 00 07 FF 00 00 00 00 00 00 08 FF 00  // ................
    9D50: 00 00 00 00 00 01 08 00 00 00 30 75 00 00 00 00  // ..........0u....
    9D60: 00 80 00 00 00 00 01 E6 FF B0 E5 00 00 00 00 00  // ................
    9D70: 00 00 00 00 00 02 E6 FF B0 7B 01 00 00 00 00 00  // .........{......
    9D80: 00 00 00 00 03 E6 FF 3C 9F 01 00 00 00 00 00 00  // .......<........
    9D90: 00 00 00 04 E6 FF 04 B9 01 00 00 00 00 00 00 00  // ................
    9DA0: 00 00 05 E6 FF 04 D2 01 00 00 00 00 00 00 00 00  // ................
    9DB0: 00 06 E6 FF 08 E2 01 00 00 00 00 00 00 00 00 00  // ................
    9DC0: 07 00 00 18 F0 01 00 00 00 00 00 00 00 00 00 00  // ................
    9DD0: 03 00 20 03 00 00 E8 03 30 75 00 00 00 00 08 52  // .. .....0u.....R
    9DE0: 03 00 00 E8 03 A0 86 01 00 00 00 0A 84 03 00 00  // ................
    9DF0: E8 03 98 AB 02 00 00 00 00 08 08 00 00 90 E2 00  // ................
    9E00: 00 F8 24 01 00 18 F6 00 00 00 00 00 00 A8 DE 00  // ..$.............
    9E10: 00 09 B4 FF 18 F6 00 00 80 38 01 00 88 0D 01 00  // .........8......
    9E20: 00 00 00 00 00 FA 00 00 0A 9B FF A0 09 01 00 08  // ................
    9E30: 4C 01 00 F8 24 01 00 00 00 00 00 70 11 01 00 0B  // L...$......p....
    9E40: 82 FF 28 1D 01 00 A8 5B 01 00 68 3C 01 00 00 00  // ..(....[..h<....
    9E50: 00 00 E0 28 01 00 0C 69 FF C8 2C 01 00 60 67 01  // ...(...i..,..`g.
    9E60: 00 F0 4F 01 00 00 00 00 00 68 3C 01 00 0D 37 FF  // ..O......h<...7.
    9E70: 80 38 01 00 18 73 01 00 78 63 01 00 00 00 00 00  // .8...s..xc......
    9E80: 08 4C 01 00 0E 05 FF 38 44 01 00 D0 7E 01 00 00  // .L.....8D...~...
    9E90: 77 01 00 00 00 00 00 C0 57 01 00 0F 00 00 F0 4F  // w.......W......O
    9EA0: 01 00 A0 86 01 00 A0 86 01 00 00 00 00 00 78 63  // ..............xc
    9EB0: 01 00 01 17 00 00 02 00 26 00 00 09 03 A0 0F 64  // ........&......d
    9EC0: 19 34 21 D0 07 A0 0F 70 17 94 2A 01 64 00 E4 12  // .4!....p..*.d...
    9ED0: B8 0B 78 63 01 00 50 23 64 00 64 00 64 00 64 00  // ..xc..P#d.d.d.d.
    9EE0: 64 00 64 00 64 00 01 32 3C 00 00 04 78 00 00 00  // d.d.d..2<...x...
    9EF0: 70 00 7D 00 7D 00 00 00 00 00 7D 00 5A 00 00 00  // p.}.}.....}.Z...
    9F00: 00 00 5E 00 02 00 69 00 50 00 50 00 73 00 73 00  // ..^...i.P.P.s.s.
    9F10: 5F 00 00 00 90 10 96 00 90 00 00 06 00 00 00 00  // _...............
    9F20: 01 06 00 00 01 02 00 01 01 02 00 02 01 02 00 02  // ................
    9F30: 01 02 00 02 01 02 00 02 01 02 01 03 00 10 00 00  // ................
    9F40: 00 00 00 00 00 10 00 00 00 00 00 00 02 10 00 00  // ................
    9F50: 00 00 00 00 00 01 00 00 00 00 00 00 5E 01 01 03  // ............^...
    9F60: 88 0E 48 00 00 00 FB 00 00 00 12 00 00 00 05 01  // ..H.............
    9F70: 00 00 08 00 0A 00 13 31 00 11 21 21 80 00 0A 00  // .......1..!!....
    9F80: 13 32 00 11 21 22 00 02 0A 00 13 33 00 11 20 21  // .2..!".....3.. !
    9F90: 00 04 0A 00 0C 31 00 11 20 22 00 08 0A 00 04 31  // .....1.. ".....1
    9FA0: 00 11 1E 21 05 00 00 00 13 31 74 00 7A 00 00 00  // ...!.....1t.z...
    9FB0: 13 32 8F 00 95 00 00 00 13 33 AA 00 B0 00 00 00  // .2.......3......
    9FC0: 0C 31 C5 00 CB 00 00 00 04 31 E0 00 E6 00 00 00  // .1.......1......
    9FD0: 01 21 21 00 00 00 04 0C 01 00 10 02 00 00 08 00  // .!!.............
    9FE0: 00 00 01 04 90 00 02 04 06 00 FF 01 21 22 00 00  // ............!"..
    9FF0: 00 04 0C 01 00 20 02 00 00 80 00 00 00 01 04 92  // ..... ..........
    A000: 00 02 04 04 00 FF 01 20 21 00 00 00 04 0C 01 00  // ....... !.......
    A010: 30 02 00 00 00 02 00 00 01 04 91 00 02 04 01 00  // 0...............
    A020: FF 01 20 22 00 00 00 04 0C 01 00 40 02 00 00 00  // .. ".......@....
    A030: 04 00 00 01 04 93 00 02 04 05 00 FF 01 1E 21 00  // ..............!.
    A040: 00 00 04 0C 01 00 50 02 00 00 00 08 00 00 01 04  // ......P.........
    A050: 95 00 02 04 03 00 FF 05 00 00 00 21 21 27 01 2D  // ...........!!'.-
    A060: 01 00 00 21 22 32 01 38 01 00 00 20 21 3D 01 43  // ...!"2.8... !=.C
    A070: 01 00 00 20 22 48 01 4E 01 00 00 1E 21 53 01 59  // ... "H.N....!S.Y
    A080: 01 00 00 01 00 11 01 13 31 14 04 0F 00 FF 01 00  // ........1.......
    A090: 11 01 13 32 14 04 0F 00 FF 01 00 11 01 13 33 14  // ...2..........3.
    A0A0: 04 0F 00 FF 01 00 11 01 0C 31 14 04 0F 00 FF 01  // .........1......
    A0B0: 00 11 01 04 31 14 04 0F 00 FF D4 02 02 01 30 DC  // ....1.........0.
    A0C0: B4 00 00 80 03 00 2C 1F 00 00 14 00 00 00 DC 0C  // ......,.........
    A0D0: 14 00 00 00 D5 0C 33 03 00 00 D4 0C 00 02 0C 00  // ......3.........
    A0E0: 00 0B 29 00 20 0F D3 0B E0 1F 12 00 ED 09 10 A8  // ..). ...........
    A0F0: 08 00 92 09 00 04 0C 00 94 09 00 04 0C 00 93 09  // ................
    A100: 00 04 0C 00 6D 09 1F 10 14 01 2E 08 00 04 0C 00  // ....m...........
    A110: 30 08 80 0C 0C 00 2F 08 00 04 0C 00 4F 09 B4 00  // 0...../.....O...
    A120: 01 00 1E 09 00 04 0C 00 F3 09 1B 90 00 00 E9 09  // ................
    A130: 5A 8A FF 00 EA 09 7A AE FF 08 EE 09 10 0C 00 00  // Z.....z.........
    A140: EF 09 10 0C 00 00 E5 09 FC FD FC FC E6 09 FD F8  // ................
    A150: FC FC E7 09 FC FC F3 FC E8 09 FC FC FC F5 F0 09  // ................
    A160: 08 6F C3 00 F1 09 05 29 C3 00 DA 09 11 40 04 00  // .o.....).....@..
    A170: D6 09 03 F8 6F 00 F2 09 10 10 87 01 F4 09 45 4F  // ....o.........EO
    A180: 70 08 F5 09 16 3A 02 03 DB 09 03 03 00 00 E1 09  // p....:..........
    A190: 00 00 00 00 E2 09 04 00 00 00 74 09 C9 00 00 00  // ..........t.....
    A1A0: 76 09 00 30 00 00 7F 09 49 9A 24 00 80 09 51 12  // v..0....I.$...Q.
    A1B0: 25 02 3B 08 1C 3C 00 70 56 08 3F 40 00 00 57 08  // %.;..<.pV.?@..W.
    A1C0: 10 10 00 00 5A 08 97 09 00 00 E7 0D 99 00 C1 50  // ....Z..........P
    A1D0: E8 0D 99 01 C1 50 E9 0D 89 00 C1 50 EA 0D 19 03  // .....P.....P....
    A1E0: C1 50 51 08 99 00 C1 50 52 08 99 00 C1 50 53 08  // .PQ....PR....PS.
    A1F0: 99 00 C1 50 54 08 99 00 C1 50 5C 08 91 09 00 00  // ...PT....P\.....
    A200: 83 08 91 01 00 00 59 08 91 51 00 00 5B 08 91 29  // ......Y..Q..[..)
    A210: 00 00 5D 08 91 09 00 00 58 08 91 09 00 00 64 08  // ..].....X.....d.
    A220: 13 00 00 00 84 08 95 09 00 00 3D 08 49 92 24 00  // ..........=.I.$.
    A230: 80 08 91 09 00 00 35 08 1E 00 F9 00 41 08 12 68  // ......5.....A..h
    A240: 8F F8 42 08 13 6A 91 F6 77 08 91 13 00 00 70 08  // ..B..j..w.....p.
    A250: 11 0B 00 00 EB 0D 3D 90 80 40 EC 0D 35 50 54 40  // ......=..@..5PT@
    A260: ED 0D 3D 50 1C 40 EE 0D 35 B0 6A 40 66 08 45 90  // ..=P.@..5.j@f.E.
    A270: 80 40 67 08 55 50 80 40 68 08 3D 50 4C 40 69 08  // .@g.UP.@h.=PL@i.
    A280: 3D 70 80 40 6D 08 91 09 01 00 71 08 15 24 00 00  // =p.@m.....q..$..
    A290: 88 08 91 11 00 00 78 08 91 12 00 00 6B 08 A1 09  // ......x.....k...
    A2A0: 00 00 72 08 91 09 00 00 6C 08 01 09 00 00 74 08  // ..r.....l.....t.
    A2B0: 95 51 00 00 4D 08 11 09 00 00 4E 08 11 2A 00 00  // .Q..M.....N..*..
    A2C0: 73 08 13 0F 00 00 75 08 91 09 00 00 7D 08 91 09  // s.....u.....}...
    A2D0: 00 00 89 08 91 01 00 00 3E 08 49 92 CC 00 7F 08  // ........>.I.....
    A2E0: 91 11 00 00 7E 08 91 21 03 00 6F 08 91 29 00 00  // ....~..!..o..)..
    A2F0: 3C 08 07 00 00 80 81 09 91 0C 00 00 82 09 95 09  // <...............
    A300: 00 00 85 09 11 01 00 00 83 09 91 09 00 00 84 09  // ................
    A310: 11 8C 00 00 86 09 91 09 00 00 87 09 11 09 00 00  // ................
    A320: 88 09 91 89 00 00 7B 09 91 49 00 00 7C 09 A1 09  // ......{..I..|...
    A330: 00 00 70 05 00 04 0C 00 8E 0C 00 00 00 00 83 08  // ..p.............
    A340: 91 01 00 00 84 08 95 09 00 00 85 08 97 09 00 00  // ................
    A350: 88 08 91 11 00 00 89 08 91 01 00 00 8A 08 93 09  // ................
    A360: 00 00 50 08 91 09 02 00 3F 08 28 28 72 72 40 08  // ..P.....?.((rr@.
    A370: 50 50 28 28 43 08 80 80 00 00 CD 09 10 00 00 00  // PP((C...........
    A380: C0 09 40 0F 50 00 60 08 E1 09 02 00 00 00 7D 00  // ..@.P.`.......}.
    A390: 01 01 01 02 04 20 00 06 20 00 00 03 91 0A 02 92  // ..... .. .......
    A3A0: 0A 09 10 00 01 82 04 20 00 06 20 00 00 03 91 0A  // ....... .. .....
    A3B0: 08 20 00 00 03 92 0A 09 26 00 01 03 02 0E 00 06  // . ......&.......
    A3C0: 10 00 00 03 0E 00 02 0F 00 09 38 00 01 83 02 0E  // ..........8.....
    A3D0: 00 06 10 00 00 03 0E 00 08 20 00 00 03 0F 00 09  // ......... ......
    A3E0: 4E 00 01 05 02 82 00 06 10 00 00 03 82 00 02 83  // N...............
    A3F0: 00 09 60 00 01 85 02 82 00 06 10 00 00 03 82 00  // ..`.............
    A400: 08 20 00 00 03 83 00 09 76 00 00 00 46 07 02 02  // . ......v...F...
    A410: B0 00 1E 01 FC 05 D2 06 4A 06 00 00 03 01 08 04  // ........J.......
    A420: 32 10 54 76 2D 00 62 60 FF 00 00 50 03 05 53 09  // 2.Tv-.b`...P..S.
    A430: 04 00 00 00 00 10 00 0B 00 40 00 61 00 02 02 00  // .........@.a....
    A440: 00 00 00 00 43 65 07 00 00 00 00 00 00 32 10 54  // ....Ce.......2.T
    A450: 76 37 00 62 60 FF 00 00 50 03 05 53 09 04 00 00  // v7.b`...P..S....
    A460: 00 00 10 00 0B 00 40 00 61 91 02 02 00 00 00 00  // ......@.a.......
    A470: 00 43 65 07 00 00 00 00 00 4B 34 47 34 31 33 32  // .Ce......K4G4132
    A480: 35 46 45 00 32 10 54 76 38 00 62 60 FF 00 00 50  // 5FE.2.Tv8.b`...P
    A490: 03 05 53 09 04 00 00 00 00 10 01 0B 00 40 00 61  // ..S..........@.a
    A4A0: 03 02 02 00 00 00 00 00 43 65 07 00 00 00 00 00  // ........Ce......
    A4B0: 45 44 57 34 30 33 32 42 41 42 47 00 1E 00 24 00  // EDW4032BABG...$.
    A4C0: 8C 0A 04 95 0A 04 96 0A 04 75 0A 04 01 00 44 0C  // .........u....D.
    A4D0: 00 44 0F 00 44 97 0A 04 98 0A 00 FF FF 00 FF FF  // .D..D...........
    A4E0: FF 00 E8 CE 08 E0 5A 4A 6F A0 0C F0 00 30 66 66  // ......ZJo....0ff
    A4F0: 00 00 04 00 06 01 00 00 1E 01 00 00 00 00 F5 C8  // ................
    A500: 02 00 FF FF FF 01 F8 CF 00 E0 5A C6 6B A0 0D F0  // ..........Z.k...
    A510: 8C 30 00 00 1B 00 04 04 05 01 00 00 3E 01 00 00  // .0..........>...
    A520: 86 53 F5 08 03 00 00 00 00 00 2A 00 34 00 2F 0A  // .S........*.4./.
    A530: 04 30 0A 00 D5 0A 04 2C 0A 04 28 0A 04 29 0A 04  // .0.....,..(..)..
    A540: 2A 0A 04 2B 0A 04 81 0A 04 8B 0A 04 5F 0A 04 DD  // *..+........_...
    A550: 09 84 DE 09 84 FF FF 00 A8 61 00 01 11 10 00 00  // .........a......
    A560: 00 00 00 00 22 CC 1C 00 62 8C 11 0B 20 57 09 08  // ...."...b... W..
    A570: 0D C3 60 01 00 20 42 00 21 01 14 20 AA 88 00 A0  // ..`.. B.!.. ....
    A580: 00 00 00 00 04 03 08 09 16 0D 0E 0E 60 EA 00 01  // ............`...
    A590: 33 30 00 00 00 00 00 00 22 CC 1C 00 A5 20 24 19  // 30......".... $.
    A5A0: 40 57 0B 0B 16 C5 51 03 00 22 64 00 3A 05 14 20  // @W....Q.."d.:.. 
    A5B0: CA 88 00 A0 00 00 00 00 09 06 11 14 35 14 17 10  // ............5...
    A5C0: 90 5F 01 01 33 30 00 00 00 00 00 00 22 CC 1C 00  // ._..30......"...
    A5D0: E7 30 36 25 80 57 0B 0F 9D 86 02 05 00 24 85 00  // .06%.W.......$..
    A5E0: 5A 09 14 20 DA 88 00 A0 00 00 00 00 0D 08 19 1E  // Z.. ............
    A5F0: 50 1B 1E 12 A0 86 01 01 33 30 00 00 00 00 00 00  // P.......30......
    A600: 22 CC 1C 00 08 B5 36 29 90 57 0B 10 1F C7 92 05  // ".....6).W......
    A610: 00 44 86 00 62 0A 14 20 6A 89 00 A0 00 00 00 00  // .D..b.. j.......
    A620: 0E 09 1C 21 59 1D 20 13 74 B7 01 01 33 30 00 00  // ...!Y. .t...30..
    A630: 00 00 00 00 22 CC 1C 00 29 BD 47 2F A0 57 0C 11  // ...."...).G/.W..
    A640: 23 48 53 06 00 46 A6 00 6A 0C 14 20 6A 89 00 A0  // #HS..F..j.. j...
    A650: 00 00 00 00 10 0A 20 26 65 20 24 14 48 E8 01 01  // ...... &e $.H...
    A660: 33 30 00 00 00 00 00 00 22 CC 1C 00 4A C5 48 34  // 30......"...J.H4
    A670: B0 57 0C 12 A6 88 03 07 00 46 A7 00 72 0E 14 20  // .W.......F..r.. 
    A680: 7A 89 00 A0 00 00 00 00 12 0B 23 2A 70 22 27 14  // z.........#*p"'.
    A690: 1C 19 02 01 33 30 00 00 00 00 00 00 22 CC 1C 00  // ....30......"...
    A6A0: 8C CD 59 3A C0 57 0D 13 AA 09 B4 07 00 48 C7 00  // ..Y:.W.......H..
    A6B0: 7A 00 14 20 7A 89 00 A0 02 00 00 00 14 0D 27 2E  // z.. z.........'.
    A6C0: 7B 25 2B 15 F0 49 02 01 55 50 00 00 00 00 00 00  // {%+..I..UP......
    A6D0: 22 CC 1C 00 AD 51 5A 3E C0 57 0E 14 2D 4A 64 08  // "....QZ>.W..-Jd.
    A6E0: 00 48 C7 00 03 01 14 20 7A 89 00 A0 03 00 00 00  // .H..... z.......
    A6F0: 15 0E 2A 31 86 27 2E 16 C4 7A 02 01 55 50 00 00  // ..*1.'...z..UP..
    A700: 00 00 00 00 22 CC 1C 00 CE 59 6B 44 D0 57 0F 15  // ...."....YkD.W..
    A710: 31 CB 24 09 00 4A E7 00 0B 03 14 20 7A 89 00 A0  // 1.$..J..... z...
    A720: 03 00 00 00 17 0F 2E 36 92 2A 32 17 98 AB 02 01  // .......6.*2.....
    A730: 77 70 00 00 00 00 00 00 22 CC 1C 00 10 62 6C 49  // wp......"....blI
    A740: D0 57 10 16 B5 0B D5 09 00 4A E7 00 14 05 14 20  // .W.......J..... 
    A750: 7A 89 00 A0 03 00 00 00 19 11 31 39 9D 2C 36 17  // z.........19.,6.
    A760: 30 E6 02 01 77 70 00 00 00 00 00 00 22 CC 1C 00  // 0...wp......"...
    A770: 10 6A 7D 4F E0 57 11 17 B9 8C A5 0A 00 4C 07 01  // .j}O.W.......L..
    A780: 1C 07 14 20 7A 89 00 A0 03 00 00 00 1B 11 35 3F  // ... z.........5?
    A790: AA 2F 3A 18 40 0D 03 01 77 70 00 00 00 00 00 00  // ./:.@...wp......
    A7A0: 22 CC 1C 00 31 EE 7D 53 F0 57 11 18 3B CD 35 0B  // "...1.}S.W..;.5.
    A7B0: 00 4C 07 01 24 08 14 20 7A 89 00 A0 03 00 00 00  // .L..$.. z.......
    A7C0: 1C 12 38 42 B3 31 3C 19 20 4E 00 02 99 90 00 00  // ..8B.1<. N......
    A7D0: 00 00 00 00 22 AA 1C 00 60 88 11 07 C0 54 0B 07  // ...."...`....T..
    A7E0: 8F 82 C0 00 00 20 41 00 15 00 14 20 9A 88 40 A1  // ..... A.... ..@.
    A7F0: 00 00 00 00 03 01 05 07 0C 0A 10 0C 40 9C 00 02  // ............@...
    A800: 99 90 00 00 00 00 00 00 22 AA 1C 00 60 94 12 0F  // ........"...`...
    A810: D0 54 0C 08 15 44 91 01 00 20 41 00 1D 03 14 20  // .T...D... A.... 
    A820: 9A 88 80 A2 00 00 00 00 06 01 0A 0F 19 0E 16 0D  // ................
    A830: 80 38 01 02 99 90 00 00 00 00 00 00 22 AA 1C 00  // .8.........."...
    A840: A5 AC 35 1F 10 55 0E 0C 21 C7 32 03 00 44 82 00  // ..5..U..!.2..D..
    A850: 3D 09 14 20 2A 89 00 A5 00 00 00 00 0C 06 14 1A  // =.. *...........
    A860: 33 18 22 10 A0 86 01 02 77 70 00 00 00 00 00 00  // 3.".....wp......
    A870: 22 AA 1C 00 29 39 57 27 50 55 0D 0F A6 88 03 04  // "...)9W'PU......
    A880: 00 68 C2 00 54 0C 14 20 AA 89 00 A6 00 00 00 00  // .h..T.. ........
    A890: 0F 0A 19 1E 40 1E 27 12 48 E8 01 02 77 70 00 00  // ....@.'.H...wp..
    A8A0: 00 00 00 00 22 AA 1C 00 AD 49 59 32 70 55 0E 12  // ...."....IY2pU..
    A8B0: AD 8A 14 05 00 68 C3 00 64 0F 14 20 BA 89 80 A7  // .....h..d.. ....
    A8C0: 00 00 00 00 13 0E 20 25 51 24 2E 13 1C 19 02 02  // ...... %Q$......
    A8D0: 77 70 00 00 00 00 00 00 22 AA 1C 00 EF 51 6A 37  // wp......"....Qj7
    A8E0: 90 55 0F 14 B2 0B 95 05 00 6A E4 00 74 02 14 20  // .U.......j..t.. 
    A8F0: CA 89 C0 A8 02 00 00 00 15 10 23 28 59 28 33 15  // ..........#(Y(3.
    A900: A4 2C 02 02 77 70 00 00 00 00 00 00 22 AA 1C 00  // .,..wp......"...
    A910: 10 D6 6A 39 90 55 0F 14 34 4C C5 05 00 6A E4 00  // ..j9.U..4L...j..
    A920: 74 03 14 20 CA 89 00 A9 02 00 00 00 16 11 24 29  // t.. ..........$)
    A930: 5C 29 35 15 F0 49 02 02 77 70 00 00 00 00 00 00  // \)5..I..wp......
    A940: 22 AA 1C 00 31 5A 6B 3C A0 55 0F 15 B6 8C 15 06  // "...1Zk<.U......
    A950: 00 6A E4 00 7C 04 14 20 CA 89 80 A9 02 00 00 00  // .j..|.. ........
    A960: 17 12 26 2B 61 2B 37 15 C4 7A 02 02 77 70 00 00  // ..&+a+7..z..wp..
    A970: 00 00 00 00 22 AA 1C 00 73 62 7C 41 B0 55 10 16  // ...."...sb|A.U..
    A980: BA 0D 96 06 00 6C 06 01 04 06 14 20 EA 89 40 AA  // .....l..... ..@.
    A990: 03 00 00 00 19 14 29 2E 69 2E 3B 16 98 AB 02 02  // ......).i.;.....
    A9A0: 77 70 00 00 00 00 00 00 22 AA 1C 00 B5 6A 7D 46  // wp......"....j}F
    A9B0: C0 55 10 17 BE 8E 16 07 00 6C 07 01 0C 08 14 20  // .U.......l..... 
    A9C0: FA 89 00 AB 03 00 00 00 1B 16 2C 31 71 31 3F 17  // ..........,1q1?.
    A9D0: 40 0D 03 02 99 90 00 00 00 00 00 00 22 AA 1C 00  // @..........."...
    A9E0: 18 F7 7E 4F D0 55 12 19 46 50 17 08 00 6C 07 01  // ..~O.U..FP...l..
    A9F0: 1D 0C 14 20 FA 89 80 AC 03 00 00 00 1E 19 32 37  // ... ..........27
    AA00: 81 36 47 18 00 00 00 00 06 00 08 00 0E 00 44 FF  // .6G...........D.
    AA10: FF 00 FF FF FF 00 1F 00 00 00 FF FF FF 01 1F 00  // ................
    AA20: 00 00 FF FF FF 02 1F 00 00 00 FF FF FF 03 1F 00  // ................
    AA30: 00 00 FF FF FF 04 1F 00 00 00 FF FF FF 05 1F 00  // ................
    AA40: 00 00 FF FF FF 06 1F 00 00 00 FF FF FF 07 1F 00  // ................
    AA50: 00 00 00 00 00 00 E1 B4 88 D6 9B 00 A5 3F 21 00  // .............?!.
    AA60: FD 02 D1 00 81 F6 D2 00 88 D6 9B 00 66 3F 05 00  // ............f?..
    AA70: F4 9B 41 00 A6 B0 E6 00 4E 1E 6F 06 D1 00 42 D6  // ..A.....N.o...B.
    AA80: D3 00 AC 3F 05 00 81 56 9F 00 E6 BB 40 00 16 B1  // ...?...V....@...
    AA90: F4 00 88 D6 9B 00 E5 3D 28 00 E1 B1 11 E6 B3 00  // .......=(.......
    AAA0: F4 3B 05 00 6F 06 CA 00 42 D6 D3 00 BC AB 21 00  // .;..o...B.....!.
    AAB0: 88 76 97 00 E6 BB 08 00 A6 B0 F4 00 4B 1E 4F 07  // .v..........K.O.
    AAC0: D1 00 C2 D2 D3 00 88 F6 D2 00 F4 3B 05 00 66 3F  // ...........;..f?
    AAD0: 21 00 A6 90 BD 00 81 76 B3 00 F4 3B 05 00 30 00  // !......v...;..0.
    AAE0: 3C 00 80 0A 04 99 0A 04 82 0A 04 74 0A 04 00 00  // <..........t....
    AAF0: 44 02 00 44 03 00 44 04 00 44 05 00 44 09 00 44  // D..D..D..D..D..D
    AB00: 0A 00 44 0B 00 44 0D 00 44 4E 0A 04 54 0A 00 FF  // ..D..D..DN..T...
    AB10: FF 00 FF FF FF 00 72 21 60 50 00 E0 05 70 13 46  // ......r!`P...p.F
    AB20: 03 61 00 00 00 00 FF FF 0C 0C 20 3C 00 00 00 03  // .a........ <....
    AB30: 00 63 04 06 00 00 23 00 00 00 00 00 00 00 98 00  // .c....#.........
    AB40: 02 00 85 08 00 00 30 00 00 00 AA AA AA 00 00 00  // ......0.........
    AB50: 00 00 0C 01 03 06 38 C1 01 00 F8 24 01 00 38 00  // ......8....$..8.
    AB60: 06 0A 6A 24 09 00 80 1A 06 00 E8 03 00 00 0C 01  // ..j$............
    AB70: 18 08 20 03 00 00 B0 04 00 00 38 C1 01 00 38 C1  // .. .......8...8.
    AB80: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 34 C4  // ..............4.
    AB90: 01 00 43 01 00 00 00 00 00 00 00 00 00 00 C0 FF  // ..C.............
    ABA0: 08 0F 08 31 AC 10 00 00 00 00 00 00 01 00 00 00  // ...1............
    ABB0: 00 00 00 00 00 00 4B 00 00 00 00 00 00 00 2B 00  // ......K.......+.
    ABC0: 00 00 00 00 00 00 10 00 00 00 00 00 00 00 9B 02  // ................
    ABD0: 00 00 03 00 00 00 5E 01 00 00 08 02 00 00 BC 02  // ......^.........
    ABE0: 00 00 0C 03 00 00 5C 03 00 00 C0 03 00 00 10 04  // ......\.........
    ABF0: 00 00 60 04 00 00 B0 71 0B 00 00 35 0C 00 F8 59  // ..`....q...5...Y
    AC00: 0D 00 F0 7E 0E 00 40 42 0F 00 90 05 10 00 E0 C8  // ...~..@B........
    AC10: 10 00 30 8C 11 00 29 01 00 00 A2 04 00 00 BE 01  // ..0...).........
    AC20: 00 00 1B 00 B8 0B 00 00 6B B6 43 F8 B5 9C 05 00  // ........k.C.....
    AC30: 7E 28 FF FF 00 00 00 00 F3 0D 03 00 7F 60 FE FF  // ~(...........`..
    AC40: 00 00 00 00 23 FF 58 00 00 00 00 00 00 00 8A 00  // ....#.X.........
    AC50: EB FF FF FF 5C 12 00 01 00 01 00 01 00 00 9A 00  // ....\...........
    AC60: 03 01 01 03 66 00 08 96 10 00 00 00 00 00 24 00  // ....f.........$.
    AC70: 0C 00 29 00 21 00 2A 00 9E 00 2B 00 2D 00 2C 00  // ..).!.*...+.-.,.
    AC80: 85 00 33 00 7C 00 37 00 14 00 40 00 A0 00 41 00  // ..3.|.7...@...A.
    AC90: 80 00 4D 00 BE 00 53 00 78 00 54 00 54 00 55 00  // ..M...S.x.T.T.U.
    ACA0: D8 00 56 00 74 00 5C 00 50 00 5F 00 50 00 61 00  // ..V.t.\.P._.P.a.
    ACB0: 04 00 62 00 13 00 67 00 08 00 B7 00 BE 00 14 00  // ..b...g.........
    ACC0: 22 00 8D 00 02 00 FF 00 01 07 0C 00 0E 00 00 00  // "...............
    ACD0: 00 00 00 00 04 00 24 00 00 04 00 00 02 80 10 00  // ......$.........
    ACE0: 00 00 00 00 20 03 00 00 10 00 52 03 02 00 00 00  // .... .....R.....
    ACF0: 84 03 02 00 10 00 B6 03 28 00 03 01 FF FF FF 00  // ........(.......
    AD00: 7D 00 B8 0B 01 00 00 00 FF FF FF 00 32 00 4E 0C  // }...........2.N.
    AD10: 02 00 00 00 FF FF FF 00 7C 01 45 0C 07 12 00 00  // ........|.E.....
    AD20: 64 00 02 03 14 00 00 00 42 2D 00 00 70 06 02 06  // d.......B-..p...
    AD30: 00 00 00 00 1E 21 52 00 4C 00 03 FF FF 00 1E 22  // .....!R.L......"
    AD40: 55 00 4C 00 09 FF FF 00 20 21 58 00 4C 00 0A FF  // U.L..... !X.L...
    AD50: FF 00 20 22 5B 00 4C 00 0B FF FF 00 21 21 5E 00  // .. "[.L.....!!^.
    AD60: 4C 00 0C FF FF 00 21 22 61 00 4C 00 0D FF FF 00  // L.....!"a.L.....
    AD70: FF FF 14 04 FF 15 04 FF 16 04 FF 17 04 FF 18 04  // ................
    AD80: FF 19 04 FF 18 00 02 01 02 00 08 00 80 00 00 02  // ................
    AD90: 00 04 00 08 40 00 01 00 10 00 FF FF 38 00 02 01  // ....@.......8...
    ADA0: 04 4A 03 00 7C 92 00 00 01 04 1E 00 3C 00 00 00  // .J..|.......<...
    ADB0: F8 24 01 00 01 03 1E 00 3C 00 1E 00 F0 49 02 00  // .$......<....I..
    ADC0: 01 02 1E 00 3C 00 1E 00 E0 93 04 00 01 01 1E 00  // ....<...........
    ADD0: 00 00 1E 00 55 00 01 01 01 10 02 00 81 02 10 00  // ....U...........
    ADE0: 11 02 00 01 00 21 00 01 00 84 92 04 00 45 00 02  // .....!.......E..
    ADF0: 00 50 00 14 00 70 00 84 00 60 02 02 00 65 02 01  // .P...p...`...e..
    AE00: 00 3E 02 02 00 40 02 02 00 42 02 02 00 44 02 02  // .>...@...B...D..
    AE10: 00 75 02 40 00 80 99 02 00 88 99 01 00 FE 9A 08  // .u.@............
    AE20: 00 D4 EB 2C 00 00 00 00 00 00 9E 00 01 02 00 08  // ...,............
    AE30: 02 01 02 00 52 47 52 02 02 65 02 07 52 0D 55 00  // ....RGR..e..R.U.
    AE40: 02 52 0D 52 23 2C 25 02 01 3D 25 02 06 45 17 00  // .R.R#,%..=%..E..
    AE50: 51 02 52 3D 02 05 02 00 00 08 09 52 20 52 39 02  // Q.R=.......R R9.
    AE60: 0D 02 01 03 52 43 66 04 02 8C 02 2E 00 02 0D 02  // ....RCf.........
    AE70: 01 00 52 43 02 05 02 04 00 52 03 52 43 02 0D 02  // ..RC.....R.RC...
    AE80: 02 03 52 43 02 F9 02 01 52 05 02 01 02 00 0E E5  // ..RC....R.......
    AE90: 02 08 52 0A 02 05 02 02 00 0E 06 52 43 02 05 02  // ..R........RC...
    AEA0: 04 00 20 03 52 43 02 05 02 30 75 00 40 52 0B 02  // .. .RC...0u.@R..
    AEB0: 05 02 04 00 52 03 52 43 02 01 02 01 0E E5 02 08  // ....R.RC........
    AEC0: 52 0B 0D 65 D0 05 02 5B 57 00 01 02 00 00 37 00  // R..e...[W.....7.
    AED0: 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A 02 88 00  // .R......2.......
    AEE0: 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09 05 46 FF  // ..2......F....F.
    AEF0: FF FF 02 56 00 40 03 20 40 01 1A 09 25 40 03 75  // ...V.@. @...%@.u
    AF00: 02 46 40 03 18 40 5C 1B 2D 02 46 40 27 00 46 06  // .F@..@\.-.F@'.F.
    AF10: 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01 40 5B 00  // .-.@\....A...@[.
    AF20: B7 00 01 01 04 00 37 00 00 01 05 0E 00 02 00 40  // ......7........@
    AF30: 01 37 03 00 5C 05 02 00 FC 7F FF FF 02 00 00 00  // .7..\...........
    AF40: 5C 05 10 00 FF FF 9D FF 00 09 41 00 5C 05 21 00  // \.........A.\.!.
    AF50: 7F FF FF FF 80 00 00 00 5C 05 40 00 BE 3F FF FF  // ........\.@..?..
    AF60: 40 40 01 00 37 00 00 01 05 0E 00 70 00 01 10 37  // @@..7......p...7
    AF70: 03 00 01 05 70 00 00 40 00 01 5C 05 A0 00 0F FF  // ....p..@..\.....
    AF80: FE DF 10 00 01 60 5C 05 A2 00 7F F3 97 FF 86 04  // .....`\.........
    AF90: 88 5A 5C 05 A4 00 1B F0 FF FF 20 0D 40 04 5C 05  // .Z\....... .@.\.
    AFA0: B1 00 FF 2D FF FF 80 50 18 96 37 00 00 54 00 06  // ...-...P..7..T..
    AFB0: 00 01 25 C5 14 02 01 05 C2 14 7F 00 00 00 01 05  // ..%.............
    AFC0: E8 15 70 3D 29 0A 01 05 E9 15 9C A4 0D 20 01 05  // ..p=)........ ..
    AFD0: EA 15 20 95 87 00 5B 00 13 01 01 01 04 00 37 00  // .. ...[.......7.
    AFE0: 00 03 01 00 00 54 20 24 15 01 25 00 08 0F 01 25  // .....T $..%....%
    AFF0: 28 08 0F 5C 25 2B 08 F8 01 55 00 00 52 34 52 3E  // (..\%+...U..R4R>
    B000: 03 24 40 0C 00 15 25 40 04 5C 62 01 08 0F 40 01  // .$@...%@.\b...@.
    B010: 04 D7 09 24 00 01 04 02 08 00 00 01 04 1C 08 20  // ...$........... 
    B020: 00 66 18 2D 0C 42 10 00 56 00 40 03 0C 40 00 00  // .f.-.B..V.@..@..
    B030: 3E 0D 40 00 00 44 73 00 01 02 00 00 40 01 04 01  // >.@..Ds.....@...
    B040: 00 02 00 2D 0D 42 06 00 43 53 00 0D 25 68 15 03  // ...-.B..CS..%h..
    B050: 54 00 34 FE 01 05 35 FE 03 0A 03 0A 01 05 35 FE  // T.4...5.......5.
    B060: 04 0A 04 0A 01 00 03 0A 69 15 01 00 04 0A 69 15  // ........i.....i.
    B070: 5C 25 D5 09 FB 01 0D 05 D5 09 00 08 00 40 54 00  // \%...........@T.
    B080: 34 FE 01 05 35 FE 03 0A 0C 00 01 05 35 FE 04 0A  // 4...5.......5...
    B090: 0C 00 52 0F 66 1C 2D 0C 42 0A 00 55 00 00 52 12  // ..R.f.-.B..U..R.
    B0A0: 66 1C 2D 0C 42 0C 00 02 0D 00 01 00 52 1F 52 1E  // f.-.B.......R.R.
    B0B0: 02 05 00 30 75 00 00 52 10 4C E5 00 20 44 ED 00  // ...0u..R.L.. D..
    B0C0: 0D 25 80 0A 18 02 25 00 FF 52 40 4A 65 80 0A 0F  // .%....%..R@Je...
    B0D0: 49 0E 01 52 03 03 20 00 80 0A 09 25 00 FC 52 1E  // I..R.. ....%..R.
    B0E0: 5C 22 80 0A 03 00 52 07 52 48 5B 00 FF 00 02 01  // \"....R.RH[.....
    B0F0: 00 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42  // ..7..f...A..-.AB
    B100: 2D 0D 42 04 00 3D 24 00 03 00 44 30 00 2D 0D 42  // -.B..=$...D0.-.B
    B110: 04 00 3E 0A 42 41 44 FB 00 43 19 00 56 00 43 03  // ..>.BAD..C..V.C.
    B120: A4 41 02 00 03 F2 41 41 03 0C 41 00 00 3E 0D 41  // .A....AA..A..>.A
    B130: 00 00 44 FB 00 3E 0D 41 61 48 49 6B 00 3E E5 41  // ..D..>.AaHIk.>.A
    B140: 10 46 5F 00 1B 3D 41 01 43 6B 00 09 E5 41 03 15  // .F_..=A.Ck...A..
    B150: 3D 41 02 2D E5 41 0C 03 3A 43 41 54 00 00 00 33  // =A.-.A..:CAT...3
    B160: 0D 41 01 00 01 0A 00 00 41 0D 02 01 00 44 2D 0D  // .A......A....D-.
    B170: 41 02 00 01 0A 00 00 41 03 32 43 41 4B E5 00 01  // A......A.2CAK...
    B180: 49 D7 00 07 02 01 00 45 2D 0D 41 01 00 01 0A 00  // I......E-.A.....
    B190: 00 41 4A 02 01 00 44 44 B9 00 03 29 43 00 0E A2  // .AJ...DD...)C...
    B1A0: 00 44 43 C1 00 03 29 43 00 08 A2 00 45 33 0D 41  // .DC...)C....E3.A
    B1B0: 03 00 01 0A 00 00 41 03 3A 43 41 07 02 01 00 45  // ......A.:CA....E
    B1C0: 43 FA 00 0D 02 01 00 44 33 0D 41 01 00 01 0A 00  // C......D3.A.....
    B1D0: 00 41 3D A5 00 01 44 F5 00 07 02 01 00 45 43 FA  // .A=...D......EC.
    B1E0: 00 0D 02 01 00 44 5B 55 20 00 5B 00 AC 01 01 02  // .....D[U .[.....
    B1F0: 14 00 37 00 00 4B E5 00 08 44 23 00 01 05 82 00  // ..7..K...D#.....
    B200: 70 03 00 80 3C 05 83 00 00 00 02 00 46 68 01 03  // p...<.......Fh..
    B210: 01 04 00 02 E5 00 01 52 3C 01 05 82 00 40 01 50  // .......R<....@.P
    B220: C0 0D 25 83 00 08 66 FF 2D 0D 42 6C 01 01 05 82  // ..%...f.-.Bl....
    B230: 00 40 03 50 C0 4A 25 83 00 01 44 56 00 2D 0D 42  // .@.P.J%...DV.-.B
    B240: 20 00 03 04 00 08 00 03 04 01 0C 00 03 04 02 10  //  ...............
    B250: 00 03 04 03 14 00 01 04 82 00 04 00 4A 05 83 00  // ............J...
    B260: 80 00 00 00 44 97 00 2D 05 00 10 00 00 00 2D 05  // ....D..-......-.
    B270: 01 10 00 00 00 2D 05 02 10 00 00 00 2D 05 03 10  // .....-......-...
    B280: 00 00 00 4A 25 83 00 02 44 B8 00 01 04 82 00 1C  // ...J%...D.......
    B290: 00 0D 25 83 00 10 01 04 82 00 04 00 4A 25 83 00  // ..%.........J%..
    B2A0: 01 44 AA 00 01 04 82 00 18 00 01 21 83 00 02 01  // .D.........!....
    B2B0: 02 82 00 00 01 01 83 00 01 56 00 40 03 29 40 02  // .........V.@.)@.
    B2C0: 15 25 40 06 01 04 82 00 00 00 5C 8A 83 00 3F 00  // .%@.......\...?.
    B2D0: 40 01 02 82 00 01 01 99 83 00 04 01 02 82 00 03  // @...............
    B2E0: 01 99 83 00 05 01 04 82 00 1C 00 0D A5 83 00 10  // ................
    B2F0: 01 02 82 00 01 0D E5 83 00 04 01 02 82 00 02 01  // ................
    B300: 01 83 00 03 01 02 82 00 01 01 09 83 00 05 0D E5  // ................
    B310: 83 00 02 01 04 82 00 1C 00 0D 25 83 00 01 01 04  // ..........%.....
    B320: 82 00 04 00 4A 25 83 00 02 44 32 01 01 05 82 00  // ....J%...D2.....
    B330: 40 01 50 C0 07 25 83 00 F7 02 02 00 04 4C E5 04  // @.P..%.......L..
    B340: 08 49 68 01 52 2F 02 01 01 00 02 02 00 04 02 E5  // .Ih.R/..........
    B350: 00 02 52 3F 5B 7A 40 00 68 02 50 C0 78 02 50 C0  // ..R?[z@.h.P.x.P.
    B360: 8C 02 50 C0 90 02 50 C0 94 02 50 C0 98 02 50 C0  // ..P...P...P...P.
    B370: AC 02 50 C0 B0 02 50 C0 E4 02 50 C0 F4 02 50 C0  // ..P...P...P...P.
    B380: 08 03 50 C0 0C 03 50 C0 10 03 50 C0 14 03 50 C0  // ..P...P...P...P.
    B390: 28 03 50 C0 2C 03 50 C0 22 01 02 01 0C 04 37 00  // (.P.,.P.".....7.
    B3A0: 00 5C 25 2B 08 F8 01 54 20 24 15 07 25 EB 09 FE  // .\%+...T $..%...
    B3B0: 4B E5 00 40 44 A1 00 01 05 91 0A 0D 00 00 00 03  // K..@D...........
    B3C0: B0 01 92 0A 52 3B 03 01 00 00 56 38 00 3E 01 00  // ....R;....V8.>..
    B3D0: 01 45 62 00 3E 01 00 02 45 53 00 01 05 91 0A 0D  // .Eb.>...ES......
    B3E0: 00 00 00 07 A5 92 0A F7 43 A1 00 01 05 91 0A 0D  // ........C.......
    B3F0: 00 00 00 54 38 92 0A 43 A1 00 03 00 02 96 0A 03  // ...T8..C........
    B400: F8 01 99 0A 01 05 91 0A 00 00 00 00 03 08 01 92  // ................
    B410: 0A 01 05 91 0A 0D 00 00 00 5C 8D 92 0A 00 00 80  // .........\......
    B420: 00 07 E5 99 0A BF 07 65 96 0A F0 01 05 91 0A 00  // .......e........
    B430: 00 00 00 01 0D 92 0A 77 77 02 01 01 00 52 10 02  // .......ww....R..
    B440: 01 01 00 02 E5 01 01 52 3F 52 30 02 E5 01 02 02  // .......R?R0.....
    B450: 01 02 00 52 3F 07 25 F3 09 FC 55 00 01 4A 25 80  // ...R?.%...U..J%.
    B460: 0A 08 49 D1 00 02 25 01 07 52 40 4B E5 00 40 44  // ..I...%..R@K..@D
    B470: 12 01 01 05 91 0A 0D 00 00 00 4C A5 01 80 49 ED  // ..........L...I.
    B480: 00 54 38 92 0A 01 B2 92 0A 01 52 3B 3E 01 00 01  // .T8.......R;>...
    B490: 46 12 01 01 FA 99 0A 01 01 6A 96 0A 02 01 05 91  // F........j......
    B4A0: 0A 00 00 00 00 01 0A 92 0A 01 0D 25 EB 09 01 07  // ...........%....
    B4B0: 25 2B 08 F8 0D 25 24 15 03 5B CB 04 01 07 08 08  // %+...%$..[......
    B4C0: 37 00 00 3D 25 01 FF 44 95 04 3D 25 01 19 46 91  // 7..=%..D..=%..F.
    B4D0: 04 3D 25 01 02 47 91 04 3D 25 01 14 45 95 04 3D  // .=%..G..=%..E..=
    B4E0: 05 00 00 00 00 00 44 43 02 4B E5 01 02 49 61 00  // ......DC.K...Ia.
    B4F0: 02 A9 02 02 55 28 02 0E E5 01 80 3D 05 00 40 4B  // ....U(.....=..@K
    B500: 4C 00 45 61 00 0D A5 C2 9D 40 03 21 41 01 33 25  // L.Ea.....@.!A.3%
    B510: 41 14 03 22 43 41 0D E2 C1 48 44 66 FF 2D 0D 42  // A.."CA...HDf.-.B
    B520: AB 04 03 39 40 01 09 0D 40 30 00 1B 0D 40 02 2D  // ...9@...@0...@.-
    B530: 0A 42 40 56 00 00 56 00 01 02 05 03 40 01 00 00  // .B@V..V.....@...
    B540: 02 65 01 01 20 05 00 0A 00 00 00 03 02 46 40 3D  // .e.. ........F@=
    B550: 05 00 80 8D 5B 00 47 A6 00 0E E5 01 08 55 28 01  // ....[.G......U(.
    B560: 4B E5 01 08 44 B1 00 1B 05 46 01 3E 05 46 A0 2F  // K...D....F.>.F./
    B570: C5 01 48 C6 00 2C 65 01 01 15 05 46 01 43 B1 00  // ..H..,e....F.C..
    B580: 14 2D 01 05 03 05 01 00 00 01 00 4B E5 01 02 49  // .-.........K...I
    B590: 33 01 4B E5 01 80 49 DF 00 27 04 46 00 00 3E 05  // 3.K...I..'.F..>.
    B5A0: 41 00 00 00 00 44 45 01 03 04 40 00 00 03 02 00  // A....DE...@.....
    B5B0: 41 27 02 40 41 03 02 40 00 3E 05 41 00 00 00 00  // A'.@A..@.>.A....
    B5C0: 49 F3 00 7C 05 00 00 00 01 00 7E 04 40 00 00 7C  // I..|......~.@..|
    B5D0: 04 40 00 00 7E 02 40 00 03 02 01 40 3E 05 01 33  // .@..~.@....@>..3
    B5E0: F3 00 00 48 33 01 03 05 01 00 00 01 00 27 04 46  // ...H3........'.F
    B5F0: 00 00 7C 02 01 41 7E 04 40 00 00 03 0A 00 40 27  // ..|..A~.@.....@'
    B600: 04 46 00 00 03 8A 00 40 56 18 01 43 AF 01 7C 02  // .F.....@V..C..|.
    B610: 40 00 7E 05 40 A0 86 01 00 03 01 41 03 09 05 41  // @.~.@......A...A
    B620: 03 00 00 00 6F 02 40 41 7C 05 40 45 0C 00 00 7E  // ....o.@A|.@E...~
    B630: 05 40 40 4B 4C 00 3E 05 40 00 00 00 00 49 8A 01  // .@@KL.>.@....I..
    B640: 03 25 40 01 7C 05 40 40 4B 4C 00 7E 05 40 45 0C  // .%@.|.@@KL.~.@E.
    B650: 00 00 03 01 41 03 09 05 41 03 00 00 00 75 02 40  // ....A...A....u.@
    B660: 41 1B 05 40 01 2D 02 00 40 66 FF 2D 0D 42 9F 04  // A..@.-..@f.-.B..
    B670: 56 00 40 03 21 40 01 33 25 40 14 15 25 40 01 2D  // V.@.!@.3%@..%@.-
    B680: 0A 42 40 03 0C 48 00 00 4A 65 E2 48 10 44 FE 02  // .B@..H..Je.H.D..
    B690: 03 39 41 01 09 0D 41 30 00 1B 0D 41 04 3C 22 5E  // .9A...A0...A.<"^
    B6A0: 49 41 49 22 02 3C 21 23 49 03 49 22 02 3C 29 25  // IAI".<!#I.I".<)%
    B6B0: 49 03 49 22 02 03 20 41 5F 49 09 25 41 E0 3E 29  // I.I".. A_I.%A.>)
    B6C0: 41 01 49 22 02 4B E5 01 40 49 F6 02 3C 02 20 49  // A.I".K..@I..<. I
    B6D0: 00 49 22 02 3C 0A 22 49 01 44 26 02 0E E5 01 01  // .I".<."I.D&.....
    B6E0: 3A 00 00 4B E5 01 01 44 69 04 4B E5 01 02 49 43  // :..K...Di.K...IC
    B6F0: 02 3D 25 02 05 46 43 02 55 28 02 52 23 56 00 40  // .=%..FC.U(.R#V.@
    B700: 03 21 40 01 33 25 40 14 03 0A 48 40 07 25 60 01  // .!@.3%@...H@.%`.
    B710: FE 66 FF 2D 0D 42 9F 04 56 00 40 03 21 40 01 33  // .f.-.B..V.@.!@.3
    B720: 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // %@..%@.-.B@..H..
    B730: 07 65 23 49 FE 54 00 21 49 54 00 22 49 07 65 E2  // .e#I.T.!IT."I.e.
    B740: 48 EF 4A 65 E2 48 20 49 88 02 07 65 F2 48 EF 4A  // H.Je.H I...e.H.J
    B750: 65 F2 48 20 49 95 02 3D 05 00 00 00 00 00 49 FE  // e.H I..=......I.
    B760: 02 4A A5 C1 48 80 44 D2 02 56 00 41 5C 25 E0 48  // .J..H.D..V.A\%.H
    B770: F8 06 51 02 4A 65 E0 48 01 44 BA 02 2D A5 41 01  // ..Q.Je.H.D..-.A.
    B780: 2D 0D 48 10 00 3E A5 41 04 45 B2 02 56 08 48 03  // -.H..>.A.E..V.H.
    B790: 21 41 01 33 25 41 14 03 22 43 41 07 E2 C1 48 45  // !A.3%A.."CA...HE
    B7A0: 4A E5 C1 48 3F 49 91 04 07 A5 C2 9D BF 43 91 04  // J..H?I.......C..
    B7B0: 01 02 20 49 00 43 17 04 01 05 DA 48 80 88 01 00  // .. I.C.....H....
    B7C0: 3D A5 01 00 49 1F 03 3D 05 00 E0 3B 66 00 45 1F  // =...I..=...;f.E.
    B7D0: 03 07 25 DB 48 FE 43 3F 03 0D 25 DB 48 01 3D A5  // ..%.H.C?..%.H.=.
    B7E0: 01 02 49 3F 03 4B E5 01 08 44 3F 03 01 05 7A 49  // ..I?.K...D?...zI
    B7F0: 80 88 01 00 0D 25 7B 49 01 0D 25 5F 49 01 03 39  // .....%{I..%_I..9
    B800: 40 01 09 0D 40 30 00 1B 0D 40 04 01 22 5E 49 40  // @...@0...@.."^I@
    B810: 0D 65 5F 49 80 3E 25 40 02 44 66 03 03 65 40 04  // .e_I.>%@.Df..e@.
    B820: 5C 6A 5F 49 FB 40 66 FF 56 00 40 2D 0D 42 BB 04  // \j_I.@f.V.@-.B..
    B830: 03 21 40 03 09 0D 40 03 00 15 0D 40 02 2D 0A 42  // .!@...@....@.-.B
    B840: 40 01 0C 24 49 00 00 01 E4 26 49 02 00 0D 25 26  // @..$I....&I...%&
    B850: 49 02 01 21 23 49 03 01 A5 23 49 E8 01 02 20 49  // I..!#I...#I... I
    B860: 00 54 00 21 49 01 02 22 49 01 4B E5 01 08 44 BF  // .T.!I.."I.K...D.
    B870: 03 07 65 5F 49 FE 43 C4 03 0D 65 5F 49 01 5C 29  // ..e_I.C...e_I.\)
    B880: 5F 49 1F 01 01 8D 2B 49 20 03 01 29 25 49 03 07  // _I....+I ..)%I..
    B890: 65 5F 49 7F 5C 65 E2 48 E3 04 4A 65 E2 48 20 49  // e_I.\e.H..Je.H I
    B8A0: E0 03 0D 65 E2 48 10 4A 65 E2 48 20 44 ED 03 4B  // ...e.H.Je.H D..K
    B8B0: E5 01 02 49 17 04 5C 65 F2 48 E3 04 4A 65 F2 48  // ...I..\e.H..Je.H
    B8C0: 20 49 02 04 0D 65 F2 48 10 4A 65 F2 48 20 44 0F  //  I...e.H.Je.H D.
    B8D0: 04 3D A5 01 02 44 25 04 3D A5 01 03 49 2C 04 4B  // .=...D%.=...I,.K
    B8E0: E5 01 80 49 3A 04 03 01 00 02 02 B1 02 01 52 41  // ...I:.........RA
    B8F0: 02 02 02 00 0D 65 5F 49 40 4A 65 5F 49 20 44 3F  // .....e_I@Je_I D?
    B900: 04 07 65 5F 49 BF 56 00 40 03 21 40 01 33 25 40  // ..e_I.V.@.!@.3%@
    B910: 14 03 0A 48 40 0D 25 60 01 01 51 01 4B E5 01 02  // ...H@.%`..Q.K...
    B920: 49 91 04 3A 00 00 3D 25 02 05 46 91 04 02 25 03  // I..:..=%..F...%.
    B930: 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08 A5 03  // ......a.........
    B940: 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00 5B 02  // .........R.:..[.
    B950: 25 01 0B 43 69 04 7A 2C 00 00 00 A0 00 40 51 E0  // %..Ci.z,.....@Q.
    B960: 51 80 52 20 53 40 42 0F 00 40 42 0F 00 40 42 0F  // Q.R S@B..@B..@B.
    B970: 00 40 42 0F 00 A1 83 64 00 24 83 32 00 A3 76 19  // .@B....d.$.2..v.
    B980: 00 A3 76 0C 00 00 87 01 02 01 00 00 37 00 00 3D  // ..v.........7..=
    B990: 65 00 07 44 BC 00 56 00 40 20 25 00 03 03 0A 48  // e..D..V.@ %....H
    B9A0: 40 3D 65 00 01 44 BB 00 56 08 48 03 21 48 00 01  // @=e..D..V.H.!H..
    B9B0: 0D FA 02 02 00 52 14 01 05 8D 1A 00 00 40 00 01  // .....R.......@..
    B9C0: 25 BE 1B 02 01 A5 CC 1A C0 01 0D 91 1A 45 01 5C  // %............E.\
    B9D0: 05 DA 1A F0 FF FF FF 02 00 00 00 07 25 03 1B FB  // ............%...
    B9E0: 0D 25 7D 1A 01 01 05 34 1B 01 00 00 00 5C 05 36  // .%}....4.....\.6
    B9F0: 1B EE FE 00 00 11 01 FF 7F 01 25 3A 1B 11 5C 05  // ..........%:..\.
    BA00: 32 1B F8 F8 F8 FF 00 00 00 00 01 0D 33 1B FF 7F  // 2...........3...
    BA10: 01 05 B3 1B 07 40 00 00 0D A5 B6 1B 01 01 05 31  // .....@.........1
    BA20: 1B 00 08 00 04 01 0D 86 1B 04 00 01 0D E7 1B 01  // ................
    BA30: 00 5C 05 00 1B FF FF FD FF 00 00 02 00 3A 00 00  // .\...........:..
    BA40: 5B 5B 5C 05 F6 02 FF 00 FE 9F 04 FC 00 20 01 05  // [[\.......... ..
    BA50: F9 02 10 27 02 00 01 05 14 03 00 08 00 20 01 05  // ...'......... ..
    BA60: 0C 03 00 90 00 10 01 25 09 01 01 01 05 3B 01 64  // .......%.....;.d
    BA70: 02 12 00 01 05 30 01 A0 86 11 00 01 E5 09 17 64  // .....0.........d
    BA80: 01 05 22 17 00 00 9B 02 01 05 06 17 21 84 20 00  // ..".........!. .
    BA90: 01 8D E5 17 64 00 01 25 E4 17 01 01 05 31 01 3C  // ....d..%.....1.<
    BAA0: 00 01 08 5C 65 D4 00 FC 02 01 0D FC 00 00 01 01  // ...\e...........
    BAB0: 05 2F 48 00 00 00 00 01 05 04 48 00 00 00 00 01  // ./H.......H.....
    BAC0: 05 3A 48 0F 00 00 00 0D E5 CB 05 10 01 05 F8 16  // .:H.............
    BAD0: 00 00 00 30 01 25 32 01 00 55 00 00 52 4E 02 25  // ...0.%2..U..RN.%
    BAE0: 00 07 52 33 02 05 00 00 07 00 00 52 4D 2C 25 00  // ..R3.......RM,%.
    BAF0: 01 3D 25 00 06 45 65 01 66 16 03 0C 41 04 00 4C  // .=%..Ee.f...A..L
    BB00: 0D 41 02 00 44 B7 00 0D A5 C9 05 04 5B 00 07 00  // .A..D.......[...
    BB10: 01 01 00 00 5B 00 8A 00 01 01 00 00 37 00 00 01  // ....[.......7...
    BB20: 05 03 2B 54 10 76 32 56 00 41 03 50 41 9F 03 56  // ..+T.v2V.A.PA..V
    BB30: 00 40 66 FF 2D 0D 42 4A 00 4C 65 41 10 44 46 00  // .@f.-.BJ.LeA.DF.
    BB40: 09 65 41 07 03 2A 40 41 15 0D 40 03 2D 0A 42 40  // .eA..*@A..@.-.B@
    BB50: 01 04 02 08 00 00 01 04 03 2B 04 00 5B 7A 40 00  // .........+..[z@.
    BB60: 23 10 54 76 45 10 76 32 32 10 54 76 54 10 76 32  // #.TvE.v22.TvT.v2
    BB70: 03 21 54 76 05 41 76 32 13 20 54 76 15 40 76 32  // .!Tv.Av2. Tv.@v2
    BB80: 32 10 45 76 54 10 67 32 32 10 54 76 54 10 76 32  // 2.EvT.g22.TvT.v2
    BB90: 32 10 65 47 54 10 27 63 32 10 75 46 54 10 37 62  // 2.eGT.'c2.uFT.7b
    BBA0: 44 04 01 01 08 00 37 00 00 01 05 82 00 00 00 20  // D.....7........ 
    BBB0: C0 07 A5 83 00 FC 01 05 82 00 2C 01 50 C0 37 05  // ..........,.P.7.
    BBC0: 00 01 0D 2C 01 06 02 01 05 A4 01 09 00 40 00 01  // ...,.........@..
    BBD0: 05 A0 01 03 00 00 00 01 0D B0 01 02 04 01 E5 98  // ................
    BBE0: 01 00 4A 25 00 00 01 49 E6 00 5C 25 0C 00 80 64  // ..J%...I..\%...d
    BBF0: 5C 25 10 00 80 64 5C 25 14 00 80 64 5C 25 18 00  // \%...d\%...d\%..
    BC00: 80 64 5C 25 1C 00 80 64 5C 25 24 00 80 18 5C 25  // .d\%...d\%$...\%
    BC10: 28 00 80 64 0D 25 2C 00 01 0D 25 20 00 01 0D 25  // (..d.%,...% ...%
    BC20: 00 00 01 01 05 D8 01 B8 29 E8 00 01 05 DC 01 B8  // ........).......
    BC30: 29 E8 00 01 05 E0 01 B8 29 E8 00 01 05 E4 01 B8  // ).......).......
    BC40: 29 E8 00 01 E5 14 02 64 01 05 74 01 00 00 24 00  // )......d..t...$.
    BC50: 37 00 00 01 05 82 00 14 00 00 C0 0D 65 83 00 01  // 7...........e...
    BC60: 51 FA 01 05 82 00 00 00 00 C0 0D 25 83 00 01 01  // Q..........%....
    BC70: 05 82 00 70 01 50 C0 37 05 00 54 00 18 01 01 05  // ...p.P.7..T.....
    BC80: A8 01 20 40 00 00 01 E5 60 02 64 01 E5 DC 02 64  // .. @....`.d....d
    BC90: 01 25 44 03 00 37 00 00 07 A5 97 01 F7 54 00 92  // .%D..7.......T..
    BCA0: 01 01 05 82 00 78 03 20 C0 01 0D 83 00 19 00 01  // .....x. ........
    BCB0: 05 82 00 00 00 60 C0 5C 05 83 00 FD FF FF FF 02  // .....`.\........
    BCC0: 00 00 00 01 05 82 00 10 00 00 C0 01 05 83 00 02  // ................
    BCD0: 00 80 2A 01 05 82 00 70 03 00 80 3C 05 83 00 00  // ..*....p...<....
    BCE0: 00 02 00 46 18 04 01 05 82 00 60 03 20 C0 37 05  // ...F......`. .7.
    BCF0: 00 5C 05 60 03 10 01 18 F0 20 A4 62 00 5C 05 64  // .\.`..... .b.\.d
    BD00: 03 FF FF 00 FC 00 00 01 01 5C 05 6C 03 10 01 08  // .........\.l....
    BD10: F0 20 A4 62 00 5C 05 70 03 FF FF 00 FC 00 00 01  // . .b.\.p........
    BD20: 01 5C 05 50 03 87 00 7C 00 19 52 9D 7F 5C 05 54  // .\.P...|..R..\.T
    BD30: 03 07 0C 80 FF 38 20 01 00 5C 05 E4 01 BF FF FF  // .....8 ..\......
    BD40: DF BF FF 01 20 5C 05 84 00 FF FD FF FF FF 7D A0  // .... \........}.
    BD50: 00 37 00 00 01 05 82 00 04 00 30 C0 37 05 00 01  // .7........0.7...
    BD60: 05 04 00 02 00 91 06 01 05 0C 00 60 6A 00 08 01  // ...........`j...
    BD70: 05 10 00 01 00 00 00 37 00 00 02 05 00 44 00 03  // .......7.....D..
    BD80: 05 52 45 03 01 00 00 02 05 00 44 00 18 0C 52 45  // .RE.......D...RE
    BD90: 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00 0A 00  // ......0.7..>....
    BDA0: 44 39 02 3D 0D 00 38 02 44 26 02 3D 0D 00 45 01  // D9.=..8.D&.=..E.
    BDB0: 44 26 02 01 05 1C 00 4D 00 00 AA 01 05 20 00 DA  // D&.....M..... ..
    BDC0: A7 8C 31 43 49 02 01 05 1C 00 4D 00 C0 AC 01 05  // ..1CI.....M.....
    BDD0: 20 00 EC A7 78 31 43 49 02 01 05 1C 00 4D 00 C0  //  ...x1CI.....M..
    BDE0: AC 01 05 20 00 EC A7 78 31 01 05 24 00 00 21 00  // ... ...x1..$..!.
    BDF0: 00 01 05 28 00 FF FF FF FF 01 05 64 00 96 43 81  // ...(.......d..C.
    BE00: 01 01 05 68 00 87 25 09 40 01 05 6C 00 35 14 BF  // ...h..%.@..l.5..
    BE10: 02 01 05 70 00 01 80 00 00 01 05 2C 00 00 21 00  // ...p.......,..!.
    BE20: 00 01 05 30 00 FF FF FF FF 37 00 00 02 05 00 44  // ...0.....7.....D
    BE30: 00 03 05 52 45 03 01 00 00 02 05 00 44 00 18 0C  // ...RE.......D...
    BE40: 52 45 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00  // RE......0.7..>..
    BE50: 0A 00 44 74 03 3D 0D 00 38 02 44 74 03 3D 0D 00  // ..Dt.=..8.Dt.=..
    BE60: 45 01 44 74 03 03 F8 00 80 00 09 E5 00 0C 4C E5  // E.Dt..........L.
    BE70: 00 04 44 EF 02 4C E5 00 08 49 74 03 69 E5 00 04  // ..D..L...It.i...
    BE80: 03 0D 00 00 02 02 05 00 14 01 0B 06 43 FD 02 69  // ............C..i
    BE90: E5 00 08 56 08 00 02 05 00 14 01 05 06 52 45 08  // ...V.........RE.
    BEA0: 05 00 3F 00 00 00 01 05 82 00 04 00 30 C0 37 05  // ..?.........0.7.
    BEB0: 00 5C 8A 10 00 0F F0 00 4C E5 00 04 44 2D 03 0D  // .\......L...D-..
    BEC0: 65 24 00 04 54 00 28 00 0D 25 24 00 01 4C E5 00  // e$..T.(..%$..L..
    BED0: 08 44 42 03 0D 65 2C 00 04 54 00 30 00 0D 25 2C  // .DB..e,..T.0..%,
    BEE0: 00 01 56 00 41 03 21 41 00 09 25 41 1F 4B 25 00  // ..V.A.!A..%A.K%.
    BEF0: 20 44 6B 03 03 A5 41 20 33 8A 41 41 56 08 41 15  //  Dk...A 3.AAV.A.
    BF00: 1D 41 03 31 02 20 00 41 43 74 03 15 05 41 13 2B  // .A.1. .ACt...A.+
    BF10: 02 20 00 41 37 00 00 03 05 00 24 00 30 C0 03 05  // . .A7.....$.0...
    BF20: 01 44 00 30 C0 01 05 82 00 80 00 30 C0 03 38 40  // .D.0.......0..8@
    BF30: 83 00 4C 25 40 04 49 F4 03 01 02 82 00 00 4A 25  // ..L%@.I.......J%
    BF40: 83 00 01 49 F4 03 0D 65 83 00 04 66 FF 2D 0D 42  // ...I...e...f.-.B
    BF50: 1C 04 56 00 41 01 02 82 00 01 4A 25 83 00 01 49  // ..V.A.....J%...I
    BF60: B5 03 01 02 82 00 01 01 04 83 00 00 00 2D 0D 42  // .............-.B
    BF70: 04 00 2D 25 41 04 3E 25 41 28 45 B5 03 01 02 82  // ..-%A.>%A(E.....
    BF80: 00 01 4A 25 83 00 01 49 DD 03 01 02 82 00 00 07  // ..J%...I........
    BF90: 65 83 00 FB 2D 05 00 08 00 00 00 2D 05 01 08 00  // e...-......-....
    BFA0: 00 00 1B 05 40 01 3E 05 00 2C 00 30 C0 44 92 03  // ....@.>..,.0.D..
    BFB0: 01 05 BD 00 00 74 00 00 5B 7A 28 00 25 00 00 00  // .....t..[z(.%...
    BFC0: 49 20 20 00 4D 60 46 00 6D 40 20 00 71 80 40 00  // I  .M`F.m@ .q.@.
    BFD0: 75 00 00 00 79 00 00 00 7D 00 68 00 01 40 0F 00  // u...y...}.h..@..
    BFE0: 0A 00 00 00 52 00 01 01 00 00 37 00 00 52 3E 03  // ....R.....7..R>.
    BFF0: 0C 41 14 00 01 0A 0A 15 41 33 0D 41 01 00 1B 0D  // .A......A3.A....
    C000: 41 04 15 05 41 10 2D 05 41 00 F4 00 F4 01 02 09  // A...A.-.A.......
    C010: 08 41 33 8D 41 00 F4 1B 1D 41 07 01 1A 06 00 41  // .A3.A....A.....A
    C020: 01 05 01 0B 00 00 00 F4 01 25 C9 00 F4 01 05 C4  // .........%......
    C030: 00 00 00 00 00 5B 11 01 01 01 00 04 37 00 00 03  // .....[......7...
    C040: F9 46 00 08 E5 00 7F 03 0A 41 42 2D 0D 41 04 00  // .F.......AB-.A..
    C050: 03 8C 41 02 00 2D 0C 42 00 00 2D 0D 42 04 00 56  // ..A..-.B..-.B..V
    C060: 30 46 03 04 40 00 00 3E 05 40 00 00 00 00 44 49  // 0F..@..>.@....DI
    C070: 00 3D FA 00 40 44 50 00 3E A5 46 01 49 5B 00 33  // .=..@DP.>.F.I[.3
    C080: 1A 42 41 43 62 00 03 A5 46 01 3D 02 00 40 47 62  // .BACb...F.=..@Gb
    C090: 00 2D 1A 42 41 43 2C 00 4C E5 46 80 44 6A 00 5B  // .-.BAC,.L.F.Dj.[
    C0A0: 03 8A 41 42 56 00 40 03 0A 42 41 03 8C 40 00 00  // ..ABV.@..BA..@..
    C0B0: 3E 8D 40 FF FF 44 10 01 03 24 42 02 00 03 22 46  // >.@..D...$B..."F
    C0C0: 42 09 25 42 3F 3E 25 42 05 49 A6 00 03 1A 40 40  // B.%B?>%B.I....@@
    C0D0: 03 0D 42 04 00 2D 1A 42 41 43 E1 00 3E 25 42 06  // ..B..-.BAC..>%B.
    C0E0: 49 CD 00 33 0D 41 03 00 56 08 42 2D 0D 40 01 00  // I..3.A..V.B-.@..
    C0F0: 3E 1A 40 40 47 9F 00 2D 1A 42 41 2D 0D 41 03 00  // >.@@G..-.BA-.A..
    C100: 43 04 01 03 1A 40 40 09 0D 42 1F 00 2D 1A 42 41  // C....@@..B..-.BA
    C110: 4C 25 46 80 49 04 01 56 18 40 4C 25 46 40 49 F9  // L%F.I..V.@L%F@I.
    C120: 00 01 02 00 00 40 01 04 01 00 00 00 43 04 01 01  // .....@......C...
    C130: 02 91 0A 40 01 04 92 0A 00 00 2D 0D 41 03 00 03  // ...@......-.A...
    C140: 8A 41 42 43 71 00 5B 00 21 00 02 01 00 04 37 00  // .ABCq.[.!.....7.
    C150: 00 01 01 A4 00 01 01 01 94 00 00 3C 25 95 00 01  // ...........<%...
    C160: 49 13 00 02 00 01 A4 00 5B 00 8E 00 01 02 00 04  // I.......[.......
    C170: 66 FF 56 08 47 2D 0D 42 5C 00 03 21 47 00 09 25  // f.V.G-.B\..!G..%
    C180: 47 F0 42 22 47 63 00 43 00 63 80 36 00 63 60 3E  // G.B"Gc.C.c.6.c`>
    C190: 00 63 20 2E 00 5A 5A 5B 2D 0D 42 26 00 43 43 00  // .c ..ZZ[-.B&.CC.
    C1A0: 2D 0D 42 0C 00 43 43 00 2D 0D 42 18 00 03 21 47  // -.B..CC.-.B...!G
    C1B0: 00 09 25 47 07 2D 0A 42 47 2D 0A 42 47 03 0C 48  // ..%G.-.BG-.BG..H
    C1C0: 00 00 5B 7A 32 00 00 00 00 02 00 04 00 26 00 28  // ..[z2........&.(
    C1D0: 00 2A 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 00  // .*....,.-.../...
    C1E0: 00 01 00 02 00 03 00 04 00 05 00 0A 00 00 A0 00  // ................
    C1F0: 40 51 E0 51 80 52 20 53 BF 02 02 02 1C 04 20 05  // @Q.Q.R S...... .
    C200: 01 64 00 00 00 03 02 02 40 66 1F 02 04 01 0C 00  // .d......@f......
    C210: 52 45 08 05 01 FF 03 00 00 3D 0D 01 00 00 49 2F  // RE.......=....I/
    C220: 00 02 04 00 28 00 5B 02 04 01 1C 00 52 45 08 05  // ....(.[.....RE..
    C230: 01 FF 00 00 00 20 05 01 A0 86 01 00 7C 04 40 20  // ..... ......|.@ 
    C240: 00 7E 05 40 FF 00 00 00 03 02 01 40 03 04 40 24  // .~.@.......@..@$
    C250: 00 21 05 40 A0 86 01 00 2D 02 01 40 02 E5 00 01  // .!.@....-..@....
    C260: 56 00 03 02 0D 03 02 00 56 00 04 7C 04 02 3C 00  // V.......V..|..<.
    C270: 7E 05 40 10 27 00 00 02 02 01 40 02 04 02 4C 00  // ~.@.'.....@...L.
    C280: 02 A4 03 56 00 02 E4 03 5A 00 52 37 03 01 05 01  // ...V....Z.R7....
    C290: 03 71 03 03 03 04 40 64 00 21 05 40 A0 86 01 00  // .q....@d.!.@....
    C2A0: 02 02 01 40 55 18 03 02 04 02 50 00 02 E4 03 5B  // ...@U.....P....[
    C2B0: 00 52 37 7C 04 02 40 00 7E 05 40 10 27 00 00 02  // .R7|..@.~.@.'...
    C2C0: 02 02 40 02 E4 03 57 00 52 37 02 E5 03 01 02 02  // ..@...W.R7......
    C2D0: 02 01 52 37 03 01 06 01 03 B1 03 03 7C 05 06 A0  // ..R7........|...
    C2E0: 86 01 00 7E 02 40 05 03 02 03 40 03 02 05 40 43  // ...~.@....@...@C
    C2F0: FA 00 3D E5 00 00 44 66 02 3E 04 03 04 00 47 21  // ..=...Df.>....G!
    C300: 01 03 02 03 05 3E 04 03 04 00 47 21 01 03 04 03  // .....>....G!....
    C310: 04 00 2D 05 03 71 02 00 00 03 04 40 7C 00 3E 05  // ..-..q.....@|.>.
    C320: 40 00 00 00 00 44 D9 01 33 04 03 7C 00 7C 02 03  // @....D..3..|.|..
    C330: 03 7E 05 40 A0 86 01 00 03 02 46 40 02 04 01 50  // .~.@......F@...P
    C340: 00 03 04 40 64 00 21 05 40 A0 86 01 00 02 02 02  // ...@d.!.@.......
    C350: 40 02 05 03 02 00 00 00 02 A4 03 5B 00 52 37 7C  // @..........[.R7|
    C360: 04 03 4C 00 7E 05 40 A0 86 01 00 02 02 02 40 02  // ..L.~.@.......@.
    C370: E4 03 5A 00 52 37 02 02 02 01 02 E5 03 01 52 37  // ..Z.R7........R7
    C380: 03 01 04 01 02 04 01 40 00 02 A4 03 57 00 7C 04  // .......@....W.|.
    C390: 03 3C 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4  // .<.~.@.......@..
    C3A0: 03 56 00 52 37 7C 05 04 10 27 00 00 7E 01 40 01  // .V.R7|...'..~.@.
    C3B0: 03 02 04 40 03 02 05 02 3E 02 05 04 45 CE 01 33  // ...@....>...E..3
    C3C0: 02 05 04 43 E0 01 33 02 04 05 03 02 05 04 43 E0  // ...C..3.......C.
    C3D0: 01 03 02 04 02 56 00 05 7C 04 02 74 00 7E 05 40  // .....V..|..t.~.@
    C3E0: 10 27 00 00 03 02 04 40 7C 02 40 40 02 02 01 40  // .'.....@|.@@...@
    C3F0: 02 02 02 41 7C 04 02 78 00 7E 05 40 10 27 00 00  // ...A|..x.~.@.'..
    C400: 7C 02 40 40 02 25 03 01 52 37 7C 02 05 05 52 37  // |.@@.%..R7|...R7
    C410: 02 25 03 03 52 37 03 04 40 68 00 21 05 40 0A 00  // .%..R7..@h.!.@..
    C420: 00 00 2C 02 01 40 7C 04 02 6C 00 7E 05 40 10 27  // ..,..@|..l.~.@.'
    C430: 00 00 2C 02 01 40 7C 04 02 70 00 7E 05 40 10 27  // ..,..@|..p.~.@.'
    C440: 00 00 2C 02 01 40 26 05 01 64 00 00 00 21 05 40  // ..,..@&..d...!.@
    C450: 64 00 00 00 2D 02 02 40 55 38 00 43 68 00 2D 05  // d...-..@U8.Ch.-.
    C460: 05 70 02 00 00 27 05 05 71 02 00 00 21 05 40 71  // .p...'..q...!.@q
    C470: 02 00 00 3E 04 40 04 00 47 89 02 02 04 00 2C 00  // ...>.@..G.....,.
    C480: 5B 56 00 00 03 31 00 00 33 25 00 01 02 02 00 40  // [V...1..3%.....@
    C490: 03 04 46 08 00 03 04 40 80 00 15 25 00 02 2D 0A  // ..F....@...%..-.
    C4A0: 42 00 21 04 40 84 00 2D 02 46 40 3D 02 00 46 48  // B.!.@..-.F@=..FH
    C4B0: BE 02 02 02 00 46 5B 00 78 00 01 01 00 00 37 00  // .....F[.x.....7.
    C4C0: 00 52 14 0D A5 51 1B 01 54 20 54 1B 07 25 44 1B  // .R...Q..T T..%D.
    C4D0: FE 54 20 45 1B 42 29 00 63 00 31 00 63 01 39 00  // .T E.B).c.1.c.9.
    C4E0: 63 02 4D 00 5A 5A 43 70 00 01 25 45 1B 02 43 3E  // c.M.ZZCp..%E..C>
    C4F0: 00 01 25 45 1B 01 54 20 42 1B 54 00 43 1B 54 00  // ..%E..T B.T.C.T.
    C500: 47 1B 43 70 00 01 0D 43 1B 01 01 01 05 47 1B 01  // G.Cp...C.....G..
    C510: 00 01 00 0D 65 48 1B 01 0D 65 4B 1B 01 01 0D 53  // ....eH...eK....S
    C520: 1B 10 10 01 25 42 1B 01 54 30 51 1B 3A 00 00 5B  // ....%B..T0Q.:..[
    C530: 74 00 01 01 00 00 37 00 00 4A A5 CB 05 01 44 15  // t.....7..J....D.
    C540: 00 02 65 00 01 0E 25 00 80 52 14 03 00 46 CC 00  // ..e...%..R...F..
    C550: 08 25 00 0F 52 14 54 30 9D 1B 3C 69 9D 1B 00 44  // .%..R.T0..<i...D
    C560: 65 00 01 69 9D 1B 00 3D 65 00 00 44 65 00 4A A5  // e..i...=e..De.J.
    C570: 9C 1B 01 44 65 00 4C 25 46 01 44 69 00 4A 25 A3  // ...De.L%F.Di.J%.
    C580: 1B 01 49 4D 00 4A 25 A3 1B 01 44 55 00 4A 25 A3  // ..IM.J%...DU.J%.
    C590: 1B 01 49 5D 00 3A 00 00 5B 4A 25 9D 1B 01 44 69  // ..I].:..[J%...Di
    C5A0: 00 43 65 00 3E 00 01 01 00 00 37 00 00 52 14 3D  // .Ce.>.....7..R.=
    C5B0: 65 00 01 44 30 00 0D 65 9C 1B 03 07 25 9C 1B FE  // e..D0..e....%...
    C5C0: 4A A5 9C 1B 01 49 1C 00 07 E5 00 1B 7F 54 20 A9  // J....I.......T .
    C5D0: 1B 43 3A 00 0D E5 00 1B 80 0D 25 9C 1B 01 3A 00  // .C:.......%...:.
    C5E0: 00 5B 2C 00 02 01 00 00 37 00 00 3C 21 FC 00 00  // .[,.....7..<!...
    C5F0: 49 19 00 0D A5 C0 00 01 43 26 00 3C 61 FC 00 00  // I.......C&.<a...
    C600: 49 26 00 0D A5 C0 00 02 0D A5 C1 00 01 5B 22 00  // I&...........[".
    C610: 01 01 04 04 03 39 00 00 55 38 00 20 02 00 00 03  // .....9..U8. ....
    C620: 04 41 00 00 56 38 41 27 02 40 41 02 E2 00 40 5B  // .A..V8A'.@A...@[
    C630: 19 00 01 01 00 08 37 00 00 52 14 01 01 5E 1B 00  // ......7..R...^..
    C640: 01 01 5F 1B 01 3A 00 00 5B 00 80 00 02 01 00 00  // .._..:..[.......
    C650: 56 00 40 03 39 40 00 55 38 00 66 FF 2D 0D 42 50  // V.@.9@.U8.f.-.BP
    C660: 00 3E 0C 40 02 00 47 27 00 2D 0D 42 08 00 43 17  // .>.@..G'.-.B..C.
    C670: 00 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00  // .3.@..!.@..-.@..
    C680: 56 18 40 03 02 46 40 7B 05 00 40 42 0F 00 7E 02  // V.@..F@{..@B..~.
    C690: 40 46 02 02 00 40 5B 7A 30 00 64 00 00 00 00 00  // @F...@[z0.d.....
    C6A0: 00 00 FF FF 07 00 01 00 00 00 C8 00 3F 00 08 00  // ............?...
    C6B0: 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60 00  // ..@._.@.2...~.`.
    C6C0: 64 00 00 32 7F 00 7F 00 64 00 C6 00 01 03 04 00  // d..2....d.......
    C6D0: 37 00 00 56 00 46 56 00 00 03 21 00 00 55 20 00  // 7..V.FV...!..U .
    C6E0: 3D 65 00 03 44 2C 00 3D 65 00 0D 46 BB 00 02 29  // =e..D,.=e..F...)
    C6F0: 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22 00 4A  // ..2%...%.`R.\".J
    C700: F8 00 02 22 00 00 52 14 03 08 41 C0 1A 09 0D 41  // ..."..R...A....A
    C710: 03 00 66 FF 2D 0D 42 C2 00 2D 0A 42 41 03 24 00  // ..f.-.B..-.BA.$.
    C720: 00 00 3D E2 00 00 48 A7 00 3E 25 00 04 44 76 00  // ..=...H..>%..Dv.
    C730: 03 22 46 00 33 25 46 01 15 25 46 04 0F 25 46 01  // ."F.3%F..%F..%F.
    C740: 33 39 00 00 3E 25 00 01 44 93 00 3E 25 00 02 44  // 39..>%..D..>%..D
    C750: 8C 00 03 25 46 21 03 65 00 2F 43 97 00 03 65 00  // ...%F!.e./C...e.
    C760: 13 03 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46  // ..yF.3eF..-F..eF
    C770: 01 52 14 01 02 F2 1B 46 01 52 EE 1B 00 54 00 F9  // .R.....F.R...T..
    C780: 1B 54 00 ED 1B 3A 00 00 5B 7A 04 00 03 02 01 04  // .T...:..[z......
    C790: AF 01 01 04 00 08 37 00 00 3D 65 02 01 49 44 01  // ......7..=e..ID.
    C7A0: 4B A5 02 03 49 5D 00 02 05 00 00 03 00 05 02 05  // K...I]..........
    C7B0: 01 00 05 02 00 3C 21 FC 00 02 49 57 00 01 8D C0  // .....<!...IW....
    C7C0: 00 00 02 51 02 01 05 C6 00 00 00 10 00 01 05 C8  // ...Q............
    C7D0: 00 00 00 50 00 01 0D C3 00 02 00 54 20 CA 00 01  // ...P.......T ...
    C7E0: 05 C2 00 00 01 00 00 56 20 40 43 83 00 0E 25 02  // .......V @C...%.
    C7F0: 80 52 14 54 00 CC 00 56 08 48 08 25 02 07 0D 25  // .R.T...V.H.%...%
    C800: CA 00 01 01 25 C2 00 01 54 00 C6 00 54 00 C8 00  // ....%...T...T...
    C810: 56 20 40 3D A5 01 00 49 8F 00 0D 25 C2 00 10 07  // V @=...I...%....
    C820: 65 D0 05 FE 3D A5 01 01 47 A0 00 0D 65 D0 05 01  // e...=...G...e...
    C830: 03 A0 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00  // ..@....F....AF-.
    C840: 46 C6 00 2D 00 41 C8 00 52 14 01 32 07 1A 40 01  // F..-.A..R..2..@.
    C850: 32 08 1A 40 01 02 04 1A 46 01 02 05 1A 41 54 30  // 2..@....F....AT0
    C860: C1 1A 54 00 5C 1B 01 01 5D 1B 00 54 08 09 1A 54  // ..T.\...]..T...T
    C870: 08 0A 1A 54 08 0B 1A 54 08 0C 1A 01 09 0E 1A 00  // ...T...T........
    C880: 01 19 0D 1A 00 5C 19 01 1A FC F8 01 5C A5 01 1A  // .....\......\...
    C890: 0F 10 01 09 06 1A 01 01 25 00 1A 01 0D 25 B3 1B  // ........%....%..
    C8A0: 04 5C 62 B3 1B FE 40 54 20 35 1A 54 20 3C 1A 54  // .\b...@T 5.T <.T
    C8B0: 00 CA 1B 54 00 C8 1B 54 00 CC 1B 4B A5 02 03 49  // ...T...T...K...I
    C8C0: 40 01 0E 25 02 80 52 14 01 05 CC 00 01 00 00 00  // @..%..R.........
    C8D0: 3A 00 00 5B 52 14 3D 65 02 00 49 61 01 54 20 00  // :..[R.=e..Ia.T .
    C8E0: 1A 3A 00 00 3C 21 FC 00 02 49 60 01 54 08 C1 00  // .:..<!...I`.T...
    C8F0: 5B 3D 65 02 10 44 6E 01 01 09 06 1A 01 5B 03 00  // [=e..Dn......[..
    C900: 40 04 1A 09 05 40 00 00 00 FD 2D 01 40 00 09 0D  // @....@....-.@...
    C910: 40 00 F0 01 02 04 1A 40 08 0D 00 FF 0F 56 00 41  // @......@.....V.A
    C920: 03 31 41 01 74 0A 00 41 2C 09 01 00 08 25 00 FC  // .1A.t..A,....%..
    C930: 14 05 00 10 01 01 5C 1B 00 01 09 0D 1A 01 5B 00  // ......\.......[.
    C940: 49 00 01 01 00 00 37 00 00 52 14 07 65 B6 1B FE  // I.....7..R..e...
    C950: 3D 65 00 01 44 37 00 54 30 6E 1A 54 30 11 1A 54  // =e..D7.T0n.T0..T
    C960: 20 B5 1B 54 20 BD 1B 54 30 BD 1B 4A 25 B6 1B 01  //  ..T ..T0..J%...
    C970: 49 2B 00 3A 00 00 5B 0D 25 BD 1B 01 54 00 9E 1B  // I+.:..[.%...T...
    C980: 07 25 C0 1A F4 3A 00 00 5B 00 95 00 01 03 00 00  // .%...:..[.......
    C990: 37 00 00 52 14 0D 25 03 1B 04 54 20 78 1A 54 00  // 7..R..%...T x.T.
    C9A0: 80 1A 3D 65 00 01 49 56 00 0D 25 7E 1A 07 01 25  // ..=e..IV..%~...%
    C9B0: 7F 1A 01 51 01 4A 25 7F 1A 02 44 29 00 54 20 7F  // ...Q.J%...D).T .
    C9C0: 1A 54 08 81 1A 54 08 82 1A 54 08 83 1A 01 0D 84  // .T...T...T......
    C9D0: 1A FF FF 01 0D 85 1A FF FF 01 0D 86 1A FF FF 5B  // ...............[
    C9E0: 01 31 79 1A 00 56 00 41 03 19 41 01 3B 02 41 3D  // .1y..V.A..A.;.A=
    C9F0: 65 00 02 49 78 00 03 00 40 7C 1A 04 02 00 40 43  // e..Ix...@|....@C
    CA00: 81 00 03 03 40 00 01 02 7C 1A 40 2D 05 46 04 00  // ....@...|.@-.F..
    CA10: 00 00 2D 8D 41 01 00 3E 89 41 01 45 65 00 5B 00  // ..-.A..>.A.Ee.[.
    CA20: 3D 00 01 01 00 04 37 00 00 56 00 40 03 38 40 9A  // =.....7..V.@.8@.
    CA30: 0A 21 05 40 E2 04 00 00 02 02 00 40 03 00 40 99  // .!.@.......@..@.
    CA40: 0A 1B 05 40 14 09 0D 40 07 00 21 05 40 09 3D 00  // ...@...@..!.@.=.
    CA50: 00 27 05 40 64 00 00 00 2C 02 00 40 5B 00 D8 00  // .'.@d...,..@[...
    CA60: 01 01 0C 00 37 00 00 01 05 82 00 2C 00 50 C0 4A  // ....7......,.P.J
    CA70: 25 83 00 01 49 3B 00 02 05 00 40 7E 05 00 01 05  // %...I;....@~....
    CA80: 82 00 B4 00 50 C0 02 E8 00 83 00 52 29 26 05 00  // ....P......R)&..
    CA90: 10 27 00 00 02 02 00 40 5B 03 05 00 AC 02 50 C0  // .'.....@[.....P.
    CAA0: 03 05 01 8C 02 50 C0 03 05 02 78 02 50 C0 01 05  // .....P....x.P...
    CAB0: 82 00 40 03 50 C0 4A 25 83 00 01 44 75 00 03 05  // ..@.P.J%...Du...
    CAC0: 00 28 03 50 C0 03 05 01 08 03 50 C0 03 05 02 F4  // .(.P......P.....
    CAD0: 02 50 C0 01 02 82 00 02 4A 05 83 00 80 00 00 00  // .P......J.......
    CAE0: 44 8C 00 2D 05 01 10 00 00 00 01 02 82 00 01 56  // D..-...........V
    CAF0: 00 40 03 18 40 83 00 21 05 40 10 27 00 00 03 02  // .@..@..!.@.'....
    CB00: 46 40 56 00 40 03 08 40 83 00 21 05 40 10 27 00  // F@V.@..@..!.@.'.
    CB10: 00 27 05 40 00 00 01 00 2D 02 46 40 01 02 82 00  // .'.@....-.F@....
    CB20: 00 56 00 40 03 20 40 83 00 09 25 40 0F 75 02 46  // .V.@. @...%@.u.F
    CB30: 40 02 02 00 46 5B 53 01 02 03 00 18 37 00 00 66  // @...F[S.....7..f
    CB40: FF 2D 0D 42 47 01 55 28 05 2D 09 42 05 2D 09 42  // .-.BG.U(.-.B.-.B
    CB50: 05 03 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D  // ...H....A.-.A.>.
    CB60: 41 03 00 46 3F 00 5C 05 B3 1B FB 0F F0 FF 00 30  // A..F?.\........0
    CB70: 00 00 43 4B 00 5C 05 B3 1B FF 0F F0 FF 04 40 00  // ..CK.\........@.
    CB80: 00 03 09 41 00 2D 19 41 00 33 0D 41 01 00 01 0A  // ...A.-.A.3.A....
    CB90: 80 1B 41 54 08 82 1B 01 99 82 1B 02 03 19 41 00  // ..AT..........A.
    CBA0: 33 09 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01  // 3.A.V.A..A.3.AA.
    CBB0: 8A 81 1B 41 03 19 41 00 33 09 41 02 2D 1A 41 41  // ...A..A.3.A.-.AA
    CBC0: 2D 09 41 00 4B 25 04 10 44 99 00 2D 09 41 00 01  // -.A.K%..D..-.A..
    CBD0: 0A 81 1B 41 03 21 41 04 09 25 41 02 1B 25 41 01  // ...A.!A..%A..%A.
    CBE0: 01 22 83 1B 41 54 00 5E 1B 01 31 5E 1B 04 01 B1  // ."..AT.^..1^....
    CBF0: 5E 1B 04 03 09 41 01 2D 19 41 01 33 0D 41 01 00  // ^....A.-.A.3.A..
    CC00: 01 0A 87 1B 41 54 08 8E 1B 01 99 8E 1B 03 03 19  // ....AT..........
    CC10: 41 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41  // A.3.A.V.A..A.3.A
    CC20: 41 01 8A 8D 1B 41 03 19 41 01 33 09 41 03 2D 1A  // A....A..A.3.A.-.
    CC30: 41 41 2D 09 41 01 4B 25 04 20 44 0B 01 2D 09 41  // AA-.A.K%. D..-.A
    CC40: 01 01 0A 8D 1B 41 03 21 41 04 09 25 41 04 1B 25  // .....A.!A..%A..%
    CC50: 41 02 01 22 8F 1B 41 54 00 5F 1B 01 39 5F 1B 04  // A.."..AT._..9_..
    CC60: 01 B9 5F 1B 04 03 21 41 04 09 25 41 80 1B 25 41  // .._...!A..%A..%A
    CC70: 07 01 22 9E 1B 41 3A 00 00 5B 7A 0C 00 00 00 00  // .."..A:..[z.....
    CC80: 02 00 04 00 26 00 28 00 2A 00 BE 00 01 01 00 04  // ....&.(.*.......
    CC90: 37 00 00 03 A1 40 00 3D A5 00 00 49 49 00 66 04  // 7....@.=...II.f.
    CCA0: 03 24 40 58 00 3E 25 40 FF 49 AE 00 55 00 01 02  // .$@X.>%@.I..U...
    CCB0: 25 01 28 52 09 02 0D 01 29 01 52 09 02 0D 01 2A  // %.(R....).R....*
    CCC0: 02 52 09 02 0D 01 2B 03 52 09 03 B1 40 01 01 B1  // .R....+.R...@...
    CCD0: 0A 15 01 66 1C 03 64 40 10 00 56 20 40 2D 0D 42  // ...f..d@..V @-.B
    CCE0: 14 00 54 30 CD 05 3E A4 40 0A 00 49 93 00 3D A5  // ..T0..>.@..I..=.
    CCF0: 00 00 44 AE 00 03 24 41 1C 00 03 71 41 00 09 0D  // ..D...$A...qA...
    CD00: 41 0F 0F 3E 62 41 41 49 93 00 01 A2 CD 05 40 01  // A..>bAAI......@.
    CD10: 64 80 0A 1C 00 3D A4 00 1C 00 44 AE 00 2D 0C 42  // d....=....D..-.B
    CD20: 04 00 2D 25 40 01 3E 62 40 40 49 5C 00 01 F1 0A  // ..-%@.>b@@I\....
    CD30: 15 00 0D A5 0A 15 80 5B 01 A2 CD 05 40 01 64 80  // .......[....@.d.
    CD40: 0A 1C 00 54 18 0A 15 5B 9E 00 01 01 08 00 37 00  // ...T...[......7.
    CD50: 00 03 08 00 28 08 56 30 00 03 05 01 03 00 00 00  // ....(.V0........
    CD60: 52 3E 4C 0C 01 08 00 49 2D 00 15 05 01 02 2D A5  // R>L....I-.....-.
    CD70: 00 01 43 18 00 5C 72 28 08 F8 00 03 00 40 1F 0A  // ..C..\r(.....@..
    CD80: 03 00 46 93 0A 09 25 46 03 15 25 46 03 75 02 40  // ..F...%F..%F.u.@
    CD90: 46 56 38 40 03 65 40 80 1B 25 46 03 03 0A 48 46  // FV8@.e@..%F...HF
    CDA0: 03 00 41 A3 0A 56 08 48 01 0A 28 08 00 03 A2 40  // ..A..V.H..(....@
    CDB0: 41 09 A5 40 07 03 32 43 40 4C 25 40 01 44 7C 00  // A..@..2C@L%@.D|.
    CDC0: 0F E2 40 44 1B 0D 40 01 1B 05 41 03 3E 65 40 00  // ..@D..@...A.>e@.
    CDD0: 49 65 00 01 7A 80 0A 40 02 BA 00 40 52 3E 02 24  // Ie..z..@...@R>.$
    CDE0: 00 0A 00 52 34 5B 1A 00 01 01 00 04 37 00 00 01  // ...R4[......7...
    CDF0: 05 E5 09 FC FD FC FC 01 05 E6 09 FD F8 FC FC 5B  // ...............[
    CE00: 31 02 01 01 00 08 37 00 00 0D 25 F4 16 08 07 25  // 1.....7...%....%
    CE10: 62 18 FE 56 00 41 03 39 41 01 09 25 41 0F 03 0A  // b..V.A.9A..%A...
    CE20: 40 42 66 FF 2D 0D 42 11 02 15 25 41 02 2D 0A 42  // @Bf.-.B...%A.-.B
    CE30: 41 03 0C 41 00 00 01 02 00 00 41 07 A5 01 00 FE  // A..A......A.....
    CE40: 54 08 01 00 01 0C FB 16 02 00 03 0A 42 40 03 05  // T...........B@..
    CE50: 40 50 C3 00 00 56 00 41 03 21 41 00 27 02 40 41  // @P...V.A.!A.'.@A
    CE60: 01 8A F7 16 40 01 25 F7 16 02 0D 25 F5 16 02 01  // ....@.%....%....
    CE70: A9 F9 16 01 4B 25 01 01 49 7F 00 54 30 F9 16 01  // ....K%..I..T0...
    CE80: 0D F9 16 00 31 2B A5 F9 16 01 4B 25 01 02 44 96  // ....1+....K%..D.
    CE90: 00 2B A5 F9 16 01 56 00 41 03 71 41 01 0F E5 41  // .+....V.A.qA...A
    CEA0: 80 01 02 FA 16 41 03 69 41 00 2D A5 41 01 01 02  // .....A.iA.-.A...
    CEB0: FA 16 41 4B 25 01 02 44 C6 00 56 28 41 2D A5 41  // ..AK%..D..V(A-.A
    CEC0: 01 01 02 FA 16 41 4B 25 01 01 44 E7 00 03 71 41  // .....AK%..D...qA
    CED0: 00 2D A5 41 01 01 02 FA 16 41 03 79 41 00 2D A5  // .-.A.....A.yA.-.
    CEE0: 41 01 01 02 FA 16 41 0D 25 F4 16 01 03 A5 41 01  // A.....A.%.....A.
    CEF0: 43 BA 01 03 29 40 01 03 65 40 01 03 99 40 00 56  // C...)@..e@...@.V
    CF00: 00 41 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02  // .A.qA..eA...A...
    CF10: FA 16 41 01 A5 F9 16 04 3D 65 01 04 47 28 01 01  // ..A.....=e..G(..
    CF20: 0D F9 16 01 13 43 57 01 01 A2 F9 16 40 01 0D F9  // .....CW.....@...
    CF30: 16 01 31 43 57 01 07 65 F9 16 EF 01 A5 F9 16 03  // ..1CW..e........
    CF40: 3E 25 40 04 46 57 01 01 A2 F9 16 40 31 A5 F9 16  // >%@.FW.....@1...
    CF50: 01 5C 65 F9 16 FD 20 0D 25 F4 16 01 03 A5 41 00  // .\e... .%.....A.
    CF60: 43 BA 01 03 05 41 01 00 00 80 03 AA 41 40 01 02  // C....A......A@..
    CF70: FA 16 41 3D 65 01 01 49 82 01 02 A8 00 FA 16 43  // ..A=e..I.......C
    CF80: F9 01 56 00 41 03 1A 41 40 3B 02 41 03 28 41 FA  // ..V.A..A@;.A.(A.
    CF90: 16 03 68 41 FA 16 03 A8 41 FA 16 03 E8 41 FA 16  // ..hA....A....A..
    CFA0: 04 02 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04  // ...AV(@-.@..>%@.
    CFB0: 47 F9 01 33 25 40 04 43 36 01 02 65 00 02 03 0D  // G..3%@.C6..e....
    CFC0: 41 64 00 33 0D 41 01 00 3E 0D 41 00 00 44 F9 01  // Ad.3.A..>.A..D..
    CFD0: 51 64 4A 25 F6 16 10 44 C3 01 4A 65 F6 16 06 49  // QdJ%...D..Je...I
    CFE0: F9 01 02 65 00 01 0D 25 F5 16 02 3E A5 41 00 44  // ...e...%...>.A.D
    CFF0: 63 01 4B 25 01 01 44 F3 00 0D 25 F5 16 02 01 25  // c.K%..D...%....%
    D000: F4 16 02 51 01 54 00 F4 16 54 00 FB 16 5B 7A 20  // ...Q.T...T...[z 
    D010: 00 68 48 01 00 6C 48 03 02 70 48 05 04 74 48 42  // .hH..lH..pH..tHB
    D020: 41 78 48 49 48 7C 48 4B 4A 98 48 29 28 80 48 4D  // AxHIH|HKJ.H)(.HM
    D030: 4C 00 5F 00 02 02 00 04 37 00 00 3D 65 00 01 44  // L._.....7..=e..D
    D040: 54 00 55 30 00 3D 25 00 06 46 50 00 32 25 00 01  // T.U0.=%..FP.2%..
    D050: 20 25 00 08 56 08 48 03 22 48 40 0D A5 99 18 01  //  %..V.H."H@.....
    D060: 02 A0 00 98 18 08 A5 00 03 4A 25 98 18 02 44 4A  // .........J%...DJ
    D070: 00 5C 0D 99 18 FF FE 01 00 43 50 00 0D 0D 99 18  // .\.......CP.....
    D080: 01 01 3A 00 00 5B 0D 65 CF 05 08 0D 25 80 01 01  // ..:..[.e....%...
    D090: 5B 00 82 00 01 02 00 00 66 FF 2D 0D 42 3A 00 02  // [.......f.-.B:..
    D0A0: 25 00 32 02 0D 01 01 01 02 E5 01 07 02 A4 01 00  // %.2.............
    D0B0: 00 02 4C 00 01 00 3D 65 00 FF 44 35 00 52 36 2D  // ..L...=e..D5.R6-
    D0C0: 0D 42 02 00 43 1F 00 5B 7A 49 00 02 98 4A 38 4B  // .B..C..[zI...J8K
    D0D0: 13 4D 17 4F 04 50 3C 51 28 52 46 53 36 54 50 55  // .M.O.P<Q(RFS6TPU
    D0E0: 43 56 5A 57 51 58 5D 59 5E 5A 5F 5B 6C 5C 61 5D  // CVZWQX]Y^Z_[l\a]
    D0F0: 79 5E 64 5F 87 4A 18 03 07 05 46 07 66 13 00 08  // y^d_.J....F.f...
    D100: 00 14 00 11 00 12 00 19 64 21 0A BF 00 30 02 16  // ........d!...0..
    D110: ED 04 08 FF 0A 00 01 01 00 04 55 00 00 5B 3C 00  // ..........U..[<.
    D120: 01 01 00 00 55 00 00 55 00 01 01 05 91 0A 03 00  // ....U..U........
    D130: 00 00 02 38 00 92 0A 02 21 01 00 08 25 00 0F 08  // ...8....!...%...
    D140: 25 01 F0 20 05 00 20 4E 00 00 02 02 00 40 20 05  // %.. .. N.....@ .
    D150: 01 E2 04 00 00 02 02 01 40 5B AF 01 01 06 04 18  // ........@[......
    D160: 03 05 46 00 51 25 02 3D E5 00 01 49 F3 00 55 38  // ..F.Q%.=...I..U8
    D170: 00 66 08 03 24 41 04 00 2D 0D 42 08 00 55 00 02  // .f..$A..-.B..U..
    D180: 3D 04 00 00 00 47 42 00 2C A5 02 01 2D 0D 42 0C  // =....GB.,...-.B.
    D190: 00 3D A2 02 41 45 26 00 55 00 01 5B 02 24 02 05  // .=..AE&.U..[.$..
    D1A0: 00 02 64 02 04 00 03 01 46 00 56 00 40 03 21 40  // ..d.....F.V.@.!@
    D1B0: 02 6F 02 46 40 7C 05 46 00 40 00 00 7E 05 40 C4  // .o.F@|.F.@..~.@.
    D1C0: 09 00 00 02 02 01 40 02 E5 02 01 7B 05 01 32 00  // ......@....{..2.
    D1D0: 00 00 7E 05 40 10 27 00 00 7C 05 40 4E 0C 00 00  // ..~.@.'..|.@N...
    D1E0: 7E 05 40 40 4B 4C 00 02 0A 05 40 21 05 40 40 4B  // ~.@@KL....@!.@@K
    D1F0: 4C 00 27 05 40 4E 0C 00 00 02 01 03 01 32 02 03  // L.'.@N.......2..
    D200: 40 21 05 46 D0 07 00 00 27 05 40 10 27 00 00 03  // @!.F....'.@.'...
    D210: 02 00 46 33 02 00 40 27 05 00 10 27 00 00 3E 0C  // ..F3..@'...'..>.
    D220: 40 06 00 48 D1 00 03 0C 40 06 00 55 00 04 02 8A  // @..H....@..U....
    D230: 04 40 03 01 40 01 33 01 40 04 21 05 40 32 00 00  // .@..@.3.@.!.@2..
    D240: 00 27 05 40 50 C3 00 00 02 8A 05 40 5B 55 38 00  // .'.@P......@[U8.
    D250: 03 05 40 00 32 00 00 3D 05 00 00 00 00 00 44 3C  // ..@.2..=......D<
    D260: 01 03 02 40 46 2D 01 40 00 33 05 40 01 00 00 00  // ...@F-.@.3.@....
    D270: 27 01 40 00 3E 05 40 9C 18 00 00 47 2B 01 03 05  // '.@.>.@....G+...
    D280: 40 00 32 00 00 3E 05 40 C8 00 00 00 46 3C 01 03  // @.2..>.@....F<..
    D290: 05 40 C8 00 00 00 66 FF 2D 0D 42 8F 01 3E 0C 40  // .@....f.-.B..>.@
    D2A0: 02 00 47 53 01 2D 0D 42 08 00 43 43 01 33 0C 40  // ..GS.-.B..CC.3.@
    D2B0: 00 00 2D 0C 40 06 00 33 0D 40 01 00 27 0C 40 06  // ..-.@..3.@..'.@.
    D2C0: 00 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00 21  // .-.@.....@3.@..!
    D2D0: 0C 40 06 00 2D 0C 40 00 00 27 02 46 40 02 0A 00  // .@..-.@..'.F@...
    D2E0: 40 02 B2 00 40 5B 7A 20 00 C8 00 40 06 08 00 19  // @...@[z ...@....
    D2F0: 00 40 06 80 0C 40 00 32 00 80 0C 38 18 60 00 64  // .@...@.2...8.`.d
    D300: 00 00 32 00 32 7F 00 64 00 00 07 00 02 01 00 00  // ..2.2..d........
    D310: 5B 00 70 01 02 01 08 04 37 00 00 66 1C 2D 0C 42  // [.p.....7..f.-.B
    D320: 06 00 3D E5 00 02 44 4B 00 3D E5 00 03 44 F7 00  // ..=...DK.=...D..
    D330: 03 38 00 2F 0A 09 25 00 20 02 01 01 00 02 F0 01  // .8./..%. .......
    D340: CD 05 52 12 01 08 AB 0A 81 0A 01 18 83 0A 81 0A  // ..R.............
    D350: 5C E2 2F 0A DF 00 5C E2 30 0A DF 00 5B 02 F0 01  // \./...\.0...[...
    D360: CD 05 0E E5 01 80 52 12 02 01 01 00 02 E4 01 2C  // ......R........,
    D370: 00 52 26 01 39 DD 09 01 02 EC 01 2C 00 52 26 01  // .R&.9......,.R&.
    D380: 79 DD 09 01 02 F4 01 2C 00 52 26 01 B9 DD 09 01  // y......,.R&.....
    D390: 02 FC 01 2C 00 52 26 01 F9 DD 09 01 02 E4 01 30  // ...,.R&........0
    D3A0: 00 52 26 01 39 DE 09 01 02 EC 01 30 00 52 26 01  // .R&.9......0.R&.
    D3B0: 79 DE 09 01 02 F4 01 30 00 52 26 01 B9 DE 09 01  // y......0.R&.....
    D3C0: 02 FC 01 30 00 52 26 01 F9 DE 09 01 31 05 DE 09  // ...0.R&.....1...
    D3D0: 01 01 01 00 02 E5 01 08 52 26 3D E5 01 04 46 D3  // ........R&=...F.
    D3E0: 00 02 E5 01 04 3D E5 01 08 46 E1 00 32 E5 01 04  // .....=...F..2...
    D3F0: 43 F0 00 1A 3D 01 01 3D E5 01 12 45 F0 00 02 E5  // C...=..=...E....
    D400: 01 12 5C 39 02 0A E0 01 5B 52 3B 03 05 00 10 00  // ..\9....[R;.....
    D410: 00 00 03 05 01 2D 00 00 00 55 38 00 3D 01 00 01  // .....-...U8.=...
    D420: 45 30 01 03 0D 00 18 00 03 05 01 2E 00 00 00 3D  // E0.............=
    D430: 01 00 02 45 30 01 03 0D 00 20 00 03 05 01 2F 00  // ...E0.... ..../.
    D440: 00 00 02 01 01 00 02 F0 01 CD 05 0E E5 01 80 52  // ...............R
    D450: 12 56 00 41 01 02 91 0A 01 01 04 92 0A 0C 00 01  // .V.A............
    D460: 02 91 0A 00 01 04 92 0A 10 00 2D 05 00 01 00 00  // ..........-.....
    D470: 00 2D 25 41 01 2D 0D 42 04 00 3E 25 41 07 45 4D  // .-%A.-.B..>%A.EM
    D480: 01 5B 00 01 01 02 04 04 37 00 00 3D 25 00 FF 49  // .[......7..=%..I
    D490: EC 00 02 20 00 80 0A 4A 25 80 0A 08 49 26 00 08  // ... ...J%...I&..
    D4A0: 25 00 10 07 25 80 0A EF 01 05 32 0A 08 00 00 00  // %...%.....2.....
    D4B0: 01 05 32 0A 10 00 00 00 01 05 82 00 10 00 60 C0  // ..2...........`.
    D4C0: 01 05 83 00 00 80 03 00 01 05 82 00 14 00 60 C0  // ..............`.
    D4D0: 03 00 40 83 00 66 18 3E 04 40 04 00 49 EB 00 03  // ..@..f.>.@..I...
    D4E0: 00 40 83 00 03 00 00 83 00 03 00 41 83 00 3E 05  // .@.........A..>.
    D4F0: 40 00 00 00 00 44 EB 00 01 00 91 0A 83 00 01 00  // @....D..........
    D500: 92 0A 83 00 33 0D 40 01 00 3E 0D 40 00 00 49 76  // ....3.@..>.@..Iv
    D510: 00 01 05 64 C0 0C 02 00 00 54 00 65 C0 01 05 66  // ...d.....T.e...f
    D520: C0 CC 28 00 00 54 00 67 C0 15 05 00 02 2D 05 00  // ..(..T.g.....-..
    D530: 00 00 00 7C 01 02 E8 C0 00 51 32 4A E5 A0 21 80  // ...|.....Q2J..!.
    D540: 49 B9 00 01 05 32 0A 08 00 00 00 01 05 32 0A 04  // I....2.......2..
    D550: 00 00 00 01 05 32 0A 01 00 00 00 51 32 50 02 4A  // .....2.....Q2P.J
    D560: 25 80 0A 80 44 DD 00 5C 21 80 0A EF 00 5B 01 65  // %...D..\!....[.e
    D570: E7 0A FF 01 21 E7 0A 00 02 05 01 04 00 00 00 52  // ....!..........R
    D580: 1F 5B 8C 00 01 04 00 00 03 05 40 7C 01 00 00 3D  // .[........@|...=
    D590: A5 00 00 44 15 00 5B 03 00 46 20 49 7C 02 40 46  // ...D..[..F I|.@F
    D5A0: 7E 05 40 A0 86 01 00 03 00 41 23 49 09 05 41 03  // ~.@......A#I..A.
    D5B0: 00 00 00 6F 02 40 41 7C 05 40 45 0C 00 00 7E 05  // ...o.@A|.@E...~.
    D5C0: 40 40 4B 4C 00 3E 05 40 00 00 00 00 49 51 00 03  // @@KL.>.@....IQ..
    D5D0: 25 40 01 01 8A 22 49 40 7C 05 40 40 4B 4C 00 7E  // %@..."I@|.@@KL.~
    D5E0: 05 40 45 0C 00 00 03 00 41 23 49 09 05 41 03 00  // .@E.....A#I..A..
    D5F0: 00 00 75 02 40 41 03 00 46 20 49 33 02 46 40 01  // ..u.@A..F I3.F@.
    D600: 02 21 49 46 51 01 0D 65 23 49 01 51 01 5B 31 00  // .!IFQ..e#I.Q.[1.
    D610: 01 03 04 00 37 00 00 55 38 00 26 05 00 E2 04 00  // ....7..U8.&.....
    D620: 00 01 E2 9A 0A 40 21 05 41 64 00 00 00 27 05 40  // .....@!.Ad...'.@
    D630: 09 3D 00 00 15 25 40 04 5C A2 99 0A 8F 40 5B 00  // .=...%@.\....@[.
    D640: 10 00 01 03 00 08 37 00 00 55 18 00 55 08 01 5B  // ......7..U..U..[
    D650: C3 01 01 04 00 04 37 00 00 3D 65 00 08 49 23 00  // ......7..=e..I#.
    D660: 02 05 01 38 00 06 0A 52 45 08 0D 01 FF 03 02 89  // ...8...RE.......
    D670: 00 01 5B 3D 65 00 03 44 70 01 02 01 01 00 02 65  // ..[=e..Dp......e
    D680: 01 07 52 50 3D 05 02 00 00 00 00 44 0B 01 37 00  // ..RP=......D..7.
    D690: 00 01 05 82 00 7C 02 20 C0 01 05 82 00 94 02 20  // .....|. ....... 
    D6A0: C0 4A A5 83 00 06 49 49 00 01 05 82 00 7C 02 20  // .J....II.....|. 
    D6B0: C0 0D 65 83 00 04 01 05 82 00 7C 02 20 C0 03 00  // ..e.......|. ...
    D6C0: 46 83 00 37 00 00 01 05 82 00 80 02 20 C0 5E 65  // F..7........ .^e
    D6D0: 46 FC 01 3D 25 00 01 44 96 00 09 65 46 FC 01 05  // F..=%..D...eF...
    D6E0: 82 00 84 02 20 C0 3C 0C 83 00 04 00 44 C6 00 07  // .... .<.....D...
    D6F0: 0D 83 00 9F FF 51 3C 03 0C 41 04 00 4C 25 41 20  // .....Q<..A..L%A 
    D700: 49 BE 00 0F 25 41 20 01 0A 83 00 41 51 3C 01 0C  // I...%A ....AQ<..
    D710: 83 00 04 00 51 3C 56 00 40 03 19 40 00 21 05 40  // ....Q<V.@..@.!.@
    D720: 64 00 00 00 03 05 41 78 5D 02 00 33 02 41 40 27  // d.....Ax]..3.A@'
    D730: 05 41 71 02 00 00 03 22 46 40 01 05 82 00 7C 02  // .Aq...."F@....|.
    D740: 20 C0 01 02 83 00 46 01 05 82 00 94 02 20 C0 4A  //  .....F...... .J
    D750: A5 83 00 02 49 F7 00 37 00 00 5B 02 01 01 00 52  // ....I..7..[....R
    D760: 50 3D 05 02 00 00 00 00 44 6C 01 4B E5 02 40 44  // P=......Dl.K..@D
    D770: 2F 01 01 05 82 00 F8 01 60 C0 0D 25 83 00 1F 4B  // /.......`..%...K
    D780: 25 02 80 44 3B 01 0D A5 90 48 01 03 05 41 FF FF  // %..D;....H...A..
    D790: FF FF 69 01 41 02 01 05 82 00 E4 01 60 C0 09 00  // ..i.A.......`...
    D7A0: 41 83 00 0F 01 41 01 01 02 83 00 41 01 05 82 00  // A....A.....A....
    D7B0: F4 01 60 C0 0D 01 83 00 02 51 32 5B 55 00 00 5B  // ..`......Q2[U..[
    D7C0: 02 01 01 00 52 50 3D 05 02 00 00 00 00 44 6C 01  // ....RP=......Dl.
    D7D0: 02 E4 00 05 00 02 A4 00 06 00 02 0D 02 01 01 03  // ................
    D7E0: 24 41 08 00 4C 25 41 01 44 9F 01 02 65 02 02 02  // $A..L%A.D...e...
    D7F0: 25 01 32 02 64 01 0C 00 02 8C 01 0E 00 3D 65 01  // %.2.d........=e.
    D800: FF 44 C2 01 02 99 02 00 52 36 2D 0D 42 04 00 43  // .D......R6-.B..C
    D810: A3 01 5B 00 83 00 01 03 04 00 37 00 00 3D 65 00  // ..[.......7..=e.
    D820: 09 44 80 00 03 0A 00 42 66 20 03 0C 41 00 00 2D  // .D.....Bf ..A..-
    D830: 0A 41 42 2D 0D 42 04 00 3E 0A 42 41 44 7C 00 3D  // .AB-.B..>.BAD|.=
    D840: 0C 00 00 00 44 3B 00 2D 0C 42 02 00 43 24 00 02  // ....D;.-.B..C$..
    D850: 0A 01 42 3D 65 00 03 44 7B 00 3D 65 00 07 44 7B  // ..B=e..D{.=e..D{
    D860: 00 03 E4 41 05 00 02 04 01 08 00 3E E5 41 00 44  // ...A.......>.A.D
    D870: 7C 00 3D 8C 00 10 00 47 72 00 2D 0D 42 06 00 33  // |.=....Gr.-.B..3
    D880: E5 41 01 43 57 00 02 04 00 0C 00 03 0A 42 00 5B  // .A.CW........B.[
    D890: 55 00 01 5B 52 1B 5B 00 67 02 01 05 00 00 37 00  // U..[R.[.g.....7.
    D8A0: 00 03 20 46 CF 05 0E 25 00 60 52 14 08 25 00 0F  // .. F...%.`R..%..
    D8B0: 42 29 00 63 0F 58 00 63 11 4E 01 63 12 CC 01 63  // B).c.X.c.N.c...c
    D8C0: 01 24 02 63 00 4D 02 63 08 18 01 63 09 F9 00 63  // .$.c.M.c...c...c
    D8D0: 0A 00 01 63 13 08 01 63 14 10 01 63 0B 20 01 63  // ...c...c...c. .c
    D8E0: 0C 14 02 63 0D 28 01 63 10 41 01 5A 5A 43 F5 00  // ...c.(.c.A.ZZC..
    D8F0: 3D A5 00 02 44 E3 00 54 00 72 4A 3D A5 00 00 44  // =...D..T.rJ=...D
    D900: 71 00 3D A5 00 05 49 EB 00 54 08 A1 4A 3D 25 02  // q.=...I..T..J=%.
    D910: 00 49 80 00 02 25 02 02 32 25 02 01 01 E1 A1 4A  // .I...%..2%.....J
    D920: 02 4A 25 A4 4A 01 49 C6 00 7B 05 01 00 80 00 00  // .J%.J.I..{......
    D930: 7E 05 40 8C 0A 00 00 56 00 46 03 29 46 02 27 02  // ~.@....V.F.)F.'.
    D940: 40 46 07 65 A8 4A FE 01 05 A9 4A 00 80 00 00 01  // @F.e.J....J.....
    D950: 02 AA 4A 40 0D E5 AB 4A 10 0D 65 00 4A 04 02 20  // ..J@...J..e.J.. 
    D960: 00 00 4A 08 25 00 07 0E 25 00 00 52 14 14 3D 00  // ..J.%...%..R..=.
    D970: 04 5C B9 9C 1B 8F 00 3A 00 00 5B 01 05 72 4A 01  // .\.....:..[..rJ.
    D980: 00 00 00 07 E5 00 4A 2F 0D 65 00 4A 04 3A 00 00  // ......J/.e.J.:..
    D990: 5B 54 20 B0 4A 43 F5 00 01 25 B0 4A 01 43 F5 00  // [T .JC...%.J.C..
    D9A0: 01 25 B0 4A 02 43 F5 00 01 25 B0 4A 03 43 F5 00  // .%.J.C...%.J.C..
    D9B0: 07 25 A0 4A EF 43 F5 00 0D 25 A0 4A 10 43 F5 00  // .%.J.C...%.J.C..
    D9C0: 0D 65 A8 4A 01 51 0A 07 25 A5 4A FE 51 0A 01 0D  // .e.J.Q..%.J.Q...
    D9D0: A4 4A 01 02 51 C8 43 F5 00 0D 25 B6 4A 10 01 31  // .J..Q.C...%.J..1
    D9E0: A7 4A 00 43 F5 00 01 0D 03 4A 1F 00 01 69 47 4A  // .J.C.....J...iGJ
    D9F0: 02 4C 25 46 10 49 77 01 3D A5 00 03 49 77 01 4A  // .L%F.Iw.=...Iw.J
    DA00: 25 0D 4A 10 49 77 01 01 A5 47 4A 02 43 7C 01 01  // %.J.Iw...GJ.C|..
    DA10: B1 47 4A 00 3D 25 02 00 44 91 01 32 25 02 01 14  // .GJ.=%..D..2%...
    DA20: 25 02 04 5C E1 47 4A 8F 02 3D E5 00 04 47 A0 01  // %..\.GJ..=...G..
    DA30: 0D 25 47 4A 01 43 A5 01 07 25 47 4A FE 3D A5 00  // .%GJ.C...%GJ.=..
    DA40: 05 44 B3 01 3D A5 00 00 49 C4 01 02 A5 00 00 03  // .D..=...I.......
    DA50: 39 40 00 33 25 40 01 01 22 A3 4A 40 02 E0 02 48  // 9@.3%@..".J@...H
    DA60: 4A 43 F5 00 02 E0 02 48 4A 4B E5 02 01 44 F5 00  // JC.....HJK...D..
    DA70: 02 B0 00 47 4A 02 E5 00 04 4A 25 47 4A 01 44 ED  // ...GJ....J%GJ.D.
    DA80: 01 02 E5 00 08 3D A5 00 02 44 FB 01 3D A5 00 03  // .....=...D..=...
    DA90: 49 04 02 54 00 48 4A 50 02 43 F5 00 02 A5 00 00  // I..T.HJP.C......
    DAA0: 03 31 43 00 4A 62 47 4A 44 44 F5 00 54 08 A4 4A  // .1C.JbGJDD..T..J
    DAB0: 51 C8 0D 25 A5 4A 01 51 32 43 F5 00 0D 25 48 4A  // Q..%.J.Q2C...%HJ
    DAC0: 01 3D A5 00 00 44 39 02 01 0D 79 4A 0F 01 43 F5  // .=...D9...yJ..C.
    DAD0: 00 03 39 43 00 03 02 40 44 33 25 40 01 01 0A 79  // ..9C...@D3%@...y
    DAE0: 4A 40 43 F5 00 54 00 79 4A 07 25 48 4A FE 07 0D  // J@C..T.yJ.%HJ...
    DAF0: 47 4A FE 80 54 20 A0 4A 54 20 B0 4A 43 F5 00 00  // GJ..T .JT .JC...
    DB00: 29 00 01 01 00 00 37 00 00 66 1C 2D 0D 42 14 00  // ).....7..f.-.B..
    DB10: 03 30 40 CD 05 3E 25 40 00 44 28 00 33 25 40 01  // .0@..>%@.D(.3%@.
    DB20: 2D 0C 42 04 00 43 15 00 5B 00 46 01 01 06 00 00  // -.B..C..[.F.....
    DB30: 37 00 00 42 29 00 63 07 24 01 63 01 25 00 63 00  // 7..B).c.$.c.%.c.
    DB40: C0 00 63 0B 27 01 63 04 2C 01 5A 5A 43 3F 01 02  // ..c.'.c.,.ZZC?..
    DB50: 65 00 11 52 04 4B E5 02 01 49 20 01 02 65 00 0A  // e..R.K...I ..e..
    DB60: 55 08 02 52 4D 3D E5 00 04 47 50 00 68 25 00 01  // U..RM=...GP.h%..
    DB70: 02 25 02 01 52 4D 68 25 00 01 3D A5 00 00 49 82  // .%..RMh%..=...I.
    DB80: 00 20 05 01 64 00 00 00 02 05 01 14 1E 00 02 2C  // . ..d..........,
    DB90: 21 01 00 02 01 02 00 02 02 00 40 52 0C 26 05 00  // !.........@R.&..
    DBA0: 64 00 00 00 02 02 01 40 02 01 00 02 02 65 00 01  // d......@.....e..
    DBB0: 55 08 02 52 4D 3D E5 00 04 47 A0 00 68 25 00 01  // U..RM=...G..h%..
    DBC0: 02 25 02 01 52 4D 68 25 00 01 51 05 02 65 00 01  // .%..RMh%..Q..e..
    DBD0: 52 04 51 0A 02 65 00 09 52 4D 3D E5 00 04 47 20  // R.Q..e..RM=...G 
    DBE0: 01 68 25 00 01 52 4D 43 20 01 02 65 00 12 52 04  // .h%..RMC ..e..R.
    DBF0: 4B E5 02 01 44 20 01 02 65 00 08 52 4D 3D E5 00  // K...D ..e..RM=..
    DC00: 04 47 E4 00 68 25 00 01 52 4D 68 25 00 01 02 65  // .G..h%..RMh%...e
    DC10: 00 00 52 04 02 65 00 00 52 4D 3D E5 00 04 47 01  // ..R..e..RM=...G.
    DC20: 01 68 25 00 01 52 4D 68 25 00 01 3D A5 00 00 49  // .h%..RMh%..=...I
    DC30: 20 01 02 01 02 00 02 05 01 14 00 00 00 2C 21 01  //  ............,!.
    DC40: 00 55 00 00 52 0C 02 01 00 02 3A 00 00 5B 43 20  // .U..R.....:..[C 
    DC50: 01 52 4D 43 20 01 66 06 02 29 00 00 02 68 00 CB  // .RMC .f..)...h..
    DC60: 05 02 8C 00 32 00 52 33 5B 02 29 00 00 52 33 5B  // ....2.R3[.)..R3[
    DC70: 38 03 02 01 00 00 37 00 00 0E 25 00 20 52 14 08  // 8.....7...%. R..
    DC80: 25 00 0F 42 29 00 63 07 35 00 63 0A 3D 00 63 01  // %..B).c.5.c.=.c.
    DC90: 21 01 63 00 7B 01 63 09 BB 01 63 08 E9 01 63 0B  // !.c.{.c...c...c.
    DCA0: 01 02 5A 5A 5B 0D 65 C4 48 08 43 AD 02 03 0A 46  // ..ZZ[.e.H.C....F
    DCB0: 48 66 FF 2D 0D 42 1A 03 56 00 40 20 25 00 05 2D  // Hf.-.B..V.@ %..-
    DCC0: 0A 42 40 20 25 00 02 03 0A 48 40 01 04 06 48 00  // .B@ %....H@...H.
    DCD0: 00 01 64 05 48 04 00 07 E5 05 48 FC 07 A5 05 48  // ..d.H.....H....H
    DCE0: 8F 03 0A 48 46 56 00 41 3D E5 00 04 47 96 00 03  // ...HFV.A=...G...
    DCF0: 05 41 00 80 01 01 4B 25 02 01 44 96 00 09 4D 41  // .A....K%..D...MA
    DD00: 7F FF 03 E5 41 02 5C FA D3 48 FC 41 5C 52 C5 48  // ....A.\..H.A\R.H
    DD10: 7F FE 41 3D A5 00 00 49 CC 00 07 A5 C1 48 7F 66  // ..A=...I.....H.f
    DD20: FF 2D 0D 42 DE 02 2D 0D 42 06 00 56 00 41 3D A5  // .-.B..-.B..V.A=.
    DD30: 02 14 49 49 02 03 25 41 20 43 49 02 0D A5 C1 48  // ..II..%A CI....H
    DD40: 80 66 FF 2D 0D 42 B6 02 03 04 40 00 00 3E 05 40  // .f.-.B....@..>.@
    DD50: 00 00 00 00 44 AD 02 03 21 43 00 03 E2 41 44 4C  // ....D...!C...ADL
    DD60: E4 41 05 00 44 07 01 3D A4 00 04 00 49 07 01 3D  // .A..D..=....I..=
    DD70: 04 01 00 00 47 0F 01 2D 0D 42 0C 00 43 D8 00 03  // ....G..-.B..C...
    DD80: 04 40 06 00 03 24 41 0A 00 03 64 41 0B 00 43 52  // .@...$A...dA..CR
    DD90: 02 07 65 C4 48 F7 03 0A 46 48 56 00 41 3D E5 00  // ..e.H...FHV.A=..
    DDA0: 04 47 3C 01 07 25 E2 48 F9 43 42 01 5C 25 E2 48  // .G<..%.H.CB.\%.H
    DDB0: F9 02 4A 65 E0 48 01 44 42 01 07 25 E0 48 F8 4A  // ..Je.H.DB..%.H.J
    DDC0: 65 E0 48 01 44 4F 01 2D E5 41 01 2D 0D 48 10 00  // e.H.DO.-.A.-.H..
    DDD0: 3E E5 41 04 45 2D 01 03 0A 48 46 0D 25 D1 48 02  // >.A.E-...HF.%.H.
    DDE0: 4A 25 D1 48 04 44 70 01 43 AD 02 07 25 D1 48 FD  // J%.H.Dp.C...%.H.
    DDF0: 4A 25 D1 48 04 49 80 01 0D 65 C4 48 08 56 00 41  // J%.H.I...e.H.V.A
    DE00: 4A 65 E0 48 01 44 90 01 5C 25 E0 48 F8 04 51 02  // Je.H.D..\%.H..Q.
    DE10: 4A 65 E0 48 01 44 A0 01 2D A5 41 01 2D 0D 48 10  // Je.H.D..-.A.-.H.
    DE20: 00 3E A5 41 04 45 90 01 43 AD 02 03 0A 46 48 56  // .>.A.E..C....FHV
    DE30: 08 48 20 25 00 02 03 22 48 40 0D 25 05 48 01 0D  // .H %..."H@.%.H..
    DE40: E5 06 48 10 03 0A 48 46 0D A5 D3 48 01 51 14 0D  // ..H...HF...H.Q..
    DE50: 25 D3 48 01 51 14 43 AD 02 07 A5 D3 48 FE 56 00  // %.H.Q.C.....H.V.
    DE60: 40 20 25 00 02 03 0A 48 40 07 E5 06 48 EF 43 AD  // @ %....H@...H.C.
    DE70: 02 08 A5 00 1B 66 FF 2D 0D 42 DE 02 03 21 43 00  // .....f.-.B...!C.
    DE80: 03 A2 40 44 03 0C 40 02 00 4C A4 40 00 00 49 29  // ..@D..@..L.@..I)
    DE90: 02 2D 0C 42 04 00 43 14 02 2D 0D 42 06 00 3D A4  // .-.B..C..-.B..=.
    DEA0: 00 00 00 44 49 02 03 24 41 00 00 3E 25 41 FF 44  // ...DI..$A..>%A.D
    DEB0: 49 02 2D 0A 42 40 43 2E 02 03 04 40 01 00 03 65  // I.-.B@C....@...e
    DEC0: 41 08 01 0A C3 48 40 01 05 DA 48 88 88 01 00 01  // A....H@...H.....
    DED0: F2 DB 48 40 01 BA E2 48 40 01 BA F2 48 40 01 BA  // ..H@...H@...H@..
    DEE0: 02 49 40 01 BA 12 49 40 01 25 E1 48 20 01 25 F1  // .I@...I@.%.H .%.
    DEF0: 48 20 01 25 01 49 20 01 25 11 49 20 01 2A E1 48  // H .%.I .%.I .*.H
    DF00: 41 01 2A F1 48 41 01 2A 01 49 41 01 2A 11 49 41  // A.*.HA.*.IA.*.IA
    DF10: 3D 65 00 0B 44 AD 02 5C A2 C8 48 DF 41 3A 00 00  // =e..D..\..H.A:..
    DF20: 5B 7A 84 00 0C 00 FF FF FF 00 02 3F 00 00 00 5F  // [z.........?..._
    DF30: 00 08 40 9C 00 00 03 3F 00 00 00 5F 00 08 FF FF  // ..@....?..._....
    DF40: FF 00 03 3F 00 00 2A 57 20 10 00 00 00 00 3F 00  // ...?..*W .....?.
    DF50: 05 00 39 00 00 4B 00 00 80 01 3A 00 00 80 02 1B  // ..9..K....:.....
    DF60: 00 00 80 03 00 00 00 80 08 34 25 00 80 09 1C 25  // .........4%....%
    DF70: 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00  // .........?....8.
    DF80: 9F 18 00 4A 00 9F FF 00 00 FF 03 02 01 00 01 03  // ...J............
    DF90: 02 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02  // ................
    DFA0: 01 00 01 03 02 01 00 01 4C 02 01 02 00 08 37 00  // ........L.....7.
    DFB0: 00 3D 0D 00 00 00 44 CE 01 56 00 41 03 21 41 01  // .=....D..V.A.!A.
    DFC0: 09 25 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D  // .%A...A...@Bf.-.
    DFD0: 42 34 02 2D 0A 42 41 03 0C 48 02 00 0D A5 68 48  // B4.-.BA..H....hH
    DFE0: 01 54 08 68 48 03 0C 48 00 00 03 F9 41 01 15 3D  // .T.hH..H....A..=
    DFF0: 41 04 5C BA 00 5C 8F 41 03 0A 42 40 4A 25 00 5C  // A.\..\.A..B@J%.\
    E000: 01 49 81 00 0D 0D 00 5C 01 01 0D 25 00 5C 10 4A  // .I.....\...%.\.J
    E010: 25 00 5C 20 44 67 00 07 25 00 5C EF 4A 25 00 5C  // %.\ Dg..%.\.J%.\
    E020: 20 49 74 00 0D 25 03 5C 40 56 00 41 03 09 41 00  //  It..%.\@V.A..A.
    E030: 3B 02 41 03 3B 41 00 1B 25 41 04 01 A2 01 5C 41  // ;.A.;A..%A....\A
    E040: 03 69 41 01 15 2D 41 04 01 2A 01 5C 41 56 00 40  // .iA..-A..*.\AV.@
    E050: 0F E5 40 80 03 73 40 00 01 02 06 5C 40 56 00 40  // ..@..s@....\@V.@
    E060: 03 6B 40 00 01 02 06 5C 40 03 63 40 00 01 02 06  // .k@....\@.c@....
    E070: 5C 40 03 7B 40 00 09 65 40 0F 01 02 06 5C 40 3E  // \@.{@..e@....\@>
    E080: 25 41 04 47 10 01 33 25 41 04 2D 05 46 04 00 00  // %A.G..3%A.-.F...
    E090: 00 03 63 40 00 01 02 06 5C 40 03 6B 40 00 01 02  // ..c@....\@.k@...
    E0A0: 06 5C 40 03 73 40 00 01 02 06 5C 40 03 7B 40 00  // .\@.s@....\@.{@.
    E0B0: 01 02 06 5C 40 43 D7 00 0D 25 03 5C 02 0D 25 01  // ...\@C...%.\..%.
    E0C0: 5C 01 03 29 40 01 21 25 40 0A 2D 25 40 32 4A 25  // \..)@.!%@.-%@2J%
    E0D0: 04 5C 01 49 42 01 51 0A 33 25 40 01 3E 25 40 00  // .\.IB.Q.3%@.>%@.
    E0E0: 49 26 01 02 65 01 01 43 CA 01 4A 05 04 5C F0 8F  // I&..e..C..J..\..
    E0F0: FF 00 44 54 01 02 65 01 02 43 CA 01 01 05 06 5C  // ..DT..e..C.....\
    E100: 01 00 00 80 03 00 40 06 5C 02 6A 01 40 02 B8 01  // ......@.\.j.@...
    E110: 04 5C 08 A5 01 1F 3D A5 01 00 46 7C 01 02 65 01  // .\....=...F|..e.
    E120: 03 43 CA 01 32 A5 01 01 3D 8D 00 00 00 44 CA 01  // .C..2...=....D..
    E130: 3D A5 01 00 44 CA 01 03 31 41 01 03 19 40 00 56  // =...D...1A...@.V
    E140: 18 40 3B 02 40 03 28 40 06 5C 03 68 40 06 5C 03  // .@;.@.(@.\.h@.\.
    E150: A8 40 06 5C 03 E8 40 06 5C 04 02 00 40 3E 25 41  // .@.\..@.\...@>%A
    E160: 04 47 CA 01 33 25 41 04 2D 05 46 04 00 00 00 43  // .G..3%A.-.F....C
    E170: 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34 02 03 0C 48  // ..:..[f.-.B4...H
    E180: 00 00 01 8D 08 5C 32 00 01 05 09 5C 00 1C 02 00  // .....\2....\....
    E190: 01 05 0A 5C 10 11 3D 12 2D 0D 42 04 00 2C 25 00  // ...\..=.-.B..,%.
    E1A0: 01 3D 25 00 06 49 D5 01 56 08 48 03 25 41 10 0D  // .=%..I..V.H.%A..
    E1B0: 65 97 48 40 07 65 97 48 BF 33 25 41 01 3E 25 41  // e.H@.e.H.3%A.>%A
    E1C0: 00 49 07 02 0D 25 3B 48 01 54 30 3B 48 0D 25 3C  // .I...%;H.T0;H.%<
    E1D0: 48 01 54 30 3C 48 51 32 5B 7A 18 00 00 00 00 00  // H.T0<HQ2[z......
    E1E0: 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00 10 00  // ....8...T...p...
    E1F0: 8C 00 14 00 5C 00 01 02 00 04 02 25 01 04 03 31  // ....\......%...1
    E200: 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42  // A...A....A.f.-.B
    E210: 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 68 48 FE  // P.-.BA..H....hH.
    E220: 01 0D 68 48 11 11 50 02 4A 0D 6B 48 01 00 49 41  // ..hH..P.J.kH..IA
    E230: 00 02 25 01 13 54 08 68 48 54 00 6A 48 3A 00 00  // ..%..T.hHT.jH:..
    E240: 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00 14 00  // [z..............
    E250: 9F 00 01 01 04 00 37 00 00 52 3E 55 00 00 02 E4  // ......7..R>U....
    E260: 00 16 00 66 1C 2D 0C 42 04 00 52 12 52 3E 01 0C  // ...f.-.B..R.R>..
    E270: D8 09 06 00 01 64 80 0A 1C 00 02 05 00 08 00 00  // .....d..........
    E280: 00 02 0C 01 08 00 52 1F 03 08 41 80 0A 09 0D 41  // ......R...A....A
    E290: 03 00 66 FF 2D 0D 42 9B 00 2D 0A 42 41 03 24 41  // ..f.-.B..-.BA.$A
    E2A0: 00 00 01 05 82 00 0C 00 20 C0 5C 0A 83 00 00 FC  // ........ .\.....
    E2B0: 41 02 05 00 30 75 00 03 52 3F 02 05 00 A0 86 01  // A...0u..R?......
    E2C0: 03 52 3F 02 05 00 48 E8 01 03 52 3F 02 05 00 30  // .R?...H...R?...0
    E2D0: 75 00 03 52 3F 02 05 00 A0 86 01 03 52 3F 02 05  // u..R?.......R?..
    E2E0: 00 98 AB 02 03 52 3F 5B 7A 04 00 18 10 08 04 00  // .....R?[z.......
    E2F0: 89 01 01 01 08 00 37 00 00 03 88 00 28 08 03 09  // ......7.....(...
    E300: 00 00 03 2A 41 00 03 22 43 41 01 22 28 08 44 5C  // ...*A.."CA."(.D\
    E310: 62 28 08 F8 41 42 22 00 63 01 39 00 63 08 7E 00  // b(..AB".c.9.c.~.
    E320: 63 04 E4 00 5A 5A 43 83 01 01 24 93 0A 00 00 01  // c...ZZC...$.....
    E330: 24 94 0A 01 00 01 04 A3 0A 02 00 01 04 A4 0A 06  // $...............
    E340: 00 01 04 A5 0A 0A 00 01 04 A6 0A 0E 00 01 04 A7  // ................
    E350: 0A 12 00 01 04 A8 0A 16 00 01 04 A9 0A 1A 00 01  // ................
    E360: 04 AA 0A 1E 00 2D 0D 42 22 00 43 78 01 5B 21 65  // .....-.B".Cx.[!e
    E370: 00 02 03 22 43 40 03 0A 41 44 37 02 00 4C 09 41  // ..."C@..AD7..L.A
    E380: 01 49 9C 00 54 20 00 00 54 30 00 00 15 0D 41 01  // .I..T ..T0....A.
    E390: 4C 09 41 01 49 AF 00 54 28 00 00 54 38 00 00 37  // L.A.I..T(..T8..7
    E3A0: 00 00 52 3E 03 24 40 16 00 21 25 40 04 55 00 00  // ..R>.$@..!%@.U..
    E3B0: 02 EA 00 00 2C E2 00 40 66 1C 03 0C 40 08 00 3E  // ....,..@f...@..>
    E3C0: 0D 40 00 00 44 DE 00 2D 0C 42 08 00 52 12 37 00  // .@..D..-.B..R.7.
    E3D0: 00 43 78 01 01 05 91 0A 00 00 00 00 3C 0D 92 0A  // .Cx.........<...
    E3E0: 00 00 44 78 01 3C 25 E7 0A 07 49 16 01 01 05 91  // ..Dx.<%...I.....
    E3F0: 0A 0E 00 00 00 03 00 01 92 0A 5C 05 92 0A 00 FF  // ..........\.....
    E400: 00 FF 0F 00 FF 00 01 05 32 0A 05 00 00 00 51 0A  // ........2.....Q.
    E410: 01 05 32 0A 01 00 00 00 03 00 41 E7 0A 3E 62 41  // ..2.......A..>bA
    E420: 41 49 28 01 51 0A 3E 25 41 00 44 51 01 3E 25 41  // AI(.Q.>%A.DQ.>%A
    E430: 07 49 78 01 01 05 91 0A 0E 00 00 00 01 02 92 0A  // .Ix.............
    E440: 01 01 05 91 0A 03 00 00 00 03 38 41 92 0A 15 25  // ..........8A...%
    E450: 41 04 3C E2 9A 0A 41 45 78 01 4A E5 99 0A 04 44  // A.<...AEx.J....D
    E460: 78 01 5C 25 F3 09 FE 22 2D 65 00 01 3E 65 00 04  // x.\%..."-e..>e..
    E470: 45 12 00 01 1A 28 08 00 5B 00 D1 00 01 01 08 00  // E....(..[.......
    E480: 37 00 00 66 FF 2D 0D 42 BD 00 56 00 41 03 21 41  // 7..f.-.B..V.A.!A
    E490: 00 15 0D 41 02 2D 0A 42 41 03 04 01 00 00 66 FF  // ...A.-.BA.....f.
    E4A0: 2D 0D 42 C9 00 03 05 00 00 00 00 40 56 00 40 54  // -.B........@V.@T
    E4B0: 00 00 00 03 4C 00 00 00 01 02 00 C2 00 01 0A 00  // ....L...........
    E4C0: 00 01 03 98 41 01 00 56 08 41 03 22 43 41 4C 8A  // ....A..V.A."CAL.
    E4D0: 41 44 49 5F 00 2D 65 41 01 2D 25 41 01 3E 39 41  // ADI_.-eA.-%A.>9A
    E4E0: 00 45 50 00 3E 71 41 00 47 A1 00 33 71 41 00 03  // .EP.>qA.G..3qA..
    E4F0: 39 41 00 33 25 41 01 03 22 43 41 4C 8A 41 44 49  // 9A.3%A.."CAL.ADI
    E500: 79 00 0F 8A 41 44 33 65 41 01 3E 65 41 00 49 79  // y...AD3eA.>eA.Iy
    E510: 00 01 1A 00 00 01 01 9A 01 00 41 2D 0D 42 02 00  // ..........A-.B..
    E520: 2D 25 40 01 3E 25 40 04 49 39 00 01 05 00 C2 00  // -%@.>%@.I9......
    E530: 00 00 E0 5B 7A 14 00 6F 22 70 22 3D 26 DF 26 40  // ...[z..o"p"=&.&@
    E540: 22 41 22 00 00 00 01 00 02 00 03 00 E5 00 02 02  // "A".............
    E550: 14 00 3D 25 02 01 44 1C 00 3D 25 02 02 44 3E 00  // ..=%..D..=%..D>.
    E560: 3D 25 02 03 44 63 00 5B 2C 02 01 41 03 05 00 FF  // =%..Dc.[,..A....
    E570: FF FF FF 33 02 00 40 3E 01 00 00 48 39 00 2C 05  // ...3..@>...H9.,.
    E580: 01 01 00 00 00 2C 02 00 40 5B 3D B9 02 02 44 5E  // .....,..@[=...D^
    E590: 00 3D 01 00 01 45 51 00 32 01 00 01 5B 32 01 01  // .=...EQ.2...[2..
    E5A0: 00 02 01 00 01 02 B9 02 02 5B 2C 01 00 01 5B 3D  // .........[,...[=
    E5B0: 05 00 00 00 00 00 49 77 00 3D 05 01 00 00 00 00  // ......Iw.=......
    E5C0: 44 E0 00 56 00 43 03 0D 40 1F 00 03 01 00 00 3D  // D..V.C..@......=
    E5D0: 05 01 00 00 00 00 44 95 00 03 01 00 01 03 65 40  // ......D.......e@
    E5E0: 20 03 22 43 40 4C 02 00 44 49 A7 00 33 25 40 01  //  ."C@L..DI..3%@.
    E5F0: 43 95 00 2D 2A 40 40 1B 25 40 01 03 22 43 40 03  // C..-*@@.%@.."C@.
    E600: 02 00 44 03 01 41 01 7D 02 00 00 27 05 40 02 00  // ..D..A.}...'.@..
    E610: 00 00 2D 02 41 00 1B 05 41 01 2D 02 41 40 3E 02  // ..-.A...A.-.A@>.
    E620: 00 41 44 E0 00 03 02 00 41 43 B7 00 02 02 00 00  // .AD.....AC......
    E630: 5B 00 D1 01 02 01 04 04 37 00 00 42 21 00 63 07  // [.......7..B!.c.
    E640: 29 00 63 03 66 00 63 02 D5 00 63 04 FA 00 63 0C  // ).c.f.c...c...c.
    E650: 85 01 63 0D A8 01 5A 5A 43 D0 01 01 0D 1D 48 9F  // ..c...ZZC.....H.
    E660: 0F 01 05 1E 48 00 00 00 00 01 05 1F 48 7D 00 00  // ....H.......H}..
    E670: 00 66 06 01 4C 1F 48 39 00 03 24 46 42 00 3E 25  // .f..L.H9..$FB.>%
    E680: 46 00 44 58 00 01 25 1F 48 00 4A 25 1B 48 10 49  // F.DX..%.H.J%.H.I
    E690: D0 01 0D E5 1B 48 02 5B 4A A5 CB 05 01 49 D0 01  // .....H.[J....I..
    E6A0: 4A 25 1B 48 01 44 D0 01 4A 25 1C 48 10 44 76 00  // J%.H.D..J%.H.Dv.
    E6B0: 4A E5 1B 48 02 49 91 00 4A 25 1C 48 08 49 D0 01  // J..H.I..J%.H.I..
    E6C0: 43 C5 00 4A E5 1B 48 01 49 D0 01 4A 25 1B 48 10  // C..J..H.I..J%.H.
    E6D0: 44 C5 00 0D A5 1B 48 03 0D 65 1B 48 03 01 0D 1D  // D.....H..e.H....
    E6E0: 48 00 00 5C 25 1B 48 EF 01 4A 25 1C 48 10 44 B7  // H..\%.H..J%.H.D.
    E6F0: 00 01 0D 1D 48 9F 0F 07 E5 1B 48 FC 0D E5 1F 48  // ....H.....H....H
    E700: 01 0D 25 1B 48 11 5B 66 06 03 24 46 42 00 3E 25  // ..%.H.[f..$FB.>%
    E710: 46 00 49 D0 01 4A 25 1B 48 01 44 D0 01 4A 25 1C  // F.I..J%.H.D..J%.
    E720: 48 10 44 EB 00 5C E5 1B 48 FE 02 5B 4A 65 D0 05  // H.D..\..H..[Je..
    E730: 02 44 07 01 0D 25 23 48 01 3D 8D 00 00 00 44 84  // .D...%#H.=....D.
    E740: 01 03 05 46 80 F0 FA 02 56 00 41 03 19 41 00 21  // ...F....V.A..A.!
    E750: 05 41 FF 0F 00 00 27 02 46 40 3E 05 41 00 00 00  // .A....'.F@>.A...
    E760: 00 44 37 01 2D 0D 40 01 00 01 8A 1D 48 40 56 00  // .D7.-.@.....H@V.
    E770: 41 03 19 41 00 21 02 40 41 27 02 46 40 01 A5 22  // A..A.!.@A'.F@.."
    E780: 48 0C 01 0A 22 48 40 15 05 40 04 56 00 41 03 29  // H..."H@..@.V.A.)
    E790: 41 00 2D 0D 41 01 00 21 02 40 41 1B 05 40 08 01  // A.-.A..!.@A..@..
    E7A0: 0A 20 48 40 0D E5 20 48 C0 07 25 23 48 FE 4A 65  // . H@.. H..%#H.Je
    E7B0: 23 48 01 49 7C 01 5B 4A 25 1B 48 01 44 9D 01 4A  // #H.I|.[J%.H.D..J
    E7C0: 25 1B 48 10 49 D0 01 4A 25 1C 48 10 44 95 01 07  // %.H.I..J%.H.D...
    E7D0: E5 1F 48 FE 0D 25 1B 48 11 5B 4A 25 1B 48 01 44  // ..H..%.H.[J%.H.D
    E7E0: D0 01 4A 25 1B 48 10 44 D0 01 4A 25 1C 48 10 44  // ..J%.H.D..J%.H.D
    E7F0: B8 01 07 A5 1B 48 FC 07 65 1B 48 FC 5C 25 1B 48  // .....H..e.H.\%.H
    E800: EF 01 5B 00 71 00 03 01 08 00 37 00 00 56 00 01  // ..[.q.....7..V..
    E810: 3D E5 00 20 48 1B 00 03 39 43 00 03 02 01 44 03  // =.. H...9C....D.
    E820: 05 00 00 00 10 C0 2D 09 00 00 01 02 82 00 00 03  // ......-.........
    E830: 00 40 83 00 56 00 41 03 31 41 00 75 02 40 41 03  // .@..V.A.1A.u.@A.
    E840: 25 41 20 33 31 41 00 3D E2 00 41 47 61 00 2D 0D  // %A 31A.=..AGa.-.
    E850: 00 04 00 01 02 82 00 00 02 00 00 83 00 6E 02 00  // .............n..
    E860: 41 0F 01 40 00 02 02 00 40 33 05 01 01 00 00 00  // A..@....@3......
    E870: 08 02 00 01 5B 00 CE 00 03 01 00 10 37 00 00 56  // ....[.......7..V
    E880: 00 40 4A 25 00 EC 01 44 30 00 4A 25 05 EC 1E 49  // .@J%...D0.J%...I
    E890: 30 00 03 25 40 01 01 05 05 EC 03 00 00 00 4A 65  // 0..%@.........Je
    E8A0: 05 EC 0F 49 28 00 3D 65 02 00 49 3C 00 2C 28 02  // ...I(.=e..I<.,(.
    E8B0: 09 08 3D E5 02 00 49 48 00 2C A8 02 09 08 3D 65  // ..=...IH.,....=e
    E8C0: 02 02 49 6B 00 01 05 82 00 10 00 60 C0 01 01 83  // ..Ik.......`....
    E8D0: 00 00 01 05 82 00 14 00 60 C0 02 05 00 0C 02 00  // ........`.......
    E8E0: 00 3D E5 02 03 49 81 00 01 01 82 00 01 02 05 01  // .=...I..........
    E8F0: 0C 02 00 00 43 81 00 54 00 63 C0 01 01 64 C0 00  // ....C..T.c...d..
    E900: 01 21 65 C0 02 01 01 66 C0 01 01 31 67 C0 02 01  // .!e....f...1g...
    E910: 01 E8 C0 03 3D 65 02 01 44 AE 00 3D E5 02 01 44  // ....=e..D..=...D
    E920: AE 00 51 02 4A E5 A0 21 80 49 AE 00 3E 25 40 01  // ..Q.J..!.I..>%@.
    E930: 49 CD 00 01 05 05 EC 01 00 00 00 4A 65 05 EC 0F  // I..........Je...
    E940: 49 C5 00 5B F9 02 02 01 00 00 37 00 00 3D 25 01  // I..[......7..=%.
    E950: 01 44 7B 00 3D 25 01 02 44 68 01 3D 25 01 00 49  // .D{.=%..Dh.=%..I
    E960: CA 02 3D 05 00 00 00 00 00 49 39 00 3A 00 00 0D  // ..=......I9.:...
    E970: 25 68 18 01 4A 65 68 18 01 44 30 00 5B 54 20 68  // %h..Jeh..D0.[T h
    E980: 18 52 3C 03 00 40 24 01 3E 39 40 00 44 77 00 4A  // .R<..@$.>9@.Dw.J
    E990: A5 24 01 08 44 4B 00 03 39 40 00 3E E5 40 00 49  // .$..DK..9@.>.@.I
    E9A0: 62 00 03 E5 40 20 01 02 24 01 40 4A A5 24 01 08  // b...@ ..$.@J.$..
    E9B0: 44 67 00 4A A5 24 01 10 44 6F 00 55 38 00 5B 3D  // Dg.J.$..Do.U8.[=
    E9C0: 65 01 02 44 D7 00 02 05 00 60 EA 00 00 52 3C 3C  // e..D.....`...R<<
    E9D0: F9 24 01 00 44 C1 00 07 25 15 01 FE 4A A5 24 01  // .$..D...%...J.$.
    E9E0: 10 44 98 00 03 00 40 24 01 03 F9 40 00 3E 25 40  // .D....@$...@.>%@
    E9F0: 00 49 B4 00 03 25 40 68 01 02 24 01 40 4A A5 24  // .I...%@h..$.@J.$
    EA00: 01 10 44 B9 00 5D 05 00 00 00 00 FF 40 7E 05 00  // ..D..]......@~..
    EA10: 52 29 07 0D 18 01 F8 FE 43 3A 01 02 05 00 00 46  // R)......C:.....F
    EA20: C3 23 07 25 15 01 FE 4A A5 01 17 03 44 3A 01 56  // .#.%...J....D:.V
    EA30: 08 40 03 31 40 01 15 0D 40 0E 0F 0D 40 0F 04 01  // .@.1@...@...@...
    EA40: 0A 18 17 40 5C B1 19 17 FC 01 51 05 07 A5 01 17  // ...@\.....Q.....
    EA50: FC 01 25 05 17 40 01 05 02 17 00 00 3C 00 01 65  // ..%..@......<..e
    EA60: 1C 17 01 54 08 04 17 01 A5 05 17 E8 0D A5 19 17  // ...T............
    EA70: 10 4A 65 24 17 02 44 2D 01 0D 65 19 17 03 01 01  // .Je$..D-..e.....
    EA80: 42 01 00 01 01 46 01 00 01 01 4A 01 00 01 01 4E  // B....F....J....N
    EA90: 01 00 01 01 52 01 00 01 01 56 01 00 3D 65 01 02  // ....R....V..=e..
    EAA0: 49 67 01 5C 0D 18 01 F8 FF 01 01 5B 56 00 41 03  // Ig.\.......[V.A.
    EAB0: 31 41 01 09 25 41 03 15 25 41 02 66 FF 2D 0D 42  // 1A..%A..%A.f.-.B
    EAC0: D1 02 2D 0A 42 41 26 05 00 0A 00 00 00 03 04 41  // ..-.BA&........A
    EAD0: 00 00 27 02 41 40 3E 05 40 00 00 01 00 45 A1 01  // ..'.A@>.@....E..
    EAE0: 03 0D 40 FF FF 66 FF 2D 0D 42 E1 02 56 00 41 03  // ..@..f.-.B..V.A.
    EAF0: 39 41 01 15 25 41 02 2D 0A 42 41 03 0C 48 00 00  // 9A..%A.-.BA..H..
    EB00: 01 0A 30 1B 40 3A 00 00 3D 65 01 0B 49 2C 02 20  // ..0.@:..=e..I,. 
    EB10: 05 00 64 00 00 00 03 0C 48 02 00 03 00 41 40 01  // ..d.....H....A@.
    EB20: 0F 25 41 10 09 0D 41 DF F7 4B A5 01 04 44 F0 01  // .%A...A..K...D..
    EB30: 0F 65 41 08 03 0C 48 00 00 4A 05 9C 1B 01 00 00  // .eA...H..J......
    EB40: 00 44 15 02 03 0C 48 02 00 3C 02 41 01 40 49 15  // .D....H..<.A.@I.
    EB50: 02 3C 02 40 01 41 44 CA 02 03 0C 48 02 00 07 25  // .<.@.AD....H...%
    EB60: 40 01 EF 01 02 41 01 40 01 0A 40 01 41 43 CA 02  // @....A.@..@.AC..
    EB70: 56 00 40 03 8D 40 0C 00 3D 65 01 18 44 4F 02 03  // V.@..@..=e..DO..
    EB80: 8D 40 3E 00 3D 65 01 19 44 4F 02 03 A9 40 01 33  // .@>.=e..DO...@.3
    EB90: A5 40 14 03 31 40 01 09 25 40 03 15 25 40 04 0F  // .@..1@..%@..%@..
    EBA0: 0D 40 01 01 4B A5 01 04 44 6C 02 0F 0D 40 00 02  // .@..K...Dl...@..
    EBB0: 56 00 41 03 29 41 01 33 25 41 14 03 0C 48 00 00  // V.A.)A.3%A...H..
    EBC0: 4A 05 9C 1B 01 00 00 00 44 A8 02 03 0C 48 02 00  // J.......D....H..
    EBD0: 4A 25 40 01 10 49 A8 02 3C 22 43 01 41 49 A8 02  // J%@..I..<"C.AI..
    EBE0: 03 1A 48 40 3C 0A 00 01 40 44 CA 02 03 1A 48 40  // ..H@<...@D....H@
    EBF0: 07 25 00 01 FE 03 0C 48 02 00 01 22 43 01 41 07  // .%.....H..."C.A.
    EC00: 0D 40 01 EF F7 03 1A 48 40 01 0A 00 01 40 3A 00  // .@.....H@....@:.
    EC10: 00 5B 7A 28 00 00 CA 9A 3B 80 7C 81 4A 00 2F 68  // .[z(....;.|.J./h
    EC20: 59 00 94 35 77 00 00 00 00 00 02 04 00 00 04 08  // Y..5w...........
    EC30: 00 00 26 0C 00 00 28 10 00 00 2A 14 00 FF FF FF  // ..&...(...*.....
    EC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EC60: FF FF FF FF FF FF FF FF 0F 00 00 00 00 00 00 00  // ................
    EC70: 00 00 00 00 02 10 4E 16 00 00 00 00 01 00 00 00  // ......N.........
    EC80: 00 AE 00 00 55 AA 57 E9 76 22 00 00 00 00 00 00  // ....U.W.v"......
    EC90: 00 00 00 00 00 00 00 00 00 00 00 00 B8 01 00 00  // ................
    ECA0: 00 00 49 42 4D 3B 4C A0 00 00 00 00 00 00 00 00  // ..IBM;L.........
    ECB0: 00 00 00 04 20 37 36 31 32 39 35 35 32 30 00 00  // .... 761295520..
    ECC0: 00 00 00 00 00 00 00 00 00 00 00 00 8A 01 00 00  // ................
    ECD0: 00 00 00 00 30 33 2F 32 35 2F 32 32 2C 30 34 3A  // ....03/25/22,04:
    ECE0: 31 37 3A 30 38 00 00 00 E9 AB 23 00 E9 B5 23 00  // 17:08.....#...#.
    ECF0: 00 00 70 00 31 30 32 2D 52 41 50 48 41 45 4C 2D  // ..p.102-RAPHAEL-
    ED00: 30 30 36 00 52 41 50 48 41 45 4C 00 50 43 49 5F  // 006.RAPHAEL.PCI_
    ED10: 45 58 50 52 45 53 53 00 30 00 0D 0A 52 61 70 68  // EXPRESS.0...Raph
    ED20: 61 65 6C 20 47 65 6E 65 72 69 63 20 56 42 49 4F  // ael Generic VBIO
    ED30: 53 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // S               
    ED40: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    ED50: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    ED60: 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A  //         ..... ..
    ED70: 00 28 43 29 20 31 39 38 38 2D 32 30 32 30 2C 20  // .(C) 1988-2020, 
    ED80: 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44  // Advanced Micro D
    ED90: 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F  // evices, Inc..ATO
    EDA0: 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30  // MBIOSBK-AMD VER0
    EDB0: 33 32 2E 30 31 39 2E 30 30 30 2E 30 30 36 2E 30  // 32.019.000.006.0
    EDC0: 30 30 30 30 30 00 52 70 6C 47 65 6E 65 72 69 63  // 00000.RplGeneric
    EDD0: 56 62 00 32 33 38 39 31 35 39 20 00 36 30 35 36  // Vb.2389159 .6056
    EDE0: 36 38 20 20 00 20 20 20 20 20 20 20 20 00 41 4D  // 68  .        .AM
    EDF0: 44 5F 52 41 50 48 41 45 4C 5F 47 45 4E 45 52 49  // D_RAPHAEL_GENERI
    EE00: 43 5C 63 6F 6E 66 69 67 2E 68 00 00 00 90 2C 00  // C\config.h....,.
    EE10: 02 03 41 54 4F 4D 00 C0 7E 23 42 01 DD 01 96 00  // ..ATOM..~#B.....
    EE20: F0 23 00 00 00 00 02 10 02 10 B8 01 98 A3 10 02  // .#..............
    EE30: 00 00 00 00 00 00 00 02 03 00 00 00 50 43 49 52  // ............PCIR
    EE40: 02 10 4E 16 00 00 18 00 00 00 00 03 57 00 13 20  // ..N.........W.. 
    EE50: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    EE60: 00 20 3C C7 8B 00 00 00 00 00 00 00 00 00 00 00  // . <.............
    EE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EE80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EE90: 00 00 00 00 4A 00 02 01 00 00 00 00 00 00 28 20  // ....J.........( 
    EEA0: 5C 02 F0 20 C8 02 18 03 14 05 00 00 00 00 30 05  // \.. ..........0.
    EEB0: 3C 05 24 21 90 05 00 00 00 00 98 21 00 00 00 00  // <.$!.......!....
    EEC0: 00 00 00 00 AC 21 20 20 00 00 BC 0A 00 00 E8 05  // .....!  ........
    EED0: 00 00 00 00 BC 06 00 00 00 00 00 00 00 00 00 00  // ................
    EEE0: 6C 00 03 04 06 00 13 20 20 4E 00 00 20 4E 00 00  // l......  N.. N..
    EEF0: 01 00 00 00 00 00 00 00 4C 00 00 00 00 00 00 00  // ........L.......
    EF00: 00 00 00 00 00 00 00 00 F4 00 00 00 00 00 00 00  // ................
    EF10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EF20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EF30: 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00  // ................
    EF40: 00 00 00 00 00 00 00 00 00 00 00 00 50 00 03 01  // ............P...
    EF50: C8 00 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    EF60: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EF70: C8 00 00 00 B8 0B 00 00 00 00 00 00 7D 00 00 01  // ............}...
    EF80: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EF90: 00 00 00 00 00 00 00 00 00 00 00 00 FC 01 05 04  // ................
    EFA0: 10 00 38 00 4C 00 60 01 9B 01 48 00 30 75 00 00  // ..8.L.`...H.0u..
    EFB0: 0C 00 1F 05 39 50 00 00 40 9C 00 00 0C 00 1F 05  // ....9P..@.......
    EFC0: 3E 00 00 00 FF FF FF 00 0C 00 1F 05 6F A1 00 00  // >...........o...
    EFD0: 00 00 00 00 FF FF FF 00 0C 00 1F 02 3E 00 00 00  // ............>...
    EFE0: 00 00 00 00 00 00 00 00 48 3F 00 00 1F 00 44 00  // ........H?....D.
    EFF0: 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00  // .............,..
    F000: 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25  // ...>......P....%
    F010: 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05  // `....5.....!....
    F020: 11 2F F0 00 00 05 18 2A 40 01 00 05 78 69 00 00  // ./.....*@...xi..
    F030: 1F 00 44 00 00 16 00 00 00 05 01 1F 00 00 00 05  // ..D.............
    F040: 02 2C 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00  // .,.....>......P.
    F050: 00 05 09 25 60 00 00 05 0A 35 90 00 00 05 10 21  // ...%`....5.....!
    F060: B0 00 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05  // ...../.....*@...
    F070: F0 D2 00 00 1F 00 44 00 00 1E 00 00 00 05 01 26  // ......D........&
    F080: 00 00 00 05 02 30 00 00 00 05 03 3E 00 00 00 05  // .....0.....>....
    F090: 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00  // ."@....,`....7p.
    F0A0: 00 05 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E  // ...'.....2......
    F0B0: 00 01 00 05 68 3C 01 00 1F 00 44 00 00 1E 00 00  // ....h<....D.....
    F0C0: 00 05 01 26 00 00 00 05 02 30 00 00 00 05 03 3E  // ...&.....0.....>
    F0D0: 00 00 00 05 08 22 40 00 00 05 09 2C 60 00 00 05  // ....."@....,`...
    F0E0: 0A 37 70 00 00 05 10 27 90 00 00 05 11 32 C0 00  // .7p....'.....2..
    F0F0: 00 05 18 2E 00 01 00 05 00 00 00 00 00 01 02 03  // ................
    F100: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    F110: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    F120: 00 01 02 03 00 01 02 03 00 07 05 00 01 02 03 00  // ................
    F130: 01 02 03 00 07 05 00 08 30 00 00 87 00 00 00 07  // ........0.......
    F140: 30 00 00 B2 25 00 00 08 31 00 00 87 00 00 00 07  // 0...%...1.......
    F150: 31 00 00 B2 25 00 00 08 32 00 00 87 00 00 00 07  // 1...%...2.......
    F160: 32 00 00 B2 25 00 00 08 33 00 00 87 00 00 00 07  // 2...%...3.......
    F170: 33 00 00 B2 25 00 00 5A 00 00 00 05 00 00 00 47  // 3...%..Z.......G
    F180: 00 00 00 30 00 00 00 54 00 00 00 30 00 00 00 FF  // ...0...T...0....
    F190: FF FF FF 00 00 00 00 00 1C 00 03 01 00 0D 00 00  // ................
    F1A0: 00 00 00 00 00 00 00 00 C0 12 00 00 FF 00 FF 00  // ................
    F1B0: FF 00 00 00 0C 00 02 01 00 00 00 00 00 00 00 00  // ................
    F1C0: 54 00 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00  // T....].......]..
    F1D0: 08 08 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00  // .....].......]..
    F1E0: 18 14 04 00 B5 5D 00 00 1A 18 05 00 91 5D 00 00  // .....].......]..
    F1F0: 08 08 90 00 95 5D 00 00 08 08 91 00 99 5D 00 00  // .....].......]..
    F200: 08 08 92 00 9D 5D 00 00 08 08 93 00 A1 5D 00 00  // .....].......]..
    F210: 08 08 94 00 58 00 02 06 03 0A 01 00 04 01 02 02  // ....X...........
    F220: 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0 00 00  // d...e...f...g...
    F230: E8 C0 00 00 A0 21 00 00 2E 6A 01 00 10 27 00 00  // .....!...j...'..
    F240: 04 02 01 00 00 00 00 00 9F 0F 00 00 01 00 00 00  // ................
    F250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F260: 00 00 00 00 00 00 00 00 00 00 00 00 D4 00 04 04  // ................
    F270: 40 00 00 00 24 F4 00 00 60 09 60 09 00 00 00 00  // @...$...`.`.....
    F280: 00 00 00 00 5E 01 4E 0C 01 01 00 00 55 00 00 00  // ....^.N.....U...
    F290: 60 09 4E 16 00 03 04 01 00 05 05 00 00 00 00 00  // `.N.............
    F2A0: 00 46 C3 23 00 00 00 00 00 00 00 00 00 00 00 00  // .F.#............
    F2B0: 54 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // T...............
    F2C0: 10 11 3D 10 4D 1C 02 00 00 45 00 00 00 00 00 00  // ..=.M....E......
    F2D0: 00 00 00 00 00 00 00 00 00 00 AA 0A 22 22 02 00  // ............""..
    F2E0: AA F2 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F2F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F340: 00 04 02 02 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F350: 00 00 00 00 00 00 00 00 00 00 22 02 00 00 00 00  // ..........".....
    F360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F3A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F3B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F3C0: 8C 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F3D0: 00 00 00 00 00 04 40 02 0C 34 00 00 00 00 E4 00  // ......@..4......
    F3E0: 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F3F0: 00 00 00 00 08 00 10 02 13 31 02 02 00 00 E4 00  // .........1......
    F400: 02 00 00 00 80 00 20 02 13 32 03 03 00 00 E4 00  // ...... ..2......
    F410: 02 01 00 00 00 02 30 02 13 33 04 04 00 00 E4 00  // ......0..3......
    F420: 02 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F440: 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  // ................
    F450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F4F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F5F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F6F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F740: FC 13 01 00 00 1F 00 00 00 00 00 00 48 3F 00 00  // ............H?..
    F750: 05 02 00 07 03 00 00 16 00 00 00 00 00 00 00 00  // ................
    F760: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    F770: 48 3F 00 00 05 02 00 07 03 00 00 1F 00 00 00 00  // H?..............
    F780: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    F790: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2C  // ....H?.........,
    F7A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F7B0: 00 1F 03 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    F7C0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    F7D0: 00 00 00 00 00 1F 08 00 00 00 00 00 48 3F 00 00  // ............H?..
    F7E0: 05 02 00 07 03 00 00 1B 05 00 00 00 00 00 00 00  // ................
    F7F0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    F800: 48 3F 00 00 05 02 00 07 03 00 00 25 06 00 00 00  // H?.........%....
    F810: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    F820: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 35  // ....H?.........5
    F830: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F840: 00 1F 10 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    F850: 03 00 00 21 0B 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    F860: 00 00 00 00 00 1F 11 00 00 00 00 00 48 3F 00 00  // ............H?..
    F870: 05 02 00 07 03 00 00 2F 0F 00 00 00 00 00 00 00  // ......./........
    F880: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    F890: 48 3F 00 00 05 02 00 07 03 00 00 2A 14 00 00 00  // H?.........*....
    F8A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    F8B0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 16  // ....xi..........
    F8C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F8D0: 00 1F 01 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    F8E0: 03 00 00 1F 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F8F0: 00 00 00 00 00 1F 02 00 00 00 00 00 78 69 00 00  // ............xi..
    F900: 05 02 00 07 03 00 00 2C 00 00 00 00 00 00 00 00  // .......,........
    F910: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    F920: 78 69 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // xi.........>....
    F930: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    F940: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 1B  // ....xi..........
    F950: 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F960: 00 1F 09 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    F970: 03 00 00 25 06 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    F980: 00 00 00 00 00 1F 0A 00 00 00 00 00 78 69 00 00  // ............xi..
    F990: 05 02 00 07 03 00 00 35 09 00 00 00 00 00 00 00  // .......5........
    F9A0: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    F9B0: 78 69 00 00 05 02 00 07 03 00 00 21 0B 00 00 00  // xi.........!....
    F9C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    F9D0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 2F  // ....xi........./
    F9E0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F9F0: 00 1F 18 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    FA00: 03 00 00 2A 14 00 00 00 00 00 00 00 00 00 00 00  // ...*............
    FA10: 00 00 00 00 00 1F 00 00 00 00 00 00 F0 D2 00 00  // ................
    FA20: 05 02 00 07 03 00 00 1D 00 00 00 00 00 00 00 00  // ................
    FA30: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    FA40: F0 D2 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // ...........&....
    FA50: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    FA60: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 30  // ...............0
    FA70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FA80: 00 1F 03 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    FA90: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    FAA0: 00 00 00 00 00 1F 08 00 00 00 00 00 F0 D2 00 00  // ................
    FAB0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    FAC0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    FAD0: F0 D2 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // ...........,....
    FAE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
    FAF0: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 37  // ...............7
    FB00: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FB10: 00 1F 10 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    FB20: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    FB30: 00 00 00 00 00 1F 11 00 00 00 00 00 F0 D2 00 00  // ................
    FB40: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
    FB50: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
    FB60: F0 D2 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // ................
    FB70: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
    FB80: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 1D  // ....h<..........
    FB90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FBA0: 00 1F 01 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    FBB0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    FBC0: 00 00 00 00 00 1F 02 00 00 00 00 00 68 3C 01 00  // ............h<..
    FBD0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    FBE0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
    FBF0: 68 3C 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // h<.........>....
    FC00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
    FC10: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 22  // ....h<........."
    FC20: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FC30: 00 1F 09 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    FC40: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    FC50: 00 00 00 00 00 1F 0A 00 00 00 00 00 68 3C 01 00  // ............h<..
    FC60: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
    FC70: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
    FC80: 68 3C 01 00 05 02 00 07 03 00 00 27 09 00 00 00  // h<.........'....
    FC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
    FCA0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 32  // ....h<.........2
    FCB0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FCC0: 00 1F 18 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    FCD0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
    FCE0: 00 00 00 00 08 1F 00 00 00 00 00 00 A0 86 01 00  // ................
    FCF0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    FD00: 00 00 00 00 00 00 00 00 08 1F 01 00 00 00 00 00  // ................
    FD10: A0 86 01 00 05 02 00 07 03 00 00 38 06 00 00 00  // ...........8....
    FD20: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 02 00  // ................
    FD30: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 33  // ...............3
    FD40: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FD50: 08 1F 03 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    FD60: 03 00 00 30 0E 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    FD70: 00 00 00 00 08 1F 04 00 00 00 00 00 A0 86 01 00  // ................
    FD80: 05 02 00 07 03 00 00 2B 13 00 00 00 00 00 00 00  // .......+........
    FD90: 00 00 00 00 00 00 00 00 08 1F 05 00 00 00 00 00  // ................
    FDA0: A0 86 01 00 05 02 00 07 03 00 03 3B 00 00 00 00  // ...........;....
    FDB0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 06 00  // ................
    FDC0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 35  // ...............5
    FDD0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FDE0: 08 1F 07 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    FDF0: 03 00 03 31 0A 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    FE00: 00 00 00 00 08 1F 08 00 00 00 00 00 A0 86 01 00  // ................
    FE10: 05 02 00 07 03 00 03 2D 0E 00 00 00 00 00 00 00  // .......-........
    FE20: 00 00 00 00 00 00 00 00 08 1F 09 00 00 00 00 00  // ................
    FE30: A0 86 01 00 05 02 00 07 03 00 03 2A 11 00 00 00  // ...........*....
    FE40: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0A 00  // ................
    FE50: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 38  // ...............8
    FE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FE70: 08 1F 0B 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    FE80: 03 00 06 32 06 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    FE90: 00 00 00 00 08 1F 0C 00 00 00 00 00 A0 86 01 00  // ................
    FEA0: 05 02 00 07 03 00 06 2F 09 00 00 00 00 00 00 00  // ......./........
    FEB0: 00 00 00 00 00 00 00 00 08 1F 0D 00 00 00 00 00  // ................
    FEC0: A0 86 01 00 05 02 00 07 03 00 06 2B 0D 00 00 00  // ...........+....
    FED0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0E 00  // ................
    FEE0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 0A 33  // ...............3
    FEF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FF00: 08 1F 0F 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    FF10: 03 00 03 22 03 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    FF20: 00 00 00 00 00 1F 00 00 00 00 00 00 60 54 00 00  // ............`T..
    FF30: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
    FF40: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
    FF50: 60 54 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // `T.........&....
    FF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
    FF70: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 30  // ....`T.........0
    FF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FF90: 00 1F 03 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    FFA0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    FFB0: 00 00 00 00 00 1F 08 00 00 00 00 00 60 54 00 00  // ............`T..
    FFC0: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
    FFD0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
    FFE0: 60 54 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // `T.........,....
    FFF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
   10000: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 37  // ....`T.........7
   10010: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10020: 00 1F 10 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
   10030: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
   10040: 00 00 00 00 00 1F 11 00 00 00 00 00 60 54 00 00  // ............`T..
   10050: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
   10060: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
   10070: 60 54 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // `T..............
   10080: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
   10090: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 1E  // .....^..........
   100A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   100B0: 00 1F 01 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
   100C0: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
   100D0: 00 00 00 00 00 1F 02 00 00 00 00 00 EC 5E 00 00  // .............^..
   100E0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
   100F0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
   10100: EC 5E 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // .^.........>....
   10110: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
   10120: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 22  // .....^........."
   10130: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10140: 00 1F 09 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
   10150: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
   10160: 00 00 00 00 00 1F 0A 00 00 00 00 00 EC 5E 00 00  // .............^..
   10170: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
   10180: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
   10190: EC 5E 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // .^.........'....
   101A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
   101B0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 32  // .....^.........2
   101C0: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   101D0: 00 1F 18 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
   101E0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
   101F0: 00 00 00 00 00 1F 00 00 00 00 00 00 90 7E 00 00  // .............~..
   10200: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
   10210: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
   10220: 90 7E 00 00 05 02 00 07 03 00 00 26 00 00 00 00  // .~.........&....
   10230: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
   10240: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 30  // .....~.........0
   10250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10260: 00 1F 03 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
   10270: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
   10280: 00 00 00 00 00 1F 08 00 00 00 00 00 90 7E 00 00  // .............~..
   10290: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
   102A0: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
   102B0: 90 7E 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  // .~.........,....
   102C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
   102D0: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 37  // .....~.........7
   102E0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   102F0: 00 1F 10 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
   10300: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
   10310: 00 00 00 00 00 1F 11 00 00 00 00 00 90 7E 00 00  // .............~..
   10320: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
   10330: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
   10340: 90 7E 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  // .~..............
   10350: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
   10360: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 1E  // ................
   10370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10380: 00 1F 01 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
   10390: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
   103A0: 00 00 00 00 00 1F 02 00 00 00 00 00 C0 A8 00 00  // ................
   103B0: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
   103C0: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
   103D0: C0 A8 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
   103E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
   103F0: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 22  // ..............."
   10400: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10410: 00 1F 09 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
   10420: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
   10430: 00 00 00 00 00 1F 0A 00 00 00 00 00 C0 A8 00 00  // ................
   10440: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
   10450: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
   10460: C0 A8 00 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
   10470: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
   10480: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 32  // ...............2
   10490: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   104A0: 00 1F 18 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
   104B0: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
   104C0: 00 00 00 00 00 1F 00 00 00 00 00 00 20 FD 00 00  // ............ ...
   104D0: 05 02 00 07 03 00 00 1E 00 00 00 00 00 00 00 00  // ................
   104E0: 00 00 00 00 00 00 00 00 00 1F 01 00 00 00 00 00  // ................
   104F0: 20 FD 00 00 05 02 00 07 03 00 00 26 00 00 00 00  //  ..........&....
   10500: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 02 00  // ................
   10510: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 30  // .... ..........0
   10520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10530: 00 1F 03 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
   10540: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
   10550: 00 00 00 00 00 1F 08 00 00 00 00 00 20 FD 00 00  // ............ ...
   10560: 05 02 00 07 03 00 00 22 04 00 00 00 00 00 00 00  // ......."........
   10570: 00 00 00 00 00 00 00 00 00 1F 09 00 00 00 00 00  // ................
   10580: 20 FD 00 00 05 02 00 07 03 00 00 2C 06 00 00 00  //  ..........,....
   10590: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 0A 00  // ................
   105A0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 37  // .... ..........7
   105B0: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   105C0: 00 1F 10 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
   105D0: 03 00 00 27 09 00 00 00 00 00 00 00 00 00 00 00  // ...'............
   105E0: 00 00 00 00 00 1F 11 00 00 00 00 00 20 FD 00 00  // ............ ...
   105F0: 05 02 00 07 03 00 00 32 0C 00 00 00 00 00 00 00  // .......2........
   10600: 00 00 00 00 00 00 00 00 00 1F 18 00 00 00 00 00  // ................
   10610: 20 FD 00 00 05 02 00 07 03 00 00 2E 10 00 00 00  //  ...............
   10620: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 00 00  // ................
   10630: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 1E  // ................
   10640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10650: 00 1F 01 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
   10660: 03 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00  // ...&............
   10670: 00 00 00 00 00 1F 02 00 00 00 00 00 AC 07 01 00  // ................
   10680: 05 02 00 07 03 00 00 30 00 00 00 00 00 00 00 00  // .......0........
   10690: 00 00 00 00 00 00 00 00 00 1F 03 00 00 00 00 00  // ................
   106A0: AC 07 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
   106B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 08 00  // ................
   106C0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 22  // ..............."
   106D0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   106E0: 00 1F 09 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
   106F0: 03 00 00 2C 06 00 00 00 00 00 00 00 00 00 00 00  // ...,............
   10700: 00 00 00 00 00 1F 0A 00 00 00 00 00 AC 07 01 00  // ................
   10710: 05 02 00 07 03 00 00 37 07 00 00 00 00 00 00 00  // .......7........
   10720: 00 00 00 00 00 00 00 00 00 1F 10 00 00 00 00 00  // ................
   10730: AC 07 01 00 05 02 00 07 03 00 00 27 09 00 00 00  // ...........'....
   10740: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 11 00  // ................
   10750: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 32  // ...............2
   10760: 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10770: 00 1F 18 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
   10780: 03 00 00 2E 10 00 00 00 00 00 00 00 00 00 00 00  // ................
   10790: 00 00 00 00 02 1F 00 00 00 00 00 00 30 75 00 00  // ............0u..
   107A0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
   107B0: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
   107C0: 40 9C 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // @..........>....
   107D0: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
   107E0: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 00 3E  // ....`..........>
   107F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10800: 03 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
   10810: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
   10820: 00 00 00 00 03 1F 00 00 00 00 00 00 40 9C 00 00  // ............@...
   10830: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
   10840: 00 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // ................
   10850: 60 EA 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // `..........>....
   10860: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
   10870: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 31  // ....0u.........1
   10880: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10890: 04 1F 01 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
   108A0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
   108B0: 00 00 00 00 04 1F 02 00 00 00 00 00 30 75 00 00  // ............0u..
   108C0: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
   108D0: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
   108E0: 30 75 00 00 05 02 00 07 03 00 05 29 10 00 00 00  // 0u.........)....
   108F0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
   10900: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 31  // ....`..........1
   10910: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10920: 04 1F 01 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
   10930: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
   10940: 00 00 00 00 04 1F 02 00 00 00 00 00 60 EA 00 00  // ............`...
   10950: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
   10960: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
   10970: 60 EA 00 00 05 02 00 07 03 00 05 29 10 00 00 00  // `..........)....
   10980: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
   10990: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 31  // .....8.........1
   109A0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   109B0: 04 1F 01 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
   109C0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
   109D0: 00 00 00 00 04 1F 02 00 00 00 00 00 80 38 01 00  // .............8..
   109E0: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
   109F0: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
   10A00: 80 38 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // .8.........)....
   10A10: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
   10A20: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 31  // ...............1
   10A30: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10A40: 04 1F 01 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
   10A50: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
   10A60: 00 00 00 00 04 1F 02 00 00 00 00 00 A0 86 01 00  // ................
   10A70: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
   10A80: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
   10A90: A0 86 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // ...........)....
   10AA0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 00 00  // ................
   10AB0: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 31  // ...............1
   10AC0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10AD0: 04 1F 01 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
   10AE0: 03 00 05 2F 0A 00 00 00 00 00 00 00 00 00 00 00  // .../............
   10AF0: 00 00 00 00 04 1F 02 00 00 00 00 00 C0 D4 01 00  // ................
   10B00: 05 02 00 07 03 00 05 2C 0D 00 00 00 00 00 00 00  // .......,........
   10B10: 00 00 00 00 00 00 00 00 04 1F 03 00 00 00 00 00  // ................
   10B20: C0 D4 01 00 05 02 00 07 03 00 05 29 10 00 00 00  // ...........)....
   10B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   10CA0: 00 00 00 00 08 00 01 01 00 00 00 00 C8 00 02 01  // ................
   10CB0: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
   10CC0: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
   10CD0: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
   10CE0: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
   10CF0: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
   10D00: 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ..U<0*......(.`.
   10D10: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
   10D20: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
   10D30: 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F 78 05  // ...........<./x.
   10D40: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
   10D50: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
   10D60: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
   10D70: 00 00 EC 3C 34 00 02 01 00 00 00 00 00 2A 00 2A  // ...<4........*.*
   10D80: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
   10D90: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
   10DA0: 15 3F 3F 3F 15 3F 3F 3F 74 00 01 01 10 01 06 12  // .???.???t.......
   10DB0: 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55  // .......j...j...U
   10DC0: 17 01 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9  // ...U........e...
   10DD0: 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55  // f...!..."..j#..U
   10DE0: 24 01 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC  // $...E...F...u...
   10DF0: 76 01 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71  // v......p...p...q
   10E00: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
   10E10: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 14 00 02 02  // ...s...t...t....
   10E20: 02 00 08 00 80 00 00 02 00 04 00 08 40 00 FF FF  // ............@...
   10E30: CD 00 01 04 88 06 06 00 0C 34 68 00 1E 21 00 00  // .........4h..!..
   10E40: 95 00 00 00 00 04 00 00 00 00 71 00 1E 22 00 00  // ..........q.."..
   10E50: 9C 00 00 00 00 00 00 00 13 31 7A 00 20 21 00 00  // .........1z. !..
   10E60: A3 00 00 00 08 00 00 00 13 32 83 00 20 22 00 00  // .........2.. "..
   10E70: AA 00 00 00 80 00 00 00 13 33 8C 00 21 21 00 00  // .........3..!!..
   10E80: B1 00 00 00 00 02 00 00 03 71 B8 00 00 00 00 00  // .........q......
   10E90: 00 00 00 00 00 00 00 00 01 04 90 00 02 04 01 00  // ................
   10EA0: FF 01 04 91 00 02 04 00 00 FF 01 04 92 00 02 04  // ................
   10EB0: 03 00 FF 01 04 93 00 02 04 04 00 FF 01 04 94 00  // ................
   10EC0: 02 04 05 00 FF 14 06 0F 1E 00 00 FF 14 06 3F 1E  // ..............?.
   10ED0: 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 01 00 00  // ................
   10EE0: FF 14 06 0F 01 00 00 FF 10 0A 01 02 03 04 05 00  // ................
   10EF0: 00 00 11 0A 90 91 92 93 94 00 00 00 FF 00 00 00  // ................
   10F00: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
   10F10: 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 A6 1E 0B C0  // .......... .....
   10F20: 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66  // u....f_f^f]f[fZf
   10F30: 59 66 58 07 1F CB E8 C0 1F E8 F8 00 E8 8F 1D 32  // YfX............2
   10F40: D2 8D 3E 8A 01 89 55 16 E8 0C 0D E8 CF 0C E8 01  // ..>...U.........
   10F50: 1C 75 19 E8 1A 0E E8 EF 02 E8 67 18 0B C0 74 0C  // .u........g...t.
   10F60: E8 39 00 E8 BE 45 E8 C6 0C E8 0D 46 E8 A9 00 B4  // .9...E.....F....
   10F70: 80 E8 84 1D 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3  // ......f...... f.
   10F80: 4C A0 E8 EF 02 E8 D9 0C E8 B1 1F 66 5F 66 5E 66  // L..........f_f^f
   10F90: 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E 8B 1E 08  // ]f[fZfYfX.......
   10FA0: 00 83 3E 90 23 00 75 04 89 1E 8E 23 1E 2E 8E 1E  // ..>.#.u....#....
   10FB0: 86 23 9C FA 66 C7 06 08 01 65 F0 00 F0 C7 06 40  // .#..f....e.....@
   10FC0: 00 F0 23 89 1E 42 00 C7 06 B4 01 F0 23 89 1E B6  // ..#..B......#...
   10FD0: 01 C7 06 7C 00 2E 6E 89 1E 7E 00 C7 06 0C 01 41  // ...|..n..~.....A
   10FE0: 72 89 1E 0E 01 C7 06 A8 04 66 68 89 1E AA 04 2E  // r........fh.....
   10FF0: 8E 1E 8E 23 8B C3 A3 68 68 A3 78 68 A3 8A 68 9D  // ...#...hh.xh..h.
   11000: 1F C3 50 4D 49 44 F0 23 98 58 00 00 00 A0 00 B0  // ..PMID.#.X......
   11010: 00 B8 00 C0 00 00 00 00 BB 00 00 E8 2C 0C 66 C1  // ............,.f.
   11020: E8 10 A3 BE 01 BB 0B 00 E8 1F 0C 8D 3E 8A 01 66  // ............>..f
   11030: 89 45 18 C3 66 50 66 52 51 56 66 B8 52 54 53 5F  // .E..fPfRQVf.RTS_
   11040: BA 80 00 66 EF B0 56 EE B0 42 EE B0 49 EE B0 4F  // ...f..V..B..I..O
   11050: EE B0 53 EE B0 20 EE BE 28 01 B9 19 00 AC E6 80  // ..S.. ..(.......
   11060: E2 FB 66 B8 44 4E 45 5F BA 80 00 66 EF 5E 59 66  // ..f.DNE_...f.^Yf
   11070: 5A 66 58 C3 E8 A0 1E 80 FC A0 75 05 E8 3D 00 EB  // ZfX.......u..=..
   11080: 11 80 FC 4F 75 05 E8 B9 33 EB 07 E8 0E 39 EB 02  // ...Ou...3....9..
   11090: B4 01 E8 A7 1E CF E8 7E 1E E8 20 00 EB 02 B4 01  // .......~.. .....
   110A0: E8 99 1E CB E8 70 1E 80 FC 4F 75 05 E8 93 33 EB  // .....p...Ou...3.
   110B0: 07 E8 E8 38 EB 02 B4 01 E8 81 1E CB 1E 06 66 50  // ...8..........fP
   110C0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 3C 04  // fQfRfSfUfVfW..<.
   110D0: 75 29 2E A1 1A 00 66 C1 E0 10 2E A1 18 00 8D 36  // u)....f........6
   110E0: 97 00 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89 46  // ...<..0.....^..F
   110F0: 04 66 C1 E8 10 89 46 00 E9 2B 01 3C 05 75 18 E8  // .f....F..+.<.u..
   11100: F6 1B E8 C9 1B 2E A1 08 00 8B EC 89 56 10 89 46  // ............V..F
   11110: 00 89 5E 04 E9 0F 01 3C 06 75 32 E8 14 0B 66 D1  // ..^....<.u2...f.
   11120: E0 8B EC 89 46 14 BB 02 00 E8 1E 0B 88 46 18 E8  // ....F........F..
   11130: 08 0B 66 89 46 0C BB 09 00 E8 0E 0B 33 C0 66 89  // ..f.F.......3.f.
   11140: 46 00 2E 8B 16 BE 01 89 56 10 E9 D9 00 3C 0B 75  // F.......V....<.u
   11150: 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89 5E 0C  // $..u..........^.
   11160: 89 4E 14 E9 C0 00 8A C7 E8 D3 00 E8 38 01 0F 84  // .N..........8...
   11170: AC 00 E9 B1 00 3C 17 75 1D E8 9B 0D 74 06 E8 8D  // .....<.u....t...
   11180: 09 E8 9E 12 E8 13 07 E8 82 0A 33 C9 8B C8 8B EC  // ..........3.....
   11190: 89 4E 14 E9 90 00 3C 18 75 45 0A FF 75 10 E8 22  // .N....<.uE..u.."
   111A0: 0D 8B EC 89 46 0C E8 4F 07 89 4E 10 EB 78 E8 66  // ....F..O..N..x.f
   111B0: 0D 75 6B BB 00 4C E8 FC 1C 66 0B C0 74 60 23 C9  // .uk..L...f..t`#.
   111C0: 74 5C E8 3A 0D BE 00 4C E8 AC 0A 74 51 BE 00 4C  // t\.:...L...tQ..L
   111D0: B0 40 E8 FB 0A E8 EB 0C 8B EC 89 46 0C EB 47 3C  // .@.........F..G<
   111E0: 82 75 1A 80 FB 05 75 15 0A FF 75 0A E8 30 0C 8B  // .u....u...u..0..
   111F0: EC 89 46 14 EB 30 E8 0D 0C 74 1B EB 29 3C 8E 75  // ..F..0...t..)<.u
   11200: 15 80 FF 01 74 08 80 FF 02 75 0B 80 C1 02 80 C1  // ....t....u......
   11210: 02 E8 57 0C EB 10 8B EC C6 46 19 02 EB 0F 8B EC  // ..W......F......
   11220: C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66 5F 66  // .F....2....f.f_f
   11230: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 51 8A  // ^f]f[fZfYfX...Q.
   11240: C8 B8 01 00 D3 E0 59 C3 E8 17 1D C3 0C 01 C3 00  // ......Y.........
   11250: 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61  // PQ...C.3.B...B.a
   11260: 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 6D 18 E6 61  // .....a......m..a
   11270: 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6  // YX...V...>...v..
   11280: 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00  // ..............!.
   11290: 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26  // .3.2...........&
   112A0: 21 00 5E 1F C3 00 57 0B C0 75 0F E8 28 08 74 25  // !.^...W..u..(.t%
   112B0: E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 04 15 23  // .$....t........#
   112C0: C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8  // .t.......t._.\(.
   112D0: 91 05 0B F6 C3 5F C3 50 E8 DD 07 E8 56 14 0A C9  // ....._.P....V...
   112E0: 74 11 E8 DA 11 3C 00 75 1F E8 CB 01 8A EB F6 C5  // t....<.u........
   112F0: 04 74 15 8D 9C A6 00 E8 BB 1B 0A C0 74 0A E8 88  // .t..........t...
   11300: 04 74 05 33 C9 E8 51 05 E8 AC 01 58 C3 51 B9 5F  // .t.3..Q....X.Q._
   11310: 00 E8 76 17 59 C3 51 E8 1A 00 75 14 E8 69 01 3C  // ..v.Y.Q...u..i.<
   11320: 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02  // .u.. ..'.u......
   11330: 33 C9 59 C3 53 E8 7D 1B 66 3D 00 FF FF FF 75 0E  // 3.Y.S.}.f=....u.
   11340: 83 C3 04 E8 6F 1B 66 3D FF FF FF 00 75 00 5B C3  // ....o.f=....u.[.
   11350: 50 52 32 D2 E8 5E 1B 02 D0 02 D4 66 C1 E8 10 02  // PR2..^.....f....
   11360: D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 48 07  // ..........ZX..H.
   11370: 8D 9C A4 01 E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6  // ..........tR.8..
   11380: C3 08 74 0C 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3  // ..t..\(...u..b..
   11390: B5 02 E8 FC 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28  // ...........t!.\(
   113A0: E8 22 01 E8 6D 03 74 05 B5 03 E8 E4 00 E8 41 04  // ."..m.t.......A.
   113B0: E8 FA 00 80 FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C  // ......u8........
   113C0: C0 01 B8 00 55 E8 73 0D B5 02 E8 D6 00 C3 A9 02  // ....U.s.........
   113D0: 00 74 1D B5 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4  // .t..........\(..
   113E0: 00 E8 67 18 E8 BC 00 8D 5C 28 E8 D8 00 E8 01 04  // ..g.....\(......
   113F0: C3 B5 01 E8 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3  // ................
   11400: 04 75 10 8D 9C C0 01 B8 00 55 E8 2E 0D B5 02 E8  // .u.......U......
   11410: 17 00 C3 E8 AF 00 B5 02 8D 5C 28 E8 57 00 75 02  // .........\(.W.u.
   11420: B5 01 E8 04 00 E8 C9 03 C3 8D 9C AC 02 B1 02 E8  // ................
   11430: 27 1A B5 02 E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8  // '....l.......!..
   11440: 75 00 F6 C3 04 74 12 8D 5C 28 E8 78 00 E8 5D 00  // u....t..\(.x..].
   11450: E8 63 07 8D 5C 28 E8 FE 17 B8 02 00 E8 0E FF C3  // .c..\(..........
   11460: B9 48 00 E8 24 16 C3 53 81 C3 05 01 E8 46 1A 24  // .H..$..S.....F.$
   11470: 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3  // .<.[....=..u.S..
   11480: 18 E8 31 1A 5B A8 01 C3 53 83 C3 12 E8 26 1A 5B  // ..1.[...S....&.[
   11490: C3 8D 9C AC 02 32 C9 E8 BF 19 C3 8D 9C AC 02 E8  // .....2..........
   114A0: 13 1A C3 8D 9C AC 02 B1 01 E8 AD 19 C3 8D 9C AC  // ................
   114B0: 02 B1 01 E8 BB 19 C3 66 50 8D 9C A0 01 E8 F5 19  // .......fP.......
   114C0: 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08  // ..fX.UWQ........
   114D0: 00 2B D9 D1 E3 8D 58 4E E8 DA 19 E8 E3 01 E2 EE  // .+....XN........
   114E0: 8D 5C 4B E8 CF 19 B9 03 00 8B D0 BF 21 29 85 55  // .\K.........!).U
   114F0: 06 74 17 66 8B 05 8D 9A 4C 02 E8 18 19 8B 45 04  // .t.f....L.....E.
   11500: 8D 9A 50 02 E8 26 19 83 C5 08 83 C7 08 E2 DF 8D  // ..P..&..........
   11510: 7C 5E B9 04 00 33 ED 8B DF E8 99 19 0B C0 74 09  // |^...3........t.
   11520: E8 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32  // .]............U2
   11530: ED E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83  // ..o..\(.N.=..u..
   11540: C3 14 E8 70 19 24 70 C0 E8 04 8A E8 E8 54 FF 5D  // ...p.$p......T.]
   11550: 8D 9C A6 00 E8 5E 19 0A C0 74 46 8D 9C A8 00 E8  // .....^...tF.....
   11560: 53 19 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C  // S.<.u;f...<.r3..
   11570: A8 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8 35 19  // ..2...........5.
   11580: 0B C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83  // ..t.......u.....
   11590: C5 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75  // ..UX..ps....I..u
   115A0: DA 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00  // .Y_]. .X.<......
   115B0: 03 3C 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D  // .<.......<. .Q..
   115C0: E8 F2 18 8D 9A C0 01 E8 63 18 8D 5D 02 E8 E5 18  // ........c..]....
   115D0: 8D 9A C2 01 E8 89 00 8D 5D 05 E8 D8 18 8D 9A C6  // ........].......
   115E0: 01 E8 7C 00 8D 5D 08 E8 CB 18 8B C8 8A DC 66 C1  // ..|..]........f.
   115F0: C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED  // ................
   11600: 06 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A  // ................
   11610: D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A  // ...?............
   11620: CC 01 E8 08 18 8D 9A CA 01 8B C1 E8 FF 17 8D 9A  // ................
   11630: CE 01 33 C0 8A C6 E8 F4 17 8D 9A D0 01 33 C0 8A  // ..3..........3..
   11640: C2 E8 E9 17 8D 5D 0C E8 6B 18 8D 9A D2 01 E8 0F  // .....]..k.......
   11650: 00 8D 5D 0F E8 5E 18 8D 9A D6 01 E8 CF 17 59 C3  // ..]..^........Y.
   11660: 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0  // ....f...........
   11670: ED 04 8B C1 E8 B6 17 83 C3 02 8B C2 E8 AE 17 C3  // ................
   11680: 8D 5D 11 E8 2F 18 8A E0 BA 06 00 C0 E8 07 74 03  // .]../.........t.
   11690: 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA  // ........$.<.u...
   116A0: 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD  // @<.u.......t....
   116B0: A8 02 74 03 80 E2 FB 8B C2 8D 9A D8 01 E8 6D 17  // ..t...........m.
   116C0: C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A  // .<.t=.....$?.<..
   116D0: 50 02 E8 58 17 0F B6 C2 83 C0 1F C1 E0 03 8D 9A  // P..X............
   116E0: 4C 02 E8 48 17 0F B6 DE C1 EB 06 C1 E3 02 2E F7  // L..H............
   116F0: A7 81 2A 2E F7 B7 7F 2A 8D 9A 4E 02 E8 2E 17 83  // ..*....*..N.....
   11700: C5 08 C3 10 00 0A 00 04 00 03 00 05 00 04 00 10  // ................
   11710: 00 09 00 8D 9C A6 00 E8 9B 17 0A C0 74 1F 8D 9C  // ............t...
   11720: A8 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8 85 17  // ..Q.....Y..t....
   11730: 32 C0 66 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3  // 2.f=....u....3..
   11740: 66 50 52 E8 6F 17 3C 02 75 39 80 FC 03 72 34 66  // fPR.o.<.u9...r4f
   11750: C1 E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04  // ...2.<.v*.......
   11760: 3B DA 73 1F E8 4E 17 8A E0 80 E4 E0 C0 EC 05 24  // ;.s..N.........$
   11770: 1F 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A  // .8.t.2.........Z
   11780: 66 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 24  // fX.3.ZfX.Q.....$
   11790: 17 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10  // ...t..........t.
   117A0: E8 12 17 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02  // ...f......u.....
   117B0: 32 C0 0A C0 59 C3 66 50 52 E8 F9 16 3C 70 75 2B  // 2...Y.fPR...<pu+
   117C0: 66 C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73  // f...2........;.s
   117D0: 1A E8 E1 16 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0  // ....8.t.f...2...
   117E0: 03 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58  // .......ZfX.3.ZfX
   117F0: C3 57 66 51 8D 9C C0 01 8B FB 8B DF E8 3D 00 0B  // .WfQ.........=..
   11800: C9 74 0B 66 8B D1 E8 E0 0B 83 C7 1C EB EC 66 59  // .t.f..........fY
   11810: 5F C3 50 53 51 B9 07 00 53 8B DA E8 97 16 83 F8  // _.PSQ...S.......
   11820: 00 5B 74 09 66 C1 E3 10 8B DA E8 72 12 59 5B 58  // .[t.f......r.Y[X
   11830: C3 51 53 B9 07 00 E8 7F 12 5B 59 C3 66 50 53 83  // .QS......[Y.fPS.
   11840: C3 06 E8 70 16 5B 8B C8 66 C1 E1 10 53 83 C3 02  // ...p.[..f...S...
   11850: E8 62 16 8B C8 5B 66 58 C3 8D 9C A0 01 32 C9 E8  // .b...[fX.....2..
   11860: F7 15 C3 57 B9 20 00 E8 5A 12 5F C3 53 51 E8 19  // ...W. ..Z._.SQ..
   11870: 00 32 E4 8A C5 C1 E0 02 59 8D 9C 78 01 03 D8 E8  // .2......Y..x....
   11880: 33 16 5B C3 B1 02 E8 07 00 C3 B1 01 E8 01 00 C3  // 3.[.............
   11890: 53 8D 9C 98 01 E8 D9 15 5B C3 33 C9 E8 B3 12 75  // S.......[.3....u
   118A0: 3C 66 BA 22 F0 FF FF 66 33 C0 E8 46 03 33 C0 E8  // <f."...f3..F.3..
   118B0: 24 02 74 1C A9 DD 0F 74 F6 E8 1B FA F6 C3 04 75  // $.t....t.......u
   118C0: 05 F6 C3 18 74 E9 E8 1F 00 50 E8 A0 FA 58 EB DF  // ....t....P...X..
   118D0: E8 0B 00 75 08 E8 20 00 8B C1 E8 90 FA C3 66 50  // ...u.. .......fP
   118E0: E8 29 03 8B C8 66 58 C3 66 52 66 BA FF FF FF FF  // .)...fX.fRf.....
   118F0: 33 D0 E8 FE 02 66 5A C3 50 53 52 E8 E0 FF 75 13  // 3....fZ.PSR...u.
   11900: B9 08 00 E8 BD 0E 23 C8 75 19 33 C0 E8 C7 01 8B  // ......#.u.3.....
   11910: C8 EB 10 83 F9 02 74 0B E8 7B 06 80 FB 01 75 03  // ......t..{....u.
   11920: 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF  // ...Z[X.Vf3.f....
   11930: FF E8 9E 05 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8  // ....f........t..
   11940: 05 00 E8 7E 05 5E C3 50 51 E8 6C 01 50 32 C0 E8  // ...~.^.PQ.l.P2..
   11950: 90 02 E8 CC 00 E8 7F 00 8D 9C 08 03 E8 56 15 38  // .............V.8
   11960: E8 74 0A 8A C5 E8 AD 14 B0 02 E8 75 02 58 E8 79  // .t.........u.X.y
   11970: 00 66 51 8D 9C A4 01 E8 3B 15 66 8B C8 8B D3 8D  // .fQ.....;.f.....
   11980: 9C D0 02 E8 2F 15 66 3B C1 75 16 53 8D 9C AA 01  // ..../.f;.u.S....
   11990: E8 22 15 8B C8 8D 9C D6 02 E8 19 15 3B C1 5B 74  // ."..........;.[t
   119A0: 05 B0 02 E8 3C 02 66 59 E8 67 FE E8 FF 01 66 25  // ....<.fY.g....f%
   119B0: FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8 11  // ....YXf.....3...
   119C0: 05 33 D2 C3 53 66 50 8D 9C C8 02 E8 E7 14 8A C4  // .3..SfP.........
   119D0: E8 42 14 66 58 5B C3 53 66 50 8D 9C C8 02 E8 D4  // .B.fX[.SfP......
   119E0: 14 8A E0 E8 2F 14 66 58 5B C3 8D 9C C8 02 E8 C4  // ..../.fX[.......
   119F0: 14 32 C0 E8 1F 14 C3 66 52 52 32 ED 83 C1 02 B8  // .2.....fRR2.....
   11A00: 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 8B C2 8A CF  // ....f3...ZQf....
   11A10: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
   11A20: C3 53 E8 48 01 66 C1 E2 10 E8 36 01 8D 9C 98 01  // .S.H.f....6.....
   11A30: E8 82 14 8A E8 8D 9C AC 02 E8 79 14 8A C8 E8 9E  // ..........y.....
   11A40: 0B 8A EB 5B C3 57 53 53 E8 D6 FF E8 14 01 5B E8  // ...[.WSS......[.
   11A50: B0 0B 74 61 80 FD 00 75 29 53 E8 0F FE 66 8B D0  // ..ta...u)S...f..
   11A60: E8 4A FA 8A CD 51 E8 1B FE 8A FD 59 E8 88 FF 5B  // .J...Q.....Y...[
   11A70: E8 42 14 66 25 FF FF 00 00 66 3B C8 73 34 32 DB  // .B.f%....f;.s42.
   11A80: EB 33 80 FD 02 75 11 E8 2C 01 8D 1F E8 26 14 3D  // .3...u..,....&.=
   11A90: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 C1  // t@v.2......u.S..
   11AA0: 00 B3 03 E8 18 0B 5B E8 0B 14 3B C2 76 04 32 DB  // ......[...;.v.2.
   11AB0: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 05 0D 23 F0  // .....[_.S.....#.
   11AC0: 74 09 8B C6 E8 89 0B 8B F3 0B DB 5B C3 51 E8 27  // t..........[.Q.'
   11AD0: FE E8 0F 00 59 C3 51 50 E8 E8 0C 8B C8 58 E8 02  // ....Y.QP.....X..
   11AE0: 00 59 C3 57 53 E8 97 0E 0B C0 74 09 8B 1D 83 C7  // .Y.WS.....t.....
   11AF0: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
   11B00: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
   11B10: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 00 01 E8 6A 0F  // ...t..........j.
   11B20: 83 C6 08 E8 4D 0C EB E8 BB F0 46 B8 5A A5 E8 FC  // ....M.....F.Z...
   11B30: 12 C3 53 66 50 8D 9C 08 03 E8 79 13 8A E8 66 58  // ..SfP.....y...fX
   11B40: 5B C3 53 66 50 8D 9C C8 02 E8 69 13 8A C8 66 58  // [.SfP.....i...fX
   11B50: 5B C3 53 66 50 8D 9C C9 02 E8 59 13 8A C8 66 58  // [.SfP.....Y...fX
   11B60: 5B C3 53 8D 5C 14 E8 4C 13 8B D0 5B C3 53 66 50  // [.S.\..L...[.SfP
   11B70: 8D 5C 16 E8 3F 13 8B D0 66 58 5B C3 53 66 50 8D  // .\..?...fX[.SfP.
   11B80: 9C 18 03 E8 2F 13 66 8B D0 66 58 5B C3 53 66 50  // ..../.f..fX[.SfP
   11B90: 8D 9C 1C 03 E8 1E 13 66 8B D0 66 58 5B C3 53 66  // .......f..fX[.Sf
   11BA0: 50 8D 5C 10 E8 0E 13 8B C8 66 58 5B C3 53 8D 5C  // P.\......fX[.S.\
   11BB0: 08 E8 01 13 5B C3 53 66 50 8D 5C 0C E8 F6 12 8B  // ....[.SfP.\.....
   11BC0: D0 66 58 5B C3 8D 5C 04 E8 EA 12 C3 51 8D 5C 04  // .fX[..\.....Q.\.
   11BD0: 32 C9 E8 84 12 59 C3 8D 9C 18 03 66 8B C2 E8 34  // 2....Y.....f...4
   11BE0: 12 C3 53 51 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF  // ..SQ.....$......
   11BF0: 59 5B C3 53 66 50 51 66 8B C8 BB 00 00 E8 2C 0A  // Y[.SfPQf......,.
   11C00: 23 C2 0B C1 E8 2E 0A 59 66 58 5B C3 BB 00 00 E8  // #......YfX[.....
   11C10: 1A 0A 66 25 DF 0F 00 00 C3 80 FA 14 C3 E8 48 0E  // ..f%..........H.
   11C20: E8 D6 0D E8 B4 0D 75 06 E8 AA 0B E8 B8 0D C3 B0  // ......u.........
   11C30: 01 C3 55 B3 01 E8 3B 10 5D C3 66 53 66 BB 04 00  // ..U...;.].fSf...
   11C40: 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10 BB  // .....3.f[.Uf....
   11C50: 00 00 E8 1E 10 5D C3 E8 D6 0E BB 0A 00 E8 D5 09  // .....]..........
   11C60: C3 BB 0A 00 E8 C5 09 66 8B C8 E8 C3 0E BB 0A 00  // .......f........
   11C70: 66 2B C1 E8 BF 09 C3 E8 29 00 0B C9 74 22 E8 A6  // f+......)...t"..
   11C80: FC E8 2A 07 66 51 66 8B C8 BB 07 00 E8 9D 09 66  // ..*.fQf........f
   11C90: 25 00 FE 00 00 66 0B C1 E8 9A 09 66 59 0C 01 C3  // %....f.....fY...
   11CA0: 32 C0 C3 E8 49 02 0B C9 75 06 E8 4B FC E8 4F 02  // 2...I...u..K..O.
   11CB0: 51 E8 44 FC 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8  // Q.D.f...3....t..
   11CC0: F4 02 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3  // ..u.3...X#.f....
   11CD0: A8 10 75 63 E8 E9 06 66 C1 E6 10 33 C0 E8 F6 FD  // ..uc...f...3....
   11CE0: 74 35 E8 D3 FD 50 51 8B C8 E8 D7 01 85 C1 59 58  // t5...PQ.......YX
   11CF0: 74 0D 50 E8 CF FE 24 03 3C 03 58 75 E0 EB 0C 50  // t.P...$.<.Xu...P
   11D00: E8 C2 FE A8 01 58 74 D5 E8 CC FC 50 E8 91 07 58  // .....Xt....P...X
   11D10: B5 00 E8 B7 FE EB C6 E8 A9 01 E8 9B FD E8 13 01  // ................
   11D20: B1 00 E8 4B 07 66 C1 EE 10 E8 8D 06 A8 20 75 3B  // ...K.f....... u;
   11D30: A8 40 75 03 E8 1F 08 E8 74 06 0A C0 75 00 E8 82  // .@u.....t...u...
   11D40: 01 E8 74 FD E8 6F FE E8 CF FE 75 14 E8 47 02 0A  // ..t..o....u..G..
   11D50: DB 74 0D E8 81 FC E8 47 07 B5 00 E8 6E FE EB 08  // .t.....G....n...
   11D60: E8 2E 07 B5 01 E8 64 FE E8 CE 00 C3 E8 54 0A C3  // ......d......T..
   11D70: E8 9B FD E8 AC 06 33 C9 E8 84 01 66 33 D2 66 33  // ......3....f3.f3
   11D80: C0 E8 6F FE E8 83 07 E8 52 00 B1 FF E8 77 00 33  // ..o.....R....w.3
   11D90: C0 E8 42 FD 74 0A E8 1F FD 50 E8 21 07 58 EB F1  // ..B.t....P.!.X..
   11DA0: 32 C9 E8 A6 01 E8 1B 0A 0B C0 C3 E8 60 FD E8 71  // 2...........`..q
   11DB0: 06 66 33 C0 66 BA 00 F0 FF FF E8 15 01 51 B1 01  // .f3.f........Q..
   11DC0: E8 6E 01 59 E8 56 07 33 C0 E8 0A FD 74 0A E8 E7  // .n.Y.V.3....t...
   11DD0: FC 50 E8 DA 06 58 EB F1 E8 00 07 C3 B8 02 00 E8  // .P...X..........
   11DE0: D6 FC 74 21 B8 02 00 E8 ED F4 F6 C3 04 75 0A E8  // ..t!.........u..
   11DF0: D1 09 83 E0 FD E8 D4 09 C3 66 B8 02 00 00 00 E8  // .........f......
   11E00: F1 FD E8 33 F6 C3 E8 35 08 74 13 BB 02 00 E8 1B  // ...3...5.t......
   11E10: 08 8A E1 E8 1F 08 E8 DA 06 0C 01 C3 0C 01 C3 51  // ...............Q
   11E20: E8 1B 08 74 0C 8A CC BB 02 00 E8 FF 07 8A C4 8A  // ...t............
   11E30: E1 59 C3 B0 01 E8 16 06 C3 B0 00 E8 10 06 C3 E8  // .Y..............
   11E40: 10 0D 75 18 E8 7C 00 E8 6E FC 80 F9 01 75 0E 51  // ..u..|..n....u.Q
   11E50: E8 3E 06 B5 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF  // .>....t.Y.......
   11E60: 51 E8 4B 06 B5 00 E8 63 FD 59 C3 B8 02 00 E8 47  // Q.K....c.Y.....G
   11E70: FC 74 03 E8 6F 06 C3 E8 D3 04 3B C1 7C 35 8B C1  // .t..o.....;.|5..
   11E80: E8 13 05 E8 29 07 8B C8 51 E8 43 05 E8 07 05 59  // ....)...Q.C....Y
   11E90: E8 1C 07 3B C8 72 02 8B C1 8D 5C 04 E8 8E 0F 32  // ...;.r....\....2
   11EA0: C9 E8 DD 0B FE C1 38 C1 72 F7 8D 5C 04 E8 05 10  // ......8.r..\....
   11EB0: 0B C0 C3 33 C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02  // ...3....H3......
   11EC0: 03 D8 C3 53 BB 03 00 E8 62 07 66 25 FF 0F 00 00  // ...S....b.f%....
   11ED0: 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 4C 07  // [.SfPfQf......L.
   11EE0: 66 23 C2 66 0B C1 E8 4C 07 66 59 66 58 5B C3 66  // f#.f...L.fYfX[.f
   11EF0: 50 BB 05 00 E8 35 07 25 FF 0F 8B C8 66 58 C3 E8  // P....5.%....fX..
   11F00: C1 08 23 C8 66 50 BB 05 00 E8 20 07 25 00 F0 0B  // ..#.fP.... .%...
   11F10: C1 E8 21 07 66 58 C3 66 50 53 BB 06 00 E8 0C 07  // ..!.fX.fPS......
   11F20: A8 10 75 09 BB F0 46 E8 8B 0F 3D 5A A5 5B 66 58  // ..u...F...=Z.[fX
   11F30: C3 66 50 53 BB 06 00 E8 F2 06 80 F1 01 C0 E1 04  // .fPS............
   11F40: 24 EF 0A C1 E8 EE 06 5B 66 58 C3 53 66 50 BB F8  // $......[fX.SfP..
   11F50: 46 E8 61 0F 8A C1 E8 BC 0E 66 58 5B C3 53 BB F8  // F.a......fX[.S..
   11F60: 46 E8 51 0F 83 E0 01 5B C3 53 66 50 BB 07 00 E8  // F.Q....[.SfP....
   11F70: BA 06 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53  // .....fX..t...[.S
   11F80: BB 07 00 E8 A6 06 80 E4 FE 80 FD 06 74 03 80 CC  // ............t...
   11F90: 01 E8 A1 06 5B C3 66 50 BB 06 00 E8 8E 06 24 40  // ....[.fP......$@
   11FA0: C0 E8 06 8A D8 66 58 C3 B3 81 E8 BB 0C 75 04 83  // .....fX......u..
   11FB0: C8 01 C3 33 C0 C3 50 66 51 E8 FC FA 83 EC 04 8B  // ...3..PfQ.......
   11FC0: EC 66 33 C0 66 89 46 00 33 D2 8D BC C0 01 8D 1D  // .f3.f.F.3.......
   11FD0: E8 E2 0E 0B C0 74 3D 8B DF B0 00 E8 2D 01 74 2F  // .....t=.....-.t/
   11FE0: 8B DF E8 57 F8 66 8B 46 00 3B C8 7F 10 72 20 66  // ...W.f.F.;...r f
   11FF0: C1 C8 10 66 C1 C9 10 3B C8 7F 0E EB 12 66 C1 C8  // ...f...;.....f..
   12000: 10 66 C1 C9 10 3B C8 72 06 8B D7 66 89 4E 00 83  // .f...;.r...f.N..
   12010: C7 1C EB BA 0B D2 74 0A 8D 9C A4 01 E8 F3 F7 E9  // ......t.........
   12020: 88 00 66 33 C0 66 89 46 00 8D BC 4C 02 33 D2 8D  // ..f3.f.F...L.3..
   12030: 1D E8 81 0E 0B C0 74 58 66 50 E8 5E F4 3C 01 66  // ......tXfP.^.<.f
   12040: 58 74 05 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04  // Xt.=@.sCfRf...].
   12050: E8 62 0E E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C A4  // .b..]...fZt/V...
   12060: 01 8B F1 E8 CB F7 5E B0 00 E8 9F 00 74 1D 8D 1D  // ......^.....t...
   12070: E8 42 0E 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66  // .B....G.f....G.f
   12080: 3B 46 00 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F  // ;F.r...f.F......
   12090: 0B D2 74 16 56 8D 9C A4 01 8B F2 E8 93 F7 5E 53  // ..t.V.........^S
   120A0: 8D 9C BA 01 33 C0 E8 84 0D 5B 83 C4 04 0B D2 66  // ....3....[.....f
   120B0: 59 58 C3 57 53 51 E8 ED 08 3B 55 02 75 18 66 C1  // YX.WSQ...;U.u.f.
   120C0: CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74  // ....f...;].u...t
   120D0: 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B  // .:E.t......3....
   120E0: D7 0B D2 59 5B 5F C3 51 66 52 E8 B9 08 3A 65 1A  // ...Y[_.QfR...:e.
   120F0: 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED  // u...t.:E.t......
   12100: 33 FF EB 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53  // 3.....fZY..fQfRS
   12110: 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8 97 0D 5B 66  // Sf.....f......[f
   12120: 8B D0 E8 17 F7 3B CA 72 0A 66 3B CA 72 05 E8 14  // .....;.r.f;.r...
   12130: F9 75 02 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF  // .u.2.[fZfY.VW...
   12140: 8B F7 E8 EC F6 5F 5E C3 66 50 53 66 51 52 57 56  // ....._^.fPSfQRWV
   12150: 51 8B DE B9 08 00 E8 31 09 59 8D 5C 08 8B C1 66  // Q......1.Y.\...f
   12160: C1 E0 10 8A C2 E8 AD 0C F6 C2 03 75 24 8B C1 24  // ...........u$..$
   12170: 7F BF 0F 36 80 3D FF 0F 84 0F 01 3A 05 75 0D 66  // ...6.=.....:.u.f
   12180: 8B 45 01 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB  // .E.f............
   12190: E3 F6 C2 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33  // ....t%...p.....3
   121A0: C9 8A CC 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF  // .......u..\.f%..
   121B0: 00 00 66 C1 E0 08 E8 5C 0C EB B2 8A E1 8A CA 80  // ..f....\........
   121C0: E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70  // ...............p
   121D0: 72 2A 80 FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8  // r*..us%..p..2.P.
   121E0: 30 02 8B D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28  // 0...X8.r.3.....(
   121F0: 02 E8 C1 0C 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6  // ............2...
   12200: FE 0F 84 85 00 8D 5C 16 8B 05 E8 20 0C 8B 45 06  // ......\.... ..E.
   12210: 66 C1 E0 10 8B 45 02 50 E8 94 03 66 C1 E1 10 8B  // f....E.P...f....
   12220: C8 58 8D 1C E8 EE 0B 66 50 8D 5C 04 66 8B C1 E8  // .X.....fP.\.f...
   12230: E3 0B 66 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66  // ..fXf...f......f
   12240: F7 E1 66 50 8D 5C 06 E8 6B 0C 8B C8 66 58 66 D3  // ..fP.\..k...fXf.
   12250: E0 66 C1 E8 10 40 8D 5C 14 E8 D1 0B BF 6F 36 83  // .f...@.\.....o6.
   12260: F9 01 74 11 BF 77 36 81 F9 01 01 74 08 BF 7F 36  // ..t..w6....t...6
   12270: 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8 97 0B 8D 5C  // ...u..\.f......\
   12280: 10 66 8B 45 04 E8 8D 0B 0B DB 5E 5F 5A 66 59 5B  // .f.E......^_ZfY[
   12290: 66 58 C3 00 40 01 90 01 01 40 01 90 01 02 80 02  // fX..@....@......
   122A0: 90 01 03 80 02 90 01 04 40 01 90 01 05 40 01 90  // ........@....@..
   122B0: 01 06 80 02 90 01 07 D0 02 5E 01 0D 40 01 90 01  // .........^..@...
   122C0: 0E 80 02 90 01 0F 80 02 5E 01 10 80 02 5E 01 11  // ........^....^..
   122D0: 80 02 E0 01 12 80 02 E0 01 13 80 02 90 01 23 20  // ..............# 
   122E0: 04 90 01 32 20 04 B0 02 33 20 04 C0 02 62 80 02  // ...2 ...3 ...b..
   122F0: E0 01 FF 05 0A 05 05 05 00 00 00 05 0B 06 05 05  // ................
   12300: 00 00 00 08 10 08 08 08 00 00 00 56 E8 2D 09 80  // ...........V.-..
   12310: E4 01 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B  // ..;.t......3....
   12320: 44 02 0B C0 5E C3 57 53 50 E8 10 09 83 E9 0A E8  // D...^.WSP.......
   12330: E0 00 83 F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5  // .....v..........
   12340: 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51  // .........X[_.fSQ
   12350: 66 52 E8 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8  // fR.A..w.f...f...
   12360: 66 B8 00 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8  // f.....f..f3.f...
   12370: 3D 02 66 5A 59 66 5B C3 53 66 50 BB 07 00 E8 AB  // =.fZYf[.SfP.....
   12380: 02 0A C0 66 58 5B C3 53 66 50 BB 07 00 E8 9C 02  // ...fX[.SfP......
   12390: A8 01 66 58 5B C3 53 66 50 8D 5C 06 E8 16 0B 8A  // ..fX[.SfP.\.....
   123A0: C8 66 58 5B C3 51 B9 08 00 E8 F3 06 59 C3 53 8D  // .fX[.Q......Y.S.
   123B0: 5C 08 E8 00 0B 24 03 5B C3 8D 5C 09 E8 F6 0A C3  // \....$.[..\.....
   123C0: 51 53 B1 01 8A E8 8D 5C 08 E8 8D 0A 5B 59 C3 53  // QS.....\....[Y.S
   123D0: 8D 1C E8 E0 0A 5B C3 53 8D 5C 04 E8 D7 0A 5B C3  // .....[.S.\....[.
   123E0: 53 8D 5C 16 E8 CE 0A 5B C3 53 66 52 33 C0 E8 C2  // S.\....[.SfR3...
   123F0: FC 66 5A 75 1B E8 34 00 74 16 E8 15 00 40 83 F8  // .fZu..4.t....@..
   12400: 05 73 0D E8 0F 0A 48 E8 0F 00 66 8B C2 E8 05 0A  // .s....H...f.....
   12410: 5B C3 BB 00 4E E8 9D 0A C3 BB 08 4E C1 E0 03 03  // [...N......N....
   12420: D8 C3 BB 00 4E B9 32 00 E8 5F 06 C3 51 E8 E2 FF  // ....N.2.._..Q...
   12430: 0B C0 74 12 8B C8 BB 08 4E E8 79 0A 66 3B C2 74  // ..t.....N.y.f;.t
   12440: 07 83 C3 08 E2 F3 0B DB 59 C3 C3 00 C3 00 8A E8  // ........Y.......
   12450: BB 20 DF 3C 01 74 02 32 DB E8 45 2A E8 E3 F6 66  // . .<.t.2..E*...f
   12460: B8 80 06 00 08 66 33 DB 8A D9 8A CD E8 B8 00 C3  // .....f3.........
   12470: 66 51 66 52 66 57 66 B8 80 05 00 08 66 BB 00 4C  // fQfRfWf.....f..L
   12480: 00 00 66 33 C9 8B CE E8 9D 00 66 5F 66 5A 66 59  // ..f3......f_fZfY
   12490: C3 66 B8 80 07 00 04 66 33 DB 8B DE E8 88 00 C3  // .f.....f3.......
   124A0: 66 B8 80 08 00 04 66 33 DB 8B DE E8 79 00 C3 66  // f.....f3....y..f
   124B0: B8 80 09 00 04 66 33 DB 8B DE E8 6A 00 C3 C3 66  // .....f3....j...f
   124C0: B8 80 0A 00 04 66 33 DB 8B DE E8 5A 00 E8 E7 EF  // .....f3....Z....
   124D0: F6 C3 02 74 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00  // ...t.......f....
   124E0: 00 E8 43 00 C3 66 B8 80 0F 00 04 66 33 DB 8A D9  // ..C..f.....f3...
   124F0: E8 34 00 66 B8 80 0F 00 04 66 33 DB 56 E8 76 04  // .4.f.....f3.V.v.
   12500: 03 74 04 8B 1C 5E E8 1E 00 C3 66 B8 00 00 00 00  // .t...^....f.....
   12510: E8 14 00 66 B8 80 0C 00 04 E8 0B 00 C3 66 B8 00  // ...f.........f..
   12520: 01 00 00 E8 01 00 C3 83 EC 1C 8B EC 66 89 46 00  // ............f.F.
   12530: 66 89 5E 04 66 89 4E 08 66 89 56 0C 66 89 7E 10  // f.^.f.N.f.V.f.~.
   12540: 66 89 76 14 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8  // f.v...f......B..
   12550: 67 04 83 C4 1C C3 51 8D 5C 14 E8 58 09 66 C1 E0  // g.....Q.\..X.f..
   12560: 10 E8 02 00 59 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ....Y......f=...
   12570: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
   12580: 89 46 04 66 89 46 00 66 89 46 08 B0 01 88 46 09  // .F.f.F.f.F....F.
   12590: 66 B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66  // f.....f..f.F...f
   125A0: C1 E0 10 8B C4 BB 35 00 E8 0E 04 83 C4 10 C3 3D  // ......5........=
   125B0: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51  // ..v.......?$..SQ
   125C0: 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00  // fP.ht...t.......
   125D0: 75 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66  // u..xif3...fXY[.f
   125E0: 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13 74  // R..f......u....t
   125F0: 0E 80 FD 14 74 09 B3 03 80 F9 03 74 02 B3 02 66  // ....t......t...f
   12600: 5A C3 E8 B0 08 66 C1 E8 10 0B C0 74 1C 53 83 C3  // Z....f.....t.S..
   12610: 06 E8 A1 08 5B 3D E0 01 72 0F 53 83 C3 18 E8 94  // ....[=..r.S.....
   12620: 08 5B A8 80 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C  // .[..u....2..S..L
   12630: E8 50 08 5B C3 53 83 C3 4C E8 A2 07 5B C3 56 E8  // .P.[.S..L...[.V.
   12640: 34 03 83 C6 04 8A 64 10 8A 44 10 83 3C 00 5E C3  // 4.....d..D..<.^.
   12650: BB 00 50 83 F8 02 74 32 BB 00 54 83 F8 08 74 2A  // ..P...t2..T...t*
   12660: BB 00 58 3D 80 00 74 22 BB 00 5C 3D 00 02 74 1A  // ..X=..t"..\=..t.
   12670: BB 00 60 3D 00 04 74 12 BB 00 64 3D 00 08 74 0A  // ..`=..t...d=..t.
   12680: BB 00 68 83 F8 40 74 02 33 DB C3 57 E8 56 00 74  // ..h..@t.3..W.V.t
   12690: 0A 8B 5D 02 E8 08 00 0B DB 5F C3 33 DB 5F C3 52  // ..]......_.3._.R
   126A0: 51 0B DB 74 1B 56 E8 B4 02 03 DE 5E 33 C9 8A 4F  // Q..t.V.....^3..O
   126B0: 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB  // ..?.t.:.t.....3.
   126C0: 0B DB 59 5A C3 56 51 E8 93 02 32 C9 8D 7C 08 3B  // ..YZ.VQ...2..|.;
   126D0: 5D 04 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF  // ].t......:L.r.3.
   126E0: 0B FF 59 5E C3 56 51 E8 73 02 32 C9 8D 7C 08 3B  // ..Y^.VQ.s.2..|.;
   126F0: 1D 74 0C 83 C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B  // .t......:L.r.3..
   12700: FF 59 5E C3 56 51 E8 54 02 32 C9 8D 7C 08 3B 45  // .Y^.VQ.T.2..|.;E
   12710: 0C 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B  // .t......:L.r.3..
   12720: FF 59 5E C3 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E  // .Y^.WP......]..n
   12730: FF 58 5F C3 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F  // .X_.S2......t..O
   12740: 02 0A C9 5B C3 53 32 ED B3 02 E8 D7 FF 74 03 8A  // ...[.S2......t..
   12750: 6F 02 0A ED 5B C3 50 57 8B DA E8 68 FF 75 04 33  // o...[.PW...h.u.3
   12760: DB EB 0D B0 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02  // ......]..4.t.._.
   12770: 5F 58 C3 66 50 53 51 57 8D 1C 66 25 FF FF 00 00  // _X.fPSQW..f%....
   12780: E8 92 06 8B D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B  // ......;.#.t1.u..
   12790: FF 74 2A 66 50 66 8B 45 04 8D 5C 0C E8 76 06 66  // .t*fPf.E..\..v.f
   127A0: 33 C0 8B 05 8D 5C 04 E8 6B 06 66 58 E8 85 FF E8  // 3....\..k.fX....
   127B0: 93 FF 8D 5C 08 66 33 C0 8B C1 E8 58 06 5F 59 5B  // ...\.f3....X._Y[
   127C0: 66 58 C3 56 E8 96 01 8B 44 04 5E C3 56 E8 8D 01  // fX.V....D.^.V...
   127D0: 89 44 04 5E C3 E8 B3 01 8B F7 83 C6 38 BB 00 70  // .D.^........8..p
   127E0: B9 23 00 E8 D2 02 E8 01 00 C3 51 66 57 56 E8 6C  // .#........QfWV.l
   127F0: 01 66 33 FF 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15  // .f3..|.3....2...
   12800: B8 00 70 23 C2 3D 00 30 75 54 80 FA 15 74 0B E8  // ..p#.=.0uT...t..
   12810: B1 FF 0B 45 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C  // ...E.....D.^..E.
   12820: 0B C0 75 04 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B  // ..u....6....E...
   12830: FF 83 7D 06 00 74 16 E8 4A 00 89 45 06 0B C0 74  // ..}..t..J..E...t
   12840: 0C 83 7D 06 00 74 06 8B 5C 0A E8 A0 00 E8 40 00  // ..}..t..\.....@.
   12850: 89 05 8B 5D 02 E8 95 00 8B 5D 08 E8 B0 00 83 C7  // ...].....]......
   12860: 10 FE C1 3A 4C 06 72 96 5E 66 5F 59 C3 08 00 80  // ...:L.r.^f_Y....
   12870: 00 00 02 00 04 00 08 40 00 00 00 53 E8 3D 00 E8  // .......@...S.=..
   12880: 33 06 5B C3 53 E8 34 00 83 C3 08 E8 27 06 5B C3  // 3.[.S.4.....'.[.
   12890: 53 57 52 E8 26 00 83 C3 04 E8 19 06 8B D0 5A 5F  // SWR.&.........Z_
   128A0: 5B C3 E8 EB FF 66 C1 E8 10 B4 11 E8 25 00 C3 E8  // [....f......%...
   128B0: DE FF 66 C1 E8 18 B4 10 E8 18 00 C3 51 52 33 C9  // ..f.........QR3.
   128C0: 8A CE 80 E1 07 49 B8 10 00 F7 E1 BB 14 70 03 D8  // .....I.......p..
   128D0: 5A 59 C3 57 53 51 33 C9 8A C8 8A C4 BB 03 71 E8  // ZY.WSQ3.......q.
   128E0: A9 FD 83 C3 02 03 D9 8A 07 59 5B 5F C3 50 53 B0  // .........Y[_.PS.
   128F0: 01 E8 AB FD 74 15 E8 A9 FF 88 47 02 5B 53 B0 02  // ....t.....G.[S..
   12900: E8 9C FD 74 06 E8 A7 FF 88 47 02 5B 58 C3 51 50  // ...t.....G.[X.QP
   12910: B0 14 E8 8A FD 74 3A 53 E8 A1 FF 83 C3 0C E8 94  // .....t:S........
   12920: 05 8B C8 5B F6 C1 01 74 05 66 83 67 02 FD F6 C1  // ...[...t.f.g....
   12930: 80 74 05 66 83 67 02 F7 F7 C1 00 01 74 08 66 81  // .t.f.g......t.f.
   12940: 4F 02 00 01 00 00 F7 C1 00 02 74 05 66 83 67 02  // O.........t.f.g.
   12950: FB 58 59 C3 BF AA 01 8B 3D 8B 7D 0C C3 BE AA 01  // .XY.....=.}.....
   12960: 8B 34 8B 74 30 C3 1E 0E 1F BF AA 01 8B 3D 8B 7D  // .4.t0........=.}
   12970: 0E 83 C7 04 1F C3 BE AA 01 8B 34 8B 74 10 C3 BF  // ..........4.t...
   12980: AA 01 8B 3D 8B 7D 26 83 C7 04 C3 BF AA 01 8B 3D  // ...=.}&........=
   12990: 8B 7D 40 C3 BE AA 01 8B 34 8B 74 1A C3 BE AA 01  // .}@.....4.t.....
   129A0: 8B 34 8B 74 3A C3 BF AA 01 8B 3D 8B 7D 0A 83 C7  // .4.t:.....=.}...
   129B0: 04 B9 07 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46  // ...............F
   129C0: 00 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3 8B  // .f3..F...F..R...
   129D0: C5 E8 4F 17 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45  // ..O.Z......w.f.E
   129E0: 10 01 00 00 00 C3 50 E8 6A FF B8 01 00 09 45 10  // ......P.j.....E.
   129F0: 58 C3 E8 5F FF 88 45 10 C3 66 53 83 EC 48 8B EC  // X.._..E..fS..H..
   12A00: 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4  // f.^.f.N...f.....
   12A10: BB 00 00 E8 A3 FF 83 C4 48 66 5B E8 49 01 E8 83  // ........Hf[.I...
   12A20: 01 E8 0E 00 BB 04 00 E8 02 FC 66 C1 E8 10 E8 C1  // ..........f.....
   12A30: FF C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB  // .........f......
   12A40: 16 00 E8 74 FF 66 BB 00 00 00 00 83 C4 0C E8 03  // ...t.f..........
   12A50: FF 66 8B C3 66 C1 E8 08 66 89 45 28 66 8B C3 66  // .f..f...f.E(f..f
   12A60: C1 E0 18 66 89 45 2C C3 E8 E9 FE 66 8B 5D 08 66  // ...f.E,....f.].f
   12A70: 8B 4D 0C C3 56 E8 25 FF 66 8B 44 08 5E C3 B0 05  // .M..V.%.f.D.^...
   12A80: C3 B0 01 C3 B0 04 C3 B0 08 C3 53 66 50 66 33 C0  // ..........SfPf3.
   12A90: E8 82 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC  // ........fX[.2...
   12AA0: E8 12 04 66 C1 CB 10 E8 6B 03 66 C1 CB 10 66 81  // ...f....k.f...f.
   12AB0: C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 57 03 83 C3  // .........f..W...
   12AC0: 04 E2 F6 C3 FC E8 ED 03 66 AB 83 C3 04 E2 F6 C3  // ........f.......
   12AD0: 66 50 B8 30 00 E8 10 00 66 58 C3 66 50 B8 C0 5D  // fP.0....fX.fP..]
   12AE0: D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 DE 01  // .....fX.R.......
   12AF0: 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 B8 A8 05 00  // fS..f.....f.....
   12B00: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
   12B10: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
   12B20: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
   12B30: 66 52 E8 99 01 66 B8 B8 A8 05 00 B2 00 66 EF B2  // fR...f.......f..
   12B40: 04 66 ED 66 33 D2 66 BB 30 00 00 00 66 F7 F3 66  // .f.f3.f.0...f..f
   12B50: 5A C3 66 50 53 BB 07 00 E8 D1 FA 25 00 02 35 00  // Z.fPS......%..5.
   12B60: 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 05 01 E8 23  // ...[fX.fQ......#
   12B70: FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9  // .f3..L.f.....u..
   12B80: 00 08 66 2B C1 E8 0C FE 66 89 44 04 89 4C 08 66  // ..f+....f.D..L.f
   12B90: 59 C3 56 1E 0E 1F E8 FB FD 66 8B 44 04 66 C1 E0  // Y.V......f.D.f..
   12BA0: 0A 1F 5E C3 E8 C0 FF 06 E8 E0 FD 0E 07 66 BB 00  // ..^..........f..
   12BB0: F8 1A 00 E8 DC FF 66 03 D8 E8 B8 03 66 3B 05 75  // ......f.....f;.u
   12BC0: 0F B9 00 01 FC E8 AC 03 66 AB 66 83 C3 04 E2 F5  // ........f.f.....
   12BD0: E8 B8 FD BE AA 01 8B 34 8B 74 14 8B 45 14 89 44  // .......4.t..E..D
   12BE0: 0C E8 92 FD 0B F6 74 2B 57 56 83 C7 20 83 C6 04  // ......t+WV.. ...
   12BF0: B9 02 00 8B 05 89 04 8B 45 02 89 44 02 8A 45 0C  // ........E..D..E.
   12C00: 88 44 0C 8A 45 0D 88 44 0D 8A 45 0E 88 44 0E 47  // .D..E..D..E..D.G
   12C10: 46 E2 E0 5E 5F E8 85 FD 0B F6 74 1E 8A 85 06 01  // F..^_.....t.....
   12C20: 88 44 2F BB 04 71 B0 09 E8 60 FA 74 0D 57 81 C7  // .D/..q...`.t.W..
   12C30: 80 00 8A 85 85 00 88 47 04 5F 07 C3 BE AA 01 8B  // .......G._......
   12C40: 34 8B 74 1E 83 C6 04 B9 1C 00 C3 56 E8 27 FD 83  // 4.t........V.'..
   12C50: C6 04 8A 6C 0F 5E C3 56 E8 1B FD 80 FD 00 74 06  // ...l.^.V......t.
   12C60: 83 C6 04 88 6C 0F 5E C3 32 C0 C3 E8 1D FD 66 8B  // ....l.^.2.....f.
   12C70: 45 08 C3 66 53 83 EC 04 8B EC 8C D0 66 C1 E0 10  // E..fS.......f...
   12C80: 8B C4 66 89 5E 00 BB 06 00 E8 2D FD 8B EC 66 8B  // ..f.^.....-...f.
   12C90: 46 00 83 C4 04 66 5B C3 83 EC 0C 8B EC 8C D0 66  // F....f[........f
   12CA0: C1 E0 10 8B C4 BB 16 00 E8 0E FD 8B EC 66 8B 5E  // .............f.^
   12CB0: 00 66 8B 4E 00 66 8B 56 08 83 C4 0C C3 66 B8 00  // .f.N.f.V.....f..
   12CC0: 00 00 00 C3 BF AA 01 8B 3D 8B 7D 12 C3 00 66 50  // ........=.}...fP
   12CD0: 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A F6 74  // ..=..u.........t
   12CE0: 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4  // ...S...... .....
   12CF0: 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9  // [2.f.fX.........
   12D00: 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B D2  // u.Kt.C;.w.....+.
   12D10: F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A  // .........+..;.r.
   12D20: 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01  // u.;.w.+...+.+...
   12D30: 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B EE  // ..+.+.....UV+...
   12D40: 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8 76  // ....r.E;.r.w.;.v
   12D50: EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5  // ....Mx ....+....
   12D60: 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73  // r...Mx.........s
   12D70: F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E  // .............3.^
   12D80: 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74 04  // ]..P...t......t.
   12D90: F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A  // ....X.....RfP...
   12DA0: C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66 EF  // .f.......$....f.
   12DB0: 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C  // fXZ.R...f.Z.R...
   12DC0: 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D  // f.Z..1..........
   12DD0: C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66  // ..$...........Rf
   12DE0: 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3 10  // SfP...fXf[Z.f...
   12DF0: 66 C1 EB 0E E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3  // f..........fPf..
   12E00: 10 66 C1 EB 10 E8 8A FD 66 03 D8 66 81 CB 00 00  // .f......f..f....
   12E10: 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3 66  // ..fX.RfS...f[Z.f
   12E20: 50 E8 AA FE E8 D4 FF E8 8F 01 66 58 C3 52 51 66  // P.........fX.RQf
   12E30: 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D  // SfP.............
   12E40: FE E8 B7 FF E8 59 01 66 D3 C8 58 50 66 D3 C0 E8  // .....Y.f..XPf...
   12E50: 67 01 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03 E8  // g.fXf[YZ.fPQ....
   12E60: 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58  // S.f....f.....YfX
   12E70: C3 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8  // .fPQ....;.f..Y..
   12E80: 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1  // fX.._...D.f...f.
   12E90: EB 0E E8 0B 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01  // .......5.f......
   12EA0: C3 52 66 53 E8 04 00 66 5B 5A C3 E8 20 FE E8 4A  // .RfS...f[Z.. ..J
   12EB0: FF E8 EC 00 C3 51 66 52 8A EB 8A CB 80 E1 03 C0  // .....QfR........
   12EC0: E1 03 80 E3 FC E8 D9 FF 80 F9 00 74 14 66 8B D0  // ...........t.f..
   12ED0: 83 C3 04 E8 CB FF 83 EB 04 66 92 66 0F AD D0 8A  // .........f.f....
   12EE0: DD 66 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A C3 52  // .fZY.RfS...f[Z.R
   12EF0: 66 53 E8 A1 FF 66 5B 5A C3 66 50 55 52 66 50 8B  // fS...f[Z.fPURfP.
   12F00: EC 8B 56 0C 89 56 08 E8 C4 FD B2 00 66 ED 66 89  // ..V..V......f.f.
   12F10: 46 0A 66 58 5A 5D C3 66 50 55 52 66 50 8B EC 8B  // F.fXZ].fPURfP...
   12F20: 56 0C 89 56 08 E8 A6 FD 2E A1 FD 01 B2 18 EF B2  // V..V............
   12F30: 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55 52  // .f.f.F.fXZ].fPUR
   12F40: 8B EC E8 89 FD B2 00 66 8B 46 0A 66 EF 8B 56 08  // .......f.F.f..V.
   12F50: 89 56 0C 66 8B 46 04 66 89 46 08 5A 5D 66 58 66  // .V.f.F.f.F.Z]fXf
   12F60: 58 C3 66 50 52 E8 66 FD B2 18 66 ED 2E A3 FD 01  // X.fPR.f...f.....
   12F70: 5A 66 58 C3 66 52 66 53 E8 53 FD 66 81 CB 00 00  // ZfX.fRfS.S.f....
   12F80: 00 80 E8 1B 00 66 5B 66 5A C3 66 52 66 53 E8 3D  // .....f[fZ.fRfS.=
   12F90: FD 66 81 CB 00 00 00 80 E8 1E 00 66 5B 66 5A C3  // .f.........f[fZ.
   12FA0: 66 81 FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3  // f......w.....f..
   12FB0: B2 00 66 EF B2 04 66 ED C3 66 81 FB FF 00 00 00  // ..f...f..f......
   12FC0: 77 04 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04  // w.....f...f.f...
   12FD0: 66 EF C3 C3 C3 55 8B EC 53 51 8B F0 26 8B 5C 14  // f....U..SQ..&.\.
   12FE0: 26 8B 4C 16 E8 28 00 8D 66 FC 59 5B 5D C3 53 51  // &.L..(..f.Y[].SQ
   12FF0: 8B F0 26 8B 5C 24 33 C9 E8 14 00 59 5B C3 55 8B  // ..&.\$3....Y[.U.
   13000: EC 53 51 8B F0 26 8B 5C 08 26 8B 4C 0A EB D5 52  // .SQ..&.\.&.L...R
   13010: 56 57 C8 06 00 00 8B F0 89 4E FE 8C D0 8E C0 26  // VW.......N.....&
   13020: 8B 7C 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF  // .|&.E.2.. .+....
   13030: 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B  // ...........M.2..
   13040: FA E3 06 D1 E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44  // .............&!D
   13050: 1C 26 21 7C 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01  // .&!|.....&.|&.M.
   13060: 32 ED B8 20 00 2B C1 8B C8 66 C7 46 FA FF FF FF  // 2.. .+...f.F....
   13070: FF E3 08 D1 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED  // ....n..^....M.2.
   13080: 8B C3 8B 56 FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA  // ...V.........#F.
   13090: 23 56 FC 8A 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA  // #V..M.2.........
   130A0: 26 09 44 1C 26 09 54 1E C9 5F 5E 5A C3 55 8B EC  // &.D.&.T.._^Z.U..
   130B0: 53 51 52 57 50 8B D8 26 8B 7F 26 8A 45 01 32 E4  // SQRWP..&..&.E.2.
   130C0: B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8  // . .+............
   130D0: E2 FA 8A 4D 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E  // ...M..N..F.....N
   130E0: F6 E3 06 D1 E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F  // .........&.G.&..
   130F0: 1E 8D 66 F8 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C  // ..f._Z...SQRW...
   13100: D0 8E C0 26 8B 77 26 8A 4C 01 32 ED B8 20 00 2B  // ...&.w&.L.2.. .+
   13110: C1 8B C8 BE FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA  // ................
   13120: 26 8B 7F 26 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1  // &..&.M.2........
   13130: D2 E2 FA F7 D0 F7 D2 26 21 47 1C 26 21 57 1E 5F  // .......&!G.&!W._
   13140: E9 CC 05 53 56 8B D8 8C D2 8E C2 26 8B 77 26 80  // ...SV......&.w&.
   13150: 3C 00 74 73 80 3C 01 75 58 8A 44 01 32 E4 26 83  // <.ts.<.uX.D.2.&.
   13160: 7F 1E 00 75 4C 26 3B 47 1C 75 46 8A 04 6B F0 03  // ...uL&;G.uF..k..
   13170: 8A 84 80 A1 26 01 47 26 8C D0 8E C0 26 8B 77 26  // ....&.G&....&.w&
   13180: 80 3C 09 74 17 8A 04 32 E4 6B F0 03 8B C3 FF 94  // .<.t...2.k......
   13190: 7E A1 26 8B 77 26 8A 04 32 E4 EB D1 8B 44 01 26  // ~.&.w&..2....D.&
   131A0: 29 47 26 26 FF 47 26 26 8B 47 1C 26 8B 77 1E EB  // )G&&.G&&.G.&.w..
   131B0: 1A 26 8B 77 26 8A 04 32 E4 6B F0 03 8A 84 80 A1  // .&.w&..2.k......
   131C0: 26 01 47 26 E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3  // &.G&...3.3...^[.
   131D0: 53 51 52 56 8B D8 8D 77 35 26 8B 54 02 26 89 57  // SQRV...w5&.T.&.W
   131E0: 14 26 C7 47 16 00 00 8B F0 26 8B 47 20 33 D2 26  // .&.G.....&.G 3.&
   131F0: 01 47 14 26 11 54 16 8C D1 8E C1 26 F6 47 2F 06  // .G.&.T.....&.G/.
   13200: 0F 85 0A 05 26 80 7F 34 00 75 22 26 8B 77 16 26  // ....&..4.u"&.w.&
   13210: 0B 77 14 75 10 26 D1 67 08 26 D1 57 0A 26 D1 67  // .w.u.&.g.&.W.&.g
   13220: 08 26 D1 57 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47  // .&.W....y....&.G
   13230: 34 32 E4 05 80 00 99 26 89 47 1C 26 89 57 1E 8B  // 42.....&.G.&.W..
   13240: C3 E8 FF FE E9 C7 04 53 56 8B D8 8D 77 35 26 8A  // .......SV...w5&.
   13250: 44 02 32 E4 C1 E0 02 26 8B 37 26 8B 34 03 F0 26  // D.2....&.7&.4..&
   13260: 8B 47 08 26 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B  // .G.&._.&..&.\.^[
   13270: C3 53 52 56 8B D8 8C D0 8D 77 35 8E C0 26 8A 54  // .SRV.....w5..&.T
   13280: 02 80 FA 40 73 21 26 8B 77 02 32 F6 C1 E2 02 26  // ...@s!&.w.2....&
   13290: 8B 74 04 03 F2 26 8B 57 08 26 8B 47 0A 26 89 14  // .t...&.W.&.G.&..
   132A0: 26 89 44 02 E9 7F 00 80 FA 41 75 12 26 8B 47 08  // &.D......Au.&.G.
   132B0: 26 8B 57 0A 26 89 47 10 26 89 57 12 EB 68 80 FA  // &.W.&.G.&.W..h..
   132C0: 40 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 0C 26  // @u.&.G.&.W.&.G.&
   132D0: 89 57 0E EB 51 80 FA 42 75 0A 26 8B 47 08 26 89  // .W..Q..Bu.&.G.&.
   132E0: 47 22 EB 42 80 FA 43 75 0A 26 8A 47 08 26 88 47  // G".B..Cu.&.G.&.G
   132F0: 33 EB 33 80 FA 46 75 12 26 8B 57 08 26 8B 47 0A  // 3.3..Fu.&.W.&.G.
   13300: 26 89 57 18 26 89 47 1A EB 1C 80 FA 47 75 0A 26  // &.W.&.G.....Gu.&
   13310: 8B 47 08 26 89 47 24 EB 0D 80 FA 48 75 08 26 8B  // .G.&.G$....Hu.&.
   13320: 47 08 26 89 47 20 5E 5A 5B C3 53 56 8B D8 8D 77  // G.&.G ^Z[.SV...w
   13330: 35 26 8A 44 02 32 E4 26 89 47 14 26 C7 47 16 00  // 5&.D.2.&.G.&.G..
   13340: 00 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02  // .^[.SV..&.w.&.t.
   13350: 8A 04 32 E4 26 89 47 14 26 C7 47 16 00 00 26 8B  // ..2.&.G.&.G...&.
   13360: 5F 02 26 FF 47 02 5E 5B C3 53 56 8B D8 26 8B 77  // _.&.G.^[.SV..&.w
   13370: 02 26 8B 74 02 8B 34 26 89 77 14 26 C7 47 16 00  // .&.t..4&.w.&.G..
   13380: 00 26 8B 5F 02 26 83 47 02 02 5E 5B C3 53 56 8B  // .&._.&.G..^[.SV.
   13390: D8 26 8B 77 02 26 8B 74 02 8B 04 8B 74 02 26 89  // .&.w.&.t....t.&.
   133A0: 47 14 26 89 77 16 26 8B 5F 02 26 83 47 02 04 5E  // G.&.w.&._.&.G..^
   133B0: 5B C3 53 52 56 8B D8 E8 70 FF 8B F3 26 8B 47 18  // [.SRV...p...&.G.
   133C0: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
   133D0: 26 11 54 16 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26  // &.T....+..J.S..&
   133E0: 8B 5F 02 26 FF 47 02 5B C3 53 8B D8 26 8B 5F 02  // ._.&.G.[.S..&._.
   133F0: 26 83 47 02 02 5B C3 53 56 8B D8 E8 6B FF 8B F3  // &.G..[.SV...k...
   13400: 26 8B 57 20 33 C0 26 01 57 14 26 11 44 16 8C D2  // &.W 3.&.W.&.D...
   13410: 8E C2 26 8B 47 2E 32 C0 80 E4 06 3D 00 02 75 07  // ..&.G.2....=..u.
   13420: 32 E4 33 D2 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06  // 2.3.^[.&.G.2....
   13430: 3D 00 04 74 EB 26 80 7F 34 00 75 08 8B C3 E8 2F  // =..t.&..4.u..../
   13440: 0F 5E 5B C3 26 8A 47 34 32 E4 26 89 47 1C 26 C7  // .^[.&.G42.&.G.&.
   13450: 47 1E 00 00 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8  // G........^[.S...
   13460: E2 FE 26 8B 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03  // ..&.G....&..&...
   13470: D8 26 8B 07 26 8B 57 02 5B C3 64 48 59 48 6F 48  // .&..&.W.[.dHYHoH
   13480: BE 48 75 48 8D 48 A7 48 B2 48 B8 48 53 51 56 8B  // .HuH.H.H.H.HSQV.
   13490: D8 E8 B0 FE 8C D2 8E C2 26 83 7F 16 00 75 22 26  // ........&....u"&
   134A0: 83 7F 14 40 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3  // ...@s.&.w.&._...
   134B0: 02 26 8B 44 04 03 D8 26 8B 07 26 8B 57 02 E9 7B  // .&.D...&..&.W..{
   134C0: 05 26 8B 77 14 26 8B 47 16 83 C6 C0 83 D0 FF 75  // .&.w.&.G.......u
   134D0: 71 83 FE 08 77 6C 03 F6 2E FF A4 F6 47 26 8B 47  // q...wl......G&.G
   134E0: 10 26 8B 57 12 E9 54 05 26 8B 47 0C 26 8B 57 0E  // .&.W..T.&.G.&.W.
   134F0: E9 49 05 26 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB  // .I.&.G".K&.O32..
   13500: 01 00 33 D2 E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B  // ..3............+
   13510: 05 26 8A 4F 33 32 ED B8 01 00 33 D2 E3 06 D1 E0  // .&.O32....3.....
   13520: D1 D2 E2 FA F7 D0 F7 D2 E9 11 05 26 8B 47 18 26  // ...........&.G.&
   13530: 8B 57 1A E9 06 05 26 8B 47 24 EB 08 26 8B 47 20  // .W....&.G$..&.G 
   13540: EB 02 33 C0 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD  // ..3.3....SV.....
   13550: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
   13560: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 16 0E 5E  // ..&.G.&.T......^
   13570: 5B C3 33 C0 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B  // [.3.3..SV.....&.
   13580: 77 14 26 03 77 22 8B 04 8B 54 02 5E 5B C3 53 8B  // w.&.w"...T.^[.S.
   13590: D8 26 C6 47 2B 04 E8 AB FD 26 8B 47 14 26 8B 57  // .&.G+....&.G.&.W
   135A0: 16 5B C3 53 8B D8 26 C6 47 2B 01 E8 BB FD EB E9  // .[.S..&.G+......
   135B0: 53 8B D8 26 C6 47 2B 00 E8 D2 FD EB DC 53 8B D8  // S..&.G+......S..
   135C0: 83 C3 35 26 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03  // ..5&._.......2..
   135D0: DB FF 97 0E A1 5B C3 53 52 56 8B D8 26 8A 47 2C  // .....[.SRV..&.G,
   135E0: 32 E4 8B F0 03 F0 8B C3 FF 94 2A A1 26 89 47 08  // 2.........*.&.G.
   135F0: 26 89 57 0A 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3  // &.W.&.G-2.......
   13600: FF 94 42 A1 26 89 47 04 26 89 57 06 E9 17 FD 53  // ..B.&.G.&.W....S
   13610: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 72 A1  // QV..&.O+2.....r.
   13620: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
   13630: 32 ED 8B F1 C1 E6 02 8B 8C 52 A1 8B B4 54 A1 26  // 2........R...T.&
   13640: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
   13650: 8C 7A A1 E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 26  // .z...&.g.&.W...&
   13660: 8B 4F 08 26 8B 77 0A 26 89 4F 14 26 89 77 16 E9  // .O.&.w.&.O.&.w..
   13670: CA 03 53 51 52 56 57 8B D8 8C D0 8E C0 26 8A 47  // ..SQRVW......&.G
   13680: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
   13690: 7A A1 32 ED 8B 84 52 A1 8B 94 54 A1 E3 06 D1 E0  // z.2...R...T.....
   136A0: D1 D2 E2 FA F7 D0 F7 D2 26 21 47 14 26 21 57 16  // ........&!G.&!W.
   136B0: 26 8A 47 2A 32 E4 8B F0 8A 8C 7A A1 32 ED E3 0A  // &.G*2.....z.2...
   136C0: 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0  // &.o.&._...&.G+..
   136D0: C1 E6 02 8B 84 52 A1 8B 94 54 A1 26 21 47 08 26  // .....R...T.&!G.&
   136E0: 21 57 0A 26 8A 47 2A 32 E4 8B F0 8A 8C 7A A1 32  // !W.&.G*2.....z.2
   136F0: ED E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 26 8B 47  // ...&.g.&.W...&.G
   13700: 14 26 8B 57 16 26 09 47 08 26 09 57 0A 5F 5E 5A  // .&.W.&.G.&.W._^Z
   13710: 59 5B C3 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1  // Y[.SQV..&.O+2...
   13720: 8A 8C 72 A1 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6  // ..r...&.o.&._...
   13730: 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 52 A1 8B  // &.O+2........R..
   13740: B4 54 A1 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32  // .T.&!O.&!w.&.O*2
   13750: ED 8B F1 8A 8C 7A A1 E3 0A 26 D1 6F 0A 26 D1 5F  // .....z...&.o.&._
   13760: 08 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C  // ...&.O+2........
   13770: 52 A1 8B B4 54 A1 26 21 4F 08 26 21 77 0A E9 BB  // R...T.&!O.&!w...
   13780: 02 51 52 57 8B D8 8C D0 8E C0 26 80 7F 2B 00 74  // .QRW......&..+.t
   13790: 1A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 2A  // .&.G,2.........*
   137A0: A1 26 89 47 08 26 89 57 0A EB 10 26 8A 47 2C 32  // .&.G.&.W...&.G,2
   137B0: E4 8B F0 03 F0 8B C3 FF 94 36 A1 26 8A 47 2D 32  // .........6.&.G-2
   137C0: E4 8B F0 03 F0 8B C3 FF 94 42 A1 26 89 47 04 26  // .........B.&.G.&
   137D0: 89 57 06 8C D2 8E C2 26 80 7F 2B 00 74 4A 26 8A  // .W.....&..+.tJ&.
   137E0: 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A  // G+2......&.G*...
   137F0: 8D 7A A1 32 ED 8B 84 52 A1 8B 94 54 A1 E3 06 D1  // .z.2...R...T....
   13800: E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57  // .........&!G.&!W
   13810: 0A 8B C3 E8 F9 FD 26 8B 47 04 26 8B 57 06 26 09  // ......&.G.&.W.&.
   13820: 47 08 26 09 57 0A EB 10 26 8B 57 04 26 8B 47 06  // G.&.W...&.W.&.G.
   13830: 26 89 57 08 26 89 47 0A 26 8A 47 2C 32 E4 8B F0  // &.W.&.G.&.G,2...
   13840: 03 F0 8B C3 FF 94 1E A1 5F 5A 59 C3 53 51 52 56  // ........_ZY.SQRV
   13850: 57 8B D8 26 8A 47 2A 32 E4 8B F0 8A 8C 7A A1 32  // W..&.G*2.....z.2
   13860: ED E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 8C D0 8E  // ...&.g.&.W......
   13870: C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A  // .&.G+2......&.G*
   13880: 8B F8 8A 8D 7A A1 32 ED 8B 84 52 A1 8B 94 54 A1  // ....z.2...R...T.
   13890: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04  // ............&.G.
   138A0: 26 09 57 06 26 8B 47 04 26 8B 57 06 26 21 47 08  // &.W.&.G.&.W.&!G.
   138B0: 26 21 57 0A E9 56 FE 55 8B EC 51 52 50 8B D8 26  // &!W..V.U..QRP..&
   138C0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 2A A1 26  // .G,2.........*.&
   138D0: 89 47 08 26 89 57 0A 26 8A 47 2B 88 46 FA 8B C3  // .G.&.W.&.G+.F...
   138E0: E8 DA FC 26 89 47 04 26 89 57 06 26 8A 4F 2D 32  // ...&.G.&.W.&.O-2
   138F0: ED 8B F1 03 F1 8B C3 FF 94 42 A1 26 89 47 14 26  // .........B.&.G.&
   13900: 89 57 16 8B C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A  // .W....D..F.2....
   13910: 8C 72 A1 E3 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26  // .r...&.o.&._...&
   13920: 8A 57 2B 32 F6 8B F2 C1 E6 02 8B 84 52 A1 8B 94  // .W+2........R...
   13930: 54 A1 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // T.&!G.&!W.&.G*2.
   13940: 8B F0 8A 8C 7A A1 32 ED E3 0A 26 D1 67 14 26 D1  // ....z.2...&.g.&.
   13950: 57 16 E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08  // W...&.G.&.W.&.G.
   13960: 26 09 57 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.W.&.G,2.......
   13970: FF 94 1E A1 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56  // .....f.ZY].Q...V
   13980: FC 26 8A 4F 2B 32 ED 8B F1 8A 8C 72 A1 E3 0A 26  // .&.O+2.....r...&
   13990: D1 6F 06 26 D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A  // .o.&._........&.
   139A0: 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 1E A1 59 C3  // O,2...........Y.
   139B0: 8B D8 E8 22 FC 8B C3 E8 55 FC 26 8B 47 04 26 8B  // ..."....U.&.G.&.
   139C0: 77 06 26 09 47 08 26 09 77 0A 26 8A 47 2C 32 E4  // w.&.G.&.w.&.G,2.
   139D0: 8B F0 03 F0 8B C3 FF 94 1E A1 C3 53 56 8B D8 E8  // ...........SV...
   139E0: F5 FB 8B C3 E8 28 FC 26 8B 47 04 26 8B 77 06 26  // .....(.&.G.&.w.&
   139F0: 31 47 08 26 31 77 0A 26 8A 47 2C 32 E4 8B F0 03  // 1G.&1w.&.G,2....
   13A00: F0 8B C3 FF 94 1E A1 5E 5B C3 53 51 56 8B D8 E8  // .......^[.SQV...
   13A10: C5 FB 8B C3 E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67  // .......&.O...&.g
   13A20: 08 26 D1 57 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C  // .&.W......F.&.O,
   13A30: 32 ED 8B F1 03 F1 8B C3 FF 94 1E A1 5E 59 5B C3  // 2...........^Y[.
   13A40: 53 51 56 8B D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F  // SQV..........&.O
   13A50: 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52  // ...&.o.&._.....R
   13A60: 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04  // ...r........&.G.
   13A70: 26 8B 57 06 26 01 47 08 26 11 54 0A 8B C3 E8 F1  // &.W.&.G.&.T.....
   13A80: FB 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1E  // .&.G,2..........
   13A90: A1 5A C3 52 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3  // .Z.R...>....q...
   13AA0: 26 8B 47 04 26 8B 57 06 26 29 47 08 26 19 54 0A  // &.G.&.W.&)G.&.T.
   13AB0: EB CA 51 52 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B  // ..QR........U.&.
   13AC0: 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1  // D.&.T.&.\.&.L...
   13AD0: F2 26 89 44 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8  // .&.D.&.T.ZY.R...
   13AE0: F5 FA 8B C2 E8 2C FC 8B C2 E8 5C 08 5A C3 51 52  // .....,....\.Z.QR
   13AF0: 57 8B F0 E8 E1 FA 8B C6 E8 18 FC 26 8B 44 08 26  // W..........&.D.&
   13B00: 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89  // .T.&.\.&.L....&.
   13B10: 44 0C 26 89 54 0E 8C D7 8E C7 26 8B 44 08 26 8B  // D.&.T.....&.D.&.
   13B20: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C  // T.&.\.&.L....&.\
   13B30: 10 26 89 4C 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2  // .&.L....R.......
   13B40: E8 D0 FB 8B C2 E8 D3 07 5A C3 51 52 8B D8 E8 86  // ........Z.QR....
   13B50: FA 8B C3 E8 BD FB 8C D1 8E C1 26 8B 47 08 26 8B  // ..........&.G.&.
   13B60: 57 0A 26 3B 57 06 75 0E 26 3B 47 04 75 08 26 C6  // W.&;W.u.&;G.u.&.
   13B70: 47 30 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47 06  // G0.ZY...&.G.&;G.
   13B80: 72 08 75 0A 26 3B 57 04 73 04 33 C0 EB 03 B8 02  // r.u.&;W.s.3.....
   13B90: 00 26 88 47 30 5A 59 C3 51 52 57 8B D8 26 8A 47  // .&.G0ZY.QRW..&.G
   13BA0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 2A A1 26 89 47  // ,2.........*.&.G
   13BB0: 08 26 89 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // .&.W.....&.G+2..
   13BC0: F0 C1 E6 02 8B F8 8A 8D 72 A1 32 ED 8B 84 52 A1  // ........r.2...R.
   13BD0: 8B 94 54 A1 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ..T.............
   13BE0: 26 21 47 08 26 21 57 0A E9 4D FC 55 8B EC 51 52  // &!G.&!W..M.U..QR
   13BF0: 57 83 EC 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6  // W.....&.G+2.....
   13C00: 02 8B F8 8A 8D 72 A1 32 ED 8B 84 52 A1 89 46 F4  // .....r.2...R..F.
   13C10: 8B 84 54 A1 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2  // ..T..F....f..V..
   13C20: F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4  // ..~..F..F.&.G,2.
   13C30: 8B F0 03 F0 8B C3 FF 94 2A A1 26 89 47 08 26 89  // ........*.&.G.&.
   13C40: 57 0A 8B C3 E8 47 F9 26 89 47 04 26 89 57 06 8B  // W....G.&.G.&.W..
   13C50: C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08 26 23 57 0A  // ....V...&#G.&#W.
   13C60: 26 89 47 14 26 89 57 16 26 21 7F 08 8B 46 F6 26  // &.G.&.W.&!...F.&
   13C70: 21 47 0A 8C D1 8D 77 35 8E C1 26 80 3C 19 73 12  // !G....w5..&.<.s.
   13C80: 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6  // &.O...&.g.&.W...
   13C90: EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..&.O...&.o.&._.
   13CA0: E2 F6 26 21 7F 08 8B 46 F8 26 21 47 0A 26 8B 57  // ..&!...F.&!G.&.W
   13CB0: 14 26 8B 47 16 26 09 57 08 26 09 47 0A 26 8A 47  // .&.G.&.W.&.G.&.G
   13CC0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1E A1 8D 66 FA  // ,2............f.
   13CD0: 5F E9 A3 FC 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26  // _...R........4.&
   13CE0: 8B 47 08 26 8B 57 0A 26 85 57 06 75 06 26 85 47  // .G.&.W.&.W.u.&.G
   13CF0: 04 74 05 B8 03 00 EB 03 B8 01 00 26 88 47 30 5A  // .t.........&.G0Z
   13D00: C3 53 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03  // .SQRV..&.O-2....
   13D10: F1 FF 94 42 A1 26 89 47 04 26 89 57 06 26 8A 47  // ...B.&.G.&.W.&.G
   13D20: 2B 32 E4 8B F0 8A 8C 72 A1 E3 0A 26 D1 6F 06 26  // +2.....r...&.o.&
   13D30: D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84  // ._...&.G+.......
   13D40: 52 A1 8B 94 54 A1 26 21 47 04 26 21 57 06 E9 BD  // R...T.&!G.&!W...
   13D50: F9 52 8B D8 E8 AA FF 26 8B 47 04 26 8B 57 06 26  // .R.....&.G.&.W.&
   13D60: 89 47 18 26 89 57 1A 5A C3 51 52 8B D8 E8 91 FF  // .G.&.W.Z.QR.....
   13D70: 8C D0 8E C0 26 8B 77 02 26 8B 74 02 81 3C 5A 5A  // ....&.w.&.t..<ZZ
   13D80: 74 5B 26 8B 77 02 26 8B 74 02 80 3C 63 75 E1 26  // t[&.w.&.t..<cu.&
   13D90: 8B 77 02 26 FF 44 02 8B C3 E8 21 F8 26 89 47 08  // .w.&.D....!.&.G.
   13DA0: 26 89 57 0A 8B C3 E8 FA F7 26 89 47 14 26 89 57  // &.W......&.G.&.W
   13DB0: 16 8C D1 8E C1 26 8B 57 04 26 8B 47 06 26 3B 47  // .....&.W.&.G.&;G
   13DC0: 0A 75 AD 26 3B 57 08 75 A7 26 8B 77 02 26 8B 04  // .u.&;W.u.&.w.&..
   13DD0: 26 03 47 14 8B DE 26 89 47 02 5A 59 C3 26 8B 5F  // &.G...&.G.ZY.&._
   13DE0: 02 26 83 47 02 02 5A 59 C3 52 57 8B D8 8C D0 8E  // .&.G..ZY.RW.....
   13DF0: C0 26 8B 77 02 26 8B 74 02 8A 54 01 84 D2 75 08  // .&.w.&.t..T...u.
   13E00: 26 C7 47 22 00 00 EB 2F 80 FA FF 75 14 26 8B 77  // &.G".../...u.&.w
   13E10: 02 26 8B 3F 26 8B 34 26 2B 75 02 26 89 77 22 EB  // .&.?&.4&+u.&.w".
   13E20: 16 26 8B 07 E8 E3 02 8B F0 8A C2 32 E4 03 C0 03  // .&.........2....
   13E30: F0 8B 04 26 89 47 22 26 8B 5F 02 26 83 47 02 02  // ...&.G"&._.&.G..
   13E40: 5F 5A C3 8B D8 26 80 67 2F F9 26 8B 77 02 26 8B  // _Z...&.g/.&.w.&.
   13E50: 74 02 8A 44 01 26 88 47 34 26 8B 5F 02 26 83 47  // t..D.&.G4&._.&.G
   13E60: 02 03 C3 8B D8 26 8B 77 02 26 8B 74 02 8B 74 01  // .....&.w.&.t..t.
   13E70: 26 89 77 20 EB E3 53 8B D8 26 8A 47 2C 32 E4 24  // &.w ..S..&.G,2.$
   13E80: 03 26 80 67 2F F9 C1 E0 09 26 09 47 2E E9 4F F5  // .&.g/....&.G..O.
   13E90: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
   13EA0: 89 47 04 26 C7 47 06 00 00 8B C3 E8 40 04 26 8B  // .G.&.G......@.&.
   13EB0: 5F 02 26 83 47 02 02 C3 8B D8 26 8B 77 02 26 8B  // _.&.G.....&.w.&.
   13EC0: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  // t..D.2.&.G.&.G..
   13ED0: 00 8B C3 E8 08 04 EB D6 53 56 8B D8 26 8B 77 02  // ........SV..&.w.
   13EE0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
   13EF0: 06 00 00 8B C3 E8 06 04 E9 86 F4 53 56 8B D8 26  // ...........SV..&
   13F00: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  // .w.&.t..D.2.&.G.
   13F10: 26 C7 47 06 00 00 8B C3 E8 F0 03 E9 63 F4 53 56  // &.G.........c.SV
   13F20: 8B D8 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01 83  // ..&.w...&._.._..
   13F30: C3 03 26 01 5C 02 5E 5B C3 51 52 8B D8 26 8B 77  // ..&.\.^[.QR..&.w
   13F40: 02 26 83 44 02 02 26 8B 07 E8 A0 01 8B C8 26 8B  // .&.D..&.......&.
   13F50: 77 28 8A 44 01 32 E4 03 C0 8B F1 03 F0 83 3C 00  // w(.D.2........<.
   13F60: 74 4F 26 8B 77 28 8A 54 01 32 F6 8B C3 E8 B0 01  // tO&.w(.T.2......
   13F70: 26 88 47 31 26 8B 77 02 26 8B 34 8B 44 04 C1 E8  // &.G1&.w.&.4.D...
   13F80: 08 32 E4 24 7F C1 E8 02 32 E4 24 1F 26 80 67 2F  // .2.$....2.$.&.g/
   13F90: 07 C1 E0 0B 26 09 47 2E 26 8B 37 26 8B 47 2E C1  // ....&.G.&.7&.G..
   13FA0: E8 0B C1 E0 02 26 01 04 26 C6 47 32 01 26 89 4F  // .....&..&.G2.&.O
   13FB0: 28 5A 59 C3 53 8B D8 26 C6 47 32 82 5B C3 57 8B  // (ZY.S..&.G2.[.W.
   13FC0: D8 8C D6 8E C6 26 80 7F 2C 05 74 0A 26 8A 47 2C  // .....&..,.t.&.G,
   13FD0: 26 3A 47 30 75 1E 26 8B 77 02 26 8B 74 02 26 8B  // &:G0u.&.w.&.t.&.
   13FE0: 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89  // ..&.=.t...&._.&.
   13FF0: 77 02 5F C3 26 8B 5F 02 26 83 47 02 03 5F C3 53  // w._.&._.&.G.._.S
   14000: 56 57 8B D8 8C D6 8E C6 26 80 7F 30 01 74 0A 26  // VW......&..0.t.&
   14010: 8A 47 30 26 3A 47 2C 75 20 26 8B 77 02 26 8B 74  // .G0&:G,u &.w.&.t
   14020: 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F  // .&...&.=.t...&._
   14030: 02 26 89 77 02 5F 5E 5B C3 26 8B 5F 02 26 83 47  // .&.w._^[.&._.&.G
   14040: 02 03 EB F1 53 56 57 8B D8 8C D0 8E C0 26 80 7F  // ....SVW......&..
   14050: 30 01 74 E5 EB C3 55 8B EC 53 51 52 57 8B D8 26  // 0.t...U..SQRW..&
   14060: 8B 77 02 26 8B 74 02 8A 04 26 C6 47 3D 00 8C D1  // .w.&.t...&.G=...
   14070: 8E C1 26 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57  // ..&..=.s &.w.&.W
   14080: 3D 32 F6 26 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26  // =2.&.|.........&
   14090: 88 54 35 26 FE 47 3D EB D5 26 8B 7F 02 8A D0 32  // .T5&.G=..&.....2
   140A0: F6 8B F2 C1 E6 02 8A 94 9F A1 26 01 55 02 26 8B  // ..........&.U.&.
   140B0: 7F 28 8A 55 01 80 E2 07 26 88 57 2D 26 8B 7F 28  // .(.U....&.W-&..(
   140C0: 8A 55 01 C0 EA 03 80 E2 07 26 88 57 2B 26 8B 7F  // .U.......&.W+&..
   140D0: 28 8A 55 01 C0 EA 06 26 88 57 2A 8A 94 9E A1 26  // (.U....&.W*....&
   140E0: 88 57 2C 8D 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8  // .W,.f._ZY[].SV..
   140F0: 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E  // &.w....tH.....t.
   14100: 8B C6 03 C3 83 C0 04 5E 5B C3 53 56 8B D8 26 8B  // .......^[.SV..&.
   14110: 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 20 EB E0  // w....tH.....t ..
   14120: 8A C2 C3 16 07 55 8B EC 53 51 56 57 83 EC 40 8B  // .....U..SQVW..@.
   14130: F8 89 46 B8 E8 D3 FF 8B D8 89 46 E0 26 8B 45 02  // ..F.......F.&.E.
   14140: 8B 5F 2E 03 D8 89 5E DE 83 46 DE 04 8B C7 E8 9B  // ._....^..F......
   14150: FF 89 46 E0 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6  // ..F.2..F......2.
   14160: 03 D2 8B 5E E0 03 DA 83 3F 00 0F 84 65 01 88 46  // ...^....?...e..F
   14170: E9 80 66 E7 F9 C6 46 EC 00 C7 46 D8 00 00 66 C7  // ..f...F...F...f.
   14180: 46 D0 00 00 00 00 C7 46 F6 00 00 C6 46 EA 01 EB  // F......F....F...
   14190: 06 3C 01 0F 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0  // .<......V...2...
   141A0: 8B 5E E0 03 D8 83 3F 00 74 75 26 8B 45 02 8B 1F  // .^....?.tu&.E...
   141B0: 03 D8 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1  // ...G.2......2...
   141C0: FE 83 F9 00 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B  // ....t...3.P.....
   141D0: D8 89 46 BA 85 C0 74 41 83 C0 08 26 89 47 04 8A  // ..F...tA...&.G..
   141E0: C2 32 E4 03 C0 8B 5E E0 03 D8 26 8B 45 02 03 07  // .2....^...&.E...
   141F0: 8B 5E BA 26 89 07 8B 5E BA 26 8B 07 83 C0 06 26  // .^.&...^.&.....&
   14200: 89 47 02 8B 5E BA 8B 76 F6 26 89 77 06 8B 5E BA  // .G..^..v.&.w..^.
   14210: 89 5E F6 C6 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6  // .^..F.....F.....
   14220: 46 EA 83 8A 46 EA 32 E4 83 F8 10 0F 8F 99 00 88  // F...F.2.........
   14230: 66 EA 8A 46 EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B  // f..F.2..........
   14240: 5E BA 8E C0 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B  // ^...&._..^..^.&.
   14250: 5F 02 80 3F 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B  // _..?[uJ.F...^.&.
   14260: 5F 06 89 5E F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4  // _..^..^.&...G.2.
   14270: 8B C8 83 C1 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89  // .....2.......^..
   14280: 5E BA 85 DB 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32  // ^...t.&...G....2
   14290: E4 24 7F C1 E8 02 C1 E0 02 8B 5E B8 26 29 07 EB  // .$........^.&)..
   142A0: 91 8D 46 B8 E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A  // ..F.......F.....
   142B0: DA 32 FF C1 E3 02 8D 46 B8 FF 97 9C A1 E9 72 FF  // .2.....F......r.
   142C0: 83 7E F6 00 0F 85 C9 FE 80 7E EA 10 74 05 8A 46  // .~.......~..t..F
   142D0: EA EB 02 32 C0 8D 66 F8 5F 5E E9 0B FE C3 53 51  // ...2..f._^....SQ
   142E0: 8B D8 26 8A 4F 04 32 ED E8 E5 E7 59 5B C3 53 51  // ..&.O.2....Y[.SQ
   142F0: 8B D8 26 8A 4F 04 32 ED E8 E0 E7 59 5B C3 53 8B  // ..&.O.2....Y[.S.
   14300: D8 26 8A 47 04 32 E4 E6 80 5B C3 53 51 8B D8 26  // .&.G.2...[.SQ..&
   14310: 8A 4F 04 32 ED E8 34 E1 59 5B C3 53 8B D8 66 50  // .O.2..4.Y[.S..fP
   14320: 66 52 66 51 66 26 8B 47 08 66 26 8B 57 10 66 26  // fRfQf&.G.f&.W.f&
   14330: 8B 4F 04 66 F7 F1 66 26 89 47 0C 66 26 89 57 10  // .O.f..f&.G.f&.W.
   14340: 66 59 66 5A 66 58 5B C3 53 8B D8 66 50 66 52 66  // fYfZfX[.S..fPfRf
   14350: 51 66 26 8B 47 08 66 26 8B 4F 04 66 F7 E1 66 26  // Qf&.G.f&.O.f..f&
   14360: 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3  // .G.f&.W.fYfZfX[.
   14370: 53 57 8B D8 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8  // SW..&._......f..
   14380: 10 92 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B 57  // .._[.SW..&.G.&.W
   14390: 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A  // .....f..........
   143A0: EB EB D8 53 52 57 8B D8 26 8B 47 08 26 8B 57 0A  // ...SRW..&.G.&.W.
   143B0: 92 66 C1 E0 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A  // .f.....&._...._Z
   143C0: 5B C3 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92 66  // [.SR..&.G.&.W..f
   143D0: C1 E0 10 8B C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A  // .....&._&._....Z
   143E0: 5B C3 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96  // [.SRV..&.\&._...
   143F0: EA 8B D0 66 C1 E8 10 92 26 89 44 1C 26 89 54 1E  // ...f....&.D.&.T.
   14400: 5E 5A 5B C3 53 51 52 57 8B D8 26 8B 47 08 26 8B  // ^Z[.SQRW..&.G.&.
   14410: 57 0A 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14 26  // W..f.......&.G.&
   14420: 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02  // .W.....f........
   14430: 8B C1 E8 EA E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10  // ....._ZY[...f...
   14440: 92 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // ....fPfQfRfSfUfV
   14450: 66 57 0E 1F 0A C0 75 06 E8 07 01 E9 A8 00 3C 01  // fW....u.......<.
   14460: 75 06 E8 37 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9  // u..7....<.u.._..
   14470: 94 00 3C 03 75 0B E8 91 03 8B EC 89 5E 0C E9 85  // ..<.u.......^...
   14480: 00 3C 04 75 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC  // .<.u..}<.u......
   14490: 89 56 10 EB 71 3C 06 75 10 E8 8C 03 8B EC 89 5E  // .V..q<.u.......^
   144A0: 0C 89 4E 14 89 56 10 EB 5D 3C 07 75 02 EB 55 3C  // ..N..V..]<.u..U<
   144B0: 08 75 0A E8 D0 03 8B EC 88 7E 0D EB 49 3C 09 75  // .u.......~..I<.u
   144C0: 02 EB 41 3C 0A 75 10 E8 65 04 8B EC 89 4E 14 89  // ..A<.u..e....N..
   144D0: 7E 00 8C 46 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75  // ~..F../<.u..'<.u
   144E0: 0A E8 5A 04 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB  // ..Z....^...<.u..
   144F0: 13 3C 15 75 0F E8 80 04 8B EC 89 5E 0C EB 07 B8  // .<.u.......^....
   14500: 4F 01 EB 02 32 C0 8B EC 89 46 18 66 5F 66 5E 66  // O...2....F.f_f^f
   14510: 5D 66 5B 66 5A 66 59 66 58 07 1F C3 50 1E 2E 8E  // ]f[fZfYfX...P...
   14520: 1E 8E 23 8C D8 A3 68 68 A3 78 68 A3 8A 68 2E 8E  // ..#...hh.xh..h..
   14530: 1E 86 23 A3 AA 04 1F 58 CB 00 30 31 2E 30 30 00  // ..#....X..01.00.
   14540: 56 45 53 41 00 03 D0 01 00 00 01 00 00 00 00 00  // VESA............
   14550: 00 00 00 03 13 20 ED 00 00 00 80 00 00 00 B6 58  // ..... .........X
   14560: 00 00 B9 3F 00 8B DF 83 C7 04 FC 66 33 C0 F3 66  // ...?.......f3..f
   14570: AB 8B FB BE BC 58 B9 22 00 F3 A4 06 1F 8C 4F 08  // .....X."......O.
   14580: 8C 47 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89  // .G..O..O..O ..".
   14590: 7F 0E 0E 1F E8 8F DD B0 4F 32 E4 C3 56 51 57 B9  // ........O2..VQW.
   145A0: 10 00 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F C7 05  // ..f3..f._Y......
   145B0: BB 00 C6 45 02 07 C7 45 04 40 00 C7 45 06 40 00  // ...E...E.@..E.@.
   145C0: C6 45 1B 06 C6 45 18 01 C6 45 1A 01 C6 45 1E 01  // .E...E...E...E..
   145D0: 66 C7 45 3E 00 84 D7 17 8E DB E8 5D D6 66 0B C0  // f.E>.......].f..
   145E0: 0F 84 E1 00 06 1F 66 89 45 28 8C C8 66 C1 E0 10  // ......f.E(..f...
   145F0: B8 75 5C 66 89 45 0C 81 F9 FF 81 0F 84 C2 00 80  // .u\f.E..........
   14600: E5 03 B2 01 53 8E DB BE 80 4C E8 3B DB 5B 06 1F  // ....S....L.;.[..
   14610: 0F 84 B1 00 53 E8 B7 DD 66 89 45 12 C7 45 16 08  // ....S...f.E..E..
   14620: 10 8D 5C 0C E8 8E E8 66 89 45 1F 66 89 45 36 8D  // ..\....f.E.f.E6.
   14630: 5C 10 E8 80 E8 66 89 45 23 66 89 45 3A 8D 5C 08  // \....f.E#f.E:.\.
   14640: E8 72 E8 0A C0 75 03 5B EB 7B E8 82 DD 66 C1 E8  // .r...u.[.{...f..
   14650: 10 3D 58 02 74 0D 3D 5E 01 74 08 77 0A C6 45 17  // .=X.t.=^.t.w..E.
   14660: 08 EB 04 C6 45 17 0E 2E A1 88 23 89 45 08 8D 5C  // ....E.....#.E..\
   14670: 04 E8 41 E8 66 8B C8 66 C1 E9 10 D3 E0 89 45 10  // ..A.f..f......E.
   14680: 89 45 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8  // .E2.....E..\..%.
   14690: 5B 3D 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3  // [=..w/S.....3...
   146A0: 5B FE C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53  // [...E..E5.E4..WS
   146B0: BE 80 4C E8 ED D5 5B 5F 0B C9 75 05 06 1F 83 25  // ..L...[_..u....%
   146C0: FE 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB  // .2......O..^....
   146D0: FF 81 74 68 0A FF 75 04 8B C3 EB 21 F6 C7 08 75  // ..th..u....!...u
   146E0: 61 8B CB B2 01 BE 20 4C E8 5D DA 74 55 E8 BE DC  // a..... L.].tU...
   146F0: 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02  // ..u.f...........
   14700: EB 3A E8 12 D8 74 06 E8 A1 D6 E8 8D D1 BE 20 4C  // .:...t........ L
   14710: E8 64 D5 74 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00  // .d.t-....,.f. L.
   14720: 4C E8 81 DC BE 00 4C E8 84 DC 66 C1 E8 10 8B D8  // L.....L...f.....
   14730: 32 C0 F6 C7 80 74 02 B0 40 E8 94 D5 B0 4F 32 E4  // 2....t..@....O2.
   14740: EB 04 B0 4F B4 03 C3 56 06 33 C0 8E C0 BE 20 4C  // ...O...V.3.... L
   14750: E8 7C DC 8B C8 66 C1 E8 10 8B D0 C1 E9 03 26 89  // .|...f........&.
   14760: 0E 4A 04 C1 EA 04 FE CA 26 88 16 84 04 26 C6 06  // .J......&....&..
   14770: 51 04 00 26 C6 06 50 04 00 26 C6 06 49 04 62 26  // Q..&..P..&..I.b&
   14780: C7 06 4C 04 00 A0 26 C6 06 85 04 10 26 C7 06 0C  // ..L...&.....&...
   14790: 01 41 72 8C C8 26 A3 0E 01 07 5E C3 01 0F 00 0A  // .Ar..&....^.....
   147A0: 00 00 00 00 00 40 05 0F FF 00 01 02 03 04 05 06  // .....@..........
   147B0: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4  // ................
   147C0: 03 B8 00 01 EF B9 04 00 B4 01 BE 18 5B AC 86 E0  // ............[...
   147D0: EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9 09 00 BA CE  // ................
   147E0: 03 32 E4 BE 1C 5B 8A C4 EE AC 42 EE 4A FE C4 E2  // .2...[....B.J...
   147F0: F5 BA DA 03 EC B9 14 00 BA C0 03 32 E4 BE 25 5B  // ...........2..%[
   14800: 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00 4C E8 9E DB  // ............L...
   14810: 66 C1 E8 10 8B D8 E8 6E DB 75 05 E8 5A DB 75 04  // f......n.u..Z.u.
   14820: B8 4F 00 C3 B8 4F 03 C3 E8 5C DB 74 53 BE 00 4C  // .O...O...\.tS..L
   14830: 80 FB 00 74 18 80 FB 01 75 05 E8 9A DB EB 1D 80  // ...t....u.......
   14840: FB 02 75 10 8B C1 E8 4D DB D3 E8 8B C8 E8 27 D6  // ..u....M......'.
   14850: 74 2E EB 08 80 FB 03 75 24 E8 F1 DA E8 37 DB 8B  // t......u$....7..
   14860: D8 D3 E3 50 33 C0 BA 00 03 3B DA 77 05 BA FF FF  // ...P3....;.w....
   14870: EB 04 F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3  // ......X...O..2..
   14880: B0 4F B4 03 C3 00 0A DB 75 07 8A EF E8 F0 D6 EB  // .O......u.......
   14890: 05 E8 D5 D6 8A F8 B0 4F 32 E4 C3 00 E8 E8 DA 74  // .......O2......t
   148A0: 2C BE 00 4C E8 07 DB 66 C1 E8 10 F6 C4 40 75 1D  // ,..L...f.....@u.
   148B0: 0A FF 75 05 E8 1E 00 EB 0F 80 FF 01 75 14 BB 13  // ..u.........u...
   148C0: 00 E8 BF E5 D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4  // .........O2...O.
   148D0: 03 C3 32 C0 C3 52 53 66 50 81 E2 FF 02 D1 E2 8B  // ..2..RSfP.......
   148E0: C2 40 66 C1 E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12  // .@f.............
   148F0: 00 E8 EA E4 66 58 5B 5A C3 9C 1E 06 66 50 66 51  // ....fX[Z....fPfQ
   14900: 66 52 66 53 66 55 66 56 66 57 0E 1F E8 08 E6 E8  // fRfSfUfVfW......
   14910: 8A FF E8 27 E6 8B EC 89 56 10 89 46 18 66 5F 66  // ...'....V..F.f_f
   14920: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F 9D CB 0E  // ^f]f[fZfYfX.....
   14930: 07 BF 44 A0 2E 8B 0E 42 A0 B8 4F 00 C3 00 0A DB  // ..D....B..O.....
   14940: 75 06 B7 04 B3 10 EB 26 80 FB 01 75 14 E8 C7 D5  // u......&...u....
   14950: 75 21 53 B1 01 0A FF 74 02 B1 00 E8 E1 D4 5B EB  // u!S....t......[.
   14960: 0D 80 FB 02 75 0D E8 F4 D5 8A F8 C0 E7 02 B0 4F  // ....u..........O
   14970: 32 E4 C3 B8 4F 03 C3 00 80 E3 01 0A DB 75 05 BB  // 2...O........u..
   14980: 02 01 EB 0E E8 90 D5 75 0E 33 C0 53 E8 17 C9 5B  // .......u.3.S...[
   14990: 74 05 B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72  // t..O2...O......r
   149A0: 03 CD 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55  // ..B...fPfQfRfSfU
   149B0: 66 56 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E  // fVfW..P.......X.
   149C0: FF 94 62 5D 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ..b]f_f^f]f[fZfY
   149D0: 66 58 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58  // fX.....P.......X
   149E0: 2E FF 94 62 5D C3 9C 5D AC 96 C5 96 E2 96 8F 5E  // ...b]..].......^
   149F0: E5 8D 17 8E 8A 8E 0D 8F 9B 90 9F 90 A8 93 79 94  // ..............y.
   14A00: FC 94 63 95 FE 96 60 97 09 9A A8 60 50 9E 50 5D  // ..c...`....`P.P]
   14A10: 50 5D 50 5D 50 5D 50 5D 50 5D 20 9F 23 83 77 84  // P]P]P]P]P] .#.w.
   14A20: 2E 8E 1E 86 23 80 26 87 04 F3 50 8A E0 80 E4 7F  // ....#.&...P.....
   14A30: E8 C4 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1  // ...;.u.X........
   14A40: 30 26 F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49  // 0&.G..t.... ..uI
   14A50: B5 09 EB 06 A8 01 74 41 B5 0B 53 E8 6A 41 0A FF  // ......tA..S.jA..
   14A60: 5B 75 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80  // [u..&........+X.
   14A70: 0E 87 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63  // .....&.........c
   14A80: 04 C7 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01  // ................
   14A90: 2E 6A 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E  // .j.....B..&.....
   14AA0: 10 04 58 53 50 0E 1F 33 C9 8A C8 E8 69 D4 74 06  // ..XSP..3....i.t.
   14AB0: E8 F8 D2 E8 E4 CD B2 08 BE 40 4C E8 8A D6 BE 40  // .........@L....@
   14AC0: 4C E8 B3 D1 58 5B 0F 84 6E FF 2E 8E 1E 86 23 0E  // L...X[..n.....#.
   14AD0: 07 E8 13 29 0E 1F 53 66 BB 40 4C 00 4C E8 C5 D8  // ...)..Sf.@L.L...
   14AE0: BE 00 4C B0 20 E8 E8 D1 5B 2E 8E 1E 86 23 0E 07  // ..L. ...[....#..
   14AF0: E8 1C 2E E8 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8  // ....$..(=.......
   14B00: AE 3E 0E 1F BE 00 4C B0 10 E8 C4 D1 E8 F7 2D E8  // .>....L.......-.
   14B10: EF 2D C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00  // .-....F..../....
   14B20: E8 BD 00 E8 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16  // ....R..\..S.....
   14B30: 63 04 B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43  // c......0.2.&.'.C
   14B40: FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03  // ....[...2...S...
   14B50: 83 C3 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80  // ........&.'<.u..
   14B60: CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03  // . .C....[&.G....
   14B70: EE B2 C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03  // ............#...
   14B80: 26 F6 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D  // &.G..u........t.
   14B90: 83 C6 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07  // ..............t.
   14BA0: 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B  // ...&...F.....S..
   14BB0: DE B9 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07  // ....2........&..
   14BC0: EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B  // .C.....2.....I-.
   14BD0: ED 74 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3  // .t........F...[.
   14BE0: 53 83 C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF  // S..7...2....&.'.
   14BF0: 43 FE C0 E2 F7 5B C3 BB 66 62 0E 07 8B D3 0A E4  // C....[..fb......
   14C00: 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6  // }......3.....<J.
   14C10: 06 89 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C  // ....u ...$.<.~$<
   14C20: 08 74 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03  // .t <.t.<.t..@...
   14C30: D8 81 C3 00 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3  // .......@........
   14C40: 80 04 C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6  // ....@........u..
   14C50: 06 89 04 10 75 05 81 C3 00 01 C3 81 C3 00 05 C3  // ....u...........
   14C60: BF E8 5F BE 09 60 33 C9 E8 4E 00 C3 04 80 00 05  // .._..`3..N......
   14C70: 80 00 06 C0 00 0D 80 02 0E C0 02 0F 80 03 10 C0  // ................
   14C80: 03 11 40 05 12 80 05 13 C0 05 62 40 01 53 8A 1E  // ..@.......b@.S..
   14C90: 49 04 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 25 60  // I......2......%`
   14CA0: A2 65 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29  // .e..&f.[.,0(0-0)
   14CB0: 30 2A 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03  // 0*0.0.?)0.8%u...
   14CC0: 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E  // ].3.....;.u.....
   14CD0: 8E 1E 86 23 F6 06 87 04 80 75 49 83 3E 4C 04 00  // ...#.....uI.>L..
   14CE0: 74 42 A0 49 04 B9 00 20 2E 8B 3E 8C 23 26 F6 47  // tB.I... ..>.#&.G
   14CF0: 33 01 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E 8A 23  // 3.u.&.G..u...>.#
   14D00: EB 14 3C 06 7E 0B 2E 8B 3E 88 23 26 8A 67 37 B5  // ..<.~...>.#&.g7.
   14D10: 40 66 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33  // @f3...f. . ...f3
   14D20: FF F3 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E 86  // ..f..&..........
   14D30: 23 80 FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B  // #...u..z... u...
   14D40: 01 80 FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02  // ...2u......u....
   14D50: B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2  // .............$..
   14D60: C2 EE E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E  // .......5u(<.u...
   14D70: 89 04 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A  // ..@.......@.....
   14D80: C0 0F 84 CA 00 FE C8 75 06 E8 98 07 E9 BA 00 E9  // .......u........
   14D90: BD 00 80 FB 30 74 03 E9 96 00 50 E8 2A 3E 8A EF  // ....0t....P.*>..
   14DA0: BA CC 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01  // ......X..u0.....
   14DB0: 75 12 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7  // u...u....$0<0u..
   14DC0: 02 E9 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80  // .......$0<0u....
   14DD0: 26 89 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80  // &..o......6<.uA.
   14DE0: 26 89 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04  // &..o.....u......
   14DF0: 24 30 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11  // $0<0t.....t.....
   14E00: A0 10 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7  // ...$0<0u.....t..
   14E10: 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29  // ...............)
   14E20: 3C 02 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4  // <.u+.&..o.......
   14E30: 80 FB 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89  // ..1u...t.<.u....
   14E40: 04 08 EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3  // .....&......F...
   14E50: 80 FB 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89  // ..3u.<.t.<.u..&.
   14E60: 04 FD EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17  // .............4u.
   14E70: 3C 00 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80  // <.u..&.....<.u..
   14E80: 0E 87 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C  // .........6u&. .<
   14E90: 01 74 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB  // .t....<.t.......
   14EA0: A8 9C FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE  // .........B."....
   14EB0: 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7  // .............u..
   14EC0: 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B  // ..........%.....
   14ED0: EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06  // ..^..N..F.......
   14EE0: 14 00 10 88 8C 0E 16 00 9D C3 28 18 08 00 08 09  // ..........(.....
   14EF0: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
   14F00: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
   14F10: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
   14F20: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
   14F30: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
   14F40: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
   14F50: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
   14F60: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09  // ..........(...@.
   14F70: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
   14F80: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
   14F90: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
   14FA0: 00 00 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01  // ......0...P...@.
   14FB0: 01 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00  // ...c_OP.T.......
   14FC0: 00 00 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17  // .......(........
   14FD0: 17 17 17 17 17 17 17 17 17 17 17 17 17 01 00 01  // ................
   14FE0: 00 00 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00  // ..........P.....
   14FF0: 03 00 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
   15000: 00 00 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08  // ......](.c......
   15010: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
   15020: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
   15030: 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
   15040: 00 00 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02  // .......P........
   15050: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
   15060: 00 10 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B  // ......@.........
   15070: 14 28 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11  // .(..-2 $8?......
   15080: 14 18 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18  // ... $(-28?......
   15090: 16 15 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23  // ....%/83.*%')*,#
   150A0: 19 10 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39  // ..#%'*,+*))-27;9
   150B0: 37 34 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34  // 74234551,'/02344
   150C0: 33 33 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37  // 33258:=<:98899:7
   150D0: 34 31 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17  // 41..............
   150E0: 15 13 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13  // ................
   150F0: 13 13 12 14 16 18 1A 19 18 17 16 17 17 17 18 15  // ................
   15100: 14 11 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B  // ................
   15110: 1A 19 19 19 19 19 1A 18 17 16 02 03 04 05 07 06  // ................
   15120: 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09  // ................
   15130: 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F  // ................
   15140: 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D  // ................
   15150: 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E  // ................
   15160: 0D 0C 00 00 00 00 00 00 00 00 28 18 08 00 20 09  // ..........(... .
   15170: 0F 00 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00  // ...c-'(.+.......
   15180: 00 00 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02  // ................
   15190: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
   151A0: 00 00 00 00 00 00 00 05 0F FF 50 18 08 00 40 01  // ..........P...@.
   151B0: 0F 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00  // ...c_OP.T.......
   151C0: 00 00 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02  // .......(........
   151D0: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
   151E0: 00 00 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B  // ................
   151F0: 25 28 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E  // %(... ..(,..%*..
   15200: 32 36 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18  // 26..',. 49...$..
   15210: 2C 30 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24  // ,0..!&...3..+0.$
   15220: 38 3D 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8=..-2 $8?......
   15230: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
   15240: 38 3F 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8?..-2 $8?......
   15250: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
   15260: 38 3F 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01  // 8?..-2 $8?P.....
   15270: 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
   15280: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00  // ......](.c......
   15290: 00 18 18 00 00 00 08 00 00 00 18 00 00 0B 00 05  // ................
   152A0: 00 00 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01  // ..........P.....
   152B0: 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
   152C0: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02  // ......](.c......
   152D0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
   152E0: 00 00 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09  // ..........(.....
   152F0: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
   15300: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
   15310: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
   15320: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
   15330: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
   15340: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
   15350: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
   15360: 00 00 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08  // ..........(.....
   15370: 03 00 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E  // ...g-'(.+....O..
   15380: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
   15390: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
   153A0: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
   153B0: 03 00 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...g_OP.U....O..
   153C0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
   153D0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
   153E0: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
   153F0: 03 00 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...f_OP.U....O..
   15400: 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08  // .......(........
   15410: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
   15420: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
   15430: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
   15440: 00 00 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F  // .......(......??
   15450: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F  // ?????????????...
   15460: 00 00 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01  // ..........P.....
   15470: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
   15480: 00 00 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02  // .......(........
   15490: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
   154A0: 00 00 00 00 00 00 00 05 0F FF 28 18 08 00 20 01  // ..........(... .
   154B0: 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00  // ...c_OP.T....A..
   154C0: 00 00 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02  // .......(@.......
   154D0: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F  // .............A..
   154E0: 00 00 00 00 00 00 40 05 0F FF 66 62 00 C0 00 00  // ......@...fb....
   154F0: 00 00 00 00 00 00 00 00 00 00 86 68 00 C0 00 00  // ...........h....
   15500: 00 00 00 00 00 00 00 00 00 00 1A 00 1E A0 00 C0  // ................
   15510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15520: 00 00 00 00 1E E8 10 00 2E 8E 1E 86 23 E8 F8 36  // ............#..6
   15530: E8 CF 36 E8 70 1A 1F C3 2E 8E 1E 86 23 C7 06 87  // ..6.p.......#...
   15540: 04 60 F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2  // .`...........$..
   15550: 89 04 B4 01 E8 6D 1E A0 89 04 80 26 10 04 CF 80  // .....m.....&....
   15560: 0E 10 04 20 C7 06 63 04 D4 03 0E 1F E8 89 C3 F7  // ... ..c.........
   15570: C1 02 00 75 03 E8 22 C3 C3 1E 2E 8E 1E 86 23 0E  // ...u..".......#.
   15580: 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8  // ..........t..S..
   15590: 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F  // ..........>c..u/
   155A0: BE E2 69 B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1  // ..i.@.3.........
   155B0: EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04  // ..........B...E.
   155C0: EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26  // ...E....J......&
   155D0: 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF E6 63  // .G+.....t1.....c
   155E0: 3C 08 74 11 B9 40 00 BF 66 65 3C 38 74 07 3C 3F  // <.t..@..fe<8t.<?
   155F0: 74 03 BF A6 65 33 DB 9C FA 8A C3 EE 2E 8A 01 42  // t...e3.........B
   15600: EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C  // .....J....I<.t%<
   15610: 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 46 D3  // 8t.<?t*...3.Q.F.
   15620: B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59  // .......t.....g.Y
   15630: E2 EA EB 20 E8 2F D3 B9 10 00 33 DB E8 57 00 EB  // ... ./....3..W..
   15640: 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE  // ..@.3.Q.(...../.
   15650: C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F  // .Y..[..*.*.*.*.?
   15660: 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A  // .?.?.?.*.?.*.?.*
   15670: 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 D2 69 8B  // .?............i.
   15680: FB D1 EF 83 E7 0F 2E 8A AD D2 69 8B FB 83 E7 0F  // ..........i.....
   15690: 2E 8A 8D D2 69 C3 9C 8A C3 FA EE 2E 8A 05 42 EE  // ....i.........B.
   156A0: 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7  // G....G....G..J..
   156B0: 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99  // ..........~.....
   156C0: 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38  // .~|.....|.....|8
   156D0: 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10  // ...8|.|8...8....
   156E0: 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18  // 8.8|..l.8...<~<.
   156F0: 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C  // ............<ff<
   15700: 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC  // .............6x.
   15710: CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70  // .x~..~.~.......p
   15720: F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C  // .`>>66.f...<f.f<
   15730: DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06  // .............>..
   15740: 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00  // ...<~.~<..fffff.
   15750: 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38  // f...{;....<f8ll8
   15760: CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C  // .x.........<~.~<
   15770: 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C  // .~.<~.........~<
   15780: 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30  // ...........0p.p0
   15790: 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24  // ...........$f.f$
   157A0: 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10  // ....8||.....||8.
   157B0: 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00  // ...........<<...
   157C0: 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C  // ..lll.....ll.l.l
   157D0: 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60  // l..~.|........0`
   157E0: C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00  // ..8l8v..v...0...
   157F0: 00 00 18 30 60 60 60 30 18 00 60 30 18 18 18 30  // ...0```0..`0...0
   15800: 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18  // `...|.|......~..
   15810: 00 00 00 00 00 00 18 18 30 00 00 00 00 FE 00 00  // ........0.......
   15820: 00 00 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0  // .......88....0`.
   15830: 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18  // ..|.....|..x....
   15840: 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6  // ~.|...0f..|..<..
   15850: 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6  // |...<l..........
   15860: 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18  // |.|.....|.......
   15870: 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6  // ..|..|..|.|..~..
   15880: 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18  // |...............
   15890: 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE  // .0..0`0.........
   158A0: 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00  // ..`0...0`.|.....
   158B0: 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6  // ..|.....~.8l....
   158C0: C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66  // ...ff|ff..<f...f
   158D0: 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2  // <..lfffl........
   158E0: FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6  // ...b`|``..|.....
   158F0: 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18  // |.........<.....
   15900: 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC  // <.<.....p.......
   15910: C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6  // ...````b........
   15920: C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6  // ..........|.....
   15930: 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6  // |..ff|``..|.....
   15940: 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6  // |.........|..|..
   15950: 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6  // |.~Z....<.......
   15960: 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE  // |.....l8........
   15970: C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18  // ...l888l..fff<..
   15980: 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60  // <.....0b..|`````
   15990: 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C  // |..`0.....|.....
   159A0: 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // |..8l...........
   159B0: 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC  // ..00........x.|.
   159C0: 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6  // ~..`|fff....|...
   159D0: 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0  // |...|...~...|...
   159E0: 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E  // |..60.00x...v..~
   159F0: 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18  // .|.`|fff....8...
   15A00: 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C  // <........x.`flxl
   15A10: E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6  // ............l...
   15A20: C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6  // .....ffff...|...
   15A30: 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C  // |....ff|`...v..|
   15A40: 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06  // .....f``....|.|.
   15A50: 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC  // |.00.006........
   15A60: 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE  // v.....l8........
   15A70: 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76  // l....l8l.......v
   15A80: 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18  // .|....0d.....p..
   15A90: 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E 18 18  // ..........p.....
   15AA0: 70 00 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C  // p.v.........88ll
   15AB0: FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE  // ..<f.f<..x......
   15AC0: 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC  // v...|...|.|.x.|.
   15AD0: 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC  // ~...x.|.~...x.|.
   15AE0: 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18  // ~.88x.|.~...|.|.
   15AF0: 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0  // l8|.|...|...|...
   15B00: 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18  // |...|...|.f.8...
   15B10: 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18  // <.|.8...<...8...
   15B20: 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE  // <..8l.....88.|..
   15B30: C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8  // ............l.~.
   15B40: 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6  // n.~.......|..|..
   15B50: 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6  // |....|..|....|..
   15B60: 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE  // |.|.....v.......
   15B70: 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C  // v...<...<..8l..l
   15B80: 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E  // 8.......|...~..~
   15B90: 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C  // ..8l`.f.l..f<~.<
   15BA0: 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C  // ..>c8.c>...>a<.|
   15BB0: 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18  // ....x.|.~...8...
   15BC0: 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC  // <....|..|.......
   15BD0: 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE  // v.....ff........
   15BE0: C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E  // ..>.>`gc=.>.v..~
   15BF0: 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60  // .|...0`f<....|``
   15C00: 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36  // .....|.......0|6
   15C10: 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C  // .>...0l<~.....<<
   15C20: 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8  // ...6l.l6....l6l.
   15C30: 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA  // ..".".".".U.U.U.
   15C40: 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18  // U..w.w.w.w......
   15C50: 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18  // ................
   15C60: 18 18 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36  // ..6666.666.....6
   15C70: 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36  // 66........66...6
   15C80: 36 36 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36  // 6666666666.....6
   15C90: 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00  // 6666......6666..
   15CA0: 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18  // ................
   15CB0: 18 18 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00  // ................
   15CC0: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18  // ................
   15CD0: 18 18 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18  // ................
   15CE0: 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36  // ..........666676
   15CF0: 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36  // 666670?.....?076
   15D00: 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36  // 6666...........6
   15D10: 36 36 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00  // 6666707666......
   15D20: 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00  // ..66...666......
   15D30: 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18  // ..6666..........
   15D40: 18 18 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00  // .......6666666?.
   15D50: 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18  // ................
   15D60: 18 18 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36  // ......?6666666.6
   15D70: 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00  // 66..............
   15D80: 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF  // ................
   15D90: FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0  // ................
   15DA0: F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00  // ................
   15DB0: 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6  // ....f...f..x....
   15DC0: CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C  // ....b```....llll
   15DD0: 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8  // l...`0`....~....
   15DE0: 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18  // p..ffff|...v....
   15DF0: 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C  // 8..8l.l8..8l...l
   15E00: 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC  // 8.8l..ll..>`8f..
   15E10: 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C  // x...~..~...|...|
   15E20: C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6  // ..8`...`8.|.....
   15E30: C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00  // ............~...
   15E40: 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00  // ~.0...0.~...0...
   15E50: 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78  // ~..............x
   15E60: 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC  // 0.....~....v..v.
   15E70: 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00  // ..|..|..........
   15E80: 00 00 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38  // ...............8
   15E90: 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00  // ...lll....p.0...
   15EA0: 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00  // ....||||........
   15EB0: 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
   15EC0: 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   15ED0: 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81  // .......~........
   15EE0: 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE  // ~......|........
   15EF0: 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38  // |.......l.....|8
   15F00: 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00  // .........8|.|8..
   15F10: 00 00 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10  // .........88.l.l.
   15F20: 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10  // 8.......8||...l.
   15F30: 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00  // 8..........<<<..
   15F40: 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF  // ................
   15F50: FF FF FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18  // ..........<fff<.
   15F60: 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7  // ................
   15F70: FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC  // ..........6x....
   15F80: 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18  // x......<fff<.~..
   15F90: 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8  // ..............x.
   15FA0: 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E  // p......>6>66v.f.
   15FB0: 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB  // .........~<ff<~.
   15FC0: 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0  // ................
   15FD0: 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E  // ..........>~.~>.
   15FE0: 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C  // ........<~....~<
   15FF0: 18 00 00 00 00 00 00 66 66 66 66 66 66 66 00 66  // .......fffffff.f
   16000: 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B  // f...........{...
   16010: 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C  // .......|..`|..|.
   16020: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE  // ..|.............
   16030: FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18  // ........<~...~<.
   16040: 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18  // ~.......<~......
   16050: 18 00 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C  // ..............~<
   16060: 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00  // ................
   16070: 00 00 00 00 00 00 00 00 00 00 30 70 FE 70 30 00  // ..........0p.p0.
   16080: 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00  // ................
   16090: 00 00 00 00 00 00 00 00 00 00 24 66 FF 66 24 00  // ..........$f.f$.
   160A0: 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE  // .........888||..
   160B0: 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10  // ..........|||88.
   160C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   160D0: 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18  // ........<<<<....
   160E0: 18 00 00 00 00 00 36 36 36 36 14 00 00 00 00 00  // ......6666......
   160F0: 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C  // .......lll.ll.ll
   16100: 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6  // l........|..x<..
   16110: 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18 30 66  // |.........bf..0f
   16120: C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC  // .......8l80v~...
   16130: 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // v...............
   16140: 00 00 00 00 00 00 00 0C 18 30 30 30 30 30 30 18  // .........000000.
   16150: 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18  // .......0........
   16160: 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00  // 0.........l8.8l.
   16170: 00 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00  // ............~...
   16180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
   16190: 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00 00 00  // ................
   161A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
   161B0: 18 00 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0  // .............0`.
   161C0: 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6  // .......|........
   161D0: 7C 00 00 00 00 00 00 18 78 18 18 18 18 18 18 18  // |.......x.......
   161E0: 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6  // ~......|.....0`.
   161F0: FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6  // .......|...<....
   16200: 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C  // |........<l.....
   16210: 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6  // ................
   16220: 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6  // |......|........
   16230: 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30  // |...........0000
   16240: 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6  // 0......|...|....
   16250: 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6  // |......|....~...
   16260: 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // |...............
   16270: 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // ................
   16280: 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18  // ..........0`.`0.
   16290: 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00  // ................
   162A0: 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30  // ........`0.....0
   162B0: 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18  // `......|........
   162C0: 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0  // .......|........
   162D0: 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6  // ~......8l.......
   162E0: C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66  // ........fff|ffff
   162F0: FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66  // .......<f......f
   16300: 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C  // <.......lffffffl
   16310: F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66  // ........f`d|d``f
   16320: FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60  // ........f`d|d```
   16330: F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6  // .......|........
   16340: 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6  // |...............
   16350: C6 00 00 00 00 00 00 3C 18 18 18 18 18 18 18 18  // .......<........
   16360: 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8  // <......<........
   16370: 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6  // p...............
   16380: C6 00 00 00 00 00 00 F0 60 60 60 60 60 60 62 66  // ........``````bf
   16390: FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6  // ................
   163A0: C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6  // ................
   163B0: C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
   163C0: 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60  // |.......ffff|```
   163D0: F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6  // .......|........
   163E0: 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66  // |.......fff|xlff
   163F0: E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6  // .......|...p....
   16400: 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18  // |......~Z.......
   16410: 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6  // <...............
   16420: 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38  // |.............l8
   16430: 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6  // ................
   16440: C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6  // ..........l88l..
   16450: C6 00 00 00 00 00 00 66 66 66 66 66 3C 18 18 18  // .......fffff<...
   16460: 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6  // <...........0`..
   16470: FE 00 00 00 00 00 00 7C 60 60 60 60 60 60 60 60  // .......|````````
   16480: 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06  // |..........`0...
   16490: 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C  // .......|........
   164A0: 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00 00 00  // |......8l.......
   164B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   164C0: 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00 00 00  // ................
   164D0: 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC  // ..........x.|...
   164E0: 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // v.......``|fffff
   164F0: FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6  // ..........|.....
   16500: 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC  // |.........|.....
   16510: 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6  // ~.........|.....
   16520: 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30  // |.......600.0000
   16530: 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76  // x.........v....v
   16540: 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // ..|.....``|fffff
   16550: E6 00 00 00 00 00 00 18 18 00 38 18 18 18 18 18  // ..........8.....
   16560: 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C  // <...............
   16570: CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66  // ..x.....``fflxlf
   16580: E6 00 00 00 00 00 00 18 18 18 18 18 18 18 18 18  // ................
   16590: 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6  // ..........l.....
   165A0: C6 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 66  // ...........fffff
   165B0: 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6  // f.........|.....
   165C0: 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C  // |..........ffff|
   165D0: 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C  // ``........v....|
   165E0: 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60  // ...........f````
   165F0: F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6  // ..........|..|..
   16600: 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30 30 36  // |......000.00006
   16610: 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC CC CC  // ................
   16620: 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38  // v.............l8
   16630: 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE  // ................
   16640: 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6  // l...........l8l.
   16650: C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76  // ...............v
   16660: 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62  // ..|...........0b
   16670: FE 00 00 00 00 00 00 0E 18 18 18 70 18 18 18 18  // ...........p....
   16680: 0E 00 00 00 00 00 00 18 18 18 18 00 18 18 18 18  // ................
   16690: 18 00 00 00 00 00 00 70 18 18 18 0E 18 18 18 18  // .......p........
   166A0: 70 00 00 00 00 00 00 76 DC 00 00 00 00 00 00 00  // p......v........
   166B0: 00 00 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE  // ...........88ll.
   166C0: 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18  // .......<f....f<.
   166D0: 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE  // ..8.............
   166E0: 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6  // v.......0.|.....
   166F0: 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC  // |.....0x..x.|...
   16700: 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC  // v.........x.|...
   16710: 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC  // v.....`0..x.|...
   16720: 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC  // v.....8l8.x.|...
   16730: 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18  // v........|....|.
   16740: 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6  // .l8...0x..|.....
   16750: 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6  // |.........|.....
   16760: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6  // |.....0...|.....
   16770: 7C 00 00 00 00 00 00 66 00 00 38 18 18 18 18 18  // |......f..8.....
   16780: 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18 18 18  // <......<f.8.....
   16790: 3C 00 00 00 00 00 00 00 00 00 38 18 18 18 18 18  // <.........8.....
   167A0: 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6  // <.......8l......
   167B0: C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6  // .....8l8.8l.....
   167C0: C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60  // .......0..``|```
   167D0: FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF  // .........f......
   167E0: 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8  // v......~........
   167F0: DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6  // ......0x..|.....
   16800: 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6  // |.........|.....
   16810: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6  // |.....0...|.....
   16820: 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE  // |.....0x........
   16830: 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE  // v.....`0........
   16840: 76 00 00 00 00 00 18 00 3C 18 18 18 18 18 18 18  // v.......<.......
   16850: 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6  // <.......|.......
   16860: 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6  // |...............
   16870: 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18  // |........|....|.
   16880: 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6  // ......8l``.```f.
   16890: 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18  // l.....ffff<.~.<.
   168A0: 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E  // .......>cc0..cc>
   168B0: 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E  // ..........>c8.c>
   168C0: 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC  // ........0.x.|...
   168D0: 76 00 00 00 00 00 0C 18 30 00 38 18 18 18 18 18  // v.......0.8.....
   168E0: 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6  // <.......0.|.....
   168F0: 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC CC DC  // |......0`.......
   16900: 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66  // v......v...fffff
   16910: E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6  // ......v.........
   16920: C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33  // ......!...3``gc3
   16930: 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66  // ......B<.;fff>.f
   16940: 3C 00 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6  // <......00.000`..
   16950: 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60 60 60  // |...........~```
   16960: 00 00 00 00 00 00 00 00 00 00 00 00 7E 06 06 06  // ............~...
   16970: 00 00 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36  // ......``bfl.0`.6
   16980: 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36  // ..>...``bfl.6n.6
   16990: 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C  // ~...........<<<<
   169A0: 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00  // ..........6l.l6.
   169B0: 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00  // ...........l6l..
   169C0: 00 00 00 00 00 11 44 11 44 11 44 11 44 11 44 11  // ......D.D.D.D.D.
   169D0: 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.U.U.U.U.U.
   169E0: 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.w.w.w.w.w.
   169F0: 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18  // w.w.w...........
   16A00: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
   16A10: 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18  // ................
   16A20: 18 18 18 18 18 36 36 36 36 36 36 36 F6 36 36 36  // .....6666666.666
   16A30: 36 36 36 36 36 00 00 00 00 00 00 00 FE 36 36 36  // 66666........666
   16A40: 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18  // 66666...........
   16A50: 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36  // .....66666...666
   16A60: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
   16A70: 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36  // 66666........666
   16A80: 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00  // 6666666666......
   16A90: 00 00 00 00 00 36 36 36 36 36 36 36 FE 00 00 00  // .....6666666....
   16AA0: 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00  // ................
   16AB0: 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 18 18  // ................
   16AC0: 18 18 18 18 18 18 18 18 18 18 18 18 1F 00 00 00  // ................
   16AD0: 00 00 00 00 00 18 18 18 18 18 18 18 FF 00 00 00  // ................
   16AE0: 00 00 00 00 00 00 00 00 00 00 00 00 FF 18 18 18  // ................
   16AF0: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 18 18  // ................
   16B00: 18 18 18 18 18 00 00 00 00 00 00 00 FF 00 00 00  // ................
   16B10: 00 00 00 00 00 18 18 18 18 18 18 18 FF 18 18 18  // ................
   16B20: 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18  // ................
   16B30: 18 18 18 18 18 36 36 36 36 36 36 36 37 36 36 36  // .....66666667666
   16B40: 36 36 36 36 36 36 36 36 36 36 37 30 3F 00 00 00  // 666666666670?...
   16B50: 00 00 00 00 00 00 00 00 00 00 3F 30 37 36 36 36  // ..........?07666
   16B60: 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00  // 6666666666......
   16B70: 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36  // .............666
   16B80: 36 36 36 36 36 36 36 36 36 36 37 30 37 36 36 36  // 6666666666707666
   16B90: 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00  // 66666...........
   16BA0: 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36  // .....66666...666
   16BB0: 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00  // 66666...........
   16BC0: 00 00 00 00 00 36 36 36 36 36 36 36 FF 00 00 00  // .....6666666....
   16BD0: 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18  // ................
   16BE0: 18 18 18 18 18 00 00 00 00 00 00 00 FF 36 36 36  // .............666
   16BF0: 36 36 36 36 36 36 36 36 36 36 36 36 3F 00 00 00  // 666666666666?...
   16C00: 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00  // ................
   16C10: 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18  // ................
   16C20: 18 18 18 18 18 00 00 00 00 00 00 00 3F 36 36 36  // ............?666
   16C30: 36 36 36 36 36 36 36 36 36 36 36 36 FF 36 36 36  // 666666666666.666
   16C40: 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18  // 66666...........
   16C50: 18 18 18 18 18 18 18 18 18 18 18 18 F8 00 00 00  // ................
   16C60: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 18 18  // ................
   16C70: 18 18 18 18 18 FF FF FF FF FF FF FF FF FF FF FF  // ................
   16C80: FF FF FF FF FF 00 00 00 00 00 00 00 00 FF FF FF  // ................
   16C90: FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
   16CA0: F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
   16CB0: 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00  // ................
   16CC0: 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC  // .........v......
   16CD0: 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6  // v......x........
   16CE0: CC 00 00 00 00 00 00 FE 66 62 60 60 60 60 60 60  // ........fb``````
   16CF0: 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C  // `..........lllll
   16D00: 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6  // l........b0..0b.
   16D10: FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8  // ..........~.....
   16D20: 70 00 00 00 00 00 00 00 00 66 66 66 66 66 7C 60  // p........fffff|`
   16D30: C0 80 00 00 00 00 00 00 00 00 76 DC 18 18 18 18  // ..........v.....
   16D40: 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38  // ........88l..l88
   16D50: FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C  // ........8l.....l
   16D60: 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C  // 8......8l....lll
   16D70: EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC  // .......>``<f....
   16D80: 78 00 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00  // x.........~...~.
   16D90: 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60  // .........|....|`
   16DA0: C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30  // .........0``|``0
   16DB0: 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
   16DC0: C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE  // ................
   16DD0: 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00  // ...........~....
   16DE0: 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00  // ~......0.....0..
   16DF0: 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00  // ~........0`0....
   16E00: 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18  // ~...............
   16E10: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 58  // ...............X
   16E20: 78 30 00 00 00 00 00 00 00 18 18 00 7E 00 18 18  // x0..........~...
   16E30: 00 00 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC  // ...........v..v.
   16E40: 00 00 00 00 00 00 00 78 CC CC 78 00 00 00 00 00  // .......x..x.....
   16E50: 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00  // ................
   16E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00 00  // ................
   16E70: 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78  // ...............x
   16E80: 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00  // 8.......lllll...
   16E90: 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00  // .......p..0`....
   16EA0: 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E  // ..........~~~~~~
   16EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   16EC0: 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
   16ED0: 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30  // ....../........0
   16EE0: 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB  // `......0..~.....
   16EF0: C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF  // ...~....M.......
   16F00: DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18  // .........T......
   16F10: 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3  // .....<....V.....
   16F20: C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3  // ....f<.....W....
   16F30: C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00 00 C3  // .......f....X...
   16F40: C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00  // ..f<<f.......Y..
   16F50: C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00  // ....f<...<....\.
   16F60: 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D  // ....`0.........m
   16F70: 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00  // .....f..........
   16F80: 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00  // v.........f<....
   16F90: 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00  // .w...........f..
   16FA0: 00 00 00 00 41 72 C3 0B DB 74 03 E9 46 01 57 32  // ....Ar...t..F.W2
   16FB0: C0 B9 40 00 F3 AA 5F BB 0E A0 26 89 1D 26 8C 4D  // ..@..._...&..&.M
   16FC0: 02 2E 8E 1E 86 23 57 BE 49 04 B9 1E 00 83 C7 04  // .....#W.I.......
   16FD0: FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0  // ...&..FG.._.....
   16FE0: 26 88 45 22 A1 85 04 26 89 45 23 57 E8 D9 1B 5F  // &.E"...&.E#W..._
   16FF0: 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74  // &.]%&.}&..I....t
   17000: 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 E6 9F 32  // ......2........2
   17010: E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 E7 9F 26  // ...t.@&.E'.....&
   17020: 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00  // .E).............
   17030: 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90  // =..~...=^.~...=.
   17040: 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26  // .~...=..~.&.U*.&
   17050: 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0  // ....$...........
   17060: 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0  // ......$.........
   17070: 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45  // 0.B.$........&.E
   17080: 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E  // -..&.E1.w...2...
   17090: A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9  // ......;.t4&.w...
   170A0: 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74  // ..t....&.w.....t
   170B0: 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA  // ....&.w.....t...
   170C0: 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F  // .&.w.....t......
   170D0: 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC  // &.U2............
   170E0: 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2  // ...........%....
   170F0: 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE  // &.E+...F.....t..
   17100: C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20  // .t6..tV...F.... 
   17110: 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0  // ....t...`...t...
   17120: 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B  // :...t......?....
   17130: EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1  // ..F..F....... ..
   17140: 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1  // .t.......t......
   17150: 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01  // .t.......F......
   17160: 74 06 E8 16 15 E8 25 01 F6 C1 02 74 03 E8 85 01  // t.....%....t....
   17170: F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA  // ...t.........B..
   17180: FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32  // ..J....k.......2
   17190: E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2  // .......B....J...
   171A0: F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2  // ..... ..&....GF.
   171B0: F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4  // ..&.%.G.........
   171C0: EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B  // .&..G........QW.
   171D0: C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01  // .+.&........&.D.
   171E0: 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88  // &.TA...&.D....&.
   171F0: 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83  // D....&.D....&...
   17200: C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE  // ........p.&.....
   17210: 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26  // ...&.TA2.....[.&
   17220: 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49  // .D..._...2.....I
   17230: FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B  // .&.D.._Y..`.....
   17240: C7 2B C3 26 89 47 02 51 57 2E 8E 1E 86 23 A0 10  // .+.&.G.QW....#..
   17250: 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1  // .$0..I..........
   17260: 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3  // ................
   17270: A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE  // ..t......|......
   17280: 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26  // ......_Y..:....&
   17290: 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8  // .?....Q.........
   172A0: 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A  // ...........G..&.
   172B0: 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54  // D........&...&.T
   172C0: 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01  // A......2....&.D.
   172D0: EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB  // ....&.D.....2...
   172E0: FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44  // .. ...2......&.D
   172F0: 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E  // ..Y....&......Q.
   17300: 8E 1E 86 23 26 8A 05 80 26 10 04 CF 08 06 10 04  // ...#&...&.......
   17310: 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8  // G.I.............
   17320: 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8  // ........~.......
   17330: 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8  // v..t....n..|....
   17340: 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA  // f.......^.Y.....
   17350: 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE  // ..+.&.G.......4.
   17360: 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A  // B.&......&.E.PJJ
   17370: EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42  // .&.E.......B2..B
   17380: 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04  // B....XJ.....&.w.
   17390: 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6  // ...l....4.&.....
   173A0: 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42  // .&.D..VBB...2..B
   173B0: B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44  // ...&...F..^..&.D
   173C0: 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3  // ........$.......
   173D0: E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB  // ................
   173E0: 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87  // .... ..P......&.
   173F0: 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6  // ...&..$...<.~.&.
   17400: 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74  // G3.u.<#t.<2t.<3t
   17410: 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04  // ...&.G..u....&I.
   17420: BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2  // ........&.G..t..
   17430: D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00  // ..&.....c...N...
   17440: C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33  // ..b......P.....3
   17450: C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01  // ....&..2..J.&.G.
   17460: A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C  // ...&.G....&.G..L
   17470: 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33  // .&.G....`.X.R2.3
   17480: D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A  // .......)u.2.3...
   17490: CD 17 5A C3 06 1E 60 2E 8E 1E 86 23 2E 83 0E 90  // ..Z...`....#....
   174A0: 23 00 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01  // #.un.>...tg.....
   174B0: 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E  // ..b.2.......P..>
   174C0: 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A  // b.P2.....2.AQ..J
   174D0: 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50  // .2......)u=QR..P
   174E0: 04 B4 08 E8 B6 D4 0A C0 75 02 B0 20 33 D2 32 E4  // ........u.. 3.2.
   174F0: CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59  // ....)u.Z..Y....Y
   17500: E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8  // ...w.2....X..P..
   17510: AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5  // ..a...ZYY....R*.
   17520: 38 C6 7D 02 32 C0 2E 8E 06 88 23 5A C3 A0 85 04  // 8.}.2.....#Z....
   17530: F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4  // ................
   17540: 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD  // ..m...2.........
   17550: 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04  // ..Ku.2..W..S..b.
   17560: 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1  // ..u...t..5.[..+.
   17570: 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A  // ......2....2.+..
   17580: DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20  // .t**..&....R... 
   17590: 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3  // .......Z........
   175A0: A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB  // .....Hu.........
   175B0: F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3  // .......B.$....J.
   175C0: 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E 86 23  // ...B...J.......#
   175D0: 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E 86 23 8B  // ..c...........#.
   175E0: 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02  // .c...P........u.
   175F0: B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 86  // ..X.............
   17600: 23 80 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80  // #.>I..t..>I..t..
   17610: 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E  // >I..t..>I....P..
   17620: 06 8A 23 A0 10 04 24 30 3C 30 74 05 2E 8E 06 8C  // ..#...$0<0t.....
   17630: 23 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01  // #X..t......N....
   17640: 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6  // .+.2...J........
   17650: E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A  // .......u...8.~..
   17660: DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04  // ............:.J.
   17670: 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A  // t..........@....
   17680: D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01  // ..........+.....
   17690: 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3  // ..S..*.2.2.+.+..
   176A0: 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58  // .............u.X
   176B0: B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6  // . ........u..S..
   176C0: 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91  // *.t.......X.....
   176D0: B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E 8C 23 8A  // . ............#.
   176E0: C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34  // .".....t.0.....4
   176F0: 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E 8C  // "...............
   17700: 23 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74  // #...."...(.....t
   17710: 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0  // ................
   17720: F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1  // ................
   17730: 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 8C 23 8B C1  // .............#..
   17740: E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8  // ...u......$.....
   17750: 2E 8E 06 8C 23 8A C1 8A E6 E8 6D 00 75 02 8A DE  // ....#.....m.u...
   17760: F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3  // ..........+.....
   17770: 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13  // ..*..,Q..VW.....
   17780: C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00  // .....+.+.... ...
   17790: 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59  //  ........_^....Y
   177A0: E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3  // ........W.......
   177B0: AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3  // ...+.... .......
   177C0: AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01  // ._....u.........
   177D0: 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59  // +.8.v.2.Q......Y
   177E0: 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0  // 2..P..>I..t.....
   177F0: 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A  // .......P.....RS.
   17800: DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1  // .2.....P....P...
   17810: 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04  // L...[..[Z.R...J.
   17820: F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E  // ..2.....Z.......
   17830: 8A A6 BE 8B 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 BE  // ................
   17840: 8B C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3  // ......03<?......
   17850: FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A  // ..&..........t..
   17860: D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63  // ......u..V.E...c
   17870: 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A  // ............R...
   17880: C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A  // ..&J....2...Z.S.
   17890: DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3  // .2.....P......[.
   178A0: 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04  // R..2.R...&...&J.
   178B0: 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A  // Z....t...L...u.Z
   178C0: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03  // .R...J...2......
   178D0: 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2  // .N..........Z...
   178E0: F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A  // .&J..........t..
   178F0: C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC  // .2..&L..........
   17900: C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8  // ............ ...
   17910: EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04  // ....2....>..&.}.
   17920: 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8  // .....S..........
   17930: 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F  // ..........U.....
   17940: FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0  // .<.t....v.<Ut.2.
   17950: 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0  // [...............
   17960: 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5  // [....6......t%..
   17970: 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2  // *.....R2........
   17980: 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8  // +.Q....+.+.Y..Z.
   17990: 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A  // ................
   179A0: E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB  // .2..........+...
   179B0: F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E 86 23 89 0E 60  // ..+.Nu......#..`
   179C0: 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6  // ...$`. t........
   179D0: 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8  // .........>I..t..
   179E0: 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A  // ..t.......t..B..
   179F0: 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A  // 6......8.~...td.
   17A00: E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03  // ......\8.tX.....
   17A10: 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A  // |........I...~D.
   17A20: E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74  // .*...u.8.t8..8.t
   17A30: 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD  // 2....8.~....~...
   17A40: 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13  // ......}.....8.t.
   17A50: 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE  // ........*.......
   17A60: C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E 86 23 A2 62  // .............#.b
   17A70: 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A  // .2....&L..N....z
   17A80: FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC  // .t..>I..w.......
   17A90: FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E 86 23  // .....P..'......#
   17AA0: 8A 26 49 04 E8 D1 A8 74 07 C7 06 50 04 00 00 C3  // .&I....t...P....
   17AB0: E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3  // .H.t....t.w..w..
   17AC0: E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A  // .......|.t...N..
   17AD0: D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7  // ........J.R.&...
   17AE0: E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B  // .....Z.....0....
   17AF0: C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7  // ..g....R..J.....
   17B00: 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E  // &........Z.U....
   17B10: 1E 86 23 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74  // ..#.&I....t....t
   17B20: 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3  // .w@......S......
   17B30: E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E  // ..............+>
   17B40: 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0  // J....R.&...&J...
   17B50: 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8  // ...+.Z..J.......
   17B60: 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8  // ......|.t.......
   17B70: 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26  // .........R..J..&
   17B80: 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9  // ....+...+.Z.....
   17B90: C3 2E 8E 1E 86 23 2E 8E 06 8C 23 E8 5D FA 74 11  // .....#....#.].t.
   17BA0: 80 3E 49 04 07 7C 18 2E 8E 06 8A 23 74 03 E9 B1  // .>I..|.....#t...
   17BB0: 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1  // ..I...&.....F...
   17BC0: 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E  // P.........+....>
   17BD0: 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26  // I..u....&...F.E&
   17BE0: 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02  // ... .F.E..P.....
   17BF0: B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20  // ..........V.... 
   17C00: E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C  // .O.........+..>.
   17C10: 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6  // .2....u.&.}..u..
   17C20: 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3  // ..........t.GVW.
   17C30: A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE  // ._^t#.......t.G.
   17C40: CA 75 E2 FE CC 74 0F 2E 8E 1E 86 23 C4 3E 7C 00  // .u...t.....#.>|.
   17C50: B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46  // ......2........F
   17C60: 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E  // ...>I..|.u..Z...
   17C70: 06 88 23 E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC  // ..#.........+...
   17C80: B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A  // ..........>I..r.
   17C90: F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4  // ....`u.......u..
   17CA0: 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A  // ...........Q..&.
   17CB0: 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8  // ....F.E.6J...X..
   17CC0: 00 01 32 D2 E9 44 FF 2E 8E 06 88 23 A1 50 04 8B  // ..2..D.....#.P..
   17CD0: D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04  // .2.R..2..&J..&..
   17CE0: 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E  // Z........+...S.>
   17CF0: 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A  // J.O.........2.&.
   17D00: 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00  // .....t....F...f.
   17D10: 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33  // E..Ku.[...2....3
   17D20: ED EB 03 BD 01 00 2E 8E 1E 86 23 2E 8E 06 8C 23  // ..........#....#
   17D30: 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 8A 23 80 FC  // .&I....t.....#..
   17D40: 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF  // .t.|=.........2.
   17D50: D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03  // ....P....J...2..
   17D60: C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8  // .......t....L...
   17D70: FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2  // ..u.....u.....G.
   17D80: FC C3 50 2E 8E 06 8C 23 A1 50 04 E8 EE FA 8B F8  // ..P....#.P......
   17D90: A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F  // .P..&J...X..t.$.
   17DA0: C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0  // .6|....6....2...
   17DB0: 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3  // ......ti.....U..
   17DC0: 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75  // .........P.....u
   17DD0: 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89  // '..U.#....N.#.&.
   17DE0: 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E  // .....N..u......>
   17DF0: 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31  // .X.r........#.&1
   17E00: 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE  // ...%.#.&1.. ..P.
   17E10: CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9  // .u......>.X.I...
   17E20: C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC  // ...P.....t..&0..
   17E30: 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81  // &0.. ..P........
   17E40: EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85  // .?.X. .......&..
   17E50: FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01  // ....O.........?.
   17E60: 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81  // X........8.r.2..
   17E70: C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA  // ............2...
   17E80: 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA  // f...Q...f...J...
   17E90: 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA  // du..h...Zu..`...
   17EA0: AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F  // ..u....R..f...f.
   17EB0: B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7  // ..P.f..f.....f..
   17EC0: 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03  // .....f...Z..J...
   17ED0: A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 88 23 58  // .P.P..........#X
   17EE0: 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A  // WQP.....;.......
   17EF0: C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF  // ...s...&..fG..u.
   17F00: 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0  // f.....XY_.....8.
   17F10: 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59  // r.Q2...I.......Y
   17F20: 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B  // +.....R3...f....
   17F30: C7 66 C1 C7 10 E8 40 A4 74 16 38 E0 74 12 0F B6  // .f....@.t.8.t...
   17F40: D0 E8 91 C9 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10  // ......f.....f...
   17F50: 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F  // Z.....|.......b.
   17F60: 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80  // ..........u.....
   17F70: CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E  // ..PS..2.....P.[.
   17F80: 8E 06 88 23 E8 07 F9 8B F8 8B 2E 85 04 58 32 F6  // ...#.........X2.
   17F90: 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC  // R.6J.V.&...6....
   17FA0: 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0  // .u..|..u...F....
   17FB0: B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50  // .....um......ZXP
   17FC0: 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2  // RJ..WQQW..2.....
   17FD0: FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA  // ._G..8.v.2...I..
   17FE0: 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF  // G..Y..Y_........
   17FF0: 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7  // [KZQW...&.%.....
   18000: 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB  // _G+.B;.v.3...I..
   18010: 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8  // G..Y............
   18020: 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E 86  // ................
   18030: 23 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04  // #.>c..t.......u.
   18040: CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F  // .B.......u......
   18050: 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04  // .&f...&f..-...f.
   18060: 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24  // .. .......t..f.$
   18070: DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A  // ....t.. .f.$....
   18080: D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB  // ..S...~..SP.....
   18090: D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A  // .........`.t....
   180A0: C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00  // ..,...t.&.......
   180B0: 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E  // ..t.&.].X[......
   180C0: 1E 86 23 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8  // ..#.>I.3........
   180D0: FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03  // ....0...........
   180E0: 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88  // ...........t.G&.
   180F0: 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E  // ......... ......
   18100: 86 23 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06  // .#.&I....t....w.
   18110: 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8  // t........|.tL...
   18120: E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E 88 23 F6 C3  // .............#..
   18130: 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3  // .u........%.....
   18140: EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8  // ..%...%.........
   18150: 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25  // ...........%...%
   18160: EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 88 23 A1  // .........P....#.
   18170: 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3  // J..........X&...
   18180: 2E 8E 1E 86 23 8A 26 49 04 E8 6F F4 74 0F 80 FC  // ....#.&I..o.t...
   18190: 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC  // .w.t.._....F....
   181A0: 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E 88 23  // .|.t)..5.......#
   181B0: BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74  // ...2.........".t
   181C0: 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A  // ......}....~...J
   181D0: 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E 88 23 8A  // ..............#.
   181E0: 05 8B EC 88 46 1A C3 2E 8E 1E 86 23 8A 3E 62 04  // ....F......#.>b.
   181F0: 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49  // ....2..P.......I
   18200: 04 3C 0D 76 4A 2E 8E 06 8C 23 E8 EE F3 75 33 8A  // .<.vJ....#...u3.
   18210: 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03  // .J..............
   18220: 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73  // .N........A..8.s
   18230: 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0  // Y....c..........
   18240: EF C3 2E 8E 06 8A 23 80 F9 07 74 C3 E9 83 00 75  // ......#...t....u
   18250: 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9  // .2...<.u.:6..u..
   18260: 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05  // .........u......
   18270: 8B C2 E8 4C F6 C3 3C 07 75 04 E8 D3 8F C3 3C 08  // ...L..<.u.....<.
   18280: 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB  // u...t.....2.2.+.
   18290: 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16  // :6..t...........
   182A0: 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB  // c...........+.+.
   182B0: 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0  // &.e.P.>N........
   182C0: 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3  // ............X. .
   182D0: AB C3 B9 01 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04  // ............:.J.
   182E0: 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74  // t....2.2...:6..t
   182F0: 2E FE C6 EB ED 89 14 2E 8E 06 8C 23 E8 FC F2 74  // ...........#...t
   18300: 0E 2E 8E 06 8A 23 80 F9 07 74 04 32 FF EB 10 8B  // .....#...t.2....
   18310: C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33  // ........O..J...3
   18320: C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7  // ..6....J......p.
   18330: 2E 8E 1E 86 23 F6 06 87 04 08 74 03 CD 42 C3 E8  // ....#.....t..B..
   18340: 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E 86 23 8A DF  // v....F.......#..
   18350: 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05  // 2.....P...8.b.u.
   18360: 8B C2 E8 5C F5 C3 2E 8E 1E 86 23 8A DF 32 FF D1  // ...\......#..2..
   18370: E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56  // ...P...`....N..V
   18380: 12 C3 2E 8E 1E 86 23 A0 87 04 24 80 0A 06 49 04  // ......#...$...I.
   18390: 8A 26 4A 04 F6 06 87 04 08 75 2D E8 5D F2 74 07  // .&J......u-.].t.
   183A0: 80 3E 49 04 07 7F 21 51 8A CC 8A 2E 84 04 BE 57  // .>I...!Q.......W
   183B0: 97 81 FE 60 97 74 10 2E 3B 0C 74 05 83 C6 03 EB  // ...`.t..;.t.....
   183C0: F0 24 80 2E 0A 44 02 59 8A 3E 62 04 8B EC 89 46  // .$...D.Y.>b....F
   183D0: 1A 89 5E 0E 89 4E 16 89 56 12 C3 84 18 23 84 2B  // ..^..N..V....#.+
   183E0: 33 84 2A 32 2E 8E 1E 86 23 3C 04 7F 1B 50 52 BA  // 3.*2....#<...PR.
   183F0: CC 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08  // .....ZXt..>c..t.
   18400: C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8  // ..>c..u.<.s.2...
   18410: D1 E5 2E FF A6 93 97 CB 97 EB 97 FD 97 32 98 7C  // .............2.|
   18420: 97 7C 97 7C 97 57 98 6F 98 73 98 7C 97 7C 97 7C  // .|.|.W.o.s.|.|.|
   18430: 97 7C 97 7C 97 7C 97 A1 98 7C 97 A5 98 C0 98 7C  // .|.|.|...|.....|
   18440: 97 FF 98 7C 97 0D 99 28 99 2F 99 3B 99 5F 99 80  // ...|...(./.;._..
   18450: 3E 49 04 13 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF  // >I..t.........p.
   18460: 0B ED 74 07 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8  // ..t...2.&.......
   18470: A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D 11 EB  // .....D...t.&.}..
   18480: EA 80 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B ED 74  // ..>I..t........t
   18490: 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9  // .............2..
   184A0: 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4  // ................
   184B0: AC E8 07 FC EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0  // .........w..C...
   184C0: B0 30 E8 FB F0 24 F7 80 26 65 04 DF 80 FB 00 74  // .0...$..&e.....t
   184D0: 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3  // .....e. ........
   184E0: B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F  // ......... ....N.
   184F0: E9 78 FF B3 11 EB E4 8B FA E8 05 F4 B9 10 00 32  // .x.............2
   18500: E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A  // ........B.&....J
   18510: EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05  // ..G.......B..&..
   18520: E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A  // ....Z......Q..&.
   18530: 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43  // 5&.m.&.M.......C
   18540: 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8  // Y.....u.......0.
   18550: 6E F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 70 EE  // n.$....t....0.p.
   18560: EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0  // ....u.......0.P.
   18570: EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8  // ...u.....4...Q..
   18580: 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13  // ...........N..v.
   18590: C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01  // ...Q.....&.5&.m.
   185A0: 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A  // &.M....CY.......
   185B0: C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8  // .......2....F...
   185C0: 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF  // ?....4.......0..
   185D0: EF B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E  // .....u.........^
   185E0: 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52  // ...Q...s..*....R
   185F0: 00 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00  // .CY........t....
   18600: 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00  // ...9.......t....
   18610: 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5  // ......P....P.;..
   18620: 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80  // P....Y..Y...d...
   18630: FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8  // .2|.........X.R.
   18640: 39 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE  // 9.ZS........B...
   18650: 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA  // .......[....S...
   18660: C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB  // ...BB...........
   18670: 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2  // .........[.PQ...
   18680: B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E  // ......u...YX....
   18690: 86 23 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06  // .#..$...........
   186A0: 7F 18 2E FF A5 23 9A 2B 9A 40 9A DE 9A 3A 9B 3C  // .....#.+.@...:.<
   186B0: 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03  // .t.<............
   186C0: 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04  // ....<.w.PSPR..c.
   186D0: B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40 74 03  // .............@t.
   186E0: 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF  // ........@.......
   186F0: EE A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4  // ...t..........=.
   18700: 01 73 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C  // .s....=..s....=|
   18710: 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16  // .s..^.=J.s......
   18720: 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF  // ..ZX......].[X..
   18730: 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02  // 2...t...<.t...<.
   18740: 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E  // t..............~
   18750: 04 81 E9 01 01 87 1E 85 04 53 E8 5B F2 5B E8 85  // .........S.[.[..
   18760: 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8  // ....t...t...t8..
   18770: 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3  // t<..t@...|...~..
   18780: 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 1E  // ........t.2.....
   18790: 9B 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E  // ................
   187A0: 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD 2E  // .....*..........
   187B0: 6A B9 08 00 EB CA BD 41 72 B9 10 00 EB C2 0A C0  // j......Ar.......
   187C0: 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80  // u............w5.
   187D0: FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E  // ..w...u...|..&..
   187E0: 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E  // ... ...u........
   187F0: 20 83 EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E  //  .......2.......
   18800: 8B AF 91 9B 8B C5 8B EC 89 4E 16 89 56 12 89 46  // .........N..V..F
   18810: 0A 8C 46 1E C3 41 72 2E 6A 2E 6E 2E 72 41 72 41  // ..F..Ar.j.n.rArA
   18820: 82 53 06 8A 26 49 04 E8 CD C3 26 8A 47 02 26 8A  // .S..&I....&.G.&.
   18830: 67 33 F6 C4 01 74 22 BD 41 72 3C 10 7D 0E E8 71  // g3...t".Ar<.}..q
   18840: 02 8C 06 0E 01 3C 0E 7D 07 BD 2E 6A 8C 0E 0E 01  // .....<.}...j....
   18850: 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4  // ........-..<.}..
   18860: 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80  // .<.t.....<.t....
   18870: EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB  // ..&.G..t......2.
   18880: E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03  // .......[........
   18890: EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF  // ................
   188A0: B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E  // ........P$...t".
   188B0: 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD 41 72 EB  // .3....<.u....Ar.
   188C0: 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD 2E  // ...u............
   188D0: 6A E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF  // j.-.X..t........
   188E0: B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A  // ............u...
   188F0: B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF  // ..P.X....2......
   18900: C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE  // ....u.....u.&.~.
   18910: 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 88 23 8B FA  // .u...........#..
   18920: C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74  // ....@S.....[...t
   18930: 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86  // .. .........(2..
   18940: FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB  // .2.Q...t.F......
   18950: 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01  //  t.. .+...Y...t.
   18960: 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E  // F..u....&I.P.W.>
   18970: A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7  // ..&.}.....t0....
   18980: 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B  // .&..<.t$8.t.G...
   18990: FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04  // .&.......&.E....
   189A0: 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3  // &.}..>......_.X.
   189B0: 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08  // &.G3.t......&._.
   189C0: 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15  // ....t....&..<.t.
   189D0: 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04  // G8.I.u.&..2.....
   189E0: 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC  // ........c..&....
   189F0: 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24  // ........t....B.$
   18A00: E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D  // ....J...B.$.....
   18A10: 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75  // ...........>...u
   18A20: 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1  // .............t..
   18A30: E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26  // .H......c...J..&
   18A40: 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A  // ............L...
   18A50: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5  // &I.P.W.>..&.}...
   18A60: 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E  // ..tJ.....&..<.t>
   18A70: 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01  // 8.t.G....&.=&.].
   18A80: 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02  // &.M.&.U.&.E.<.t.
   18A90: FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58  // ..P......&.....X
   18AA0: A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07  // ...&.}...2...._.
   18AB0: 58 C3 50 53 51 52 2E A1 90 23 0B C0 74 09 2E 8B  // X.PSQR...#..t...
   18AC0: 2E 20 83 0E 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A  // . ......0......Z
   18AD0: 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 86  // Y[X.<.|....S....
   18AE0: 23 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B  // #..2.......P..5[
   18AF0: 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F  // ..V..QS&.F.E<...
   18B00: 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 3F  // u.2..@<.t2<.u..?
   18B10: 87 EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7  // ..b<.u...tZ...'.
   18B20: C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8  // ...t.&.^.E......
   18B30: 6A BE FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36  // j...:.J.r.2...:6
   18B40: 84 04 73 06 FE C6 89 15 EB 2B 50 E8 AD EA 75 08  // ..s......+P...u.
   18B50: B8 00 08 E8 46 BE EB 09 80 3E 49 04 07 74 F1 32  // ....F....>I..t.2
   18B60: E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E  // ..>b.S..U.%.][.>
   18B70: 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02  // b.X..[Y..Z....u.
   18B80: 89 15 8B 05 3A 3E 62 04 75 03 E8 34 ED C3 E9 64  // ....:>b.u..4...d
   18B90: FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06  // .3..6....J......
   18BA0: E8 F9 BD C3 2E 8E 1E 86 23 0A C0 75 0D E8 18 00  // ........#..u....
   18BB0: 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41  // ...^..F...<.u..A
   18BC0: 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 1E A0 2E 3A  // ....F..........:
   18BD0: 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D  // .r.....2.......]
   18BE0: 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04  // ...t...u........
   18BF0: 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74  // $0<0t....u.....t
   18C00: E9 C3 BF 1E A0 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D  // ........2.....;.
   18C10: 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8  // t....;.t......8.
   18C20: 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02  // ~...............
   18C30: 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00  // t..........t....
   18C40: BA B4 03 E8 DF EC 74 21 B7 01 E8 8C E9 80 FA D4  // ......t!........
   18C50: 74 17 86 FB C3 BA D4 03 E8 CA EC 74 0C B7 02 E8  // t..........t....
   18C60: 77 E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08  // w....t..........
   18C70: 0F 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01  // ................
   18C80: 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01  // ................
   18C90: FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00  // ................
   18CA0: 3F 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04  // ?...............
   18CB0: 04 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08  // ................
   18CC0: 00 07 02 07 06 07 CA 00 34 00 90 00 96 00 00 00  // ........4.......
   18CD0: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
   18CE0: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
   18CF0: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
   18D00: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
   18D10: 66 33 F6 66 BB 53 00 E8 48 00 00 00 C1 E8 10 F6  // f3.f.S..H.......
   18D20: C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
   18D30: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 30 00 00 00  // @...f..f....0...
   18D40: 66 BB 12 00 E8 27 00 00 00 66 58 32 E4 66 50 58  // f....'...fX2.fPX
   18D50: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 C3 90 66 B8  // _[f^fZ..f.O...f.
   18D60: 4F 03 C3 90 66 52 E8 11 00 00 00 ED 66 5A C3 90  // O...fR......fZ..
   18D70: 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50  // fR......fZ..f..P
   18D80: 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04  // 3.f..f......f...
   18D90: 58 C3 2C 49 1F 49 1F 49 1F 49 0A 49 0A 49 0A 49  // X.,I.I.I.I.I.I.I
   18DA0: 0A 49 4C 45 C3 45 ED 45 2E 47 2D 47 2D 47 73 47  // .ILE.E.E.G-G-GsG
   18DB0: D8 47 08 48 C5 48 EE 48 EE 48 65 47 58 47 58 47  // .G.H.H.H.HeGXGXG
   18DC0: 58 47 58 47 58 47 73 47 D8 47 08 48 C5 48 F3 48  // XGXGXGsG.G.H.H.H
   18DD0: 39 49 EE 48 EE 48 FF FF FF FF FF FF 00 00 FF FF  // 9I.H.H..........
   18DE0: 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
   18DF0: 00 00 FF 00 00 00 00 00 08 10 00 08 10 18 00 08  // ................
   18E00: 10 18 50 43 01 50 43 02 5E 57 03 3E 57 03 75 44  // ..PC.PC.^W.>W.uD
   18E10: 03 29 44 03 51 43 04 6A 43 04 7A 43 04 50 43 03  // .)D.QC.jC.zC.PC.
   18E20: 00 00 00 00 FD 4A 00 02 FD 4A 01 02 FD 4A 02 02  // .....J...J...J..
   18E30: FD 4A 03 02 FD 4A 04 02 FD 4A 05 02 F7 4C 00 02  // .J...J...J...L..
   18E40: F7 4C 01 02 F7 4C 02 02 F7 4C 03 02 F7 4C 04 02  // .L...L...L...L..
   18E50: F7 4C 05 02 2C 4D 00 02 2C 4D 01 02 2C 4D 02 02  // .L..,M..,M..,M..
   18E60: 2C 4D 03 02 2C 4D 04 02 2C 4D 05 02 67 4F 00 02  // ,M..,M..,M..gO..
   18E70: 67 4F 01 02 67 4F 02 02 67 4F 03 02 67 4F 04 02  // gO..gO..gO..gO..
   18E80: 67 4F 05 02 67 4F 00 02 67 4F 01 02 67 4F 02 02  // gO..gO..gO..gO..
   18E90: 67 4F 03 02 67 4F 04 02 67 4F 05 02 2E 4E 00 02  // gO..gO..gO...N..
   18EA0: 2E 4E 01 02 2E 4E 02 02 2E 4E 03 02 2E 4E 04 02  // .N...N...N...N..
   18EB0: 2E 4E 05 02 6A 4E 00 02 6A 4E 01 02 6A 4E 02 02  // .N..jN..jN..jN..
   18EC0: 6A 4E 03 02 6A 4E 04 02 6A 4E 05 02 DB 4D 00 02  // jN..jN..jN...M..
   18ED0: DB 4D 01 02 DB 4D 02 02 DB 4D 03 02 DB 4D 04 02  // .M...M...M...M..
   18EE0: DB 4D 05 02 0F 4E 00 02 0F 4E 01 02 0F 4E 02 02  // .M...N...N...N..
   18EF0: 0F 4E 03 02 0F 4E 04 02 0F 4E 05 02 BF 51 00 00  // .N...N...N...Q..
   18F00: F2 51 01 00 F2 51 02 00 DF 51 00 00 CD 50 00 02  // .Q...Q...Q...P..
   18F10: C6 4E 00 02 C6 4E 01 02 C6 4E 02 02 C6 4E 03 02  // .N...N...N...N..
   18F20: C6 4E 04 02 C6 4E 05 02 E5 50 00 02 3A 53 05 00  // .N...N...P..:S..
   18F30: 3A 53 01 00 3A 53 00 00 3A 53 02 00 7B 53 00 00  // :S..:S..:S..{S..
   18F40: 7B 53 02 00 C0 53 00 00 50 50 00 02 50 50 01 02  // {S...S..PP..PP..
   18F50: 50 50 02 02 50 50 03 02 50 50 04 02 50 50 05 02  // PP..PP..PP..PP..
   18F60: 0C 52 00 00 34 52 00 00 B5 52 00 00 30 53 00 00  // .R..4R...R..0S..
   18F70: 14 4F 00 02 14 4F 01 02 14 4F 02 02 14 4F 03 02  // .O...O...O...O..
   18F80: 14 4F 04 02 14 4F 05 02 2F 53 00 01 2F 53 00 01  // .O...O../S../S..
   18F90: 33 4C 00 02 33 4C 01 02 33 4C 02 02 33 4C 03 02  // 3L..3L..3L..3L..
   18FA0: 33 4C 04 02 33 4C 05 02 54 52 00 00 30 53 00 00  // 3L..3L..TR..0S..
   18FB0: 30 53 00 00 30 53 00 00 65 51 00 00 57 4D 00 02  // 0S..0S..eQ..WM..
   18FC0: 57 4D 01 02 57 4D 02 02 57 4D 03 02 57 4D 04 02  // WM..WM..WM..WM..
   18FD0: 57 4D 05 02 86 4D 00 02 86 4D 01 02 86 4D 02 02  // WM...M...M...M..
   18FE0: 86 4D 03 02 86 4D 04 02 86 4D 05 02 BC 4D 00 02  // .M...M...M...M..
   18FF0: BC 4D 01 02 BC 4D 02 02 BC 4D 03 02 BC 4D 04 02  // .M...M...M...M..
   19000: BC 4D 05 02 77 52 00 00 9A 52 00 00 58 4E 01 02  // .M..wR...R..XN..
   19010: 58 4E 02 02 B4 4E 01 02 B4 4E 02 02 A6 00 02 01  // XN...N...N......
   19020: 3E A4 00 00 00 00 00 00 00 00 00 00 72 A4 00 00  // >...........r...
   19030: 00 00 00 00 00 00 00 00 00 00 6C A9 00 00 00 00  // ..........l.....
   19040: 00 00 00 00 00 00 E6 A4 00 00 00 00 BE A4 00 00  // ................
   19050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   19060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   19070: 00 00 DA A9 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   19080: 00 00 00 00 00 00 00 00 00 00 98 AB 00 00 00 00  // ................
   19090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   190A0: 00 00 00 00 3A A5 00 00 00 00 00 00 00 00 00 00  // ....:...........
   190B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   190C0: 00 00 33 00 02 01 00 08 37 00 00 52 0D 03 00 41  // ..3.....7..R...A
   190D0: E3 0D 33 05 41 01 00 00 00 1B 05 41 0B 01 02 06  // ..3.A......A....
   190E0: 00 41 0D 25 20 0E 03 0D 25 05 0C 02 0D 05 53 00  // .A.% ...%.....S.
   190F0: 00 02 00 00 5B 00 4B 00 01 01 00 00 37 00 00 42  // ....[.K.....7..B
   19100: 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02  // !.c...c.9.c.?.c.
   19110: 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00  // E.ZZ[..@....-.@.
   19120: 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02  // ..@.....@.....[.
   19130: 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D  // ....[.....[.....
   19140: 5B 00 28 00 02 01 00 00 37 00 00 01 05 00 00 EC  // [.(.....7.......
   19150: A8 01 00 02 00 00 01 00 02 01 01 00 01 05 00 00  // ................
   19160: ED A8 01 00 02 00 02 01 00 5B 54 00 01 02 00 00  // .........[T.....
   19170: 37 00 00 01 05 00 00 9B 62 01 00 54 00 01 00 01  // 7.......b..T....
   19180: 05 00 00 93 62 01 00 01 01 01 00 01 56 00 41 03  // ....b.......V.A.
   19190: 09 41 00 01 05 00 00 83 62 01 00 01 02 01 00 41  // .A......b......A
   191A0: 01 05 00 00 9B 62 01 00 3C 25 01 00 00 44 36 00  // .....b..<%...D6.
   191B0: 01 05 00 00 93 62 01 00 02 00 01 01 00 5B 31 04  // .....b.......[1.
   191C0: 01 01 04 00 37 00 00 3D 25 00 00 44 F5 00 4A 05  // ....7..=%..D..J.
   191D0: A3 36 02 00 00 00 44 30 04 03 05 00 32 00 00 00  // .6....D0....2...
   191E0: 03 00 40 97 36 03 05 46 00 31 00 00 04 02 04 40  // ..@.6..F.1.....@
   191F0: 03 03 41 05 3E 02 41 40 48 4C 00 33 02 40 41 03  // ..A.>.A@HL.3.@A.
   19200: 03 41 06 33 02 41 40 43 50 00 33 02 41 40 3E 05  // .A.3.A@CP.3.A@>.
   19210: 41 00 00 00 00 44 70 00 33 05 00 01 00 00 00 3E  // A....Dp.3......>
   19220: 05 00 00 00 00 00 44 30 04 51 14 43 22 00 03 03  // ......D0.Q.C"...
   19230: 40 05 03 02 41 40 2D 05 40 00 00 00 00 03 02 46  // @...A@-.@......F
   19240: 40 04 01 00 00 04 01 01 01 04 01 02 02 04 01 03  // @...............
   19250: 03 04 01 04 04 04 01 05 05 04 01 06 06 2D 05 41  // .............-.A
   19260: 40 00 00 00 3E 05 41 00 20 00 00 45 B7 00 27 05  // @...>.A. ..E..'.
   19270: 41 00 20 00 00 03 05 46 00 31 00 00 04 02 05 41  // A. ....F.1.....A
   19280: 01 02 96 36 41 03 05 00 80 1A 06 00 03 00 41 97  // ...6A.........A.
   19290: 36 03 00 40 96 36 3E 02 41 40 44 30 04 33 05 00  // 6..@.6>.A@D0.3..
   192A0: 01 00 00 00 3E 05 00 00 00 00 00 44 30 04 51 14  // ....>......D0.Q.
   192B0: 43 CE 00 3D 65 00 01 44 32 01 4A 05 B6 36 00 00  // C..=e..D2.J..6..
   192C0: 01 00 49 32 01 4A 05 C0 36 01 00 00 00 44 32 01  // ..I2.J..6....D2.
   192D0: 01 05 0C 00 84 09 81 03 01 05 0D 00 00 00 06 00  // ................
   192E0: 01 05 0C 00 84 09 81 03 3C E5 0D 00 80 49 2A 01  // ........<....I*.
   192F0: 4A 05 C0 36 01 00 00 00 49 D1 01 01 05 B8 36 00  // J..6....I.....6.
   19300: 00 02 10 03 05 41 0A 00 00 00 33 05 41 01 00 00  // .....A....3.A...
   19310: 00 3E 05 41 00 00 00 00 44 8F 01 51 0A 3C 05 B8  // .>.A....D..Q.<..
   19320: 36 00 00 02 00 49 4C 01 03 05 41 04 00 00 00 51  // 6....IL...A....Q
   19330: 0A 33 05 41 01 00 00 00 3E 05 41 00 00 00 00 44  // .3.A....>.A....D
   19340: 8F 01 3C 05 AA 36 AD DE AD DE 49 71 01 01 05 B8  // ..<..6....Iq....
   19350: 36 00 00 00 00 0D 05 C0 36 01 00 00 00 07 05 B6  // 6.......6.......
   19360: 36 FF FF FE FF 0D 05 02 38 00 01 00 00 51 0A 01  // 6.......8....Q..
   19370: 05 97 36 00 00 00 00 01 05 96 36 00 00 00 00 01  // ..6.......6.....
   19380: 05 A3 36 00 00 00 00 07 05 02 38 FF FE FF FF 66  // ..6.......8....f
   19390: 0B 03 04 00 04 00 02 02 04 00 15 05 00 0A 1A 05  // ................
   193A0: 04 16 02 05 00 00 00 00 00 02 02 01 00 2C 05 01  // .............,..
   193B0: 00 00 02 00 55 00 02 02 89 02 04 02 05 03 00 00  // ....U...........
   193C0: 05 D0 52 35 02 05 00 00 00 00 00 02 02 01 00 2C  // ..R5...........,
   193D0: 05 01 00 00 00 00 55 00 02 02 89 02 04 02 05 03  // ......U.........
   193E0: 00 20 00 D0 52 35 66 16 3E 0D 42 00 00 44 9B 02  // . ..R5f.>.B..D..
   193F0: 56 00 41 03 0C 41 00 00 2D 05 41 0F 00 00 00 09  // V.A..A..-.A.....
   19400: 05 41 F0 FF 00 00 2D 0A 41 42 03 05 46 00 84 00  // .A....-.AB..F...
   19410: 00 56 08 42 04 04 00 00 00 2D 05 46 04 00 00 00  // .V.B.....-.F....
   19420: 2D 05 42 04 00 00 00 3E 02 42 41 45 56 02 02 05  // -.B....>.BAEV...
   19430: 00 00 84 00 00 2C 02 00 00 02 02 01 00 2C 05 01  // .....,.......,..
   19440: 00 00 02 00 02 89 02 04 02 09 02 04 02 05 03 00  // ................
   19450: 00 00 40 02 0A 03 41 52 35 52 16 02 01 02 00 14  // ..@...AR5R......
   19460: 05 00 18 1A 05 02 08 03 02 41 00 2D 05 41 00 00  // .........A.-.A..
   19470: 02 00 2D 01 41 00 01 02 7B 36 41 03 01 40 04 2D  // ..-.A...{6A..@.-
   19480: 01 40 02 01 02 7C 36 40 01 05 68 36 00 00 00 03  // .@...|6@..h6....
   19490: 01 05 70 36 FF FF 01 83 03 02 41 00 2D 05 41 00  // ..p6......A.-.A.
   194A0: 00 04 00 2D 01 41 00 01 02 7D 36 41 03 01 40 04  // ...-.A...}6A..@.
   194B0: 2D 01 40 02 01 02 7E 36 40 01 05 69 36 00 00 00  // -.@...~6@..i6...
   194C0: 04 01 05 71 36 FF FF 00 84 03 02 41 00 2D 05 41  // ...q6......A.-.A
   194D0: 00 00 05 00 2D 01 41 00 01 02 7F 36 41 03 01 40  // ....-.A....6A..@
   194E0: 04 2D 01 40 02 01 02 80 36 40 01 05 6A 36 00 00  // .-.@....6@..j6..
   194F0: 00 05 01 05 72 36 FF FF 00 85 03 02 41 00 2D 05  // ....r6......A.-.
   19500: 41 00 00 06 00 2D 01 41 00 01 02 81 36 41 03 01  // A....-.A....6A..
   19510: 40 04 2D 01 40 02 01 02 82 36 40 01 05 6B 36 00  // @.-.@....6@..k6.
   19520: 00 00 06 01 05 73 36 FF FF 00 86 03 05 46 00 31  // .....s6......F.1
   19530: 00 00 03 02 41 00 2D 05 41 00 00 00 00 2D 01 41  // ....A.-.A....-.A
   19540: 00 03 01 40 04 2D 01 40 02 04 02 00 41 04 02 01  // ...@.-.@....A...
   19550: 40 04 05 04 00 00 00 00 04 05 05 00 00 00 00 04  // @...............
   19560: 05 06 00 20 00 00 01 05 94 36 00 00 00 80 01 05  // ... .....6......
   19570: 95 36 00 20 00 00 01 02 56 36 41 01 02 57 36 40  // .6. ....V6A..W6@
   19580: 01 05 61 36 FF FF 00 80 01 05 97 36 00 00 00 00  // ..a6.......6....
   19590: 01 05 96 36 00 00 00 00 03 00 41 96 36 01 05 B1  // ...6......A.6...
   195A0: 36 00 00 00 00 4A 25 48 00 01 44 F7 03 0D 05 B1  // 6....J%H..D.....
   195B0: 36 08 00 00 00 5C 05 B6 36 00 FF FF FF C6 00 09  // 6....\..6.......
   195C0: 00 07 05 C0 36 FE FF FF FF 03 05 41 50 C3 00 00  // ....6......AP...
   195D0: 4A 05 A3 36 02 00 00 00 49 30 04 51 14 33 05 41  // J..6....I0.Q.3.A
   195E0: 01 00 00 00 3E 05 41 00 00 00 00 49 12 04 5B 00  // ....>.A....I..[.
   195F0: 6D 00 02 01 00 04 37 00 00 66 16 03 0C 41 04 00  // m.....7..f...A..
   19600: 4C 0D 41 02 00 44 1D 00 0D A5 4C 00 02 52 16 01  // L.A..D....L..R..
   19610: 01 35 39 02 01 01 36 39 03 01 05 00 00 D7 A8 01  // .59...69........
   19620: 00 01 00 37 39 01 00 03 01 41 01 15 05 41 18 01  // ...79....A...A..
   19630: 02 C4 00 41 03 01 41 01 1B 05 41 08 01 02 C9 00  // ...A..A...A.....
   19640: 41 03 00 41 37 39 01 02 3B 39 41 03 01 40 03 33  // A..A79..;9A..@.3
   19650: 01 40 02 2D 02 40 41 01 02 3C 39 40 5B 00 BD 01  // .@.-.@A..<9@[...
   19660: 03 01 04 00 37 00 00 66 08 03 05 46 C0 12 00 00  // ....7..f...F....
   19670: 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05 40 0C  // =...I.....F[..@.
   19680: 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01 2D 0A  // ...!!@.f.-.B..-.
   19690: 42 40 03 04 40 00 00 03 04 41 04 00 03 04 00 08  // B@..@....A......
   196A0: 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00  // .....@..@....@..
   196B0: 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01 02 00  // ..@..>.@..I.....
   196C0: 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D  // .A..@....@....>.
   196D0: 40 00 00 49 82 00 03 05 46 00 71 02 00 43 BC 00  // @..I....F.q..C..
   196E0: 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00  // !.@F..A....A....
   196F0: 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40 00 00  // ..A.C..|.@F~.@..
   19700: 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05  // ....A....A......
   19710: 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 C8  // A.u.@A..F@=...I.
   19720: 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56 00 40  // ....F[=...I..V.@
   19730: 03 29 40 00 21 0D 40 09 00 03 02 41 00 2D 02 40  // .)@.!.@....A.-.@
   19740: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
   19750: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 0B  // ....A....A=...I.
   19760: 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39 40 00  // .....F.#[V.@.9@.
   19770: 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02 00 47  // U8.f.-.BY.>.@..G
   19780: 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04 00 21  // ,.-.B..C..3.@..!
   19790: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
   197A0: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
   197B0: 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00 00 C8  // ..@[zd..........
   197C0: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
   197D0: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 37  // .~.`.d..2....d.7
   197E0: 6C 01 00 00 6C 01 00 66 6C 01 00 37 6E 01 00 00  // l...l..fl..7n...
   197F0: 6E 01 00 66 6E 01 00 00 00 00 00 00 00 00 00 00  // n..fn...........
   19800: 00 00 00 37 70 01 00 00 70 01 00 66 70 01 00 37  // ...7p...p..fp..7
   19810: 72 01 00 00 72 01 00 66 72 01 00 00 D5 00 03 03  // r...r..fr.......
   19820: 0C 00 37 00 00 66 04 03 04 46 28 00 3E 05 46 00  // ..7..f...F(.>.F.
   19830: 00 00 00 49 3C 00 03 01 00 00 03 01 01 01 03 01  // ...I<...........
   19840: 02 02 52 16 03 01 46 00 1B 05 46 08 02 02 00 00  // ..R...F...F.....
   19850: 02 02 01 01 02 02 02 02 3D 65 02 00 49 47 00 2C  // ........=e..IG.,
   19860: 22 02 46 3D E5 02 00 49 52 00 2C A2 02 46 03 01  // ".F=...IR.,..F..
   19870: 40 03 09 05 40 00 00 00 FC 3E 05 40 00 00 00 D0  // @...@....>.@....
   19880: 49 75 00 01 05 63 C0 00 00 00 40 55 20 02 43 79  // Iu...c....@U .Cy
   19890: 00 54 00 63 C0 01 01 64 C0 00 56 00 40 03 21 40  // .T.c...d..V.@.!@
   198A0: 02 01 02 65 C0 40 01 01 66 C0 01 03 31 40 02 01  // ...e.@..f...1@..
   198B0: 02 67 C0 40 01 01 E8 C0 03 3D 65 02 01 44 CC 00  // .g.@.....=e..D..
   198C0: 3D E5 02 01 44 CC 00 51 02 56 00 40 4A E5 A0 21  // =...D..Q.V.@J..!
   198D0: 80 44 D4 00 51 14 2D 05 40 01 00 00 00 3E 05 40  // .D..Q.-.@....>.@
   198E0: A0 86 01 00 45 B0 00 5B 4A E5 A0 21 80 49 CC 00  // ....E..[J..!.I..
   198F0: 5B FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // [...............
   19900: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19910: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19920: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19930: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19940: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19950: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19960: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19970: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19980: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19990: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   199F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
   19A80: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
   19A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


WPBT
----
[000h 0000   4]                    Signature : "WPBT"    [Windows Platform Binary Table]
[004h 0004   4]                 Table Length : 00000036
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 Handoff Size : 00C953F0
[028h 0040   8]              Handoff Address : 00000000749AC036
[030h 0048   1]                       Layout : 01
[031h 0049   1]                         Type : 01
[032h 0050   2]             Arguments Length : 0002
[034h 0052   2]       Command-line Arguments : ""

Raw Table Data: Length 54 (0x36)

    0000: 57 50 42 54 36 00 00 00 01 65 41 4C 41 53 4B 41  // WPBT6....eALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 4D 53 46 54  // A M I.......MSFT
    0020: 13 00 01 00 F0 53 C9 00 36 C0 9A 74 00 00 00 00  // .....S..6..t....
    0030: 01 01 02 00 00 00                                // ......


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 95 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


