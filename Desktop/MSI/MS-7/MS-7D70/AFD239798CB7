
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000450  0x02  "AMD   "  "CPMDFDG2"  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x05  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00001D28  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x000003F1  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 06)  TPM2  0x0000004C  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 07)  VFCT  0x0000AC84  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  SSDT  0x000000B3  0x02  "AMD Am"  "AmdTable"  0x00000001  "INTL"   0x20120913
 09)  SSDT  0x000000A7  0x02  "AMD   "  "GPIO    "  0x00000001  "INTL"   0x20120913
 10)  SSDT  0x00000DF6  0x02  "AMD   "  "CPMACPV4"  0x00000001  "INTL"   0x20120913
 11)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 12)  UEFI  0x00000048  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 13)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 14)  DSDT  0x0003057C  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 15)  SSDT  0x000022C7  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20120913
 16)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  SSDT  0x000004D2  0x02  "AMD   "  "CPMMSOSC"  0x00000001  "INTL"   0x20120913
 18)  WDRT  0x00000047  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 19)  SSDT  0x0000052C  0x02  "AMD   "  "CPMDFIG5"  0x00000001  "INTL"   0x20120913
 20)  SSDT  0x00000240  0x02  "AMD   "  "USB     "  0x00000001  "INTL"   0x20120913
 21)  SSDT  0x00009BAE  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 22)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 23)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 24)  SSDT  0x00007B72  0x02  "AMD   "  "Splinter"  0x00000002  "MSFT"   0x04000000
 25)  SSDT  0x00000085  0x02  "AMD Am"  "AmdTable"  0x00000001  "INTL"   0x20120913
 26)  SSDT  0x0000013D  0x02  "AMD   "  "EXTGPP00"  0x00000001  "INTL"   0x20120913
 27)  SSDT  0x00000042  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20120913
 28)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 29)  SSDT  0x00008880  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20120913
 30)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 31)  FACS  0x00000040  0x02
 32)  SSDT  0x000000BC  0x02  "AMD   "  "MEMTOOL0"  0x00000002  "INTL"   0x20120913

Found 32 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 37
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 10
[06Fh 0111   1]                Local Apic ID : 10
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 12
[077h 0119   1]                Local Apic ID : 12
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 14
[07Fh 0127   1]                Local Apic ID : 14
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 16
[087h 0135   1]                Local Apic ID : 16
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 18
[08Fh 0143   1]                Local Apic ID : 18
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 1A
[097h 0151   1]                Local Apic ID : 1A
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 1C
[09Fh 0159   1]                Local Apic ID : 1C
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 1E
[0A7h 0167   1]                Local Apic ID : 1E
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 01
[0AFh 0175   1]                Local Apic ID : 01
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 03
[0B7h 0183   1]                Local Apic ID : 03
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 05
[0BFh 0191   1]                Local Apic ID : 05
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 07
[0C7h 0199   1]                Local Apic ID : 07
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 09
[0CFh 0207   1]                Local Apic ID : 09
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 0B
[0D7h 0215   1]                Local Apic ID : 0B
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 0D
[0DFh 0223   1]                Local Apic ID : 0D
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 0F
[0E7h 0231   1]                Local Apic ID : 0F
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 11
[0EFh 0239   1]                Local Apic ID : 11
[0F0h 0240   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 13
[0F7h 0247   1]                Local Apic ID : 13
[0F8h 0248   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 15
[0FFh 0255   1]                Local Apic ID : 15
[100h 0256   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 17
[107h 0263   1]                Local Apic ID : 17
[108h 0264   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 19
[10Fh 0271   1]                Local Apic ID : 19
[110h 0272   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1B
[117h 0279   1]                Local Apic ID : 1B
[118h 0280   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1D
[11Fh 0287   1]                Local Apic ID : 1D
[120h 0288   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 1F
[128h 0296   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 20
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 21
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 05 37 41 4C 41 53 4B 41  // APIC^....7ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 0C  // ................
    0060: 01 00 00 00 00 08 0E 0E 01 00 00 00 00 08 10 10  // ................
    0070: 01 00 00 00 00 08 12 12 01 00 00 00 00 08 14 14  // ................
    0080: 01 00 00 00 00 08 16 16 01 00 00 00 00 08 18 18  // ................
    0090: 01 00 00 00 00 08 1A 1A 01 00 00 00 00 08 1C 1C  // ................
    00A0: 01 00 00 00 00 08 1E 1E 01 00 00 00 00 08 01 01  // ................
    00B0: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00C0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00D0: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 0D  // ................
    00E0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 11 11  // ................
    00F0: 01 00 00 00 00 08 13 13 01 00 00 00 00 08 15 15  // ................
    0100: 01 00 00 00 00 08 17 17 01 00 00 00 00 08 19 19  // ................
    0110: 01 00 00 00 00 08 1B 1B 01 00 00 00 00 08 1D 1D  // ................
    0120: 01 00 00 00 00 08 1F 1F 01 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00001D28
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 67
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 7464 (0x1D28)

    0000: 43 52 41 54 28 1D 00 00 01 67 41 4D 44 00 00 00  // CRAT(....gAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 75 00 00 00 01 00 00 00 00 00 00 00  // ....u...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  //  ...............
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B0  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 50 0F 00 00 00 40 00 00 00  // .......P....@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0570: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0630: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    06F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0720: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0730: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0760: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0770: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    07A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    07B0: 10 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    07E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    07F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0820: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0830: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0860: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0870: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    08A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    08B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    08E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    08F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0920: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0930: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0960: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0970: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    09B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    09F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0A20: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0A30: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0A60: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0A70: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0AA0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0AB0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0AE0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B20: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0B30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0B60: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0B70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0BA0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0BE0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0C20: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0C30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0C60: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CA0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0CE0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 00 04 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0D60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0D70: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0DE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0DF0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0E60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0E70: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0EE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0EF0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0F20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0F30: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    0F60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    0F70: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0FA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0FB0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    0FE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    0FF0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    1000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1010: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1020: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1030: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1050: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1060: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1070: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    10A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    10B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    10E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    10F0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1120: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1130: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1150: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1160: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1170: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    11A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    11B0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    11C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    11E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    11F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1210: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1220: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1230: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1250: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1260: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1270: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1290: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    12A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    12B0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    12E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    12F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1310: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1320: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1330: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1360: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1370: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1390: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    13A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    13B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    13C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    13E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    13F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1410: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1420: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1430: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1450: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1460: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1470: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    14A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    14B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    14C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    14E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    14F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1510: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1520: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1530: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1550: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1560: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1570: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    15A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    15B0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    15C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    15E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    15F0: 10 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1620: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1630: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1650: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1660: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1670: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    16A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    16B0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    16C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    16E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    16F0: 12 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1710: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1730: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1750: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1760: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1770: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    17A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    17B0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    17E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    17F0: 14 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1810: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1830: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1860: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1870: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    18A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    18B0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    18E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    18F0: 16 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1910: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1930: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1950: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1960: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1970: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    19A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    19B0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    19E0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    19F0: 18 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1A30: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1A60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1A70: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1AB0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1AE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1AF0: 1A 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1B30: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1B60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1B70: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1BB0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1BE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1BF0: 1C 00 00 00 00 00 00 30 00 00 00 00 00 00 00 00  // .......0........
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1C30: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 00 00 00 00 01 00 00 00 FF 48 00 00 FF 48 00 00  // .........H...H..
    1C60: 0F 48 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .H.......@......
    1C70: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    1CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    1CB0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CD0: 00 00 00 00 02 00 00 00 05 0C 00 00 08 0C 00 00  // ................
    1CE0: FF 48 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .H.......@......
    1CF0: 1E 00 00 00 00 00 00 C0 00 00 00 00 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    1D20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.DADR, UnknownObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.RPRM, UnknownObj)
    External (_SB_.PCI0.SPCH, IntObj)
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HDVD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, IntObj)
    External (M083, UnknownObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M4F0, IntObj)
    External (M600, IntObj)
    External (M601, IntObj)
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0A10)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A20)
    Name (IO3L, 0x10)
    Name (SP1O, 0x4E)
    Name (KBFG, Zero)
    Name (MSFG, Zero)
    Name (IOES, Zero)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, 0xFEB00000)
    Name (WDTL, 0x1000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xA5DA8000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0xA5DAC000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0xA7E82A18)
    Name (PPIL, 0x1C)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AMDT, 0x01)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (HSPB, 0xFFFFFFFF)
    Name (HSPS, 0xFFFFFFFF)
    Name (LSMB, 0xB2)
    Name (AISV, 0xE3)
    Name (COMA, Zero)
    Name (COMB, Zero)
    Name (LPTA, Zero)
    Name (WMSZ, 0x0300)
    Name (FDSI, 0xD4)
    Name (FESI, 0xD5)
    Name (FSSI, 0xE2)
    Name (SMIP, 0xB2)
    Name (CISI, 0x88)
    Name (SWGA, 0x87)
    Name (SWGB, 0x88)
    Name (TFSV, 0xEA)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            ACMX = 0xC7
            If ((ACMA == 0x55))
            {
                ACMA = Zero
            }
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1C
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xB0000000)
            Name (MBL, 0x4D000000)
            Name (MAB, 0x0000001050000000)
            Name (MAL, 0x000000EFB0000000)
            Name (MAM, 0x000000FFFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0001000000000000)
                    Name (UMAB, 0x0001000000000000)
                    Name (UMAM, 0x0001000000000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG07) /* \_SB_.AG07 */
                    }

                    Return (PG07) /* \_SB_.PG07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG09) /* \_SB_.AG09 */
                    }

                    Return (PG09) /* \_SB_.PG09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00F)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.AR24 */
                    }

                    Return (PD24) /* \_SB_.PD24 */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D021)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GPPG)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D023)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPH)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D025)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D026)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D02B)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (D032)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }

                    Name (MSWD, 0x0000)
                    Device (MSIV)
                    {
                        Name (_HID, "MBAD0002")  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((MSWD & One))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }

                            Return (One)
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT1 & 0x30)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xEF), 
                        RGEF,   8, 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8, 
                        OPTA,   8, 
                        OPTB,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1F)
                        IRQNoFlags (_Y1D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IRQNoFlags (_Y20)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y21)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y26)
                        IRQ (Level, ActiveLow, Shared, _Y24)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y25)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            OPT9 = 0xFF
                            If (KBFG)
                            {
                                RGE4 |= 0x40
                                OPTB |= One
                            }
                            Else
                            {
                                RGE4 &= 0xBF
                                OPTB &= 0xFE
                            }

                            If (MSFG)
                            {
                                RGE4 |= 0x80
                                OPTB |= 0x02
                            }
                            Else
                            {
                                RGE4 &= 0x7F
                                OPTB &= 0xFD
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        PMFG = RGEF /* \_SB_.PCI0.SBRG.SIO1.RGEF */
                        OPT9 = 0xFF
                        RGE4 &= 0x3F
                        OPTB &= 0xFC
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PMED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0A)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SP80)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (LDN, 0x08)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SFED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (LDN, 0x11)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (DSLP)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (LDN, 0x0D)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (TACH)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (LDN, 0x0E)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (FUNC)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Name (LDN, 0x0F)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D02E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3D) /* \_SB_.AG3D */
                    }

                    Return (PG3D) /* \_SB_.PG3D */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1A, 0x04))
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3F) /* \_SB_.AG3F */
                    }

                    Return (PG3F) /* \_SB_.PG3F */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Scope (\_GPE)
                {
                    Method (SP05, 0, NotSerialized)
                    {
                        Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG40) /* \_SB_.AG40 */
                    }

                    Return (PG40) /* \_SB_.PG40 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG41) /* \_SB_.AG41 */
                    }

                    Return (PG41) /* \_SB_.PG41 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG43) /* \_SB_.AG43 */
                    }

                    Return (PG43) /* \_SB_.PG43 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, SPTS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y27)
                    IRQNoFlags (_Y28)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y27._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y27._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y28._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y29)
                    IRQNoFlags (_Y2A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y29._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y29._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y2A._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2B)
                    IRQNoFlags (_Y2C)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y2B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y2C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2D)
                    IRQNoFlags (_Y2E)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y2D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
        {
            If ((TCMF == Zero))
            {
                If ((TTDP == Zero))
                {
                    Return (0x310CD041)
                }
                Else
                {
                    Return ("MSFT0101")
                }
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y30)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y32)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y33,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                _Y34)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y30._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y30._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y31._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y31._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y32._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y32._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y33._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        CreateDWordField (CRSI, \_SB.TPM._Y34._BAS, HSPF)  // _BAS: Base Address
                        CreateDWordField (CRSI, \_SB.TPM._Y34._LEN, HSPL)  // _LEN: Length
                        HSPF = HSPB /* \HSPB */
                        HSPL = HSPS /* \HSPS */
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y30._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02)){}
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y33._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y33._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        Device (WMIC)
        {
            Mutex (MWMI, 0x00)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "WMIC")  // _UID: Unique ID
            Name (WMIO, 0xA7E6BA98)
            Name (WQBA, Buffer (0x06CF)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBF, 0x06, 0x00, 0x00, 0x88, 0x2B, 0x00, 0x00,  // .....+..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD1, 0x94, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0B, 0x10, 0x0A, 0x0B, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x3C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .P<...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x06, 0x88, 0x14, 0x40, 0x48, 0x22, 0x84,  // 1...@H".
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x68, 0x73, 0x02, 0x32,  // ..."hs.2
                /* 0068 */  0x0D, 0x25, 0xA0, 0xC2, 0x31, 0x84, 0xD4, 0xF2,  // .%..1...
                /* 0070 */  0x1C, 0xA4, 0x1D, 0x49, 0x83, 0x88, 0x92, 0xC0,  // ...I....
                /* 0078 */  0x02, 0x47, 0x80, 0x12, 0x33, 0x02, 0x94, 0x4E,  // .G..3..N
                /* 0080 */  0x64, 0xC1, 0xB7, 0x88, 0x2C, 0xA1, 0x28, 0x9A,  // d...,.(.
                /* 0088 */  0x44, 0x94, 0x04, 0xD1, 0xFB, 0x46, 0xD0, 0x90,  // D....F..
                /* 0090 */  0xCA, 0x15, 0xE0, 0x5D, 0x80, 0xED, 0x11, 0x88,  // ...]....
                /* 0098 */  0xC0, 0xF0, 0x3C, 0xA6, 0x09, 0x10, 0x16, 0x63,  // ..<....c
                /* 00A0 */  0x89, 0x0A, 0xE1, 0x00, 0x06, 0xE3, 0x01, 0x44,  // .......D
                /* 00A8 */  0x72, 0x86, 0x89, 0x02, 0xB6, 0xD7, 0x69, 0xC8,  // r.....i.
                /* 00B0 */  0xE4, 0x18, 0xA9, 0x24, 0x38, 0xD4, 0x08, 0x3D,  // ...$8..=
                /* 00B8 */  0xCA, 0xE6, 0x05, 0xE8, 0x1E, 0xAC, 0x06, 0xE2,  // ........
                /* 00C0 */  0x91, 0x85, 0x64, 0xD2, 0x86, 0x82, 0x1A, 0xB6,  // ..d.....
                /* 00C8 */  0x27, 0x75, 0x4A, 0x9E, 0xA1, 0x25, 0x0F, 0x92,  // 'uJ..%..
                /* 00D0 */  0x10, 0x78, 0x14, 0x0C, 0x8D, 0x13, 0x94, 0x05,  // .x......
                /* 00D8 */  0xA1, 0x1D, 0xD1, 0x61, 0x12, 0xC0, 0x93, 0xF0,  // ...a....
                /* 00E0 */  0x0C, 0x8B, 0x1F, 0xB2, 0xA0, 0x4F, 0xE4, 0xAC,  // .....O..
                /* 00E8 */  0x0F, 0x98, 0x1D, 0x07, 0x7C, 0x04, 0xC0, 0xC1,  // ....|...
                /* 00F0 */  0x1A, 0x28, 0x5C, 0xC0, 0xF3, 0x39, 0x86, 0xC8,  // .(\..9..
                /* 00F8 */  0x71, 0x0F, 0x36, 0xC6, 0x51, 0x44, 0x4E, 0x50,  // q.6.QDNP
                /* 0100 */  0xE1, 0x44, 0xE4, 0x73, 0xD2, 0x12, 0x74, 0x04,  // .D.s..t.
                /* 0108 */  0x20, 0x60, 0xD1, 0x0C, 0xD6, 0x33, 0x38, 0x91,  //  `...38.
                /* 0110 */  0x3D, 0x02, 0x94, 0x0C, 0x08, 0x79, 0x14, 0x60,  // =....y.`
                /* 0118 */  0x55, 0xC0, 0xFF, 0x1F, 0xF7, 0x34, 0x4C, 0xD0,  // U....4L.
                /* 0120 */  0xBD, 0x00, 0x65, 0x02, 0x8C, 0x09, 0x70, 0x06,  // ..e...p.
                /* 0128 */  0x2D, 0x6F, 0x02, 0xC4, 0x41, 0x68, 0x1A, 0x6D,  // -o..Ah.m
                /* 0130 */  0x09, 0xB0, 0x76, 0x5B, 0xD0, 0xFC, 0x62, 0x44,  // ..v[..bD
                /* 0138 */  0x39, 0xCF, 0x48, 0x01, 0xC3, 0x44, 0x69, 0x0E,  // 9.H..Di.
                /* 0140 */  0x51, 0x58, 0x11, 0xA3, 0xC4, 0xA9, 0x19, 0x4C,  // QX.....L
                /* 0148 */  0x10, 0x0F, 0x0C, 0xD1, 0x22, 0x85, 0x65, 0x13,  // ....".e.
                /* 0150 */  0x08, 0xD2, 0xFE, 0x20, 0xC8, 0xA0, 0x71, 0xA3,  // ... ..q.
                /* 0158 */  0xF7, 0x5D, 0xE1, 0xC0, 0x8E, 0xE2, 0xE8, 0x8F,  // .]......
                /* 0160 */  0xE8, 0x28, 0xD9, 0x94, 0x0F, 0xEC, 0xC9, 0x20,  // .(..... 
                /* 0168 */  0xF4, 0xB1, 0x46, 0x8D, 0x71, 0x16, 0x09, 0x1C,  // ..F.q...
                /* 0170 */  0x7F, 0xA9, 0x3A, 0x50, 0x38, 0x12, 0x3C, 0xEA,  // ..:P8.<.
                /* 0178 */  0xAC, 0xE0, 0x73, 0x81, 0x87, 0x76, 0xD0, 0x9E,  // ..s..v..
                /* 0180 */  0xE3, 0x09, 0x04, 0x79, 0x6C, 0xF0, 0x79, 0xE1,  // ...yl.y.
                /* 0188 */  0x81, 0xC0, 0x63, 0x60, 0xB7, 0x09, 0x1F, 0x01,  // ..c`....
                /* 0190 */  0x7C, 0x42, 0xC0, 0xBB, 0x06, 0xD4, 0xD5, 0xE0,  // |B......
                /* 0198 */  0xC1, 0x80, 0x0D, 0x3A, 0x1C, 0x66, 0xBC, 0x1E,  // ...:.f..
                /* 01A0 */  0x7E, 0xB8, 0x13, 0x38, 0xB9, 0x87, 0x0B, 0x7E,  // ~..8...~
                /* 01A8 */  0xD0, 0xF0, 0xE0, 0x70, 0x77, 0x88, 0x93, 0x39,  // ...pw..9
                /* 01B0 */  0xB2, 0x52, 0x05, 0x98, 0x3D, 0x1C, 0xE8, 0x18,  // .R..=...
                /* 01B8 */  0xE1, 0x93, 0x06, 0x3B, 0x03, 0x60, 0xE4, 0x0F,  // ...;.`..
                /* 01C0 */  0x02, 0x35, 0x32, 0x43, 0xFB, 0x44, 0xF1, 0xC2,  // .52C.D..
                /* 01C8 */  0x61, 0xC8, 0xE7, 0x84, 0xC3, 0x62, 0x62, 0x4F,  // a....bbO
                /* 01D0 */  0x1C, 0x74, 0x3C, 0xE0, 0xBF, 0x08, 0x3C, 0x65,  // .t<...<e
                /* 01D8 */  0x78, 0xFA, 0x9E, 0xAF, 0x4F, 0x21, 0xE0, 0xC1,  // x...O!..
                /* 01E0 */  0x38, 0x83, 0x50, 0x0F, 0x0D, 0xAF, 0x0D, 0x9E,  // 8.P.....
                /* 01E8 */  0xDF, 0x3B, 0x03, 0xFE, 0x14, 0xC2, 0xFF, 0xFF,  // .;......
                /* 01F0 */  0xA7, 0x10, 0xF0, 0xE2, 0x1D, 0x00, 0xE6, 0x38,  // .......8
                /* 01F8 */  0xE0, 0x01, 0x70, 0xF0, 0xA7, 0x88, 0xB3, 0xB3,  // ..p.....
                /* 0200 */  0xD2, 0x39, 0x21, 0x4F, 0x2A, 0x60, 0x10, 0xA6,  // .9!O*`..
                /* 0208 */  0x61, 0xEC, 0x2C, 0x28, 0x85, 0x6C, 0x2C, 0xDE,  // a.,(.l,.
                /* 0210 */  0xC3, 0xA7, 0x42, 0x80, 0x74, 0xB4, 0x38, 0x3E,  // ..B.t.8>
                /* 0218 */  0x4F, 0x11, 0x1E, 0xC1, 0xE0, 0xC7, 0x07, 0x9D,  // O.......
                /* 0220 */  0x3C, 0x3C, 0x00, 0x47, 0x26, 0x51, 0xE8, 0x41,  // <<.G&Q.A
                /* 0228 */  0xD1, 0xD3, 0x0A, 0x39, 0x80, 0x50, 0x10, 0x03,  // ...9.P..
                /* 0230 */  0x3A, 0xC3, 0x39, 0x02, 0xAD, 0xE2, 0x1C, 0x41,  // :.9....A
                /* 0238 */  0xE6, 0x70, 0x14, 0xA7, 0x99, 0xA0, 0xE8, 0x2B,  // .p.....+
                /* 0240 */  0x04, 0x9D, 0xB4, 0x2F, 0x07, 0x7C, 0x59, 0x1A,  // .../.|Y.
                /* 0248 */  0x0B, 0x01, 0xB6, 0x9A, 0xCB, 0x09, 0x0A, 0xCC,  // ........
                /* 0250 */  0xF7, 0x0F, 0x4E, 0x50, 0xD7, 0x01, 0x02, 0x64,  // ..NP...d
                /* 0258 */  0xFA, 0x2E, 0x08, 0xA0, 0x00, 0xF2, 0x89, 0xC0,  // ........
                /* 0260 */  0x57, 0x80, 0x97, 0x02, 0x36, 0x86, 0xB7, 0x00,  // W...6...
                /* 0268 */  0xA3, 0x19, 0x9D, 0x87, 0x1F, 0x2A, 0x2A, 0xEE,  // .....**.
                /* 0270 */  0x50, 0x29, 0x88, 0x87, 0xEA, 0x28, 0x43, 0x45,  // P)...(CE
                /* 0278 */  0xCF, 0xC4, 0xC7, 0x09, 0xCF, 0xA8, 0x75, 0x10,  // ......u.
                /* 0280 */  0xCD, 0xD1, 0x04, 0xAF, 0x04, 0x09, 0xFE, 0xFF,  // ........
                /* 0288 */  0x8F, 0x1F, 0x70, 0x6E, 0x02, 0x21, 0x9F, 0x42,  // ..pn.!.B
                /* 0290 */  0x3C, 0x0D, 0xC3, 0x79, 0xB2, 0x1C, 0xCE, 0x93,  // <..y....
                /* 0298 */  0xE5, 0x63, 0xF1, 0xE9, 0x03, 0x7C, 0xA7, 0x09,  // .c...|..
                /* 02A0 */  0xDC, 0x6C, 0xC1, 0x08, 0x8F, 0x89, 0x35, 0x2A,  // .l....5*
                /* 02A8 */  0x7A, 0x00, 0xF2, 0xF0, 0xF8, 0xE5, 0xC0, 0xF3,  // z.......
                /* 02B0 */  0x79, 0x42, 0x38, 0xCA, 0x47, 0x0F, 0x5F, 0x5B,  // yB8.G._[
                /* 02B8 */  0x3C, 0x9B, 0xB7, 0x04, 0xDF, 0x44, 0x3C, 0x44,  // <....D<D
                /* 02C0 */  0x9F, 0x85, 0x60, 0x4D, 0xE4, 0xA4, 0x7D, 0x5B,  // ..`M..}[
                /* 02C8 */  0x38, 0xD9, 0xA0, 0xF1, 0xC3, 0x7A, 0x98, 0x9E,  // 8....z..
                /* 02D0 */  0xD3, 0xB3, 0x10, 0x58, 0x8E, 0x15, 0xEC, 0x66,  // ...X...f
                /* 02D8 */  0xF1, 0x34, 0x84, 0xB9, 0x1C, 0xF9, 0x5C, 0x81,  // .4....\.
                /* 02E0 */  0x15, 0xBB, 0x1A, 0x1D, 0x32, 0x70, 0x61, 0xDE,  // ....2pa.
                /* 02E8 */  0x05, 0xBA, 0x60, 0xB0, 0x43, 0x06, 0x4C, 0xF1,  // ..`.C.L.
                /* 02F0 */  0x90, 0x3A, 0x64, 0x70, 0xD9, 0x14, 0x12, 0x4E,  // .:dp...N
                /* 02F8 */  0xA3, 0xA3, 0x02, 0x97, 0x7A, 0xD6, 0xA0, 0x20,  // ....z.. 
                /* 0300 */  0x1E, 0xA4, 0x0F, 0x19, 0xE0, 0xFF, 0xFF, 0x1F,  // ........
                /* 0308 */  0x32, 0x80, 0x45, 0x88, 0x19, 0xA1, 0x6F, 0x3A,  // 2.E...o:
                /* 0310 */  0xD6, 0x7A, 0x57, 0x22, 0x57, 0x88, 0x07, 0x15,  // .zW"W...
                /* 0318 */  0x0F, 0x09, 0xAC, 0x43, 0xF5, 0x31, 0x04, 0xF0,  // ...C.1..
                /* 0320 */  0x3D, 0x12, 0x1F, 0x43, 0x80, 0xEB, 0xFF, 0xFF,  // =..C....
                /* 0328 */  0x18, 0x02, 0x3C, 0x87, 0xE9, 0x63, 0x08, 0x78,  // ..<..c.x
                /* 0330 */  0x2E, 0x1D, 0xEC, 0x18, 0x02, 0x3B, 0xDC, 0x19,  // .....;..
                /* 0338 */  0x91, 0x86, 0x78, 0x17, 0x28, 0xC2, 0x82, 0x28,  // ..x.(..(
                /* 0340 */  0x8C, 0xCF, 0x88, 0x80, 0xA3, 0xF3, 0x18, 0xFE,  // ........
                /* 0348 */  0x8C, 0x08, 0xF3, 0x38, 0xC6, 0x06, 0x7C, 0xC6,  // ...8..|.
                /* 0350 */  0xC1, 0x70, 0x47, 0x44, 0xD8, 0x97, 0xC2, 0xF7,  // .pGD....
                /* 0358 */  0xC2, 0x47, 0xC4, 0x23, 0x7C, 0x77, 0xB3, 0x36,  // .G.#|w.6
                /* 0360 */  0x04, 0x5D, 0x0D, 0x83, 0xC4, 0x89, 0xF0, 0x66,  // .].....f
                /* 0368 */  0xF8, 0x88, 0x68, 0xB8, 0x77, 0xB8, 0x47, 0x44,  // ..h.w.GD
                /* 0370 */  0x63, 0x04, 0x0C, 0x73, 0x34, 0xFF, 0xFF, 0x28,  // c..s4..(
                /* 0378 */  0x4F, 0x87, 0x41, 0x22, 0xFB, 0xA2, 0xF8, 0x7C,  // O.A"...|
                /* 0380 */  0x18, 0xE1, 0x75, 0xD1, 0x38, 0x0F, 0x85, 0x21,  // ..u.8..!
                /* 0388 */  0x1E, 0x11, 0x01, 0x3E, 0x9E, 0x19, 0xD8, 0x95,  // ...>....
                /* 0390 */  0x01, 0x7B, 0x44, 0x04, 0x06, 0xFF, 0xFF, 0x23,  // .{D....#
                /* 0398 */  0x22, 0xF0, 0x11, 0x74, 0x44, 0xA4, 0x21, 0x8F,  // "..tD.!.
                /* 03A0 */  0x88, 0xA8, 0x61, 0x58, 0xC6, 0x11, 0x11, 0x35,  // ..aX...5
                /* 03A8 */  0x45, 0x38, 0x27, 0x44, 0x80, 0x77, 0xFF, 0xFF,  // E8'D.w..
                /* 03B0 */  0xB3, 0x14, 0xF0, 0x0E, 0x75, 0x96, 0x02, 0x6A,  // ....u..j
                /* 03B8 */  0x90, 0x16, 0x79, 0x42, 0x04, 0xE1, 0x59, 0x08,  // ..yB..Y.
                /* 03C0 */  0x96, 0xD0, 0x03, 0x22, 0xEA, 0x08, 0xE0, 0x28,  // ..."...(
                /* 03C8 */  0x07, 0x44, 0xD4, 0x11, 0x03, 0xCE, 0xF9, 0x10,  // .D......
                /* 03D0 */  0xF0, 0xF5, 0xFF, 0x3F, 0x1F, 0x02, 0x3C, 0x3E,  // ...?..<>
                /* 03D8 */  0x84, 0x80, 0xF7, 0xFF, 0x7F, 0x08, 0x01, 0x87,  // ........
                /* 03E0 */  0x84, 0x43, 0x08, 0xA8, 0xCE, 0x87, 0x98, 0x43,  // .C.....C
                /* 03E8 */  0x08, 0xAC, 0xB0, 0x3E, 0x46, 0xC0, 0x62, 0x3C,  // ...>F.b<
                /* 03F0 */  0x0B, 0x14, 0x63, 0x3D, 0x14, 0xC6, 0xC7, 0x43,  // ..c=...C
                /* 03F8 */  0xC0, 0xD1, 0xE1, 0x0C, 0x77, 0x3C, 0x84, 0x7D,  // ....w<.}
                /* 0400 */  0xBC, 0xE4, 0x43, 0x39, 0xB1, 0x88, 0x11, 0x1E,  // ..C9....
                /* 0408 */  0xC6, 0xA2, 0xC5, 0x7C, 0x06, 0xF0, 0xF9, 0x10,  // ...|....
                /* 0410 */  0xF6, 0xDD, 0xF0, 0x71, 0xF0, 0x05, 0x22, 0xC6,  // ...q..".
                /* 0418 */  0xB3, 0xE1, 0xC3, 0xA1, 0xCF, 0x84, 0xEF, 0x85,  // ........
                /* 0420 */  0xE7, 0x11, 0xE5, 0xB9, 0xF0, 0xF9, 0x90, 0x1D,  // ........
                /* 0428 */  0xE0, 0xCE, 0x21, 0x8A, 0x41, 0x22, 0x1D, 0x43,  // ..!.A".C
                /* 0430 */  0xD4, 0x28, 0xCF, 0x8A, 0x61, 0xC3, 0xBC, 0x0D,  // .(..a...
                /* 0438 */  0x86, 0x0B, 0x11, 0x29, 0x42, 0xE4, 0x88, 0x0F,  // ...)B...
                /* 0440 */  0x89, 0x61, 0x9E, 0x0F, 0xC1, 0xF4, 0xFF, 0x3F,  // .a.....?
                /* 0448 */  0x1F, 0xE2, 0x5F, 0x18, 0x3E, 0x1F, 0x02, 0x1C,  // .._.>...
                /* 0450 */  0x39, 0x74, 0xE0, 0xCE, 0x87, 0x60, 0xB8, 0xAA,  // 9t...`..
                /* 0458 */  0xB3, 0x3B, 0x03, 0x8C, 0x03, 0x22, 0x60, 0xE0,  // .;..."`.
                /* 0460 */  0xFF, 0x7F, 0x40, 0xC4, 0x8B, 0x5B, 0xB7, 0x0E,  // ..@..[..
                /* 0468 */  0x2B, 0x56, 0x7C, 0xDC, 0x42, 0x67, 0x79, 0x01,  // +V|.Bgy.
                /* 0470 */  0x08, 0xFA, 0xE8, 0x0E, 0xC7, 0x03, 0x3E, 0x45,  // ......>E
                /* 0478 */  0x18, 0xEA, 0x8F, 0x5B, 0x28, 0xDD, 0x14, 0x52,  // ...[(..R
                /* 0480 */  0x7E, 0xDC, 0x42, 0x69, 0x3D, 0x6E, 0x51, 0x10,  // ~.Bi=nQ.
                /* 0488 */  0x9F, 0x1C, 0x1C, 0xE3, 0x48, 0x04, 0x65, 0x66,  // ....H.ef
                /* 0490 */  0x4F, 0x44, 0xBE, 0x15, 0xF8, 0x64, 0xE3, 0xFB,  // OD...d..
                /* 0498 */  0x16, 0x30, 0x8D, 0x30, 0x26, 0x34, 0x8C, 0xCF,  // .0.0&4..
                /* 04A0 */  0x03, 0x67, 0x74, 0x9A, 0xAF, 0x5B, 0x80, 0xE5,  // .gt..[..
                /* 04A8 */  0xFF, 0xFF, 0x75, 0x0B, 0x30, 0x18, 0xEE, 0xBA,  // ..u.0...
                /* 04B0 */  0x05, 0xD4, 0x4E, 0x00, 0xBE, 0xC0, 0xF8, 0xBA,  // ..N.....
                /* 04B8 */  0x05, 0xAE, 0x9B, 0x07, 0xE6, 0x82, 0x8F, 0x43,  // .......C
                /* 04C0 */  0x7D, 0xF9, 0xC0, 0x5F, 0x44, 0xE0, 0x9C, 0x4E,  // }.._D..N
                /* 04C8 */  0x1E, 0xA6, 0x0C, 0xF8, 0xEA, 0x02, 0xE7, 0x22,  // ......."
                /* 04D0 */  0x02, 0xAC, 0xFE, 0xFF, 0x17, 0x11, 0x80, 0xFF,  // ........
                /* 04D8 */  0xFF, 0xFF, 0x8B, 0x08, 0xF0, 0x1F, 0xA6, 0x2F,  // ......./
                /* 04E0 */  0x22, 0xE0, 0xBB, 0x79, 0xF0, 0x83, 0x08, 0x6C,  // "..y...l
                /* 04E8 */  0x82, 0xC9, 0x4E, 0xF4, 0xA8, 0x01, 0x5B, 0x01,  // ..N...[.
                /* 04F0 */  0x90, 0xC6, 0x7B, 0x48, 0xF1, 0x5E, 0xF9, 0xD8,  // ..{H.^..
                /* 04F8 */  0xB9, 0x2E, 0xC1, 0xE4, 0xC7, 0x79, 0x54, 0x66,  // .....yTf
                /* 0500 */  0x12, 0xA5, 0x3E, 0x29, 0xA0, 0x72, 0x9E, 0x14,  // ..>).r..
                /* 0508 */  0x28, 0x88, 0x01, 0x7D, 0xF5, 0x05, 0x56, 0xD7,  // (..}..V.
                /* 0510 */  0x79, 0x60, 0xFF, 0xFF, 0xBF, 0xCE, 0x03, 0xC6,  // y`......
                /* 0518 */  0xE3, 0x5C, 0xE7, 0x81, 0x9E, 0xBC, 0x3B, 0x06,  // .\....;.
                /* 0520 */  0x68, 0xAE, 0x14, 0xEC, 0x5F, 0xF1, 0x4C, 0x81,  // h..._.L.
                /* 0528 */  0x21, 0x98, 0xEE, 0x72, 0x81, 0xBA, 0xE0, 0x5A,  // !..r...Z
                /* 0530 */  0xC3, 0xE5, 0x02, 0x71, 0xDA, 0x08, 0x7D, 0x5C,  // ...q..}\
                /* 0538 */  0x6F, 0x17, 0xC0, 0xE8, 0xFF, 0x7F, 0xBB, 0x00,  // o.......
                /* 0540 */  0x78, 0x1A, 0xE8, 0x76, 0x01, 0xB4, 0xFE, 0xFF,  // x..v....
                /* 0548 */  0x07, 0x75, 0x7E, 0xA4, 0xC5, 0xDF, 0x2E, 0xE0,  // .u~.....
                /* 0550 */  0x1F, 0x2A, 0xB0, 0x67, 0x62, 0xBD, 0x9E, 0x7D,  // .*.gb..}
                /* 0558 */  0x46, 0xA7, 0x21, 0x8E, 0xE9, 0x80, 0xD6, 0xAB,  // F.!.....
                /* 0560 */  0x89, 0x4F, 0xCF, 0x9E, 0x6F, 0x44, 0x9F, 0xC7,  // .O..oD..
                /* 0568 */  0xC3, 0x3C, 0x3D, 0x1C, 0xF1, 0xDB, 0x83, 0x8F,  // .<=.....
                /* 0570 */  0xE9, 0xF0, 0xCF, 0xE6, 0x6F, 0xE5, 0x71, 0xDF,  // ....o.q.
                /* 0578 */  0xCF, 0x7D, 0x31, 0x7F, 0x38, 0x7F, 0x3D, 0xF7,  // .}1.8.=.
                /* 0580 */  0xE5, 0xDC, 0x87, 0x74, 0xA3, 0x18, 0xC6, 0x50,  // ...t...P
                /* 0588 */  0x86, 0x08, 0x18, 0x34, 0x56, 0x94, 0x23, 0x89,  // ...4V.#.
                /* 0590 */  0x69, 0x94, 0x10, 0x11, 0x5E, 0xD5, 0x8D, 0x15,  // i...^...
                /* 0598 */  0xD2, 0xD6, 0x8E, 0xE9, 0xA0, 0x8E, 0xBF, 0x54,  // .......T
                /* 05A0 */  0x1D, 0xD3, 0xE1, 0xFC, 0xFF, 0x8F, 0xE9, 0x00,  // ........
                /* 05A8 */  0x1F, 0xCE, 0x0C, 0xB8, 0x63, 0x3A, 0xFC, 0x43,  // ....c:.C
                /* 05B0 */  0x03, 0xBF, 0x33, 0xE0, 0x4F, 0xE9, 0x80, 0x8F,  // ..3.O...
                /* 05B8 */  0xC0, 0x77, 0x27, 0x1A, 0x96, 0x42, 0xF7, 0x28,  // .w'..B.(
                /* 05C0 */  0x3E, 0x2C, 0x0B, 0x02, 0xD2, 0xFF, 0x7F, 0x84,  // >,......
                /* 05C8 */  0xF0, 0x44, 0x40, 0x53, 0x08, 0xC7, 0x3F, 0x0E,  // .D@S..?.
                /* 05D0 */  0x01, 0x7D, 0x02, 0x1F, 0x87, 0x80, 0xF7, 0xE1,  // .}......
                /* 05D8 */  0xC3, 0xF7, 0x68, 0xE0, 0x76, 0x9E, 0x01, 0x0E,  // ..h.v...
                /* 05E0 */  0x0A, 0x6D, 0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41,  // .m..h..A
                /* 05E8 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 05F0 */  0x31, 0x63, 0xDA, 0xA0, 0x24, 0xE9, 0x80, 0x40,  // 1c..$..@
                /* 05F8 */  0x45, 0x2C, 0x49, 0x63, 0x72, 0x04, 0x10, 0xAA,  // E,Icr...
                /* 0600 */  0xEB, 0xC5, 0x22, 0x23, 0x20, 0x12, 0x09, 0x22,  // .."# .."
                /* 0608 */  0x20, 0xFF, 0xFF, 0x05, 0x7D, 0xD2, 0x04, 0x64,  //  ...}..d
                /* 0610 */  0x79, 0x20, 0x02, 0x72, 0xFE, 0xC7, 0x91, 0x80,  // y .r....
                /* 0618 */  0x2C, 0x66, 0x55, 0x02, 0x72, 0x06, 0x10, 0x01,  // ,fU.r...
                /* 0620 */  0x39, 0x10, 0x10, 0x15, 0x6F, 0x02, 0x88, 0x45,  // 9...o..E
                /* 0628 */  0x01, 0x11, 0x90, 0x83, 0xAB, 0x18, 0x0A, 0x0B,  // ........
                /* 0630 */  0xFA, 0x1E, 0x11, 0x90, 0x65, 0xDA, 0x00, 0x61,  // ....e..a
                /* 0638 */  0xC9, 0x75, 0x80, 0x32, 0x19, 0x3E, 0x80, 0x58,  // .u.2.>.X
                /* 0640 */  0x64, 0x10, 0x01, 0xF9, 0x4D, 0x60, 0x20, 0xA7,  // d...M` .
                /* 0648 */  0xA3, 0x11, 0x90, 0xA3, 0x52, 0x08, 0xC8, 0x0A,  // ....R...
                /* 0650 */  0x95, 0x00, 0x31, 0xB9, 0x20, 0x02, 0xB2, 0x34,  // ..1. ..4
                /* 0658 */  0x27, 0x40, 0x4C, 0x28, 0x88, 0x80, 0x1C, 0xEA,  // '@L(....
                /* 0660 */  0xB9, 0xA4, 0xA1, 0x38, 0x86, 0x16, 0x20, 0x26,  // ...8.. &
                /* 0668 */  0xC2, 0x0B, 0x08, 0x0B, 0xB7, 0x7A, 0x81, 0x3A,  // .....z.:
                /* 0670 */  0x29, 0x88, 0xEE, 0x83, 0xC4, 0x0C, 0x10, 0xD3,  // ).......
                /* 0678 */  0x0A, 0xA2, 0xC1, 0x92, 0xFF, 0x9D, 0x80, 0xAC,  // ........
                /* 0680 */  0x12, 0x44, 0x40, 0x56, 0xF3, 0x92, 0x10, 0x90,  // .D@V....
                /* 0688 */  0xA5, 0x81, 0x08, 0xC8, 0x79, 0x80, 0x68, 0x38,  // ....y.h8
                /* 0690 */  0x20, 0x1A, 0xC4, 0x0E, 0x10, 0x8B, 0x05, 0x22,  //  ......"
                /* 0698 */  0x20, 0xCB, 0xF6, 0x03, 0xC4, 0x32, 0x80, 0x08,  //  ....2..
                /* 06A0 */  0xC8, 0x7A, 0x0F, 0x20, 0x02, 0xB2, 0x7A, 0x10,  // .z. ..z.
                /* 06A8 */  0x01, 0x59, 0x91, 0xA2, 0x03, 0x00, 0x05, 0x11,  // .Y......
                /* 06B0 */  0x90, 0xA5, 0x38, 0x02, 0x62, 0xC2, 0x40, 0x04,  // ..8.b.@.
                /* 06B8 */  0xE4, 0x00, 0x0F, 0x2D, 0x0D, 0xCF, 0x92, 0x35,  // ...-...5
                /* 06C0 */  0x01, 0xB1, 0xC0, 0x20, 0x34, 0x86, 0x28, 0x50,  // ... 4.(P
                /* 06C8 */  0x16, 0x0A, 0x44, 0x40, 0xFE, 0xFF, 0x03         // ..D@...
            })
            OperationRegion (DEB1, SystemIO, 0x80, 0x04)
            Field (DEB1, DWordAcc, NoLock, Preserve)
            {
                DBGD,   32
            }

            OperationRegion (SMI0, SystemIO, LSMB, One)
            Field (SMI0, ByteAcc, NoLock, Preserve)
            {
                APMC,   8
            }

            OperationRegion (WMIM, SystemMemory, WMIO, WMSZ)
            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                CMD,    8, 
                ERR,    32, 
                PAR0,   32, 
                PAR1,   32, 
                PAR2,   32, 
                PAR3,   32
            }

            Field (WMIM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x15), 
                DBGM,   800, 
                RTSM,   800
            }

            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x42, 0x41, 0x01, 0x00, 0x7C, 0x78, 0x3E, 0x21,  // BA..|x>!
                /* 0018 */  0xD5, 0x50, 0x2D, 0x47, 0x9E, 0x08, 0xDF, 0x4F,  // .P-G...O
                /* 0020 */  0xB2, 0x05, 0x0D, 0x15, 0x47, 0x49, 0x02, 0x02,  // ....GI..
                /* 0028 */  0x66, 0xEA, 0x34, 0xF8, 0x42, 0xA4, 0xBD, 0x48,  // f.4.B..H
                /* 0030 */  0xBE, 0x8C, 0x18, 0x83, 0x75, 0x57, 0xC8, 0x98,  // ....uW..
                /* 0038 */  0x47, 0x42, 0x01, 0x02, 0x27, 0x24, 0x06, 0x68,  // GB..'$.h
                /* 0040 */  0x32, 0xC4, 0xA2, 0x4B, 0xB3, 0xD8, 0xF6, 0x39,  // 2..K...9
                /* 0048 */  0x49, 0xDD, 0x7A, 0x19, 0x53, 0x50, 0x03, 0x02,  // I.z.SP..
                /* 0050 */  0x38, 0x27, 0xAA, 0x81, 0xBA, 0x49, 0x98, 0x44,  // 8'...I.D
                /* 0058 */  0x82, 0x1B, 0xD3, 0x8B, 0x88, 0xD8, 0x14, 0x95,  // ........
                /* 0060 */  0x4C, 0x44, 0x01, 0x02                           // LD..
            })
            Method (TSTD, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = 0x00030D40
                While ((Local0 < Local1))
                {
                    DBGD = Arg0
                    Local0++
                }

                Return (Zero)
            }

            Mutex (MSMI, 0x07)
            Method (SMI, 5, NotSerialized)
            {
                Acquire (MSMI, 0xFFFF)
                CMD = Arg0
                PAR0 = Arg1
                PAR1 = Arg2
                PAR2 = Arg3
                PAR3 = Arg4
                APMC = AISV /* \AISV */
                While ((ERR == One))
                {
                    Sleep (0x64)
                    APMC = AISV /* \AISV */
                }

                Local0 = PAR0 /* \_SB_.WMIC.PAR0 */
                Release (MSMI)
                Return (Local0)
            }

            Method (WMII, 2, NotSerialized)
            {
                Return (SMI (0x10, Arg0, Arg1, Zero, Zero))
            }

            Method (WMIP, 2, NotSerialized)
            {
                Return (SMI (0x20, Arg0, Arg1, Zero, Zero))
            }

            Method (WMGI, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMGB, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMII (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMSP, 3, NotSerialized)
            {
                If ((Acquire (MWMI, 0xFFFF) == Zero))
                {
                    DBGM = Arg2
                    Local0 = WMIP (Arg1, Zero)
                    Release (MWMI)
                }

                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }

            Method (WMLD, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local1 = WMII (0xFF, Zero)
                Release (MWMI)
                Return (RTSM) /* \_SB_.WMIC.RTSM */
            }
        }
    }

    Scope (_SB)
    {
        Device (WMIO)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MFBI")  // _UID: Unique ID
            Name (BUF4, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (BUF4, Zero, BF00)
            CreateByteField (BUF4, One, BF01)
            CreateByteField (BUF4, 0x02, BF02)
            CreateByteField (BUF4, 0x03, BF03)
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xCE, 0x93, 0x05, 0xA8, 0x77, 0x23, 0xDA, 0x11,  // ....w#..
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0x20, 0x12, 0x07, 0x27,  // ..." ..'
                /* 0010 */  0x4D, 0x49, 0x01, 0x02                           // MI..
            })
            OperationRegion (CMOS, SystemIO, 0x72, 0x02)
            Field (CMOS, ByteAcc, NoLock, Preserve)
            {
                CMIN,   8, 
                CMDA,   8
            }

            IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD9), 
                WDFH,   8
            }

            Method (WMMI, 3, NotSerialized)
            {
                If ((Arg1 == 0xFB))
                {
                    BUF4 = Arg2
                    If ((BF00 == Zero))
                    {
                        BUF4 = Zero
                        BF02 = One
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == One))
                    {
                        BUF4 = Zero
                        BF00 = SMIP /* \SMIP */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x02))
                    {
                        BUF4 = Zero
                        BF00 = FESI /* \FESI */
                        BF01 = FDSI /* \FDSI */
                        BF02 = FSSI /* \FSSI */
                        Return (BUF4) /* \_SB_.WMIO.BUF4 */
                    }

                    If ((BF00 == 0x03))
                    {
                        CMIN = 0xD9
                        BF00 = CMDA /* \_SB_.WMIO.CMDA */
                        If ((BF00 & One))
                        {
                            BF00 = One
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                        Else
                        {
                            BF00 = Zero
                            Return (BUF4) /* \_SB_.WMIO.BUF4 */
                        }
                    }
                }

                Return (0xFFFFFFFF)
            }
        }
    }

    OperationRegion (SWMI, SystemIO, 0xB2, One)
    Field (SWMI, ByteAcc, NoLock, Preserve)
    {
        SWSP,   8
    }

    OperationRegion (SWSG, SystemMemory, 0xFED8152C, 0x04)
    Field (SWSG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        SWDA,   1, 
        Offset (0x04)
    }

    Scope (_GPE)
    {
        Method (_E05, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            SWSP = SWGA /* \SWGA */
        }
    }

    Scope (_SB.I2CA)
    {
        Device (RHPX)
        {
            Name (_HID, "MSFT8000")  // _HID: Hardware ID
            Name (_CID, "MSFT8000")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "bus-I2C-I2C1", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }
                }
            })
        }
    }

    OperationRegion (SSPA, SystemIO, 0xB2, One)
    Field (SSPA, ByteAcc, NoLock, Preserve)
    {
        TFSP,   8
    }

    OperationRegion (TFGA, SystemMemory, 0xFED81650, 0x04)
    Field (TFGA, AnyAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        SRGS,   1, 
        Offset (0x04)
    }

    Scope (_GPE)
    {
        Method (_E12, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = (SRGS & One)
            If ((Local0 == One))
            {
                TFSP = 0xEA
            }
        }
    }

    Scope (\_SB.PCI0.GPP8)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x16, 
            0x04
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                    One
                }
            }
        })
        PowerResource (PWR1, 0x00, 0x0000)
        {
            Name (PWRS, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (PWRS) /* \_SB_.PCI0.GPP8.PWR1.PWRS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                PWRS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                PWRS = Zero
            }
        }

        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWR1
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PWR1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWR1
        })
    }

    Scope (_GPE)
    {
        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
        }
    }

    Name (GPB1, 0xFEC30000)
    Name (GPB2, 0xFC200000)
    Name (IOR1, 0x00000000)
    Name (IOR2, 0x0081FFE2)
    Name (IOR3, 0x00000000)
    Name (IOR4, 0x00000000)
    Name (IOR5, 0x00000000)
    Name (IOR6, 0x00A3FFF7)
    Name (IOR7, 0x00000000)
    Name (IOR8, 0x00000000)
    Scope (\_SB.PCI0.GPP7)
    {
        Name (XHGP, 0x02)
        Method (SREG, 2, NotSerialized)
        {
        }

        Method (SPRW, 1, NotSerialized)
        {
        }

        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x02, 
            0x04
        })
        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Name (DPSA, 0xEE)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GPP7.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x0D))
            {
                Local1 = Zero
                While ((Local1 <= Zero))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            ^^DADR = ^^SPCH /* External reference */
                            0x10
                            Local2
                            If (((One = (^^RPRM & (^^DADR + (Local2 + 0x14)))) == 
                                0x40))
                            {
                                Zero
                                0x40
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                }

                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                If (((ESTA == Zero) && (XHGP <= 0x03)))
                {
                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                }

                PWST = 0xD3
            }

            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            }

            Return (DSTA) /* \_SB_.PCI0.GPP7.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            ^SREG (Arg0, Arg1)
            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If ((DADR != 0xEEEEEEEE))
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
        }

        Method (HPRW, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
            ^SPRW (Arg0)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }

                Return (PW3S) /* \_SB_.PCI0.GPP7.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    HPRW (One)
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    HPRW (Zero)
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                }
            }
        }

        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
        {
            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                    One
                }
            }
        })
        Device (UP00)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (XHGP, 0x02)
            Method (SPRW, 1, NotSerialized)
            {
                If (CondRefOf (\HDVD))
                {
                    If ((Arg0 == One))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        \HDVD (Zero)
                    }
                }
            }

            Method (SREG, 2, NotSerialized)
            {
                Local2 = \GPB1
                If ((Local2 != 0x5A5A5A5A))
                {
                    Local0 = (\_SB.PCI0.GPP7.UP00.DADR + 0x40)
                    OperationRegion (VARM, SystemMemory, Local0, 0x09)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        GPBR,   32, 
                        Offset (0x08), 
                        GPEN,   1, 
                        Offset (0x09)
                    }

                    OperationRegion (VARN, SystemMemory, Local2, 0x10)
                    Field (VARN, AnyAcc, NoLock, Preserve)
                    {
                        IOW1,   32, 
                        IOW2,   32, 
                        IOW3,   32, 
                        IOW4,   32
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        GPBR = Local2
                        GPEN = One
                        IOW1 = IOR1 /* \IOR1 */
                        IOW2 = IOR2 /* \IOR2 */
                        IOW3 = IOR3 /* \IOR3 */
                        IOW4 = IOR4 /* \IOR4 */
                        M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                    }
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Name (DPSA, 0xEE)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.RPRM.VARR */
                If ((Arg1 == One))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == One))
                {
                    OperationRegion (VARA, SystemMemory, Local0, One)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = Zero
                Local0 = Zero
                While ((Local0 <= 0x0D))
                {
                    Local1 = Zero
                    While ((Local1 <= Zero))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != Zero)))
                        {
                            Local2 |= (One << Local0)
                        }
                        ElseIf ((Local1 == Zero))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = RPRM ((Arg0 + 0x34), One)
                While ((Local1 != Zero))
                {
                    Local2 = RPRM ((DADR + Local1), One)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.EBUS */
                        }
                        Else
                        {
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), One)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                One) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                One) & 0x40) == Zero))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                    0x40) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    }

                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                    {
                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                    }

                    PWST = 0xD3
                }

                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                }

                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + Zero), 0x04)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                ^SREG (Arg0, Arg1)
                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If ((DADR != 0xEEEEEEEE))
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            }

            Method (HPRW, 1, NotSerialized)
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                ^SPRW (Arg0)
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }

                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        HPRW (One)
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        HPRW (Zero)
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    }
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
            Device (DP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP00.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP00.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP08)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP08.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP08.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP10)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (WN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP10.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP10.WN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP18)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (LN00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP18.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP18.LN00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP20)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (NV00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP20.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP20.NV00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP28)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP28.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP28.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP30)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP30.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP30.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP38)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP38.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP38.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP40)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (UP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SPRW, 1, NotSerialized)
                    {
                        If (CondRefOf (\HDVD))
                        {
                            If ((Arg0 == One))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPRW.Arg0 = 0x%X\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                \HDVD (One)
                            }
                        }
                    }

                    Method (SREG, 2, NotSerialized)
                    {
                        Local2 = \GPB2
                        If ((Local2 != 0x5A5A5A5A))
                        {
                            Local0 = (\_SB.PCI0.GPP7.UP00.DP40.UP00.DADR + 0x40)
                            OperationRegion (VARM, SystemMemory, Local0, 0x09)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                GPBR,   32, 
                                Offset (0x08), 
                                GPEN,   1, 
                                Offset (0x09)
                            }

                            OperationRegion (VARN, SystemMemory, Local2, 0x10)
                            Field (VARN, AnyAcc, NoLock, Preserve)
                            {
                                IOW1,   32, 
                                IOW2,   32, 
                                IOW3,   32, 
                                IOW4,   32
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SREG (0x%X, 0x%X)  GPBR = 0x%X  GPEN = 0x%X\n", DADR, Arg0, Arg1, GPBR, GPEN, Zero)
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                GPBR = Local2
                                GPEN = One
                                IOW1 = IOR5 /* \IOR5 */
                                IOW2 = IOR6 /* \IOR6 */
                                IOW3 = IOR7 /* \IOR7 */
                                IOW4 = IOR8 /* \IOR8 */
                                M460 ("    Restore GPBR = 0x%X  GPEN = 0x%X  IOW1 = 0x%X  IOW2 = 0x%X  IOW3 = 0x%X  IOW4 = 0x%X\n", GPBR, GPEN, IOW1, IOW2, IOW3, IOW4)
                            }
                        }
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (DP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP00.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP08)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP08.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP10)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (WN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP18)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (LN00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP20)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (NV00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.NV00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP28)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP28.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP30)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP30.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP38)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP38.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP40)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (UP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP48)
                    {
                        Name (_ADR, 0x00090000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP48.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP50)
                    {
                        Name (_ADR, 0x000A0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP50.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP58)
                    {
                        Name (_ADR, 0x000B0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (EP00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP58.EP00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }

                    Device (DP60)
                    {
                        Name (_ADR, 0x000C0000)  // _ADR: Address
                        Name (XHGP, 0x03)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (XH00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0x03)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (POT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        Zero
                                        0x0121
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        Zero
                                        0x0121
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x0A
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        One
                                        One
                                        0x0123
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x0A
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        One
                                        One
                                        0x0123
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0124
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0124
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0125
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTA)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0125
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0126
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTB)
                                {
                                    Name (_ADR, 0x0B)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0126
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0127
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTC)
                                {
                                    Name (_ADR, 0x0C)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        One
                                        0x03
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0127
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTG)
                                {
                                    Name (_ADR, 0x10)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x0122
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTD)
                                {
                                    Name (_ADR, 0x0D)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        Zero
                                        0x0129
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTE)
                                {
                                    Name (_ADR, 0x0E)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x012A
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTF)
                                {
                                    Name (_ADR, 0x0F)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x012B
                                        One
                                        0x25
                                        Zero
                                    }
                                }

                                Device (POTH)
                                {
                                    Name (_ADR, 0x11)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (M600) /* External reference */
                                        Zero
                                        Zero
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (M601) /* External reference */
                                        Zero
                                        One
                                        0x012B
                                        One
                                        0x25
                                        Zero
                                    }
                                }
                            }
                        }
                    }

                    Device (DP68)
                    {
                        Name (_ADR, 0x000D0000)  // _ADR: Address
                        Name (XHGP, 0xFF)
                        Method (SREG, 2, NotSerialized)
                        {
                        }

                        Method (SPRW, 1, NotSerialized)
                        {
                        }

                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                    One
                                }
                            }
                        })
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                        Name (DADR, 0xEEEEEEEE)
                        Name (DSTA, 0xEE)
                        Name (DBUS, 0xEEEE)
                        Name (PCSA, Zero)
                        Name (PWST, 0xD3)
                        Name (ESTA, 0xEE)
                        Name (EBUS, 0xEEEE)
                        Name (PW3S, Zero)
                        Name (DPSA, 0xEE)
                        Method (RPRM, 2, NotSerialized)
                        {
                            Local0 = Arg0
                            OperationRegion (VARM, SystemMemory, Local0, 0x04)
                            Field (VARM, AnyAcc, NoLock, Preserve)
                            {
                                VARR,   32
                            }

                            Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.RPRM.VARR */
                            If ((Arg1 == One))
                            {
                                Local1 &= 0xFF
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 &= 0xFFFF
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 &= 0x00FFFFFF
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                            Return (Local1)
                        }

                        Method (WPRM, 3, NotSerialized)
                        {
                            Local0 = Arg0
                            If ((Arg1 == One))
                            {
                                OperationRegion (VARA, SystemMemory, Local0, One)
                                Field (VARA, AnyAcc, NoLock, Preserve)
                                {
                                    VARE,   8
                                }

                                VARE = Arg2
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                Field (VARB, AnyAcc, NoLock, Preserve)
                                {
                                    VARF,   16
                                }

                                VARF = Arg2
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                Field (VARC, AnyAcc, NoLock, Preserve)
                                {
                                    VARG,   24
                                }

                                VARG = Arg2
                            }
                            Else
                            {
                                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                Field (VARD, AnyAcc, NoLock, Preserve)
                                {
                                    VARH,   32
                                }

                                VARH = Arg2
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                        }

                        Method (SPDP, 1, NotSerialized)
                        {
                            Local5 = 0x7FFFFFFF
                            Local5 |= 0x80000000
                            Local2 = Zero
                            Local0 = Zero
                            While ((Local0 <= 0x0D))
                            {
                                Local1 = Zero
                                While ((Local1 <= Zero))
                                {
                                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                        0x0F) & 0x000F8000))
                                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                                    Local4 = RPRM ((M083 + Local3), 0x04)
                                    If (((Local4 != Local5) && (Local4 != Zero)))
                                    {
                                        Local2 |= (One << Local0)
                                    }
                                    ElseIf ((Local1 == Zero))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Local0++
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                            Return (Local2)
                        }

                        Method (SPCH, 2, NotSerialized)
                        {
                            Local0 = Zero
                            Local1 = RPRM ((Arg0 + 0x34), One)
                            While ((Local1 != Zero))
                            {
                                Local2 = RPRM ((DADR + Local1), One)
                                If (((Local2 == Zero) || (Local2 == 0xFF)))
                                {
                                    Break
                                }

                                If ((Local2 == Arg1))
                                {
                                    Local0 = Local1
                                    Break
                                }

                                Local1 = RPRM ((DADR + (Local1 + One)), One)
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                            Return (Local0)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                            {
                                If ((DBUS == 0xEEEE))
                                {
                                    If (CondRefOf (^^EBUS))
                                    {
                                        DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.EBUS */
                                    }
                                    Else
                                    {
                                        DBUS = Zero
                                    }
                                }

                                If ((DBUS != 0xEEEE))
                                {
                                    If ((DADR == 0xEEEEEEEE))
                                    {
                                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                            One) & 0x000F8000))
                                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                        DADR = (M083 + Local0)
                                    }

                                    Local0 = 0x7FFFFFFF
                                    Local0 |= 0x80000000
                                    Local1 = RPRM ((DADR + Zero), 0x04)
                                    If (((Local1 == Local0) || (Local1 == Zero)))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                        If ((DBUS != Zero))
                                        {
                                            Local2 = ^^SPCH (^^DADR, 0x10)
                                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                0x40) == 0x40))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                    }
                                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                    {
                                        EBUS = RPRM ((DADR + 0x19), One)
                                        Local2 = SPCH (DADR, 0x10)
                                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                            One) >> 0x04) & 0x0F) == 0x05))
                                        {
                                            If ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            ElseIf ((SPDP (EBUS) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                            One) & 0x40) == Zero))
                                        {
                                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                0x40) == Zero))
                                            {
                                                DSTA = Zero
                                                ESTA = Zero
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                        }
                                        ElseIf ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = Zero
                                    }
                                }
                                Else
                                {
                                    DSTA = Zero
                                    ESTA = 0xEE
                                }
                            }

                            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD0
                            }

                            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                            {
                                If (((ESTA == Zero) && (XHGP <= 0x03)))
                                {
                                    M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                }

                                PWST = 0xD3
                            }

                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                            }

                            Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.DSTA */
                        }

                        Method (_INI, 0, Serialized)  // _INI: Initialize
                        {
                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                PCSA = Zero
                                PWST = 0xD3
                                PW3S = Zero
                            }
                            Else
                            {
                                PCSA = One
                                PWST = 0xD0
                                PW3S = One
                            }

                            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                        }

                        Method (_REG, 2, Serialized)  // _REG: Region Availability
                        {
                            If (((Arg0 == 0x02) && (Arg1 == One)))
                            {
                                If ((DSTA == 0x0F))
                                {
                                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                    {
                                        PCSA = One
                                    }
                                }
                            }

                            If (((Arg0 == 0x02) && (Arg1 == Zero)))
                            {
                                PCSA = Zero
                            }

                            ^SREG (Arg0, Arg1)
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                        }

                        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                            }
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                        }

                        Method (HPRW, 1, NotSerialized)
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                            ^SPRW (Arg0)
                        }

                        PowerResource (PWRS, 0x00, 0x0000)
                        {
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }

                                Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.PW3S */
                            }

                            Method (_ON, 0, Serialized)  // _ON_: Power On
                            {
                                If ((PW3S == Zero))
                                {
                                    PW3S = One
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    HPRW (One)
                                }
                            }

                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                            {
                                If ((PW3S == One))
                                {
                                    PW3S = Zero
                                    HPRW (Zero)
                                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                }
                            }
                        }

                        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                        {
                            PWRS
                        })
                        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                        {
                            PWRS
                        })
                        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                        {
                            PWRS
                        })
                        Device (SA00)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Name (XHGP, 0xFF)
                            Method (SREG, 2, NotSerialized)
                            {
                            }

                            Method (SPRW, 1, NotSerialized)
                            {
                            }

                            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                            {
                                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                Package (0x01)
                                {
                                    Package (0x02)
                                    {
                                        "StorageD3Enable", 
                                        One
                                    }
                                }
                            })
                            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                            {
                                0x02, 
                                0x04
                            })
                            Name (DADR, 0xEEEEEEEE)
                            Name (DSTA, 0xEE)
                            Name (DBUS, 0xEEEE)
                            Name (PCSA, Zero)
                            Name (PWST, 0xD3)
                            Name (ESTA, 0xEE)
                            Name (EBUS, 0xEEEE)
                            Name (PW3S, Zero)
                            Name (DPSA, 0xEE)
                            Method (RPRM, 2, NotSerialized)
                            {
                                Local0 = Arg0
                                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                                Field (VARM, AnyAcc, NoLock, Preserve)
                                {
                                    VARR,   32
                                }

                                Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.RPRM.VARR */
                                If ((Arg1 == One))
                                {
                                    Local1 &= 0xFF
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    Local1 &= 0xFFFF
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    Local1 &= 0x00FFFFFF
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                                Return (Local1)
                            }

                            Method (WPRM, 3, NotSerialized)
                            {
                                Local0 = Arg0
                                If ((Arg1 == One))
                                {
                                    OperationRegion (VARA, SystemMemory, Local0, One)
                                    Field (VARA, AnyAcc, NoLock, Preserve)
                                    {
                                        VARE,   8
                                    }

                                    VARE = Arg2
                                }
                                ElseIf ((Arg1 == 0x02))
                                {
                                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                                    Field (VARB, AnyAcc, NoLock, Preserve)
                                    {
                                        VARF,   16
                                    }

                                    VARF = Arg2
                                }
                                ElseIf ((Arg1 == 0x03))
                                {
                                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                                    Field (VARC, AnyAcc, NoLock, Preserve)
                                    {
                                        VARG,   24
                                    }

                                    VARG = Arg2
                                }
                                Else
                                {
                                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                                    Field (VARD, AnyAcc, NoLock, Preserve)
                                    {
                                        VARH,   32
                                    }

                                    VARH = Arg2
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                            }

                            Method (SPDP, 1, NotSerialized)
                            {
                                Local5 = 0x7FFFFFFF
                                Local5 |= 0x80000000
                                Local2 = Zero
                                Local0 = Zero
                                While ((Local0 <= 0x0D))
                                {
                                    Local1 = Zero
                                    While ((Local1 <= Zero))
                                    {
                                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                            0x0F) & 0x000F8000))
                                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                                        Local4 = RPRM ((M083 + Local3), 0x04)
                                        If (((Local4 != Local5) && (Local4 != Zero)))
                                        {
                                            Local2 |= (One << Local0)
                                        }
                                        ElseIf ((Local1 == Zero))
                                        {
                                            Break
                                        }

                                        Local1++
                                    }

                                    Local0++
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                                Return (Local2)
                            }

                            Method (SPCH, 2, NotSerialized)
                            {
                                Local0 = Zero
                                Local1 = RPRM ((Arg0 + 0x34), One)
                                While ((Local1 != Zero))
                                {
                                    Local2 = RPRM ((DADR + Local1), One)
                                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                                    {
                                        Break
                                    }

                                    If ((Local2 == Arg1))
                                    {
                                        Local0 = Local1
                                        Break
                                    }

                                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                                Return (Local0)
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                                {
                                    If ((DBUS == 0xEEEE))
                                    {
                                        If (CondRefOf (^^EBUS))
                                        {
                                            DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.EBUS */
                                        }
                                        Else
                                        {
                                            DBUS = Zero
                                        }
                                    }

                                    If ((DBUS != 0xEEEE))
                                    {
                                        If ((DADR == 0xEEEEEEEE))
                                        {
                                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                                One) & 0x000F8000))
                                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                            DADR = (M083 + Local0)
                                        }

                                        Local0 = 0x7FFFFFFF
                                        Local0 |= 0x80000000
                                        Local1 = RPRM ((DADR + Zero), 0x04)
                                        If (((Local1 == Local0) || (Local1 == Zero)))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                            If ((DBUS != Zero))
                                            {
                                                Local2 = ^^SPCH (^^DADR, 0x10)
                                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == 0x40))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                        }
                                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                        {
                                            EBUS = RPRM ((DADR + 0x19), One)
                                            Local2 = SPCH (DADR, 0x10)
                                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                                One) >> 0x04) & 0x0F) == 0x05))
                                            {
                                                If ((EBUS == Zero))
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                                ElseIf ((SPDP (EBUS) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0x0F
                                                }
                                            }
                                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                                One) & 0x40) == Zero))
                                            {
                                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                                    0x40) == Zero))
                                                {
                                                    DSTA = Zero
                                                    ESTA = Zero
                                                }
                                                Else
                                                {
                                                    DSTA = 0x0F
                                                    ESTA = 0xEE
                                                }
                                            }
                                            ElseIf ((EBUS == Zero))
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0xEE
                                            }
                                            Else
                                            {
                                                DSTA = 0x0F
                                                ESTA = 0x0F
                                            }
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = Zero
                                        }
                                    }
                                    Else
                                    {
                                        DSTA = Zero
                                        ESTA = 0xEE
                                    }
                                }

                                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD0
                                }

                                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                                {
                                    If (((ESTA == Zero) && (XHGP <= 0x03)))
                                    {
                                        M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                                    }

                                    PWST = 0xD3
                                }

                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                                }

                                Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.DSTA */
                            }

                            Method (_INI, 0, Serialized)  // _INI: Initialize
                            {
                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    PCSA = Zero
                                    PWST = 0xD3
                                    PW3S = Zero
                                }
                                Else
                                {
                                    PCSA = One
                                    PWST = 0xD0
                                    PW3S = One
                                }

                                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                            }

                            Method (_REG, 2, Serialized)  // _REG: Region Availability
                            {
                                If (((Arg0 == 0x02) && (Arg1 == One)))
                                {
                                    If ((DSTA == 0x0F))
                                    {
                                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                        {
                                            PCSA = One
                                        }
                                    }
                                }

                                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                                {
                                    PCSA = Zero
                                }

                                ^SREG (Arg0, Arg1)
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                            }

                            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                            {
                                If ((DADR != 0xEEEEEEEE))
                                {
                                    M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                            }

                            Method (HPRW, 1, NotSerialized)
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                                ^SPRW (Arg0)
                            }

                            PowerResource (PWRS, 0x00, 0x0000)
                            {
                                Method (_STA, 0, Serialized)  // _STA: Status
                                {
                                    If ((DADR != 0xEEEEEEEE))
                                    {
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }

                                    Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SA00.PW3S */
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                    If ((PW3S == Zero))
                                    {
                                        PW3S = One
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                        HPRW (One)
                                    }
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                    If ((PW3S == One))
                                    {
                                        PW3S = Zero
                                        HPRW (Zero)
                                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                    }
                                }
                            }

                            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                            {
                                PWRS
                            })
                            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                            {
                                PWRS
                            })
                            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                            {
                                PWRS
                            })
                        }
                    }
                }
            }

            Device (DP48)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP48.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP48.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP50)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP50.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP50.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP58)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (EP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP58.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP58.EP00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }

            Device (DP60)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Name (XHGP, 0x02)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (XH00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0x02)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP60.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                0x0A
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                One
                                One
                                0x0101
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                0x0A
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                One
                                One
                                0x0101
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0103
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0103
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0104
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0104
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0105
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0105
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0106
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTA)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0106
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTB)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0107
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTC)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                One
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x0108
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTG)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                Zero
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                Zero
                                0x0102
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTD)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                Zero
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                Zero
                                0x0109
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTE)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                Zero
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                Zero
                                0x010A
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTF)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                Zero
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x010B
                                One
                                0x25
                                Zero
                            }
                        }

                        Device (POTH)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (M600) /* External reference */
                                Zero
                                Zero
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (M601) /* External reference */
                                Zero
                                One
                                0x010B
                                One
                                0x25
                                Zero
                            }
                        }
                    }
                }
            }

            Device (DP68)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
                Name (XHGP, 0xFF)
                Method (SREG, 2, NotSerialized)
                {
                }

                Method (SPRW, 1, NotSerialized)
                {
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (DADR, 0xEEEEEEEE)
                Name (DSTA, 0xEE)
                Name (DBUS, 0xEEEE)
                Name (PCSA, Zero)
                Name (PWST, 0xD3)
                Name (ESTA, 0xEE)
                Name (EBUS, 0xEEEE)
                Name (PW3S, Zero)
                Name (DPSA, 0xEE)
                Method (RPRM, 2, NotSerialized)
                {
                    Local0 = Arg0
                    OperationRegion (VARM, SystemMemory, Local0, 0x04)
                    Field (VARM, AnyAcc, NoLock, Preserve)
                    {
                        VARR,   32
                    }

                    Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.RPRM.VARR */
                    If ((Arg1 == One))
                    {
                        Local1 &= 0xFF
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Local1 &= 0xFFFF
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Local1 &= 0x00FFFFFF
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                    Return (Local1)
                }

                Method (WPRM, 3, NotSerialized)
                {
                    Local0 = Arg0
                    If ((Arg1 == One))
                    {
                        OperationRegion (VARA, SystemMemory, Local0, One)
                        Field (VARA, AnyAcc, NoLock, Preserve)
                        {
                            VARE,   8
                        }

                        VARE = Arg2
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        OperationRegion (VARB, SystemMemory, Local0, 0x02)
                        Field (VARB, AnyAcc, NoLock, Preserve)
                        {
                            VARF,   16
                        }

                        VARF = Arg2
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        OperationRegion (VARC, SystemMemory, Local0, 0x03)
                        Field (VARC, AnyAcc, NoLock, Preserve)
                        {
                            VARG,   24
                        }

                        VARG = Arg2
                    }
                    Else
                    {
                        OperationRegion (VARD, SystemMemory, Local0, 0x04)
                        Field (VARD, AnyAcc, NoLock, Preserve)
                        {
                            VARH,   32
                        }

                        VARH = Arg2
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                }

                Method (SPDP, 1, NotSerialized)
                {
                    Local5 = 0x7FFFFFFF
                    Local5 |= 0x80000000
                    Local2 = Zero
                    Local0 = Zero
                    While ((Local0 <= 0x0D))
                    {
                        Local1 = Zero
                        While ((Local1 <= Zero))
                        {
                            Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                0x0F) & 0x000F8000))
                            Local3 |= ((Local1 << 0x0C) & 0x7000)
                            Local4 = RPRM ((M083 + Local3), 0x04)
                            If (((Local4 != Local5) && (Local4 != Zero)))
                            {
                                Local2 |= (One << Local0)
                            }
                            ElseIf ((Local1 == Zero))
                            {
                                Break
                            }

                            Local1++
                        }

                        Local0++
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                    Return (Local2)
                }

                Method (SPCH, 2, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = RPRM ((Arg0 + 0x34), One)
                    While ((Local1 != Zero))
                    {
                        Local2 = RPRM ((DADR + Local1), One)
                        If (((Local2 == Zero) || (Local2 == 0xFF)))
                        {
                            Break
                        }

                        If ((Local2 == Arg1))
                        {
                            Local0 = Local1
                            Break
                        }

                        Local1 = RPRM ((DADR + (Local1 + One)), One)
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                    Return (Local0)
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                    {
                        If ((DBUS == 0xEEEE))
                        {
                            If (CondRefOf (^^EBUS))
                            {
                                DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.EBUS */
                            }
                            Else
                            {
                                DBUS = Zero
                            }
                        }

                        If ((DBUS != 0xEEEE))
                        {
                            If ((DADR == 0xEEEEEEEE))
                            {
                                Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                    One) & 0x000F8000))
                                Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                DADR = (M083 + Local0)
                            }

                            Local0 = 0x7FFFFFFF
                            Local0 |= 0x80000000
                            Local1 = RPRM ((DADR + Zero), 0x04)
                            If (((Local1 == Local0) || (Local1 == Zero)))
                            {
                                DSTA = Zero
                                ESTA = Zero
                                If ((DBUS != Zero))
                                {
                                    Local2 = ^^SPCH (^^DADR, 0x10)
                                    If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                        0x40) == 0x40))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                            }
                            ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                            {
                                EBUS = RPRM ((DADR + 0x19), One)
                                Local2 = SPCH (DADR, 0x10)
                                If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                    One) >> 0x04) & 0x0F) == 0x05))
                                {
                                    If ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    ElseIf ((SPDP (EBUS) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                    One) & 0x40) == Zero))
                                {
                                    If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                        0x40) == Zero))
                                    {
                                        DSTA = Zero
                                        ESTA = Zero
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                }
                                ElseIf ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = Zero
                            }
                        }
                        Else
                        {
                            DSTA = Zero
                            ESTA = 0xEE
                        }
                    }

                    If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD0
                    }

                    If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                    {
                        If (((ESTA == Zero) && (XHGP <= 0x03)))
                        {
                            M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                        }

                        PWST = 0xD3
                    }

                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                    }

                    Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.DSTA */
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        PCSA = Zero
                        PWST = 0xD3
                        PW3S = Zero
                    }
                    Else
                    {
                        PCSA = One
                        PWST = 0xD0
                        PW3S = One
                    }

                    M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                }

                Method (_REG, 2, Serialized)  // _REG: Region Availability
                {
                    If (((Arg0 == 0x02) && (Arg1 == One)))
                    {
                        If ((DSTA == 0x0F))
                        {
                            If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                            {
                                PCSA = One
                            }
                        }
                    }

                    If (((Arg0 == 0x02) && (Arg1 == Zero)))
                    {
                        PCSA = Zero
                    }

                    ^SREG (Arg0, Arg1)
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                }

                Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                {
                    If ((DADR != 0xEEEEEEEE))
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                }

                Method (HPRW, 1, NotSerialized)
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                    ^SPRW (Arg0)
                }

                PowerResource (PWRS, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }

                        Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.PW3S */
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((PW3S == Zero))
                        {
                            PW3S = One
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            HPRW (One)
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((PW3S == One))
                        {
                            PW3S = Zero
                            HPRW (Zero)
                            M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        }
                    }
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PWRS
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PWRS
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PWRS
                })
                Device (SA00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (XHGP, 0xFF)
                    Method (SREG, 2, NotSerialized)
                    {
                    }

                    Method (SPRW, 1, NotSerialized)
                    {
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Name (DADR, 0xEEEEEEEE)
                    Name (DSTA, 0xEE)
                    Name (DBUS, 0xEEEE)
                    Name (PCSA, Zero)
                    Name (PWST, 0xD3)
                    Name (ESTA, 0xEE)
                    Name (EBUS, 0xEEEE)
                    Name (PW3S, Zero)
                    Name (DPSA, 0xEE)
                    Method (RPRM, 2, NotSerialized)
                    {
                        Local0 = Arg0
                        OperationRegion (VARM, SystemMemory, Local0, 0x04)
                        Field (VARM, AnyAcc, NoLock, Preserve)
                        {
                            VARR,   32
                        }

                        Local1 = VARR /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.RPRM.VARR */
                        If ((Arg1 == One))
                        {
                            Local1 &= 0xFF
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            Local1 &= 0xFFFF
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            Local1 &= 0x00FFFFFF
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                        Return (Local1)
                    }

                    Method (WPRM, 3, NotSerialized)
                    {
                        Local0 = Arg0
                        If ((Arg1 == One))
                        {
                            OperationRegion (VARA, SystemMemory, Local0, One)
                            Field (VARA, AnyAcc, NoLock, Preserve)
                            {
                                VARE,   8
                            }

                            VARE = Arg2
                        }
                        ElseIf ((Arg1 == 0x02))
                        {
                            OperationRegion (VARB, SystemMemory, Local0, 0x02)
                            Field (VARB, AnyAcc, NoLock, Preserve)
                            {
                                VARF,   16
                            }

                            VARF = Arg2
                        }
                        ElseIf ((Arg1 == 0x03))
                        {
                            OperationRegion (VARC, SystemMemory, Local0, 0x03)
                            Field (VARC, AnyAcc, NoLock, Preserve)
                            {
                                VARG,   24
                            }

                            VARG = Arg2
                        }
                        Else
                        {
                            OperationRegion (VARD, SystemMemory, Local0, 0x04)
                            Field (VARD, AnyAcc, NoLock, Preserve)
                            {
                                VARH,   32
                            }

                            VARH = Arg2
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
                    }

                    Method (SPDP, 1, NotSerialized)
                    {
                        Local5 = 0x7FFFFFFF
                        Local5 |= 0x80000000
                        Local2 = Zero
                        Local0 = Zero
                        While ((Local0 <= 0x0D))
                        {
                            Local1 = Zero
                            While ((Local1 <= Zero))
                            {
                                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                                    0x0F) & 0x000F8000))
                                Local3 |= ((Local1 << 0x0C) & 0x7000)
                                Local4 = RPRM ((M083 + Local3), 0x04)
                                If (((Local4 != Local5) && (Local4 != Zero)))
                                {
                                    Local2 |= (One << Local0)
                                }
                                ElseIf ((Local1 == Zero))
                                {
                                    Break
                                }

                                Local1++
                            }

                            Local0++
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                        Return (Local2)
                    }

                    Method (SPCH, 2, NotSerialized)
                    {
                        Local0 = Zero
                        Local1 = RPRM ((Arg0 + 0x34), One)
                        While ((Local1 != Zero))
                        {
                            Local2 = RPRM ((DADR + Local1), One)
                            If (((Local2 == Zero) || (Local2 == 0xFF)))
                            {
                                Break
                            }

                            If ((Local2 == Arg1))
                            {
                                Local0 = Local1
                                Break
                            }

                            Local1 = RPRM ((DADR + (Local1 + One)), One)
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                        Return (Local0)
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                        {
                            If ((DBUS == 0xEEEE))
                            {
                                If (CondRefOf (^^EBUS))
                                {
                                    DBUS = ^^EBUS /* \_SB_.PCI0.GPP7.UP00.DP68.EBUS */
                                }
                                Else
                                {
                                    DBUS = Zero
                                }
                            }

                            If ((DBUS != 0xEEEE))
                            {
                                If ((DADR == 0xEEEEEEEE))
                                {
                                    Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                        One) & 0x000F8000))
                                    Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                                    DADR = (M083 + Local0)
                                }

                                Local0 = 0x7FFFFFFF
                                Local0 |= 0x80000000
                                Local1 = RPRM ((DADR + Zero), 0x04)
                                If (((Local1 == Local0) || (Local1 == Zero)))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                    If ((DBUS != Zero))
                                    {
                                        Local2 = ^^SPCH (^^DADR, 0x10)
                                        If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                            0x40) == 0x40))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                }
                                ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                                {
                                    EBUS = RPRM ((DADR + 0x19), One)
                                    Local2 = SPCH (DADR, 0x10)
                                    If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                        One) >> 0x04) & 0x0F) == 0x05))
                                    {
                                        If ((EBUS == Zero))
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                        ElseIf ((SPDP (EBUS) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0x0F
                                        }
                                    }
                                    ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                        One) & 0x40) == Zero))
                                    {
                                        If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                            0x40) == Zero))
                                        {
                                            DSTA = Zero
                                            ESTA = Zero
                                        }
                                        Else
                                        {
                                            DSTA = 0x0F
                                            ESTA = 0xEE
                                        }
                                    }
                                    ElseIf ((EBUS == Zero))
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0xEE
                                    }
                                    Else
                                    {
                                        DSTA = 0x0F
                                        ESTA = 0x0F
                                    }
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = Zero
                                }
                            }
                            Else
                            {
                                DSTA = Zero
                                ESTA = 0xEE
                            }
                        }

                        If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D0)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD0
                        }

                        If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                        {
                            If (((ESTA == Zero) && (XHGP <= 0x03)))
                            {
                                M460 ("  OEM-ASL-Call CpmCheckExpanderInputEvent (%d) in PCIe Address (0x%X)._STA (D3)\n", XHGP, DADR, Zero, Zero, Zero, Zero)
                            }

                            PWST = 0xD3
                        }

                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                        }

                        Return (DSTA) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.DSTA */
                    }

                    Method (_INI, 0, Serialized)  // _INI: Initialize
                    {
                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            PCSA = Zero
                            PWST = 0xD3
                            PW3S = Zero
                        }
                        Else
                        {
                            PCSA = One
                            PWST = 0xD0
                            PW3S = One
                        }

                        M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                    }

                    Method (_REG, 2, Serialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x02) && (Arg1 == One)))
                        {
                            If ((DSTA == 0x0F))
                            {
                                If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                                {
                                    PCSA = One
                                }
                            }
                        }

                        If (((Arg0 == 0x02) && (Arg1 == Zero)))
                        {
                            PCSA = Zero
                        }

                        ^SREG (Arg0, Arg1)
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
                    }

                    Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
                    {
                        If ((DADR != 0xEEEEEEEE))
                        {
                            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                    }

                    Method (HPRW, 1, NotSerialized)
                    {
                        M460 ("  OEM-ASL-PCIe Address (0x%X).HPRW (0x%X)\n", DADR, Arg0, Zero, Zero, Zero, Zero)
                        ^SPRW (Arg0)
                    }

                    PowerResource (PWRS, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((DADR != 0xEEEEEEEE))
                            {
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }

                            Return (PW3S) /* \_SB_.PCI0.GPP7.UP00.DP68.SA00.PW3S */
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            If ((PW3S == Zero))
                            {
                                PW3S = One
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                                HPRW (One)
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            If ((PW3S == One))
                            {
                                PW3S = Zero
                                HPRW (Zero)
                                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                            }
                        }
                    }

                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PWRS
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        PWRS
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        PWRS
                    })
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Name (SPTA, 0x55555500)
        Method (AIE2, 0, NotSerialized)
        {
            If (((\_GPE.SPTA != 0x55555555) && (\_GPE.SPTA != Zero)))
            {
                \_GPE.SIE3 ()
            }
        }

        Method (SP52, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If (((\_SB.PCI0.GPP7.UP00.DP40.UP00.DSTA == 0x0F) && (\_SB.PCI0.GPP7.UP00.DP40.UP00.ESTA == Zero)))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP72, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x04) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP40.UP00, 0x02) // Device Wake
                }

                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00, 0x02) // Device Wake
                }
            }
        }

        Method (SP53, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP73, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x08) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP18.LN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP54, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x4C
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }

        Method (SP74, 0, NotSerialized)
        {
            Local0 = M4F0 /* External reference */
            Local1 = 0xFF
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += 0x72
                Local0 = M049 /* External reference */
                0x25
                Local1
            }

            If (((Local1 & 0x10) == Zero))
            {
                If ((\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00.DSTA == 0x0F))
                {
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                    M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP10.WN00, 0x02) // Device Wake
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 74
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : A7E67000
[028h 0040   4]                 DSDT Address : A5E0F000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 04
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000A5E0F000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 74 41 4C 41 53 4B 41  // FACP.....tALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 70 E6 A7 00 F0 E0 A5 00 01 09 00  // .....p..........
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 04 00 00 00 00 00 00 00 00 00 F0 E0 A5  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 3D2226D9
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 D9 26 22 3D 00 00 00 00  // FACS@....&"=....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 58
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 58 41 4C 41 53 4B 41  // FIDT.....XALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 59 47 46  // ....$FID.x.1AYGF
    0030: 30 31 00 00 96 8E 9C 72 93 EF 7E F8 03 07 53 39  // 01.....r..~...S9
    0040: AA 3A AA B7 30 35 00 32 36 00 30 30 00 30 31 00  // .:..05.26.00.01.
    0050: E7 07 02 11 10 2A 28 FF FF 41 4C 41 53 4B 41 41  // .....*(..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B8
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000A5DB8000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000A5DD1000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 B8 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 80 DB A5  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 10 DD A5  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 2F
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD600000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0003
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 20
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 21
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD600000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 246577EFA2254AFA
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0003
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 20
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 21
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 2F 41 4D 44 20 20 00  // IVRS...../AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 60 FD 00 00 00 00  // ..H...@...`.....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 60 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..`.............
    0090: FA 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFDG2", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.M241, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.M434, UnknownObj)
    External (M049, UnknownObj)
    External (M097, UnknownObj)
    External (M128, UnknownObj)

    Scope (\_SB.PCI0.GPP0)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (SWUS)
        {
            PowerResource (M237, 0x00, 0x0000)
            {
                Name (M239, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (M239) /* \_SB_.PCI0.GPP0.SWUS.M237.M239 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    M239 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    M239 = Zero
                }
            }

            Name (XPR0, Package (0x01)
            {
                M237
            })
            Name (XPR2, Package (0x01)
            {
                M237
            })
            Name (XPR3, Package (0x01)
            {
                M237
            })
            Name (XS0W, 0x04)
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.DDPM */
            }

            Device (SWDS)
            {
                PowerResource (M237, 0x00, 0x0000)
                {
                    Name (M239, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (M239) /* \_SB_.PCI0.GPP0.SWUS.SWDS.M237.M239 */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        M239 = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        M239 = Zero
                    }
                }

                Name (XPR0, Package (0x01)
                {
                    M237
                })
                Name (XPR2, Package (0x01)
                {
                    M237
                })
                Name (XPR3, Package (0x01)
                {
                    M237
                })
                Name (XS0W, 0x04)
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x04)
                                    One
                                    M432
                                    ((0x66 = (M049 >> M128)) /* External reference */ & 0x05)
                                    One
                                    M433
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP0.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP0.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C010.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C011.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C012.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C013.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C014.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C015.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C016.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C017.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C018)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C018.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C019)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C019.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Scope (\_SB.PLTF.C01F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x00001194, 
                0x000015F9, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00001195
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C018, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C019, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01F, 0x85) // Device-Specific
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "Splinter", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x13,  // ........
            /* 0078 */  0x10, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x01, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, One)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, Zero, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, Zero, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [Zero]) > Zero))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = One
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == One))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, Zero, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = Zero
                A034 = Zero
                A035 = Zero
                A036 = Zero
                A037 = Zero
                A038 = Zero
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = Zero
                A040 = Zero
                A041 = Zero
                A042 = Zero
                A043 = Zero
                A044 = Zero
                Local5 = One
                Acquire (\_SB.AM00, 0xFFFF)
                Local0 = A045 /* \_SB_.A045 */
                Release (\_SB.AM00)
                If ((((Local0 & 0x3F) != 0x1F) && ((
                    Local0 & 0x3F) != Zero)))
                {
                    If (((Local0 & 0x3F) != 0x08))
                    {
                        Local5 = Zero
                    }
                }

                If ((Local5 == One))
                {
                    A040 = 0x02
                    A046 (0x24, Local6)
                }
            }

            If ((Arg0 == 0x13))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = Zero
                A048 = Zero
                A049 = Zero
                A050 = Zero
                A051 = Zero
                A052 = Zero
                A048 = One
                A046 (0x24, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Zero
                A054 = Zero
                A055 = Zero
                A056 = Zero
                A057 = Zero
                A058 = Zero
                A059 (Arg1)
                A007 (0xAA99)
            }

            Return (Zero)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A109 (Local0, Arg1)
                If ((Local1 == One))
                {
                    Local2 = A110 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, Zero, A023)
            CreateByteField (Local7, 0x02, A061)
            CreateByteField (Local7, 0x03, A111)
            A023 = 0x04
            A061 = Zero
            If ((Local2 == Zero))
            {
                A111 = Zero
            }
            Else
            {
                A111 = One
            }

            Return (Local7)
        }

        Method (A109, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A105 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A105 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A105 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A105 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A105 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A105 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A105 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A105 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A105 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A105 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A105 (Arg1))
            }
        }

        Method (A110, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A106 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A106 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A106 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A106 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A106 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A106 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A106 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A106 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A106 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A106 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A106 (Arg1))
            }
        }

        Name (AD00, Zero)
        Name (DK00, Zero)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, Zero)
        Name (AP02, Zero)
        Name (AP03, Zero)
        Name (AP05, Zero)
        Name (AP0B, 0xFF)
        Name (AP10, Zero)
        Method (A060, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, Zero, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A061)
            A061 = One
            If ((DerefOf (\_SB.ADAT [Zero]) == One))
            {
                A061 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [Zero]) == Zero))
            {
                A061 = One
                Return (Local7)
            }

            A062 (Arg0)
            If ((AP05 != One))
            {
                Return (Local7)
            }

            A063 ()
            A061 = 0x02
            Return (Local7)
        }

        Method (A064, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            If ((AP05 != One))
            {
                Return (Zero)
            }

            A063 ()
        }

        Method (A065, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = Zero
            }
        }

        Method (A066, 1, NotSerialized)
        {
            AP10 = One
        }

        Method (A067, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A068 (Local0)
                    Local0++
                }

                AP0B = Zero
            }

            A063 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [Zero] = 0x03
            Local7 [One] = Zero
            Local7 [0x02] = Zero
            Return (Local7)
        }

        Method (A069, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A062, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                If ((A070 (Local0, AP06) == One))
                {
                    If (((AP07 & AP08) == One))
                    {
                        Local1 = A071 (Local0)
                        A072 (Local0, Local1)
                    }
                    Else
                    {
                        A072 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A073, 0, NotSerialized)
        {
            AP02 = One
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A075, 0, NotSerialized)
        {
            AP03 = Zero
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A076 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A063, 0, NotSerialized)
        {
            A075 ()
            A073 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                Local2 = A077 (Local0)
                If ((Local1 != Local2))
                {
                    A078 (Local0, Local1)
                }
                ElseIf ((AP10 == One))
                {
                    A078 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == One))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = Zero
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A079 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A079 (Arg1))
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A080 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A080 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A080 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A080 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A080 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A080 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A080 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A080 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A080 ())
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A081 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A081 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A081 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A081 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A081 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A081 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A081 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A081 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A081 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A081 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A081 ())
            }
        }

        Method (A076, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A082 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A082 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A082 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A082 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A082 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A082 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A082 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A082 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A082 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A082 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A082 ())
            }
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A083 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A083 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A083 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A083 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A083 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A083 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A083 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A083 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A083 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A083 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A083 ())
            }
        }

        Method (A072, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A084 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A084 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A084 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A084 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A084 (Arg1))
            }
        }

        Method (A070, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A068, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        OperationRegion (A154, SystemMemory, AGRB, 0x1000)
        Field (A154, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A155,   32
        }

        BankField (A154, A155, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A154, A155, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A154, A155, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A133,   32
        }

        BankField (A154, A155, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A134,   32
        }

        BankField (A154, A155, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A135,   32
        }

        BankField (A154, A155, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A136,   32
        }

        BankField (A154, A155, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A137,   32
        }

        BankField (A154, A155, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A138,   32
        }

        BankField (A154, A155, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A154, A155, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A154, A155, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A154, A155, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A154, A155, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A154, A155, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A119,   32
        }

        BankField (A154, A155, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A120,   32
        }

        BankField (A154, A155, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A154, A155, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A154, A155, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A154, A155, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A154, A155, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A125,   32
        }

        BankField (A154, A155, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A154, A155, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A154, A155, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A147,   32
        }

        BankField (A154, A155, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A148,   32
        }

        BankField (A154, A155, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A149,   32
        }

        BankField (A154, A155, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A150,   32
        }

        BankField (A154, A155, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A151,   32
        }

        BankField (A154, A155, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A152,   32
        }

        BankField (A154, A155, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A045,   32
        }

        BankField (A154, A155, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A161,   32
        }

        BankField (A154, A155, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A162,   32
        }

        BankField (A154, A155, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A163,   32
        }

        Method (A112, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A094 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A094 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A094 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A094 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A094 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A094 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A094 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A094 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A094 (Arg1))
            }
        }

        Method (A113, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A114 /* \_SB_.A114 */
                Local1 &= 0xFF00FCFF
                A114 = (Local0 | Local1)
                Local1 = A114 /* \_SB_.A114 */
                A114 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    Local1 = A115 /* \_SB_.A115 */
                    A115 = (0x00400000 | Local1)
                    Local1 = A115 /* \_SB_.A115 */
                    A115 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == One))
                {
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0x00400000 | Local1)
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0x00400000 | Local1)
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0x00400000 | Local1)
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0x00400000 | Local1)
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0x00400000 | Local1)
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0x00400000 | Local1)
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A112 (Local0, Arg1)
                If ((Local1 == One))
                {
                    A113 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A126)
            CreateDWordField (Arg1, 0x04, A127)
            CreateDWordField (Arg1, 0x08, A128)
            CreateDWordField (Arg1, 0x0C, A129)
            CreateDWordField (Arg1, 0x10, A130)
            CreateDWordField (Arg1, 0x14, A131)
            A132 = Zero
            While ((A132 != Zero)){}
            A133 = A126 /* \_SB_.A018.A126 */
            A134 = A127 /* \_SB_.A018.A127 */
            A135 = A128 /* \_SB_.A018.A128 */
            A136 = A129 /* \_SB_.A018.A129 */
            A137 = A130 /* \_SB_.A018.A130 */
            A138 = A131 /* \_SB_.A018.A131 */
            A139 = Arg0
            While ((A132 == Zero)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A140)
            CreateDWordField (Arg1, 0x04, A141)
            CreateDWordField (Arg1, 0x08, A142)
            CreateDWordField (Arg1, 0x0C, A143)
            CreateDWordField (Arg1, 0x10, A144)
            CreateDWordField (Arg1, 0x14, A145)
            Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            }

            A147 = A140 /* \_SB_.A046.A140 */
            A148 = A141 /* \_SB_.A046.A141 */
            A149 = A142 /* \_SB_.A046.A142 */
            A150 = A143 /* \_SB_.A046.A143 */
            A151 = A144 /* \_SB_.A046.A144 */
            A152 = A145 /* \_SB_.A046.A145 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A146 = Local1
            A153 = 0xFFFFFFFF
            Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A146) /* \_SB_.A146 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A156,   32
            }

            Release (\_SB.AM00)
            Return (A156) /* \_SB_.AMNR.A156 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A154, A155, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A157,   32
            }

            A157 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, A158)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A158))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                If ((Local1 == One))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, Zero, A159)
                    CreateDWordField (Local3, 0x04, A160)
                    A159 = A133 /* \_SB_.A133 */
                    A160 = A134 /* \_SB_.A134 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR0.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR0.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR1.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR1.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR2.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR2.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR0.ABR3.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR0.ABR3.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR4.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR4.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR5.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR5.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR6.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR6.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR7.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR7.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR8.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR8.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABR9.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABR9.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A098, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A098, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A099,   2, 
                        ,   2, 
                    A100,   1, 
                    A101,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A102,   1, 
                    Offset (0x88), 
                    A103,   4, 
                        ,   1, 
                    A104,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A090 (Zero)
                    Name (A091, Zero)
                    A090 (One)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A096 (Local0, Zero)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A097 (0x64, Local5, Zero)
                                            A097 (0x67, Zero, Zero)
                                            A097 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A108, 2, NotSerialized)
                {
                    If ((A096 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A096 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A108 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A107 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A107 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A107, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A096.ADRR */
                }

                Method (A105, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A094 (Arg0))
                }

                Method (A106, 1, NotSerialized)
                {
                    Name (A091, Zero)
                    Local2 = Zero
                    A091 = A099 /* \_SB_.AWR1.ABRA.A099 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A100 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A090 (Zero)
                        Local0 = A096 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A107 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A107 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A100 = One
                        Local0 = 0x05
                    }

                    A099 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A099 = A091 /* \_SB_.AWR1.ABRA.A106.A091 */
                    If ((A091 != Zero))
                    {
                        A090 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A164, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == One))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A165 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A097, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A165, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A095 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A095 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A095 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A095 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A095 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A095 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A095 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A095 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A095 (Arg1))
            }
        }

        Method (A059, 1, Serialized)
        {
            Local0 = Zero
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((Local1 == Zero))
            {
                A012 = Local2
                A164 (Zero)
            }

            If ((Local1 == One))
            {
                A012 = Local2
                A164 (One)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, One)
        Name (A009, Zero)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((AD00 == Zero))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "AMD", "EXTGPP00", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB.PCI0.GPP0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_GPE)
    {
        Name (NGP0, 0x01)
        Name (NGP2, 0x01)
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP0 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            }

            If ((\_GPE.NGP2 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    /*
     * iASL Warning: There were 98 external control methods found during
     * disassembly, but only 0 were resolved (98 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.AIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.BIE3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.PTS0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.PTS3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP10, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP11, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP12, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP13, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP14, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP15, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP16, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP17, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP20, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP21, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP22, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP23, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP24, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP25, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP26, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP27, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP30, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP31, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP32, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP33, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP34, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP35, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP36, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP37, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP40, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP41, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP42, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP43, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP44, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP45, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP46, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP47, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP50, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP51, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP52, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP53, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP54, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP55, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP56, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP57, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP60, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP61, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP62, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP63, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP64, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP65, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP66, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP67, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP70, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP71, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP72, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP73, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP74, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP75, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP76, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP77, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.WAK0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_GPE.WAK3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.AM00, UnknownObj)
    External (_SB_.BPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.BWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.OWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)
    External (NFPC, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    OperationRegion (CPNV, SystemMemory, 0xA7E6C018, 0x0001010F)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
            }
        }
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        If (((Arg0 != Zero) && (Arg0 != One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x06)
    {
        0x05, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (_L0B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  KER-ASL-\\_GPE._L0B Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE._L0B End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (_L04, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  KER-ASL-\\_GPE._L04 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE._L04 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (_L02, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  KER-ASL-\\_GPE._L02 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE._L02 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local3 = \_SB.ALIB (0x0C)
                Local4
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C)
                        Local3
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "AMD", "MEMTOOL0", 0x00000002)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (M049, IntObj)
    External (M04E, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M610, MethodObj)    // Warning: Unknown method, guessing 6 arguments

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 (Zero, M610 (0x10, Local2, Local3 = MEMI /* \MGRT.MEMI */, 
            Local4 = MEMD /* \MGRT.MEMD */, M04E (M610 (0x11, Local3, M04E (M610 (0x15, Local4, M232 (Local2, 
            Zero, Zero)))))) = M049 /* External reference */) != )){}
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (C010)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (C011)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (C012)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (C013)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (C014)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (C015)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (C016)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (C017)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }

            Device (C018)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
            }

            Device (C019)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
            }

            Device (C01A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
            }

            Device (C01B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
            }

            Device (C01C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
            }

            Device (C01D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
            }

            Device (C01E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
            }

            Device (C01F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68, DeviceObj)

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68)
    {
        Name (SPTS, 0x01)
        Device (SPTO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFC200000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SPTS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "GPIO    ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.UBTC, UnknownObj)
    External (M31D, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUFF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
            })
            Return (BUFF) /* \_SB_.GPIO._AEI.BUFF */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x0A)
                {
                    If (CondRefOf (M31D))
                    {
                        M31D ()
                        Notify (\_SB.UBTC, 0x80) // Status Change
                    }
                }

            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMACPV4", 0x00000001)
{
    /*
     * iASL Warning: There were 6 external control methods found during
     * disassembly, but only 0 were resolved (6 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M017, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M249, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M250, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Name (M278, One)
    Name (M279, One)
    Name (M27A, Zero)
    Name (M27B, One)
    Name (APGE, One)
    Name (ACGE, One)
    Mutex (M27E, 0x00)
    Method (M27D, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpRemovePowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        0x01240414 = M249 (Zero, Zero, Zero)
        Local0
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, One)
            Local5 = 0x64
            0x01241020 = M249 (Zero, Zero, Zero)
            Local1
            While ((Local1 != Zero))
            {
                0x01241020 = M249 (Zero, Zero, Zero)
                Local1
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpRemovePowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M27C, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpApplyPowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        0x01240414 = M249 (Zero, Zero, Zero)
        Local0
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, Zero)
            Local5 = 0x64
            0x01241020 = M249 (Zero, Zero, Zero)
            Local1
            While ((Local1 != 0x02))
            {
                0x01241020 = M249 (Zero, Zero, Zero)
                Local1
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpApplyPowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M276, 0, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        If (!(M278 ^ M279))
        {
            M460 ("FEA-ASL-CpmPowerGateOn-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((ACGE == One))
        {
            0x00058AE4 = M249 (Zero, Zero, Zero)
            Local4
            Local5 = 0x64
            While ((Local4 == Zero))
            {
                0x00058AE4 = M249 (Zero, Zero, Zero)
                Local4
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }

            If ((Local4 == One))
            {
                M250 (Zero, Zero, Zero, 0x00058AE4, Zero)
                M250 (Zero, Zero, Zero, 0x00058AE0, 0xC8)
                M250 (Zero, Zero, Zero, 0x00058A30, 0x03)
                0x00058AE4 = M249 (Zero, Zero, Zero)
                Local4
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    0x00058AE4 = M249 (Zero, Zero, Zero)
                    Local4
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }
            Else
            {
                M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            }
        }

        If ((APGE == One))
        {
            M000 (0x0DB4)
            If ((M27A == One))
            {
                0x08 = M017 (Zero, 0x08, One, 0x19, Zero)
                Local0
                 = M019 (Local0, Zero, 0x05)
                Local1
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27D ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0303)
                Local5 = 0x64
                0x0900E790 = M249 (Zero, Zero, Zero)
                Local4
                Local4 &= 0x0F
                While ((Local4 != Zero))
                {
                    0x0900E790 = M249 (Zero, Zero, Zero)
                    Local4
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB5)
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Method (M277, 0, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        If (!((M278 == Zero) && (M279 == Zero)))
        {
            M460 ("FEA-ASL-CpmPowerGateOff-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((APGE == One))
        {
            M000 (0x0DB6)
            If ((M27A == One))
            {
                0x08 = M017 (Zero, 0x08, One, 0x19, Zero)
                Local0
                 = M019 (Local0, Zero, 0x05)
                Local1
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27C ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0301)
                Local5 = 0x64
                0x0900E790 = M249 (Zero, Zero, Zero)
                Local4
                Local4 &= 0x0F
                While ((Local4 != 0x02))
                {
                    0x0900E790 = M249 (Zero, Zero, Zero)
                    Local4
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB7)
        }

        If ((ACGE == One))
        {
            0x00058AE4 = M249 (Zero, Zero, Zero)
            Local4
            Local5 = 0x64
            While ((Local4 == Zero))
            {
                0x00058AE4 = M249 (Zero, Zero, Zero)
                Local4
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }

            If ((Local4 == One))
            {
                M250 (Zero, Zero, Zero, 0x00058AE4, Zero)
                M250 (Zero, Zero, Zero, 0x00058AE0, Zero)
                M250 (Zero, Zero, Zero, 0x00058A30, 0x03)
                0x00058AE4 = M249 (Zero, Zero, Zero)
                Local4
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    0x00058AE4 = M249 (Zero, Zero, Zero)
                    Local4
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }
            Else
            {
                M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            }
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0 CpmAcpPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3 CpmAcpPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M460 ("FEA-ASL-MSG0-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M000 (0x0DEB)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                0x00058AE4 = M249 (Zero, Zero, Zero)
                Local4
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    0x00058AE4 = M249 (Zero, Zero, Zero)
                    Local4
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }

                If ((Local4 == One))
                {
                    M250 (Zero, Zero, Zero, 0x00058AE4, Arg0)
                    M250 (Zero, Zero, Zero, 0x00058AE0, Arg1)
                    M250 (Zero, Zero, Zero, 0x00058A30, Arg2)
                    0x00058AE4 = M249 (Zero, Zero, Zero)
                    Local0
                    While ((Local0 == Zero))
                    {
                        0x00058AE4 = M249 (Zero, Zero, Zero)
                        Local0
                        If ((Local0 != Zero))
                        {
                            Break
                        }
                    }

                    M000 (0x0DEC)
                    0x00058AE0 = M249 (Zero, Zero, Zero)
                    Local1
                    M460 ("FEA-ASL-MSG0-End-1-Return 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    Return (Local1)
                }
                Else
                {
                    M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
                    Return (0xFFFFFFFF)
                }
            }

            Name (MBOX, Buffer (0x04){})
            0x03810570 = M249 (Zero, Zero, Zero)
            Local0
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                0x03810570 = M249 (Zero, Zero, Zero)
                Local0
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            0x03810570 = M249 (Zero, Zero, Zero)
            Local0
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                0x03810570 = M249 (Zero, Zero, Zero)
                Local0
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x0DEE)
                M460 ("FEA-ASL-MSG0-End-3-Return 0x%X-Command Fail\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }
            Else
            {
                M000 (0x0DED)
                M460 ("FEA-ASL-MSG0-End-2-Return 0x%X\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS0 CpmAzaliaPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS3 CpmAzaliaPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = Zero
            M277 ()
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020026, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set SMTEn", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x45)
    {
        0x44, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x45, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x42, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xC3, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3A, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x78, 0x05, 0x00, 0x00,  // ....x...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x9E, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x78, 0x05, 0x00, 0x00,  // ....x...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x78, 0x05, 0x00, 0x00,  // ....x...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x36, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0xF2, 0x12, 0x00, 0x00, 0xA2, 0x17, 0x00, 0x00,  // ........
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x80, 0xFC, 0x0A, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0x93, 0x04, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2F, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x17, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x86, 0x01, 0x00, 0x00,  // =.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0xE0, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0x74, 0x03, 0x00, 0x00,  // <...t...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x5A, 0x00, 0x00, 0x00,  // ....Z...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x86, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00,  // ....`...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x26, 0x00, 0x00, 0x00,  // ....&...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x26, 0x00, 0x00, 0x00,  // ;...&...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,  // ....@...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // ........
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00020026, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x26, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // &.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (DSMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0xA7811018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID)
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE)
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMMSOSC", 0x00000001)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.M625, IntObj)
    External (DDEP, UnknownObj)
    External (DIMS, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M049, IntObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M460, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M620, UnknownObj)

    Scope (\_SB)
    {
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, Zero)
            Name (U4PC, 0xFF)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((U4PC != 0xFF))
                    {
                        Local5 = (U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 != M620))
                        {
                            0x10
                            Zero
                            0x0180 = \_SB.M625 /* External reference */
                            0x03E8
                            Local1
                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local2 |= 0x04 = \DIMS (Local1, M232 (Local1, 0x55, Zero), \DDEP = 
                                Zero)
                        }
                    }

                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 != M620))
                        {
                            0x10
                            Zero
                            If ((M049 == M620))
                            {
                                0x31
                                Zero
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 != M620))
                            {
                                0x10
                                Zero
                                M620 = M049 /* External reference */
                                0x2F
                                Local4
                                (0x0102 + (Local4 << 0x10)) = \_SB.M625 /* External reference */
                                0x03E8
                                Local1
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG5", 0x00000001)
{
    /*
     * iASL Warning: There were 20 external control methods found during
     * disassembly, but only 0 were resolved (20 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "USB     ", 0x00000001)
{
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (M600, IntObj)
    External (M601, IntObj)

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    Zero
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    Zero
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    One
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x02
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x0A
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x03
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x0A
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    One
                    One
                    0x03
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    One
                    0x03
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x05
                    One
                    0x15
                    Zero
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (M600) /* External reference */
                    Zero
                    Zero
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (M601) /* External reference */
                    Zero
                    One
                    0x04
                    One
                    0x15
                    Zero
                }
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FD210510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 00000000A7E57000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 7F 41 4C 41 53 4B 41  // TPM2L.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 49 20  // A M I ......AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 70 E5 A7 00 00 00 00              // .....p......


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000048
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : BAEDB05D-F2CE-485B-B454-C251870CDEFC
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 72 (0x48)

    0000: 55 45 46 49 48 00 00 00 01 E2 41 4C 41 53 4B 41  // UEFIH.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 5D B0 ED BA CE F2 5B 48 B4 54 C2 51  // ....].....[H.T.Q
    0030: 87 0C DE FC 36 00 02 00 98 35 4E A9 00 00 00 00  // ....6....5N.....
    0040: D9 00 00 00 18 00 00 00                          // ........


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000AC84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 04
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 44164 (0xAC84)

    0000: 56 46 43 54 84 AC 00 00 01 04 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 BF 73 00 00 00 00  // ...........s....
    0060: 01 00 00 00 00 AC 00 00 55 AA 56 E9 0E 25 00 00  // ........U.V..%..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 74 03 00 00 00 00 49 42 4D 97 4A A0 00 00 00 00  // t.....IBM.J.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 48 03 00 00 00 00 00 00 31 32 2F 31 34 2F 32 30  // H.......12/14/20
    00C0: 20 30 32 3A 30 31 00 00 35 00 00 00 E9 01 26 00  //  02:01..5.....&.
    00D0: E9 0B 26 00 00 00 10 02 09 00 00 00 01 02 40 00  // ..&...........@.
    00E0: 00 C0 BF 73 00 00 00 00 6E 00 64 00 90 01 00 00  // ...s....n.d.....
    00F0: 59 00 AA 05 9E 07 B8 0B 7C 99 05 00 00 00 00 00  // Y.......|.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0160: 00 00 00 00 16 00 34 03 0F FC 40 01 00 00 00 00  // ......4...@.....
    0170: 08 00 08 00 08 80 41 CC F3 28 42 CD A3 10 80 E8  // ......A..(B.....
    0180: 0D 7E E3 78 CE FF FF 00 00 00 00 00 00 20 7E C5  // .~.x......... ~.
    0190: FF 01 00 00 00 80 05 10 00 90 F5 3B 87 B2 6A 3A  // ...........;..j:
    01A0: 47 3A C7 00 00 00 00 33 00 AE 73 53 05 80 0F 08  // G:.....3..sS....
    01B0: 21 04 FF 3C 00 C0 22 02 02 02 81 04 65 D5 74 0E  // !..<..".....e.t.
    01C0: 81 E0 81 0A 00 1E 90 08 F0 3E A7 68 C4 48 21 00  // .........>.h.H!.
    01D0: 21 00 21 00 01 00 C0 02 50 02 91 01 02 00 18 80  // !.!.....P.......
    01E0: 01 40 06 06 1E 11 07 52 80 18 0C 0E 12 00 00 00  // .@.....R........
    01F0: 0E F0 02 00 00 00 08 00 80 01 06 00 08 40 18 10  // .............@..
    0200: 30 00 00 00 20 00 00 00 04 00 00 00 1C 04 00 00  // 0... ...........
    0210: C8 00 00 00 30 00 00 00 00 00 F8 08 40 00 00 00  // ....0.......@...
    0220: 00 00 00 04 00 00 00 00 1C 32 00 30 52 20 90 00  // .........2.0R ..
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E4  // ................
    0240: 27 09 40 10 18 00 64 00 00 00 00 C0 98 07 00 00  // '.@...d.........
    0250: 40 FA 01 A0 00 24 00 00 00 80 10 90 01 18 00 00  // @....$..........
    0260: 08 00 80 81 47 01 00 F0 A1 1F 11 30 00 00 00 00  // ....G......0....
    0270: 02 FC CE 01 02 89 00 04 31 31 33 2D 44 34 31 32  // ........113-D412
    0280: 30 31 2D 58 54 00 4E 41 56 49 32 31 45 58 54 00  // 01-XT.NAVI21EXT.
    0290: 50 43 49 5F 45 58 50 52 45 53 53 00 47 44 44 52  // PCI_EXPRESS.GDDR
    02A0: 36 00 0D 0A 4E 41 56 49 32 31 45 58 54 20 47 61  // 6...NAVI21EXT Ga
    02B0: 6D 69 6E 67 20 58 54 58 20 44 34 31 32 20 32 38  // ming XTX D412 28
    02C0: 31 2F 33 32 30 20 4C 34 43 30 33 4F 41 52 2E 53  // 1/320 L4C03OAR.S
    02D0: 4D 45 20 32 30 32 30 20 20 20 20 20 20 20 20 20  // ME 2020         
    02E0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02F0: 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38  // ..... ...(C) 198
    0300: 38 2D 32 30 32 30 2C 20 41 64 76 61 6E 63 65 64  // 8-2020, Advanced
    0310: 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20  //  Micro Devices, 
    0320: 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D  // Inc..ATOMBIOSBK-
    0330: 41 4D 44 20 56 45 52 30 32 30 2E 30 30 31 2E 30  // AMD VER020.001.0
    0340: 30 30 2E 30 34 37 2E 30 30 30 30 30 30 00 4C 34  // 00.047.000000.L4
    0350: 43 30 33 4F 41 52 2E 53 4D 45 00 32 32 31 35 35  // C03OAR.SME.22155
    0360: 38 30 20 00 35 34 33 34 31 31 20 20 00 73 61 69  // 80 .543411  .sai
    0370: 68 75 61 6E 67 00 54 55 4C 5F 50 32 38 47 5F 5A  // huang.TUL_P28G_Z
    0380: 51 34 41 5F 45 5F 31 36 5F 36 36 32 5F 52 58 36  // Q4A_E_16_662_RX6
    0390: 39 30 30 58 54 58 32 38 31 33 32 30 32 33 34 30  // 900XTX2813202340
    03A0: 32 30 30 30 5C 63 6F 6E 66 69 67 2E 68 00 00 00  // 2000\config.h...
    03B0: 2C 00 02 03 41 54 4F 4D 00 C0 13 26 E6 02 99 03  // ,...ATOM...&....
    03C0: 3A 02 46 26 00 00 00 00 8C 14 08 24 74 03 96 A3  // :.F&.......$t...
    03D0: CC 03 00 00 10 0B 00 00 00 00 03 00 50 43 49 52  // ............PCIR
    03E0: 02 10 BF 73 00 00 18 00 00 00 00 03 56 00 01 14  // ...s........V...
    03F0: 00 00 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0400: 00 DA 75 5B 0B 00 00 00 00 00 00 00 00 00 00 00  // ..u[............
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 4A 00 02 01 00 00 00 00 E0 08 EC 19  // ....J...........
    0440: 74 08 B4 1A 18 04 74 04 08 0A FC 0A 00 00 40 0D  // t.....t.......@.
    0450: AC 06 E8 1A 4C 0D 70 1B 00 00 5C 1B A4 0D 00 00  // ....L.p...\.....
    0460: C4 0D D8 0D EC 07 E4 19 E4 0D 00 00 00 00 18 07  // ................
    0470: 34 0E 00 00 00 00 00 00 A8 18 00 00 00 00 00 00  // 4...............
    0480: 5C 00 02 01 00 00 00 00 00 00 00 00 00 00 00 00  // \...............
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    04A0: C8 00 00 00 00 00 34 21 00 00 B8 0B 00 00 00 00  // ......4!........
    04B0: 7D 00 00 01 00 00 00 00 00 FF FF 00 00 00 00 00  // }...............
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 38 02 05 04  // ............8...
    04E0: 10 00 38 00 7C 00 90 01 D8 01 48 00 30 75 00 00  // ..8.|.....H.0u..
    04F0: 0C 00 3F 05 3E 00 00 00 40 9C 00 00 0C 00 3F 05  // ..?.>...@.....?.
    0500: 3E 00 00 00 FF FF FF 00 0C 00 3F 05 77 21 00 00  // >.........?.w!..
    0510: 00 00 00 00 FF FF FF 00 0C 00 3F 04 3E 00 00 00  // ..........?.>...
    0520: 00 00 00 00 0A 8B 02 00 0C 00 3F 04 3E 00 00 00  // ..........?.>...
    0530: 15 16 05 00 0C 00 3F 04 3E 00 00 00 1C C8 06 00  // ......?.>.......
    0540: 0C 00 3F 04 3E 00 00 00 23 7A 08 00 0C 00 3F 04  // ..?.>...#z....?.
    0550: 3E 00 00 00 00 00 00 00 48 3F 00 00 3F 00 44 00  // >.......H?..?.D.
    0560: 00 16 00 00 00 04 01 1F 00 00 00 04 02 2C 00 00  // .............,..
    0570: 00 04 03 3E 00 00 00 04 08 1B 50 00 00 04 09 25  // ...>......P....%
    0580: 60 00 00 04 0A 35 90 00 00 04 10 21 B0 00 00 04  // `....5.....!....
    0590: 11 2F F0 00 00 04 18 2A 40 01 00 04 78 69 00 00  // ./.....*@...xi..
    05A0: 3F 00 44 00 00 16 00 00 00 04 01 1F 00 00 00 04  // ?.D.............
    05B0: 02 2C 00 00 00 04 03 3E 00 00 00 04 08 1B 50 00  // .,.....>......P.
    05C0: 00 04 09 25 60 00 00 04 0A 35 90 00 00 04 10 21  // ...%`....5.....!
    05D0: B0 00 00 04 11 2F F0 00 00 04 18 2A 40 01 00 04  // ...../.....*@...
    05E0: F0 D2 00 00 3F 00 44 00 00 1D 00 00 00 04 01 26  // ....?.D........&
    05F0: 00 00 00 04 02 30 00 00 00 04 03 3E 00 00 00 04  // .....0.....>....
    0600: 08 22 40 00 00 04 09 2C 60 00 00 04 0A 37 70 00  // ."@....,`....7p.
    0610: 00 04 10 27 90 00 00 04 11 32 C0 00 00 04 18 2E  // ...'.....2......
    0620: 00 01 00 04 68 3C 01 00 3F 00 44 00 00 1D 00 00  // ....h<..?.D.....
    0630: 00 04 01 26 00 00 00 04 02 30 00 00 00 04 03 3E  // ...&.....0.....>
    0640: 00 00 00 04 08 22 40 00 00 04 09 2C 60 00 00 04  // ....."@....,`...
    0650: 0A 37 70 00 00 04 10 27 90 00 00 04 11 32 C0 00  // .7p....'.....2..
    0660: 00 04 18 2E 00 01 00 04 00 00 00 00 00 01 02 03  // ................
    0670: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    0680: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0690: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    06A0: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    06B0: 00 07 05 00 08 30 00 00 9B 00 00 00 07 30 00 00  // .....0.......0..
    06C0: 46 25 00 00 08 31 00 00 9B 00 00 00 07 31 00 00  // F%...1.......1..
    06D0: 46 25 00 00 08 32 00 00 9B 00 00 00 07 32 00 00  // F%...2.......2..
    06E0: 46 25 00 00 08 33 00 00 9B 00 00 00 07 33 00 00  // F%...3.......3..
    06F0: 46 25 00 00 56 00 00 00 05 00 00 00 46 00 00 00  // F%..V.......F...
    0700: 30 00 00 00 50 00 00 00 30 00 00 00 FF FF FF FF  // 0...P...0.......
    0710: 00 00 00 00 6C 00 02 01 B5 5D 00 00 00 00 01 00  // ....l....]......
    0720: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    0730: B5 5D 00 00 18 14 04 00 B5 5D 00 00 1A 18 05 00  // .].......]......
    0740: B5 5D 00 00 1C 1C 06 00 91 5D 00 00 08 08 90 00  // .].......]......
    0750: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    0760: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    0770: A5 5D 00 00 08 08 95 00 A9 5D 00 00 08 08 97 00  // .].......]......
    0780: D4 00 04 04 00 00 00 00 24 F4 00 00 10 27 88 13  // ........$....'..
    0790: 00 00 00 00 00 00 00 00 5E 01 4E 0C 01 01 00 00  // ........^.N.....
    07A0: 55 00 00 00 10 27 BF 73 00 03 06 01 00 06 06 00  // U....'.s........
    07B0: C8 91 05 00 80 EA 82 2B 00 00 00 00 00 00 00 00  // .......+........
    07C0: 00 00 00 00 54 00 01 00 00 00 00 00 00 00 00 00  // ....T...........
    07D0: 00 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    07F0: 22 22 22 00 AA FA 03 00 00 00 00 00 00 00 00 00  // """.............
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 88 00 01 04 88 06 04 00 13 31 48 00  // .............1H.
    0860: 1E 21 00 00 6C 00 00 00 08 00 00 00 13 32 51 00  // .!..l........2Q.
    0870: 20 21 00 00 73 00 00 00 80 00 00 00 13 33 5A 00  //  !..s........3Z.
    0880: 21 21 00 00 7A 00 00 00 00 02 00 00 0C 31 63 00  // !!..z........1c.
    0890: 20 22 00 00 81 00 00 00 00 04 00 00 01 04 93 00  //  "..............
    08A0: 02 04 04 00 FF 01 04 91 00 02 04 02 00 FF 01 04  // ................
    08B0: 95 00 02 04 06 00 FF 01 04 90 00 02 04 01 00 FF  // ................
    08C0: 14 06 0F 0E 00 00 FF 14 06 0F 0E 00 00 FF 14 06  // ................
    08D0: 0F 0E 00 00 FF 14 06 0F 0E 00 00 FF 6C 00 03 04  // ............l...
    08E0: 2F 00 01 14 50 C3 00 00 A0 86 01 00 01 54 04 00  // /...P........T..
    08F0: 00 00 00 00 4C 00 00 00 6B 03 20 03 46 05 52 03  // ....L...k. .F.R.
    0900: 00 00 00 00 80 00 00 00 00 00 00 00 02 97 98 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 E8 03 00 00  // ................
    0920: 84 03 84 03 46 05 84 03 06 09 00 00 D5 04 00 00  // ....F...........
    0930: 00 0C 00 00 61 60 01 00 00 00 00 80 80 8D 5B 00  // ....a`........[.
    0940: 00 00 00 00 00 00 00 00 28 01 04 09 01 01 E0 00  // ........(.......
    0950: 00 01 00 00 01 01 E0 00 01 02 00 00 01 01 E4 00  // ................
    0960: 02 03 01 00 01 01 E4 00 03 04 01 00 00 01 00 00  // ................
    0970: 04 05 00 00 00 01 00 00 05 06 00 00 00 00 00 00  // ................
    0980: 06 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 08 00  // ................
    09D0: 00 02 01 03 00 00 00 00 CA 02 00 00 63 00 00 00  // ............c...
    09E0: 80 00 00 00 40 00 00 00 00 00 01 00 FF 00 05 00  // ....@...........
    09F0: 05 00 FF 00 00 01 02 00 FF FF 00 00 00 00 1F 00  // ................
    0A00: 00 00 1F 00 01 10 21 00 00 00 1F 00 FF FF 00 00  // ......!.........
    0A10: 10 00 00 00 90 01 00 00 10 0C 04 02 10 10 08 02  // ................
    0A20: E2 04 E2 04 E2 04 E2 04 A0 0F A0 0F A0 0F A0 0F  // ................
    0A30: 01 00 00 00 10 10 10 10 10 10 10 10 10 10 10 10  // ................
    0A40: 10 10 10 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: F4 00 03 05 01 0B 00 00 00 00 4E 0C 00 00 4E 0C  // ..........N...N.
    0A80: 10 27 00 00 C8 91 05 00 78 C2 06 00 04 00 00 00  // .'......x.......
    0A90: 00 53 07 00 30 75 00 00 0C A3 00 00 50 81 00 00  // .S..0u......P...
    0AA0: 54 CC 00 00 7B F1 00 00 0C A3 00 00 00 00 00 00  // T...{...........
    0AB0: 20 30 05 00 00 00 00 00 A8 F1 01 00 D4 30 00 00  //  0...........0..
    0AC0: 12 00 00 00 00 00 00 00 28 1D 01 00 A0 09 01 00  // ........(.......
    0AD0: 00 00 00 00 33 33 81 01 7D 1A 09 96 30 14 C9 02  // ....33..}...0...
    0AE0: 03 00 03 00 48 08 19 00 28 1D 01 00 88 13 00 00  // ....H...(.......
    0AF0: 02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00  // ................
    0B00: 01 00 00 00 01 00 00 00 01 80 00 00 7D 1F 1E 96  // ............}...
    0B10: 05 80 00 00 FF FF 0F 00 71 00 FF 2F 4D 00 00 A5  // ........q../M...
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 44 02 02 06 00 00 00 00 00 00 00 00  // ....D...........
    0B70: 00 00 00 00 00 00 2C 02 24 50 53 50 6E E2 6E 24  // ......,.$PSPn.n$
    0B80: 1F 00 00 00 00 00 00 00 00 00 00 00 40 04 00 00  // ............@...
    0B90: 00 00 03 00 00 00 00 00 01 00 00 00 00 30 00 00  // .............0..
    0BA0: 00 D0 05 00 00 00 00 00 03 00 00 00 00 30 00 00  // .............0..
    0BB0: 00 00 06 00 00 00 00 00 04 00 00 00 00 AC 00 00  // ................
    0BC0: 00 00 00 00 00 00 00 00 05 00 00 00 00 01 00 00  // ................
    0BD0: 00 0A 03 00 00 00 00 00 06 00 00 00 00 B0 00 00  // ................
    0BE0: 00 50 0A 00 00 00 00 00 07 00 00 00 40 04 00 00  // .P..........@...
    0BF0: C0 0B 03 00 00 00 00 00 09 00 00 00 08 00 00 00  // ................
    0C00: 10 0D 00 00 00 00 00 00 11 00 00 00 00 82 00 00  // ................
    0C10: 00 F0 06 00 00 00 00 00 12 00 00 00 00 50 00 00  // .............P..
    0C20: 00 00 08 00 00 00 00 00 14 00 00 00 00 30 00 00  // .............0..
    0C30: 00 10 03 00 00 00 00 00 21 00 00 00 C0 00 00 00  // ........!.......
    0C40: 00 0B 03 00 00 00 00 00 23 00 00 00 00 50 00 00  // ........#....P..
    0C50: 00 70 0C 00 00 00 00 00 2D 00 00 00 00 A0 00 00  // .p......-.......
    0C60: 00 40 03 00 00 00 00 00 2E 00 00 00 00 C0 00 00  // .@..............
    0C70: 00 30 06 00 00 00 00 00 30 00 00 00 00 60 00 00  // .0......0....`..
    0C80: 00 00 0B 00 00 00 00 00 32 00 00 00 00 80 00 00  // ........2.......
    0C90: 00 B0 0B 00 00 00 00 00 33 00 00 00 00 70 00 00  // ........3....p..
    0CA0: 00 E0 03 00 00 00 00 00 35 00 00 00 10 00 00 00  // ........5.......
    0CB0: 18 0D 00 00 00 00 00 00 36 00 00 00 00 40 00 00  // ........6....@..
    0CC0: 00 50 08 00 00 00 00 00 37 00 00 00 00 10 00 00  // .P......7.......
    0CD0: 00 90 08 00 00 00 00 00 38 00 00 00 40 04 00 00  // ........8...@...
    0CE0: 00 05 03 00 00 00 00 00 39 00 00 00 00 50 00 00  // ........9....P..
    0CF0: 00 60 0B 00 00 00 00 00 3D 00 00 00 00 20 00 00  // .`......=.... ..
    0D00: 00 20 0A 00 00 00 00 00 40 00 00 00 00 30 00 00  // . ......@....0..
    0D10: 00 30 0C 00 00 00 00 00 42 00 00 00 00 10 00 00  // .0......B.......
    0D20: 00 40 0A 00 00 00 00 00 49 00 00 00 00 C0 00 00  // .@......I.......
    0D30: 00 50 04 00 00 00 00 00 4A 00 00 00 00 8E 00 00  // .P......J.......
    0D40: 00 72 07 00 00 00 00 00 4B 00 00 00 00 C0 00 00  // .r......K.......
    0D50: 00 10 05 00 00 00 00 00 4C 00 00 00 00 10 00 00  // ........L.......
    0D60: 00 60 0C 00 00 00 00 00 71 00 00 00 00 80 01 00  // .`......q.......
    0D70: 00 A0 08 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0D80: 03 01 00 00 00 0C 00 00 10 0C 04 02 10 10 08 02  // ................
    0D90: 64 6D 75 31 32 34 31 5F 44 34 31 32 30 45 58 54  // dmu1241_D4120EXT
    0DA0: 2E 30 34 31 00 00 00 00 0C 00 02 01 00 00 00 00  // .041............
    0DB0: 00 00 00 00 58 00 02 06 03 0A 04 00 0A 02 04 02  // ....X...........
    0DC0: 64 C0 00 00 65 C0 00 00 66 C0 00 00 67 C0 00 00  // d...e...f...g...
    0DD0: E8 C0 00 00 A0 21 00 00 03 6B 01 00 10 27 00 00  // .....!...k...'..
    0DE0: 0A 04 04 00 00 00 00 00 9F 33 00 00 00 00 00 00  // .........3......
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 02 02  // ............ ...
    0E10: 00 00 00 00 00 00 00 00 08 00 00 00 04 00 00 00  // ................
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 14 00 02 02  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00  // ................
    0E40: 0C 00 02 02 08 00 00 00 00 00 00 00 50 00 03 03  // ............P...
    0E50: 00 00 00 00 00 F0 06 00 00 82 00 00 00 00 00 00  // ................
    0E60: 64 00 E4 0C 07 08 70 00 10 27 00 00 A0 86 01 00  // d.....p..'......
    0E70: 48 07 01 00 84 B2 00 00 E4 25 00 00 00 00 00 00  // H........%......
    0E80: 2B E0 02 00 00 00 00 00 00 00 00 00 00 00 00 00  // +...............
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 74 0A 02 05  // ............t...
    0EA0: 4F 00 5B 00 5F 03 F3 03 A7 08 00 00 00 00 00 00  // O.[._...........
    0EB0: 01 07 08 08 00 40 00 00 FF FF 00 00 00 00 37 00  // .....@........7.
    0EC0: 00 70 10 04 72 00 00 00 00 00 00 00 00 00 81 08  // .p..r...........
    0ED0: 00 00 00 04 00 00 04 00 C0 00 0A 08 00 00 40 00  // ..............@.
    0EE0: 4B 34 5A 41 46 33 32 35 42 4D 00 00 00 00 00 FF  // K4ZAF325BM......
    0EF0: FF FF 00 00 00 00 00 A8 61 00 00 09 05 09 0D DB  // ........a.......
    0F00: 01 1E 0F 03 05 03 05 02 02 05 03 05 08 02 03 01  // ................
    0F10: 0A 0A 0A 0A 02 04 0A 0A 1E 03 1E 48 E8 01 00 03  // ...........H....
    0F20: 0C 0A 02 02 04 0A 10 15 01 02 09 04 04 01 00 00  // ................
    0F30: 00 00 00 00 00 00 00 50 C3 00 00 0A 05 0F 17 B6  // .......P........
    0F40: 03 3C 1E 04 08 05 08 02 02 08 04 06 08 02 03 01  // .<..............
    0F50: 0A 0A 0A 0A 02 04 0A 0A 3C 05 3C 90 D0 03 00 05  // ........<.<.....
    0F60: 0C 0A 02 02 04 0A 11 1B 01 02 09 04 07 01 00 00  // ................
    0F70: 00 00 00 00 00 00 00 CC 55 01 00 0F 05 1B 29 7F  // ........U.....).
    0F80: 06 69 35 07 0E 08 0E 04 04 0E 06 08 10 02 03 02  // .i5.............
    0F90: 0B 0A 0A 0A 02 04 0A 0A 69 09 69 FC AC 06 00 09  // ........i.i.....
    0FA0: 0C 0A 02 02 04 0A 17 28 01 02 0A 04 0C 01 00 00  // .......(........
    0FB0: 00 00 00 00 00 00 00 A0 86 01 00 10 05 1E 2D 6C  // ..............-l
    0FC0: 07 78 3C 08 0F 09 0F 04 04 10 06 08 10 02 03 02  // .x<.............
    0FD0: 0C 0A 0A 0A 02 04 0A 0A 78 0A 78 20 A1 07 00 0A  // ........x.x ....
    0FE0: 0C 0A 02 02 04 0A 18 2B 01 02 0A 04 0D 01 00 00  // .......+........
    0FF0: 00 00 00 00 00 00 00 48 E8 01 00 14 06 26 39 47  // .......H.....&9G
    1000: 09 96 4B 0A 13 0C 13 05 05 14 07 09 14 02 03 03  // ..K.............
    1010: 0D 0D 0A 0A 02 04 0D 0D 96 0D 96 68 89 09 00 0D  // ...........h....
    1020: 0C 0A 02 02 05 0D 1D 33 01 02 0A 04 10 01 00 00  // .......3........
    1030: 00 00 00 00 00 00 00 40 13 02 00 15 07 2D 44 18  // .......@.....-D.
    1040: 0A B4 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03  // ..Z.............
    1050: 0E 0F 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F  // ............q...
    1060: 0C 0A 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00  // .......<........
    1070: 00 00 00 00 00 00 00 78 5D 02 00 16 07 2D 44 81  // .......x]....-D.
    1080: 0B B4 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03  // ..Z.............
    1090: 0E 0F 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F  // ............q...
    10A0: 0C 0A 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00  // .......<........
    10B0: 00 00 00 00 00 00 00 20 BF 02 00 18 07 34 4E 5C  // ....... .....4N\
    10C0: 0D D2 69 0E 1A 10 1A 08 08 1C 09 0B 20 02 03 03  // ..i......... ...
    10D0: 0F 12 0A 0A 02 04 12 12 D2 12 D2 F8 59 0D 00 12  // ............Y...
    10E0: 0C 0A 02 02 07 12 21 43 01 02 0B 04 16 01 00 00  // ......!C........
    10F0: 00 00 00 00 00 00 00 B0 24 03 00 1A 08 3C 5A 4A  // ........$....<ZJ
    1100: 0F F0 78 10 1E 12 1E 08 08 1F 0A 0C 20 02 03 03  // ..x......... ...
    1110: 10 14 0A 0A 02 04 14 14 F0 14 F0 40 42 0F 00 14  // ...........@B...
    1120: 0C 0A 02 02 08 14 23 4C 01 02 0C 04 19 01 00 00  // ......#L........
    1130: 00 00 00 00 00 00 00 E8 6E 03 00 1D 08 44 66 2E  // ........n....Df.
    1140: 11 0E 87 12 24 15 22 09 09 1F 0C 0E 24 02 03 03  // ....$.".....$...
    1150: 11 17 0A 0A 02 04 17 17 0E 17 0E 88 2A 11 00 17  // ............*...
    1160: 0C 0A 02 02 09 17 26 54 01 02 0C 04 1C 01 01 01  // ......&T........
    1170: 01 00 00 00 00 00 00 20 A0 03 00 1D 08 48 6C A2  // ....... .....Hl.
    1180: 11 1D 8E 13 24 16 24 09 09 24 0D 0F 24 02 04 03  // ....$.$..$..$...
    1190: 11 18 0B 0B 02 04 18 18 1D 18 1D 9D 1A 12 00 18  // ................
    11A0: 0D 0B 02 02 09 18 28 59 02 02 0D 04 1E 01 01 01  // ......(Y........
    11B0: 01 00 00 00 00 00 00 58 B8 03 00 1E 08 4A 70 18  // .......X.....Jp.
    11C0: 12 25 93 14 26 17 26 0A 0A 26 0D 10 28 02 04 03  // .%..&.&..&..(...
    11D0: 11 1A 0B 0B 02 04 1A 1A 25 1A 25 F5 94 12 00 1A  // ........%.%.....
    11E0: 0D 0B 02 02 0A 1A 29 5B 02 02 0D 04 1F 01 01 01  // ......)[........
    11F0: 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00 55  // ...............U
    1200: 50 01 00 A0 FE 00 01 A4 FE 00 01 FF FF FF 00 00  // P...............
    1210: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 01 00  // (...............
    1220: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 02 00  // (...............
    1230: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 03 00  // (...............
    1240: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 04 00  // (...............
    1250: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 05 00  // (...............
    1260: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 06 00  // (...............
    1270: 28 00 00 00 00 00 00 00 01 00 01 FF FF FF 07 00  // (...............
    1280: 28 00 00 00 00 00 00 00 01 00 01 00 00 00 00 95  // (...............
    1290: 00 00 00 4F 50 01 00 50 50 01 00 51 50 01 00 52  // ...OP..PP..QP..R
    12A0: 50 01 00 53 50 01 00 54 50 01 00 56 50 01 00 57  // P..SP..TP..VP..W
    12B0: 50 01 00 58 50 01 00 5E 50 01 00 73 50 01 00 76  // P..XP..^P..sP..v
    12C0: 50 01 00 5D 50 01 00 64 50 01 00 6B 50 01 00 72  // P..]P..dP..kP..r
    12D0: 50 01 00 78 50 01 00 00 FE 00 01 04 FE 00 01 08  // P..xP...........
    12E0: FE 00 01 0C FE 00 01 10 FE 00 01 14 FE 00 01 18  // ................
    12F0: FE 00 01 1C FE 00 01 20 FE 00 01 24 FE 00 01 28  // ....... ...$...(
    1300: FE 00 01 2C FE 00 01 30 FE 00 01 34 FE 00 01 38  // ...,...0...4...8
    1310: FE 00 01 3C FE 00 01 40 FE 00 01 44 FE 00 01 48  // ...<...@...D...H
    1320: FE 00 01 4C FE 00 01 50 FE 00 01 54 FE 00 01 58  // ...L...P...T...X
    1330: FE 00 01 5C FE 00 01 60 FE 00 01 64 FE 00 01 68  // ...\...`...d...h
    1340: FE 00 01 6C FE 00 01 70 FE 00 01 74 FE 00 01 78  // ...l...p...t...x
    1350: FE 00 01 7C FE 00 01 80 FE 00 01 84 FE 00 01 88  // ...|............
    1360: FE 00 01 8C FE 00 01 90 FE 00 01 94 FE 00 01 98  // ................
    1370: FE 00 01 9C FE 00 01 A8 FE 00 01 AC FE 00 01 B0  // ................
    1380: FE 00 01 B4 FE 00 01 B8 FE 00 01 BC FE 00 01 C0  // ................
    1390: FE 00 01 C4 FE 00 01 C8 FE 00 01 CC FE 00 01 D0  // ................
    13A0: FE 00 01 D4 FE 00 01 D8 FE 00 01 DC FE 00 01 E0  // ................
    13B0: FE 00 01 E4 FE 00 01 E8 FE 00 01 EC FE 00 01 F0  // ................
    13C0: FE 00 01 F4 FE 00 01 F8 FE 00 01 FC FE 00 01 00  // ................
    13D0: FF 00 01 04 FF 00 01 08 FF 00 01 0C FF 00 01 10  // ................
    13E0: FF 00 01 14 FF 00 01 18 FF 00 01 1C FF 00 01 20  // ............... 
    13F0: FF 00 01 24 FF 00 01 28 FF 00 01 2C FF 00 01 30  // ...$...(...,...0
    1400: FF 00 01 34 FF 00 01 38 FF 00 01 3C FF 00 01 40  // ...4...8...<...@
    1410: FF 00 01 44 FF 00 01 48 FF 00 01 4C FF 00 01 50  // ...D...H...L...P
    1420: FF 00 01 54 FF 00 01 58 FF 00 01 5C FF 00 01 60  // ...T...X...\...`
    1430: FF 00 01 64 FF 00 01 68 FF 00 01 6C FF 00 01 70  // ...d...h...l...p
    1440: FF 00 01 74 FF 00 01 78 FF 00 01 7C FF 00 01 80  // ...t...x...|....
    1450: FF 00 01 84 FF 00 01 88 FF 00 01 8C FF 00 01 90  // ................
    1460: FF 00 01 94 FF 00 01 98 FF 00 01 9C FF 00 01 A0  // ................
    1470: FF 00 01 A4 FF 00 01 A8 FF 00 01 AC FF 00 01 B0  // ................
    1480: FF 00 01 B4 FF 00 01 B8 FF 00 01 BC FF 00 01 C0  // ................
    1490: FF 00 01 C4 FF 00 01 C8 FF 00 01 CC FF 00 01 D0  // ................
    14A0: FF 00 01 D4 FF 00 01 D8 FF 00 01 DC FF 00 01 E0  // ................
    14B0: FF 00 01 E4 FF 00 01 E8 FF 00 01 EC FF 00 01 F0  // ................
    14C0: FF 00 01 F4 FF 00 01 F8 FF 00 01 FC FF 00 01 02  // ................
    14D0: 1D 00 03 03 1D 00 03 8C 1C 00 03 A1 04 00 05 18  // ................
    14E0: 04 00 05 55 02 00 05 FF FF FF 00 1A 27 20 00 05  // ...U........' ..
    14F0: 00 00 00 00 00 2A 00 00 00 08 08 00 04 00 00 F4  // .....*..........
    1500: 25 E5 0F 00 00 00 00 00 00 00 00 00 00 00 00 07  // %...............
    1510: 00 13 00 00 00 13 00 40 00 18 00 00 00 17 00 00  // .......@........
    1520: 00 17 00 00 00 17 00 08 00 17 00 04 20 00 F0 06  // ............ ...
    1530: 00 03 00 00 00 03 04 00 00 03 05 00 00 00 00 9C  // ................
    1540: 00 F4 02 46 04 48 44 00 00 08 00 00 00 08 00 17  // ...F.HD.........
    1550: 10 60 00 13 30 80 00 22 CA 4C 50 30 83 00 00 1C  // .`..0..".LP0....
    1560: 0F DE 00 20 40 04 60 00 00 F0 01 00 10 06 00 00  // ... @.`.........
    1570: 00 00 00 00 00 00 00 38 38 2A 43 07 07 10 6B 88  // .......88*C...k.
    1580: 00 00 1B 2A 88 07 00 00 00 00 00 00 00 00 00 00  // ...*............
    1590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15A0: 00 00 00 00 00 00 00 00 D1 38 80 E1 49 8C 40 00  // .........8..I.@.
    15B0: 00 00 90 C0 04 00 00 00 00 00 01 00 00 00 00 03  // ................
    15C0: 00 00 00 00 00 00 00 00 14 1A 1B 1B 1B 1C 1C 00  // ................
    15D0: 00 00 00 00 00 00 00 00 00 00 00 08 00 C0 02 00  // ................
    15E0: 08 00 00 4A A5 4A 05 00 00 00 00 18 00 00 00 00  // ...J.J..........
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16A0: 00 00 00 00 00 00 00 00 00 00 00 1C 03 8E 03 AA  // ................
    16B0: 02 8E 03 E3 00 AA 02 E3 00 71 00 E3 00 71 00 55  // .........q...q.U
    16C0: 01 71 00 1C 03 55 01 1C 03 8E 03 CF 00 30 FF FF  // .q...U.......0..
    16D0: 0C 00 F3 00 80 01 90 00 00 00 00 00 00 00 00 00  // ................
    16E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1710: 00 00 00 00 08 80 01 05 00 00 00 0E 10 00 40 3F  // ..............@?
    1720: FF 3F 0F 00 00 00 00 2B 00 00 00 22 00 00 00 10  // .?.....+..."....
    1730: 00 00 00 10 00 00 00 00 00 00 00 14 00 00 00 00  // ................
    1740: 00 00 00 CC 01 00 00 00 00 00 00 00 00 00 00 01  // ................
    1750: 00 00 00 67 54 13 02 20 31 45 76 88 00 00 00 10  // ...gT.. 1Ev.....
    1760: 32 54 76 98 0A 00 00 00 02 00 00 04 00 00 00 64  // 2Tv............d
    1770: 57 32 10 01 23 65 47 88 00 00 00 60 82 31 74 95  // W2..#eG....`.1t.
    1780: 0A 00 00 00 00 00 00 01 00 00 00 67 54 13 02 20  // ...........gT.. 
    1790: 31 54 67 88 00 00 00 10 32 54 76 98 0A 00 00 00  // 1Tg.....2Tv.....
    17A0: 02 00 00 04 00 00 00 64 57 13 20 01 23 75 46 88  // .......dW. .#uF.
    17B0: 00 00 00 40 21 96 83 57 0A 00 00 00 00 00 00 01  // ...@!..W........
    17C0: 00 00 00 12 30 45 76 67 54 13 02 88 00 00 00 10  // ....0EvgT.......
    17D0: 32 54 76 98 0A 00 00 00 04 00 00 04 00 00 00 02  // 2Tv.............
    17E0: 31 75 46 64 57 32 10 88 00 00 00 40 21 96 83 57  // 1uFdW2.....@!..W
    17F0: 0A 00 00 00 00 00 00 01 00 00 00 20 31 45 76 67  // ........... 1Evg
    1800: 54 13 02 88 00 00 00 10 32 54 76 98 0A 00 00 00  // T.......2Tv.....
    1810: 04 00 00 04 00 00 00 01 23 75 46 64 57 32 10 88  // ........#uFdW2..
    1820: 00 00 00 60 82 31 74 95 0A 00 00 00 00 00 00 01  // ...`.1t.........
    1830: 00 00 00 20 31 64 75 67 54 13 02 88 00 00 00 10  // ... 1dugT.......
    1840: 32 54 76 98 0A 00 00 00 04 00 00 04 00 00 00 01  // 2Tv.............
    1850: 23 75 46 64 57 32 10 88 00 00 00 97 42 53 01 68  // #uFdW2......BS.h
    1860: 0A 00 00 00 00 00 00 01 00 00 00 20 31 65 74 67  // ........... 1etg
    1870: 54 13 02 88 00 00 00 10 32 54 76 98 0A 00 00 00  // T.......2Tv.....
    1880: 04 00 00 04 00 00 00 10 23 75 46 64 57 32 10 88  // ........#uFdW2..
    1890: 00 00 00 96 32 54 70 18 0A 00 00 00 00 00 00 01  // ....2Tp.........
    18A0: 00 00 00 67 54 13 02 10 32 74 56 88 00 00 00 10  // ...gT...2tV.....
    18B0: 32 54 76 98 0A 00 00 00 02 00 00 04 00 00 00 64  // 2Tv............d
    18C0: 57 32 01 01 23 75 46 88 00 00 00 97 32 54 60 18  // W2..#uF.....2T`.
    18D0: 0A 00 00 00 00 00 00 01 00 00 00 67 54 13 02 20  // ...........gT.. 
    18E0: 31 45 76 88 00 00 00 10 32 54 76 98 0A 00 00 00  // 1Ev.....2Tv.....
    18F0: 02 00 00 04 00 00 00 64 57 32 10 01 32 65 47 88  // .......dW2..2eG.
    1900: 00 00 00 97 42 53 01 68 0A 00 00 00 00 00 00 00  // ....BS.h........
    1910: 3C 01 04 02 05 03 96 00 1A 06 60 00 00 00 00 00  // <.........`.....
    1920: FF 00 00 00 5E 00 02 00 5F 00 02 00 60 00 02 00  // ....^..._...`...
    1930: 61 00 02 00 62 00 02 00 63 00 02 00 64 00 02 00  // a...b...c...d...
    1940: 65 00 02 00 66 00 02 00 67 00 02 00 68 00 02 00  // e...f...g...h...
    1950: 69 00 02 00 6A 00 02 00 6B 00 02 00 6C 00 02 00  // i...j...k...l...
    1960: 6D 00 02 00 FF 00 04 00 3B 00 06 00 44 00 CA 00  // m.......;...D...
    1970: 21 00 65 00 FF 00 08 00 3A 00 0B 00 3B 00 06 00  // !.e.....:...;...
    1980: 44 00 63 00 FF 00 0A 00 50 00 33 00 A2 00 78 00  // D.c.....P.3...x.
    1990: FF 00 06 00 94 00 13 00 95 00 09 00 8C 00 90 00  // ................
    19A0: 8D 00 09 00 A2 00 78 00 FF 00 05 07 0C 00 0E 00  // ......x.........
    19B0: 00 00 00 00 00 00 01 07 0C 00 0C 00 00 02 00 00  // ................
    19C0: 00 00 04 07 0C 00 0E 00 00 03 00 00 00 00 02 03  // ................
    19D0: 36 00 1A 06 64 00 00 00 00 00 48 00 E0 00 47 00  // 6...d.....H...G.
    19E0: 0A 00 76 00 80 00 77 00 ED 00 61 00 40 00 78 00  // ..v...w...a.@.x.
    19F0: 60 00 79 00 F2 00 62 00 40 00 4F 00 04 00 50 00  // `.y...b.@.O...P.
    1A00: E4 00 FF 00 02 07 0C 00 0E 00 00 01 00 00 00 00  // ................
    1A10: 08 00 3C 00 00 08 00 00 07 00 00 00 00 00 00 00  // ..<.............
    1A20: 00 00 01 00 00 00 01 00 02 00 00 00 02 00 03 00  // ................
    1A30: 00 00 03 00 04 00 00 00 04 00 05 00 00 00 05 00  // ................
    1A40: 06 00 00 00 06 00 07 00 00 00 07 00 08 00 01 01  // ................
    1A50: 00 00 00 00 C8 00 02 01 D6 09 80 02 A0 00 E0 01  // ................
    1A60: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    1A70: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    1A80: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    1A90: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    1AA0: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    1AB0: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    1AC0: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    1AD0: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    1AE0: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    1AF0: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    1B00: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    1B10: 03 00 00 00 00 00 00 00 00 00 EC 3C 34 00 02 01  // ...........<4...
    1B20: 00 00 00 00 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A  // .....*.*..***..*
    1B30: 00 2A 2A 15 00 2A 2A 2A 15 15 15 15 15 3F 15 3F  // .**..***.....?.?
    1B40: 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F  // ..???..?.???.???
    1B50: 74 00 01 01 10 01 06 12 11 01 16 12 13 01 06 6A  // t..............j
    1B60: 14 01 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA  // ...j...U...U....
    1B70: 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12  // ....e...f...!...
    1B80: 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB  // "..j#..U$...E...
    1B90: 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70  // F...u...v......p
    1BA0: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    1BB0: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    1BC0: F6 01 0A 74 14 00 02 01 02 00 08 00 80 00 00 02  // ...t............
    1BD0: 00 04 00 08 40 00 FF FF A6 09 0F 00 02 22 03 AF  // ....@........"..
    1BE0: 09 00 00 77 40 00 00 80 00 18 00 00 00 1C 00 00  // ...w@...........
    1BF0: 00 00 00 00 76 00 00 00 00 00 00 00 00 00 00 00  // ....v...........
    1C00: 00 00 01 00 00 00 01 00 00 00 0D 00 00 00 64 0A  // ..............d.
    1C10: 00 00 B0 04 00 00 E8 03 00 00 94 07 00 00 F2 04  // ................
    1C20: 00 00 C5 05 00 00 F2 04 00 00 C5 05 00 00 B0 04  // ................
    1C30: 00 00 C1 04 00 00 C1 04 00 00 2A 03 00 00 C1 04  // ..........*.....
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    1C50: 00 00 E0 01 00 00 61 00 00 00 26 02 00 00 3D 01  // ......a...&...=.
    1C60: 00 00 6B 01 00 00 3D 01 00 00 6B 01 00 00 A2 01  // ..k...=...k.....
    1C70: 00 00 E7 01 00 00 E7 01 00 00 2C 01 00 00 E7 01  // ..........,.....
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 81 00  // ................
    1C90: 00 00 10 00 00 00 1E 00 00 00 01 01 01 01 01 01  // ................
    1CA0: 01 01 01 01 01 01 01 01 00 01 00 00 00 00 00 00  // ................
    1CB0: 00 00 00 00 00 00 00 00 00 00 B8 0B 00 00 B8 0B  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B8 0B  // ................
    1CD0: 00 00 33 04 00 00 33 04 00 00 0F 00 00 00 E4 0C  // ..3...3.........
    1CE0: 00 00 E4 0C 00 00 64 00 00 00 6E 00 00 00 01 00  // ......d...n.....
    1CF0: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00  // ................
    1D00: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1D10: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    1D20: 00 00 64 00 00 00 64 00 00 00 00 00 00 00 01 00  // ..d...d.........
    1D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DB0: 00 00 00 00 00 00 00 00 00 00 F4 01 00 00 F4 01  // ................
    1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    1DD0: 00 00 A2 02 00 00 A2 02 00 00 0A 00 00 00 FA 00  // ................
    1DE0: 00 00 E8 03 00 00 19 00 00 00 32 00 00 00 00 00  // ..........2.....
    1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E00: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    1E10: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    1E20: 00 00 19 00 00 00 0A 00 00 00 00 00 00 00 00 00  // ................
    1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EB0: 00 00 00 00 00 00 00 00 00 00 06 00 00 00 06 00  // ................
    1EC0: 06 00 57 00 5A 00 5F 00 5A 00 E8 03 B0 04 D6 06  // ..W.Z._.Z.......
    1ED0: 08 07 D0 07 D0 07 CA 08 CA 08 00 00 00 00 00 00  // ................
    1EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EF0: 00 00 00 00 00 00 00 00 00 00 06 00 00 00 FF FD  // ................
    1F00: 7F A3 63 37 00 00 19 01 00 00 00 00 00 00 00 00  // ..c7............
    1F10: 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    1F20: 00 00 00 00 00 00 40 01 37 00 00 00 00 00 64 00  // ......@.7.....d.
    1F30: 6E 00 64 00 73 00 73 00 73 00 73 00 00 00 00 00  // n.d.s.s.s.s.....
    1F40: 00 00 00 00 00 00 01 00 00 00 0A 00 00 00 00 00  // ................
    1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 FE 38 00 00 73 0F 00 00 64 00  // .......8..s...d.
    1F70: 64 00 1C 0C 80 0C 00 00 00 00 00 00 00 00 E4 0C  // d...............
    1F80: E4 0C 5C 12 F8 11 40 00 00 01 32 00 3C 00 80 0C  // ..\...@...2.<...
    1F90: 80 0C 80 0C 80 0C 14 00 14 00 00 00 02 00 00 00  // ................
    1FA0: 80 3F 00 00 00 00 B5 37 B8 3E EF 1B 67 BF 4F 40  // .?.....7.>..g.O@
    1FB0: A7 3F 8B 04 00 00 00 00 02 00 EE 7C 8F 3F A6 9B  // .?.........|.?..
    1FC0: 84 3E 44 34 9A 3E 43 AD 09 BE 3D 0F 36 3F F1 00  // .>D4.>C...=.6?..
    1FD0: 00 00 00 01 04 00 CD CC AC 3F E3 A5 9B BD 6F 81  // .........?....o.
    1FE0: E4 3E CA A6 CC BE 04 21 49 3F C0 01 00 00 00 00  // .>.....!I?......
    1FF0: 02 00 00 00 80 3F 00 00 00 00 72 C4 7A 3E 4C 89  // .....?....r.z>L.
    2000: 84 BE DC BA 43 3F 11 02 00 00 00 00 02 00 09 8A  // ....C?..........
    2010: AF 3F 29 5C 0F BD 85 CE EB 3E 10 CC C1 BE 47 20  // .?)\.....>....G 
    2020: 46 3F 9B 01 00 00 00 00 02 00 6A DE 89 3F B8 1E  // F?........j..?..
    2030: 05 3E 8E 75 91 3E 28 49 57 BE E4 2C 3C 3F 73 01  // .>.u.>(IW..,<?s.
    2040: 00 00 00 00 02 00 09 8A AF 3F 29 5C 0F BD 85 CE  // .........?)\....
    2050: EB 3E 10 CC C1 BE 47 20 46 3F 9B 01 00 00 00 00  // .>....G F?......
    2060: 02 00 6A DE 89 3F B8 1E 05 3E 8E 75 91 3E 28 49  // ..j..?...>.u.>(I
    2070: 57 BE E4 2C 3C 3F 73 01 00 00 00 00 02 00 7D 3F  // W..,<?s.......}?
    2080: 95 3F DD 24 06 3E 1D 77 AA 3E EE 77 68 BE C9 1F  // .?.$.>.w.>.wh...
    2090: 3C 3F 55 01 00 00 00 00 02 00 6A BC 74 3F AE 47  // <?U.......j.t?.G
    20A0: 61 3E 73 2E 65 3E 52 ED 13 BE D7 2F 38 3F 43 01  // a>s.e>R..../8?C.
    20B0: 00 00 00 00 02 00 6A BC 74 3F AE 47 61 3E 73 2E  // ......j.t?.Ga>s.
    20C0: 65 3E 52 ED 13 BE D7 2F 38 3F 43 01 00 00 00 00  // e>R..../8?C.....
    20D0: 02 00 0E 2D 12 3F 9A 99 D9 3E 27 83 A3 3D 8D 28  // ...-.?...>'..=.(
    20E0: ED BC E7 E3 32 3F B6 00 00 00 00 00 02 00 6A BC  // ....2?........j.
    20F0: 74 3F AE 47 61 3E 73 2E 65 3E 52 ED 13 BE D7 2F  // t?.Ga>s.e>R..../
    2100: 38 3F 43 01 00 00 F4 01 64 0A 00 00 00 00 00 00  // 8?C.....d.......
    2110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2120: 00 00 00 00 00 00 6B 01 C5 05 00 00 00 00 00 00  // ......k.........
    2130: 00 00 00 00 00 00 3D 01 F2 04 00 00 00 00 00 00  // ......=.........
    2140: 00 00 00 00 00 00 E0 01 B0 04 00 00 00 00 00 00  // ................
    2150: 00 00 00 00 00 00 61 00 C9 01 A2 02 E8 03 A2 01  // ......a.........
    2160: B0 04 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // ................
    2170: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // ................
    2180: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 2C 01  // ..............,.
    2190: 2A 03 00 00 00 00 00 00 00 00 00 00 00 00 E7 01  // *...............
    21A0: C1 04 00 00 00 00 00 00 00 00 00 00 00 00 26 02  // ..............&.
    21B0: 94 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64 0A  // ..............d.
    2200: 00 00 B0 04 00 00 E8 03 00 00 94 07 00 00 F2 04  // ................
    2210: 00 00 C5 05 00 00 F2 04 00 00 C5 05 00 00 B0 04  // ................
    2220: 00 00 C1 04 00 00 C1 04 00 00 2A 03 00 00 C1 04  // ..........*.....
    2230: 00 00 00 02 03 03 78 05 00 00 4C 01 FA 01 F0 0A  // ......x...L.....
    2240: 80 0C 8C 0A 80 0C 48 0D 48 0D 88 13 18 15 18 15  // ......H.H.......
    2250: 18 15 F4 01 20 03 F4 01 01 00 01 02 5D 00 01 00  // .... .......]...
    2260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2290: 00 00 00 00 00 00 00 00 00 00 2A 16 D7 15 84 15  // ..........*.....
    22A0: 30 15 DD 14 8A 14 36 14 E3 13 90 13 3D 13 E9 12  // 0.....6.....=...
    22B0: 96 12 B1 11 CC 10 E7 0F 02 0F 00 00 00 00 03 02  // ................
    22C0: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03  // ................
    22D0: 01 06 36 01 6B 02 37 00 3C 00 90 01 90 01 90 01  // ..6.k.7.<.......
    22E0: 90 01 90 01 90 01 90 01 90 01 90 01 90 01 23 00  // ..............#.
    22F0: AA 05 9E 07 B8 0B 00 00 59 00 F4 01 00 00 01 00  // ........Y.......
    2300: 01 02 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    2310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2320: 00 00 00 00 00 00 0D 54 86 3D BC 05 D2 BD 1F 80  // .......T.=......
    2330: 14 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .>..............
    2340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 9A 99 99 3E 00 00  // .............>..
    2360: C0 3F 33 33 13 40 00 00 20 40 66 66 46 40 0A D7  // .?33.@.. @ffF@..
    2370: 23 3D DD 24 86 3D A2 45 B6 3D 39 B4 C8 3D C7 4B  // #=.$.=.E.=9..=.K
    2380: B7 3E 75 93 98 3D 2F DD 84 BE A3 92 7A 3E E5 61  // .>u..=/.....z>.a
    2390: 21 BD 04 56 8E 3E C5 72 2B BE C0 00 C0 00 01 01  // !..V.>.r+.......
    23A0: 00 00 00 00 00 00 C0 00 C0 00 19 00 19 00 00 00  // ................
    23B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23E0: 00 00 00 00 00 00 00 01 3B 0B 45 01 00 00 34 80  // ........;.E...4.
    23F0: 37 3B 9F AB CD 3E ED 0D 3E 3C 75 93 F8 3E 00 00  // 7;...>..><u..>..
    2400: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24E0: 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00  // ................
    24F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2570: 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66 50  // ..............fP
    2580: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 14  // fQfRfSfUfVfW....
    2590: 00 8C 0E 08 00 B2 20 E8 06 1C 0B C0 75 14 A2 02  // ...... .....u...
    25A0: 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    25B0: 1F CB E8 20 1D E8 F2 1A 32 D2 8D 3E 48 03 89 55  // ... ....2..>H..U
    25C0: 16 E8 C3 0C E8 86 0C E8 02 1A 75 19 E8 D1 0D E8  // ..........u.....
    25D0: B0 02 E8 EF 17 0B C0 74 0C E8 39 00 E8 21 43 E8  // .......t..9..!C.
    25E0: 7D 0C E8 76 43 E8 A9 00 B4 80 E8 E7 1A 8A C7 66  // }..vC..........f
    25F0: C1 E0 10 8A E3 B0 20 66 A3 4A A0 E8 B0 02 E8 90  // ...... f.J......
    2600: 0C E8 14 1D 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ....f_f^f]f[fZfY
    2610: 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 25 26 00 75  // fX.........>%&.u
    2620: 04 89 1E 23 26 1E 2E 8E 1E 1B 26 9C FA 66 C7 06  // ...#&.....&..f..
    2630: 08 01 65 F0 00 F0 C7 06 40 00 46 26 89 1E 42 00  // ..e.....@.F&..B.
    2640: C7 06 B4 01 46 26 89 1E B6 01 C7 06 7C 00 2C 6E  // ....F&......|.,n
    2650: 89 1E 7E 00 C7 06 0C 01 3F 72 89 1E 0E 01 C7 06  // ..~.....?r......
    2660: A8 04 5E 68 89 1E AA 04 2E 8E 1E 23 26 8B C3 A3  // ..^h.......#&...
    2670: 60 68 A3 70 68 A3 82 68 9D 1F C3 50 4D 49 44 46  // `h.ph..h...PMIDF
    2680: 26 90 58 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00  // &.X.............
    2690: 00 BB 00 00 E8 E3 0B 66 C1 E8 10 A3 7A 03 BB 0B  // .......f....z...
    26A0: 00 E8 D6 0B 8D 3E 48 03 66 89 45 18 C3 00 E8 42  // .....>H.f.E....B
    26B0: 1C 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05  // ....u..=.....Ou.
    26C0: E8 5B 31 EB 07 E8 B0 36 EB 02 B4 01 E8 49 1C CF  // .[1....6.....I..
    26D0: E8 20 1C E8 20 00 EB 02 B4 01 E8 3B 1C CB E8 12  // . .. ......;....
    26E0: 1C 80 FC 4F 75 05 E8 35 31 EB 07 E8 8A 36 EB 02  // ...Ou..51....6..
    26F0: B4 01 E8 23 1C CB 1E 06 66 50 66 51 66 52 66 53  // ...#....fPfQfRfS
    2700: 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00  // fUfVfW..<.u)....
    2710: 66 C1 E0 10 2E A1 18 00 8D 36 37 02 8A 3C 80 EF  // f........67..<..
    2720: 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89  // 0.....^..F.f....
    2730: 46 00 E9 2B 01 3C 05 75 18 E8 98 19 E8 6B 19 2E  // F..+.<.u.....k..
    2740: A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0F  // ......V..F..^...
    2750: 01 3C 06 75 32 E8 0A 0B 66 D1 E0 8B EC 89 46 14  // .<.u2...f.....F.
    2760: BB 02 00 E8 14 0B 88 46 18 E8 FE 0A 66 89 46 0C  // .......F....f.F.
    2770: BB 09 00 E8 04 0B 33 C0 66 89 46 00 2E 8B 16 7A  // ......3.f.F....z
    2780: 03 89 56 10 E9 D9 00 3C 0B 75 24 0A DB 75 11 B9  // ..V....<.u$..u..
    2790: 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 C0 00  // ........^..N....
    27A0: 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1 00 3C  // ......8........<
    27B0: 17 75 1D E8 91 0D 74 06 E8 83 09 E8 6C 12 E8 13  // .u....t.....l...
    27C0: 07 E8 78 0A 33 C9 8B C8 8B EC 89 4E 14 E9 90 00  // ..x.3......N....
    27D0: 3C 18 75 45 0A FF 75 10 E8 18 0D 8B EC 89 46 0C  // <.uE..u.......F.
    27E0: E8 4F 07 89 4E 10 EB 78 E8 5C 0D 75 6B BB 00 4C  // .O..N..x.\.uk..L
    27F0: E8 9E 1A 66 0B C0 74 60 23 C9 74 5C E8 30 0D BE  // ...f..t`#.t\.0..
    2800: 00 4C E8 A2 0A 74 51 BE 00 4C B0 40 E8 F1 0A E8  // .L...tQ..L.@....
    2810: E1 0C 8B EC 89 46 0C EB 47 3C 82 75 1A 80 FB 05  // .....F..G<.u....
    2820: 75 15 0A FF 75 0A E8 26 0C 8B EC 89 46 14 EB 30  // u...u..&....F..0
    2830: E8 03 0C 74 1B EB 29 3C 8E 75 15 80 FF 01 74 08  // ...t..)<.u....t.
    2840: 80 FF 02 75 0B 80 C1 02 80 C1 02 E8 4D 0C EB 10  // ...u........M...
    2850: 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07  // ...F.......F....
    2860: 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66  // 2....f.f_f^f]f[f
    2870: 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0  // ZfYfX...Q.......
    2880: 59 C3 E8 B9 1A C3 0C 01 C3 00 50 51 B0 B6 E6 43  // Y.........PQ...C
    2890: B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61  // .3.B...B.a.....a
    28A0: 8A C4 B9 C8 00 E8 AD 16 E6 61 59 58 C3 00 1E 56  // .........aYX...V
    28B0: 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E  // ...>...v........
    28C0: 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC  // ........!..3.2..
    28D0: 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00  // .........&!.^...
    28E0: 57 0B C0 75 0F E8 1E 08 74 25 E8 24 00 F6 C3 04  // W..u....t%.$....
    28F0: 74 F3 EB 11 8B C8 E8 CB 14 23 C1 74 12 E8 11 00  // t........#.t....
    2900: F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6 C3 5F  // ...t._.\(......_
    2910: C3 50 E8 D3 07 E8 1D 14 0A C9 74 11 E8 A8 11 3C  // .P........t....<
    2920: 00 75 1F E8 CB 01 8A EB F6 C5 04 74 15 8D 9C A6  // .u.........t....
    2930: 00 E8 5D 19 0A C0 74 0A E8 88 04 74 05 33 C9 E8  // ..]...t....t.3..
    2940: 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8 B6 15 59 C3  // Q....X.Q._....Y.
    2950: 51 E8 1A 00 75 14 E8 69 01 3C 01 75 0D B9 20 00  // Q...u..i.<.u.. .
    2960: E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8  // .'.u......3.Y.S.
    2970: 1F 19 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 11 19  // ..f=....u.......
    2980: 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 00  // f=....u.[.PR2...
    2990: 19 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04  // .....f..........
    29A0: E2 EC 0A D2 5A 58 C3 E8 3E 07 8D 9C A4 01 E8 E9  // ....ZX..>.......
    29B0: 00 A9 C8 0E 74 52 E8 38 01 F6 C3 08 74 0C 8D 5C  // ....tR.8....t..\
    29C0: 28 E8 DD 00 75 04 E8 62 00 C3 B5 02 E8 FC 00 E8  // (...u..b........
    29D0: 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22 01 E8 6D 03  // .....t!.\(."..m.
    29E0: 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA 00 80 FD 00  // t.......A.......
    29F0: 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00 55 E8  // u8............U.
    2A00: 41 0D B5 02 E8 D6 00 C3 A9 02 00 74 1D B5 04 E8  // A..........t....
    2A10: B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8 10 16 E8 BC  // ......\(........
    2A20: 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8 9B 00  // ..\(............
    2A30: B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D 9C C0  // ...........u....
    2A40: 01 B8 00 55 E8 FC 0C B5 02 E8 17 00 C3 E8 AF 00  // ...U............
    2A50: B5 02 8D 5C 28 E8 57 00 75 02 B5 01 E8 04 00 E8  // ...\(.W.u.......
    2A60: C9 03 C3 8D 9C AC 02 B1 02 E8 C9 17 B5 02 E8 6C  // ...............l
    2A70: 00 C3 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3 04 74  // .......!..u....t
    2A80: 12 8D 5C 28 E8 78 00 E8 5D 00 E8 59 07 8D 5C 28  // ..\(.x..]..Y..\(
    2A90: E8 A4 15 B8 02 00 E8 0E FF C3 B9 48 00 E8 64 14  // ...........H..d.
    2AA0: C3 53 81 C3 05 01 E8 E8 17 24 06 3C 02 5B C3 E8  // .S.......$.<.[..
    2AB0: 10 00 3D 01 04 75 0A 53 83 C3 18 E8 D3 17 5B A8  // ..=..u.S......[.
    2AC0: 01 C3 53 83 C3 12 E8 C8 17 5B C3 8D 9C AC 02 32  // ..S......[.....2
    2AD0: C9 E8 61 17 C3 8D 9C AC 02 E8 B5 17 C3 8D 9C AC  // ..a.............
    2AE0: 02 B1 01 E8 4F 17 C3 8D 9C AC 02 B1 01 E8 5D 17  // ....O.........].
    2AF0: C3 66 50 8D 9C A0 01 E8 97 17 8A D8 66 58 C3 55  // .fP.........fX.U
    2B00: 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1 E3 8D  // WQ.........+....
    2B10: 58 4E E8 7C 17 E8 E3 01 E2 EE 8D 5C 4B E8 71 17  // XN.|.......\K.q.
    2B20: B9 03 00 8B D0 BF 77 2B 85 55 06 74 17 66 8B 05  // ......w+.U.t.f..
    2B30: 8D 9A 4C 02 E8 BA 16 8B 45 04 8D 9A 50 02 E8 C8  // ..L.....E...P...
    2B40: 16 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00 33  // ..........|^...3
    2B50: ED 8B DF E8 3B 17 0B C0 74 09 E8 5D 01 E8 97 00  // ....;...t..]....
    2B60: 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF 8D 5C  // ........U2..o..\
    2B70: 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8 12 17 24  // (.N.=..u.......$
    2B80: 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00 E8 00  // p......T.]......
    2B90: 17 0A C0 74 46 8D 9C A8 00 E8 F5 16 3C 02 75 3B  // ...tF.......<.u;
    2BA0: 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32 E4 03 D8  // f...<.r3....2...
    2BB0: 8B FB B9 04 00 8B DF E8 D7 16 0B C0 74 15 E8 F9  // ............t...
    2BC0: 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55 58 83 F8  // ....u.......UX..
    2BD0: 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F 5D C3 20  // ps....I..u.Y_]. 
    2BE0: 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00 08 80  // .X.<.......<....
    2BF0: 02 E0 01 3C 00 20 00 51 8D 1D E8 94 16 8D 9A C0  // ...<. .Q........
    2C00: 01 E8 05 16 8D 5D 02 E8 87 16 8D 9A C2 01 E8 89  // .....]..........
    2C10: 00 8D 5D 05 E8 7A 16 8D 9A C6 01 E8 7C 00 8D 5D  // ..]..z......|..]
    2C20: 08 E8 6D 16 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2  // ..m.....f.......
    2C30: 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC C0 EF 04  // ................
    2C40: 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4  // .............?..
    2C50: C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01 E8 AA 15 8D  // ................
    2C60: 9A CA 01 8B C1 E8 A1 15 8D 9A CE 01 33 C0 8A C6  // ............3...
    2C70: E8 96 15 8D 9A D0 01 33 C0 8A C2 E8 8B 15 8D 5D  // .......3.......]
    2C80: 0C E8 0D 16 8D 9A D2 01 E8 0F 00 8D 5D 0F E8 00  // ............]...
    2C90: 16 8D 9A D6 01 E8 71 15 59 C3 8B C8 8A D4 66 C1  // ......q.Y.....f.
    2CA0: C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 58  // ...............X
    2CB0: 15 83 C3 02 8B C2 E8 50 15 C3 8D 5D 11 E8 D1 15  // .......P...]....
    2CC0: 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A C4 C0  // ........t.......
    2CD0: E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A  // ..$.<.u...@<.u..
    2CE0: C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2  // .....t......t...
    2CF0: FB 8B C2 8D 9A D8 01 E8 0F 15 C3 3C 01 74 3D 8B  // ...........<.t=.
    2D00: D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 FA 14 0F  // ....$?.<..P.....
    2D10: B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 EA 14 0F  // ..........L.....
    2D20: B6 DE C1 EB 06 C1 E3 02 2E F7 A7 D7 2C 2E F7 B7  // ............,...
    2D30: D5 2C 8D 9A 4E 02 E8 D0 14 83 C5 08 C3 10 00 0A  // .,..N...........
    2D40: 00 04 00 03 00 05 00 04 00 10 00 09 00 8D 9C A6  // ................
    2D50: 00 E8 3D 15 0A C0 74 1F 8D 9C A8 00 51 B1 03 E8  // ..=...t.....Q...
    2D60: 18 00 59 0B DB 74 10 E8 27 15 32 C0 66 3D 00 03  // ..Y..t..'.2.f=..
    2D70: 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8 11 15  // ..u....3..fPR...
    2D80: 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32 E4 3C  // <.u9...r4f...2.<
    2D90: 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F E8 F0  // .v*.......;.s...
    2DA0: 14 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74 08 32  // .........$.8.t.2
    2DB0: E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33 DB 5A  // .........ZfX.3.Z
    2DC0: 66 58 C3 51 8D 9C A6 00 E8 C6 14 0A C0 74 1B 8D  // fX.Q.........t..
    2DD0: 9C A8 00 B1 12 E8 18 00 74 10 E8 B4 14 66 C1 E8  // ........t....f..
    2DE0: 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0 59 C3  // ....u.....2...Y.
    2DF0: 66 50 52 E8 9B 14 3C 70 75 2B 66 C1 E8 10 32 E4  // fPR...<pu+f...2.
    2E00: 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 83 14 38 C8  // .......;.s....8.
    2E10: 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB E8 0B  // t.f...2.........
    2E20: DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51 8D 9C  // .ZfX.3.ZfX.WfQ..
    2E30: C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66 8B D1  // .......=...t.f..
    2E40: E8 AE 0B 83 C7 1C EB EC 66 59 5F C3 50 53 51 B9  // ........fY_.PSQ.
    2E50: 07 00 53 8B DA E8 39 14 83 F8 00 5B 74 09 66 C1  // ..S...9....[t.f.
    2E60: E3 10 8B DA E8 B2 10 59 5B 58 C3 51 53 B9 07 00  // .......Y[X.QS...
    2E70: E8 BF 10 5B 59 C3 66 50 53 83 C3 06 E8 12 14 5B  // ...[Y.fPS......[
    2E80: 8B C8 66 C1 E1 10 53 83 C3 02 E8 04 14 8B C8 5B  // ..f...S........[
    2E90: 66 58 C3 8D 9C A0 01 32 C9 E8 99 13 C3 57 B9 20  // fX.....2.....W. 
    2EA0: 00 E8 9A 10 5F C3 53 51 E8 19 00 32 E4 8A C5 C1  // ...._.SQ...2....
    2EB0: E0 02 59 8D 9C 78 01 03 D8 E8 D5 13 5B C3 B1 02  // ..Y..x......[...
    2EC0: E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98 01 E8  // ..........S.....
    2ED0: 7B 13 5B C3 33 C9 E8 F3 10 75 3C 66 BA 37 F1 FF  // {.[.3....u<f.7..
    2EE0: FF 66 33 C0 E8 3C 03 33 C0 E8 1A 02 74 1C A9 C8  // .f3..<.3....t...
    2EF0: 0E 74 F6 E8 1B FA F6 C3 04 75 05 F6 C3 18 74 E9  // .t.......u....t.
    2F00: E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B 00 75 08 E8  // ...P...X.....u..
    2F10: 20 00 8B C1 E8 90 FA C3 66 50 E8 1F 03 8B C8 66  //  .......fP.....f
    2F20: 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 F4 02 66  // X.fRf.....3....f
    2F30: 5A C3 50 53 52 E8 E0 FF 75 09 33 C0 E8 C7 01 8B  // Z.PSR...u.3.....
    2F40: C8 EB 10 83 F9 02 74 0B E8 7B 06 80 FB 01 75 03  // ......t..{....u.
    2F50: 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF  // ...Z[X.Vf3.f....
    2F60: FF E8 9E 05 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8  // ....f........t..
    2F70: 05 00 E8 7E 05 5E C3 50 51 E8 6C 01 50 32 C0 E8  // ...~.^.PQ.l.P2..
    2F80: 90 02 E8 CC 00 E8 7F 00 8D 9C 08 03 E8 02 13 38  // ...............8
    2F90: E8 74 0A 8A C5 E8 59 12 B0 02 E8 75 02 58 E8 79  // .t....Y....u.X.y
    2FA0: 00 66 51 8D 9C A4 01 E8 E7 12 66 8B C8 8B D3 8D  // .fQ.......f.....
    2FB0: 9C D0 02 E8 DB 12 66 3B C1 75 16 53 8D 9C AA 01  // ......f;.u.S....
    2FC0: E8 CE 12 8B C8 8D 9C D6 02 E8 C5 12 3B C1 5B 74  // ............;.[t
    2FD0: 05 B0 02 E8 3C 02 66 59 E8 71 FE E8 FF 01 66 25  // ....<.fY.q....f%
    2FE0: FF 0F 00 00 59 58 66 BA FF FF FF FF 33 D0 E8 11  // ....YXf.....3...
    2FF0: 05 33 D2 C3 53 66 50 8D 9C C8 02 E8 93 12 8A C4  // .3..SfP.........
    3000: E8 EE 11 66 58 5B C3 53 66 50 8D 9C C8 02 E8 80  // ...fX[.SfP......
    3010: 12 8A E0 E8 DB 11 66 58 5B C3 8D 9C C8 02 E8 70  // ......fX[......p
    3020: 12 32 C0 E8 CB 11 C3 66 52 52 32 ED 83 C1 02 B8  // .2.....fRR2.....
    3030: 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 8B C2 8A CF  // ....f3...ZQf....
    3040: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    3050: C3 53 E8 48 01 66 C1 E2 10 E8 36 01 8D 9C 98 01  // .S.H.f....6.....
    3060: E8 2E 12 8A E8 8D 9C AC 02 E8 25 12 8A C8 E8 74  // ..........%....t
    3070: 0B 8A EB 5B C3 57 53 53 E8 D6 FF E8 14 01 5B E8  // ...[.WSS......[.
    3080: 86 0B 74 61 80 FD 00 75 29 53 E8 19 FE 66 8B D0  // ..ta...u)S...f..
    3090: E8 54 FA 8A CD 51 E8 25 FE 8A FD 59 E8 88 FF 5B  // .T...Q.%...Y...[
    30A0: E8 EE 11 66 25 FF FF 00 00 66 3B C8 73 34 32 DB  // ...f%....f;.s42.
    30B0: EB 33 80 FD 02 75 11 E8 2C 01 8D 1F E8 D2 11 3D  // .3...u..,......=
    30C0: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 C1  // t@v.2......u.S..
    30D0: 00 B3 03 E8 EE 0A 5B E8 B7 11 3B C2 76 04 32 DB  // ......[...;.v.2.
    30E0: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 D6 0C 23 F0  // .....[_.S.....#.
    30F0: 74 09 8B C6 E8 5A 0B 8B F3 0B DB 5B C3 51 E8 31  // t....Z.....[.Q.1
    3100: FE E8 0F 00 59 C3 51 50 E8 B9 0C 8B C8 58 E8 02  // ....Y.QP.....X..
    3110: 00 59 C3 57 53 E8 EA 0C 0B C0 74 09 8B 1D 83 C7  // .Y.WS.....t.....
    3120: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    3130: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    3140: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 00 01 E8 B4 0D  // ...t............
    3150: 83 C6 08 E8 1E 0C EB E8 BB F0 46 B8 5A A5 E8 A8  // ..........F.Z...
    3160: 10 C3 53 66 50 8D 9C 08 03 E8 25 11 8A E8 66 58  // ..SfP.....%...fX
    3170: 5B C3 53 66 50 8D 9C C8 02 E8 15 11 8A C8 66 58  // [.SfP.........fX
    3180: 5B C3 53 66 50 8D 9C C9 02 E8 05 11 8A C8 66 58  // [.SfP.........fX
    3190: 5B C3 53 8D 5C 14 E8 F8 10 8B D0 5B C3 53 66 50  // [.S.\......[.SfP
    31A0: 8D 5C 16 E8 EB 10 8B D0 66 58 5B C3 53 66 50 8D  // .\......fX[.SfP.
    31B0: 9C 18 03 E8 DB 10 66 8B D0 66 58 5B C3 53 66 50  // ......f..fX[.SfP
    31C0: 8D 9C 1C 03 E8 CA 10 66 8B D0 66 58 5B C3 53 66  // .......f..fX[.Sf
    31D0: 50 8D 5C 10 E8 BA 10 8B C8 66 58 5B C3 53 8D 5C  // P.\......fX[.S.\
    31E0: 08 E8 AD 10 5B C3 53 66 50 8D 5C 0C E8 A2 10 8B  // ....[.SfP.\.....
    31F0: D0 66 58 5B C3 8D 5C 04 E8 96 10 C3 51 8D 5C 04  // .fX[..\.....Q.\.
    3200: 32 C9 E8 30 10 59 C3 8D 9C 18 03 66 8B C2 E8 E0  // 2..0.Y.....f....
    3210: 0F C3 53 51 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF  // ..SQ.....$......
    3220: 59 5B C3 53 66 50 51 66 8B C8 BB 00 00 E8 02 0A  // Y[.SfPQf........
    3230: 23 C2 0B C1 E8 04 0A 59 66 58 5B C3 BB 00 00 E8  // #......YfX[.....
    3240: F0 09 66 25 CA 0E 00 00 C3 80 FA 14 C3 E8 92 0C  // ..f%............
    3250: E8 20 0C E8 FE 0B 75 06 E8 7B 0B E8 02 0C C3 B0  // . ....u..{......
    3260: 01 C3 55 B3 01 E8 E8 0D 5D C3 66 53 66 BB 04 00  // ..U.....].fSf...
    3270: 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1 E3 10 BB  // .....3.f[.Uf....
    3280: 00 00 E8 CB 0D 5D C3 E8 20 0D BB 0A 00 E8 AB 09  // .....].. .......
    3290: C3 BB 0A 00 E8 9B 09 66 8B C8 E8 0D 0D BB 0A 00  // .......f........
    32A0: 66 2B C1 E8 95 09 C3 E8 29 00 0B C9 74 22 E8 A6  // f+......)...t"..
    32B0: FC E8 02 07 66 51 66 8B C8 BB 07 00 E8 73 09 66  // ....fQf......s.f
    32C0: 25 00 FE 00 00 66 0B C1 E8 70 09 66 59 0C 01 C3  // %....f...p.fY...
    32D0: 32 C0 C3 E8 49 02 0B C9 75 06 E8 55 FC E8 4F 02  // 2...I...u..U..O.
    32E0: 51 E8 4E FC 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8  // Q.N.f...3....t..
    32F0: E7 02 75 F6 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3  // ..u.3...X#.f....
    3300: A8 10 75 63 E8 C1 06 66 C1 E6 10 33 C0 E8 F6 FD  // ..uc...f...3....
    3310: 74 35 E8 D3 FD 50 51 8B C8 E8 D7 01 85 C1 59 58  // t5...PQ.......YX
    3320: 74 0D 50 E8 CF FE 24 03 3C 03 58 75 E0 EB 0C 50  // t.P...$.<.Xu...P
    3330: E8 C2 FE A8 01 58 74 D5 E8 CC FC 50 E8 69 07 58  // .....Xt....P.i.X
    3340: B5 00 E8 B7 FE EB C6 E8 A9 01 E8 9B FD E8 13 01  // ................
    3350: B1 00 E8 23 07 66 C1 EE 10 E8 65 06 A8 20 75 3B  // ...#.f....e.. u;
    3360: A8 40 75 03 E8 F5 07 E8 4C 06 0A C0 75 00 E8 82  // .@u.....L...u...
    3370: 01 E8 74 FD E8 6F FE E8 CF FE 75 14 E8 47 02 0A  // ..t..o....u..G..
    3380: DB 74 0D E8 81 FC E8 1F 07 B5 00 E8 6E FE EB 08  // .t..........n...
    3390: E8 06 07 B5 01 E8 64 FE E8 CE 00 C3 E8 25 0A C3  // ......d......%..
    33A0: E8 9B FD E8 84 06 33 C9 E8 84 01 66 33 D2 66 33  // ......3....f3.f3
    33B0: C0 E8 6F FE E8 59 07 E8 52 00 B1 FF E8 77 00 33  // ..o..Y..R....w.3
    33C0: C0 E8 42 FD 74 0A E8 1F FD 50 E8 F9 06 58 EB F1  // ..B.t....P...X..
    33D0: 32 C9 E8 A6 01 E8 EC 09 0B C0 C3 E8 60 FD E8 49  // 2...........`..I
    33E0: 06 66 33 C0 66 BA 00 F0 FF FF E8 15 01 51 B1 01  // .f3.f........Q..
    33F0: E8 6E 01 59 E8 2C 07 33 C0 E8 0A FD 74 0A E8 E7  // .n.Y.,.3....t...
    3400: FC 50 E8 B2 06 58 EB F1 E8 D8 06 C3 B8 02 00 E8  // .P...X..........
    3410: D6 FC 74 21 B8 02 00 E8 F7 F4 F6 C3 04 75 0A E8  // ..t!.........u..
    3420: A2 09 83 E0 FD E8 A5 09 C3 66 B8 02 00 00 00 E8  // .........f......
    3430: F1 FD E8 3D F6 C3 E8 0B 08 74 13 BB 02 00 E8 F1  // ...=.....t......
    3440: 07 8A E1 E8 F5 07 E8 B2 06 0C 01 C3 0C 01 C3 51  // ...............Q
    3450: E8 F1 07 74 0C 8A CC BB 02 00 E8 D5 07 8A C4 8A  // ...t............
    3460: E1 59 C3 B0 01 E8 EE 05 C3 B0 00 E8 E8 05 C3 E8  // .Y..............
    3470: 5A 0B 75 18 E8 7C 00 E8 6E FC 80 F9 01 75 0E 51  // Z.u..|..n....u.Q
    3480: E8 16 06 B5 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF  // ......t.Y.......
    3490: 51 E8 23 06 B5 00 E8 63 FD 59 C3 B8 02 00 E8 47  // Q.#....c.Y.....G
    34A0: FC 74 03 E8 47 06 C3 E8 AB 04 3B C1 7C 35 8B C1  // .t..G.....;.|5..
    34B0: E8 EB 04 E8 FF 06 8B C8 51 E8 1B 05 E8 DF 04 59  // ........Q......Y
    34C0: E8 F2 06 3B C8 72 02 8B C1 8D 5C 04 E8 3A 0D 32  // ...;.r....\..:.2
    34D0: C9 E8 27 0A FE C1 38 C1 72 F7 8D 5C 04 E8 B1 0D  // ..'...8.r..\....
    34E0: 0B C0 C3 33 C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02  // ...3....H3......
    34F0: 03 D8 C3 53 BB 03 00 E8 38 07 66 25 FF 0F 00 00  // ...S....8.f%....
    3500: 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 22 07  // [.SfPfQf......".
    3510: 66 23 C2 66 0B C1 E8 22 07 66 59 66 58 5B C3 66  // f#.f...".fYfX[.f
    3520: 50 BB 05 00 E8 0B 07 25 FF 0F 8B C8 66 58 C3 E8  // P......%....fX..
    3530: 92 08 23 C8 66 50 BB 05 00 E8 F6 06 25 00 F0 0B  // ..#.fP......%...
    3540: C1 E8 F7 06 66 58 C3 66 50 53 BB 06 00 E8 E2 06  // ....fX.fPS......
    3550: A8 10 75 09 BB F0 46 E8 37 0D 3D 5A A5 5B 66 58  // ..u...F.7.=Z.[fX
    3560: C3 66 50 53 BB 06 00 E8 C8 06 80 F1 01 C0 E1 04  // .fPS............
    3570: 24 EF 0A C1 E8 C4 06 5B 66 58 C3 53 66 50 BB F8  // $......[fX.SfP..
    3580: 46 E8 0D 0D 8A C1 E8 68 0C 66 58 5B C3 53 BB F8  // F......h.fX[.S..
    3590: 46 E8 FD 0C 83 E0 01 5B C3 53 66 50 BB 07 00 E8  // F......[.SfP....
    35A0: 90 06 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53  // .....fX..t...[.S
    35B0: BB 07 00 E8 7C 06 80 E4 FE 80 FD 06 74 03 80 CC  // ....|.......t...
    35C0: 01 E8 77 06 5B C3 66 50 BB 06 00 E8 64 06 24 40  // ..w.[.fP....d.$@
    35D0: C0 E8 06 8A D8 66 58 C3 C3 50 66 51 E8 09 FB 83  // .....fX..PfQ....
    35E0: EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC C0  // ....f3.f.F.3....
    35F0: 01 8D 1D E8 9B 0C 0B C0 74 22 8B DF B0 00 E8 12  // ........t"......
    3600: 01 74 14 8B DF E8 6E F8 66 8B 46 00 66 3B C8 72  // .t....n.f.F.f;.r
    3610: 06 8B D7 66 89 4E 00 83 C7 1C EB D5 0B D2 74 0A  // ...f.N........t.
    3620: 8D 9C A4 01 E8 25 F8 E9 88 00 66 33 C0 66 89 46  // .....%....f3.f.F
    3630: 00 8D BC 4C 02 33 D2 8D 1D E8 55 0C 0B C0 74 58  // ...L.3....U...tX
    3640: 66 50 E8 90 F4 3C 01 66 58 74 05 3D 40 06 73 43  // fP...<.fXt.=@.sC
    3650: 66 52 66 8B D0 8D 5D 04 E8 36 0C E8 5D 00 8B CA  // fRf...]..6..]...
    3660: 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8 FD F7 5E B0  // fZt/V.........^.
    3670: 00 E8 9F 00 74 1D 8D 1D E8 16 0C 8B D9 8B 47 06  // ....t.........G.
    3680: 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1 66  // f....G.f;F.r...f
    3690: 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C A4  // .F........t.V...
    36A0: 01 8B F2 E8 C5 F7 5E 53 8D 9C BA 01 33 C0 E8 58  // ......^S....3..X
    36B0: 0B 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8 5F  // .[.....fYX.WSQ._
    36C0: 07 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10  // .;U.u.f.....f...
    36D0: 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7  // ;].u...t.:E.t...
    36E0: 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51  // ...3.......Y[_.Q
    36F0: 66 52 E8 2B 07 3A 65 1A 75 09 0A C0 74 0E 3A 45  // fR.+.:e.u...t.:E
    3700: 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A  // .t......3.....fZ
    3710: 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE 66  // Y..fQfRSSf.....f
    3720: C1 CE 10 E8 6B 0B 5B 66 8B D0 E8 49 F7 3B CA 72  // ....k.[f...I.;.r
    3730: 0A 66 3B CA 72 05 E8 3C F9 75 02 32 C0 5B 66 5A  // .f;.r..<.u.2.[fZ
    3740: 66 59 C3 56 57 E8 A7 FF 8B F7 E8 1E F7 5F 5E C3  // fY.VW........_^.
    3750: 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8 A3  // fPSfQRWVQ.......
    3760: 07 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 81 0A  // .Y.\...f........
    3770: F6 C2 03 75 24 8B C1 24 7F BF 33 38 80 3D FF 0F  // ...u$..$..38.=..
    3780: 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02  // ...:.u.f.E.f....
    3790: 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1  // ............t%..
    37A0: E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75  // .p.....3.......u
    37B0: 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 30  // ..\.f%....f....0
    37C0: 0A EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0  // ................
    37D0: C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80  // .......pr*..us%.
    37E0: EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8 72  // .p..2.P.0...X8.r
    37F0: 05 33 C0 E9 9C 00 E8 28 02 E8 95 0A 0B C0 0F 84  // .3.....(........
    3800: 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C 16  // ....2.........\.
    3810: 8B 05 E8 F4 09 8B 45 06 66 C1 E0 10 8B 45 02 50  // ......E.f....E.P
    3820: E8 92 03 66 C1 E1 10 8B C8 58 8D 1C E8 C2 09 66  // ...f.....X.....f
    3830: 50 8D 5C 04 66 8B C1 E8 B7 09 66 58 66 C1 E8 10  // P.\.f.....fXf...
    3840: 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8  // f......f..fP.\..
    3850: 3F 0A 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C  // ?...fXf..f...@.\
    3860: 14 E8 A5 09 BF 93 38 83 F9 01 74 11 BF 9B 38 81  // ......8...t...8.
    3870: F9 01 01 74 08 BF A3 38 83 F9 02 75 15 8D 5C 0C  // ...t...8...u..\.
    3880: 66 8B 05 E8 6B 09 8D 5C 10 66 8B 45 04 E8 61 09  // f...k..\.f.E..a.
    3890: 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01  // ..^_ZfY[fX..@...
    38A0: 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01 04  // .@..............
    38B0: 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07 D0  // @....@..........
    38C0: 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02  // .^..@...........
    38D0: 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0  // ^....^..........
    38E0: 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0 02  // ......# ...2 ...
    38F0: 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05 05  // 3 ...b..........
    3900: 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08 08  // ................
    3910: 00 00 00 56 E8 08 07 80 E4 01 3B 04 74 09 83 C6  // ...V......;.t...
    3920: 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53  // ...3....D...^.WS
    3930: 50 E8 EB 06 83 E9 0A E8 E0 00 83 F8 05 76 03 B8  // P............v..
    3940: 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF  // ................
    3950: AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77 00  // .X[_.fSQfR.A..w.
    3960: 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3  // f...f...f.....f.
    3970: E8 66 33 D2 66 F7 F3 E8 3B 02 66 5A 59 66 5B C3  // .f3.f...;.fZYf[.
    3980: 53 66 50 BB 07 00 E8 A9 02 0A C0 66 58 5B C3 53  // SfP........fX[.S
    3990: 66 50 BB 07 00 E8 9A 02 A8 01 66 58 5B C3 53 66  // fP........fX[.Sf
    39A0: 50 8D 5C 06 E8 EA 08 8A C8 66 58 5B C3 51 B9 08  // P.\......fX[.Q..
    39B0: 00 E8 65 05 59 C3 53 8D 5C 08 E8 D4 08 24 03 5B  // ..e.Y.S.\....$.[
    39C0: C3 8D 5C 09 E8 CA 08 C3 51 53 B1 01 8A E8 8D 5C  // ..\.....QS.....\
    39D0: 08 E8 61 08 5B 59 C3 53 8D 1C E8 B4 08 5B C3 53  // ..a.[Y.S.....[.S
    39E0: 8D 5C 04 E8 AB 08 5B C3 53 8D 5C 16 E8 A2 08 5B  // .\....[.S.\....[
    39F0: C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34 00  // .SfR3....fZu..4.
    3A00: 74 16 E8 15 00 40 83 F8 05 73 0D E8 E3 07 48 E8  // t....@...s....H.
    3A10: 0F 00 66 8B C2 E8 D9 07 5B C3 BB 00 4E E8 71 08  // ..f.....[...N.q.
    3A20: C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00 4E B9 32 00  // ...N........N.2.
    3A30: E8 D1 04 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08  // ....Q.....t.....
    3A40: 4E E8 4D 08 66 3B C2 74 07 83 C3 08 E2 F3 0B DB  // N.M.f;.t........
    3A50: 59 C3 C3 00 C3 00 8A E8 BB 20 DF 3C 01 74 02 32  // Y........ .<.t.2
    3A60: DB E8 19 28 E8 0B F7 66 B8 80 06 00 08 66 33 DB  // ...(...f.....f3.
    3A70: 8A D9 8A CD E8 B6 00 C3 66 51 66 52 66 57 66 B8  // ........fQfRfWf.
    3A80: 80 05 00 08 66 BB 00 4C 00 00 66 33 C9 8B CE E8  // ....f..L..f3....
    3A90: 9B 00 66 5F 66 5A 66 59 C3 66 B8 80 07 00 04 66  // ..f_fZfY.f.....f
    3AA0: 33 DB 8B DE E8 86 00 C3 66 B8 80 08 00 04 66 33  // 3.......f.....f3
    3AB0: DB 8B DE E8 77 00 C3 66 B8 80 09 00 04 66 33 DB  // ....w..f.....f3.
    3AC0: 8B DE E8 68 00 C3 C3 66 B8 80 0A 00 04 66 33 DB  // ...h...f.....f3.
    3AD0: 8B DE E8 58 00 E8 19 F0 F6 C3 02 74 03 B0 00 C3  // ...X.......t....
    3AE0: B0 01 C3 66 B8 80 0D 00 00 E8 41 00 C3 66 B8 80  // ...f......A..f..
    3AF0: 0F 00 04 66 33 DB 8A D9 E8 32 00 66 B8 80 0F 00  // ...f3....2.f....
    3B00: 04 66 33 DB 56 E8 F1 02 8B 5C 20 5E E8 1E 00 C3  // .f3.V....\ ^....
    3B10: 66 B8 00 00 00 00 E8 14 00 66 B8 80 0C 00 04 E8  // f........f......
    3B20: 0B 00 C3 66 B8 00 01 00 00 E8 01 00 C3 83 EC 1C  // ...f............
    3B30: 8B EC 66 89 46 00 66 89 5E 04 66 89 4E 08 66 89  // ..f.F.f.^.f.N.f.
    3B40: 56 0C 66 89 7E 10 66 89 76 14 8C D0 66 C1 E0 10  // V.f.~.f.v...f...
    3B50: 8B C4 BB 42 00 E8 DB 02 83 C4 1C C3 51 8D 5C 14  // ...B........Q.\.
    3B60: E8 2E 07 66 C1 E0 10 E8 02 00 59 C3 83 EC 10 8B  // ...f......Y.....
    3B70: EC 66 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66  // .f=....v.f.....f
    3B80: 8B C8 66 33 C0 66 89 46 04 66 89 46 00 66 89 46  // ..f3.f.F.f.F.f.F
    3B90: 08 B0 01 88 46 09 66 B8 00 00 00 D0 66 0B C1 66  // ....F.f.....f..f
    3BA0: 89 46 0C 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 82  // .F...f......5...
    3BB0: 02 83 C4 10 C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0  // .....=..v.......
    3BC0: 3F 24 C0 C3 53 51 66 50 B9 68 74 80 FB 03 74 0B  // ?$..SQfP.ht...t.
    3BD0: B9 A0 8C 80 FB 00 75 03 B9 78 69 66 33 D2 8B D1  // ......u..xif3...
    3BE0: 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00 FF FF  // fXY[.fR..f......
    3BF0: 75 13 80 FD 13 74 0E 80 FD 14 74 09 B3 03 80 F9  // u....t....t.....
    3C00: 03 74 02 B3 02 66 5A C3 E8 86 06 66 C1 E8 10 0B  // .t...fZ....f....
    3C10: C0 74 1C 53 83 C3 06 E8 77 06 5B 3D E0 01 72 0F  // .t.S....w.[=..r.
    3C20: 53 83 C3 18 E8 6A 06 5B A8 80 75 03 0C 01 C3 32  // S....j.[..u....2
    3C30: C0 C3 53 83 C3 4C E8 26 06 5B C3 53 83 C3 4C E8  // ..S..L.&.[.S..L.
    3C40: 78 05 5B C3 56 E8 B1 01 8B 44 38 83 7C 20 00 5E  // x.[.V....D8.| .^
    3C50: C3 BB 00 50 83 F8 02 74 32 BB 00 54 83 F8 08 74  // ...P...t2..T...t
    3C60: 2A BB 00 58 3D 80 00 74 22 BB 00 5C 3D 00 02 74  // *..X=..t"..\=..t
    3C70: 1A BB 00 60 3D 00 04 74 12 BB 00 64 3D 00 08 74  // ...`=..t...d=..t
    3C80: 0A BB 00 68 83 F8 40 74 02 33 DB C3 57 E8 56 00  // ...h..@t.3..W.V.
    3C90: 74 0A 8B 5D 02 E8 08 00 0B DB 5F C3 33 DB 5F C3  // t..]......_.3._.
    3CA0: 52 51 0B DB 74 1B 56 E8 36 01 03 DE 5E 33 C9 8A  // RQ..t.V.6...^3..
    3CB0: 4F 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33  // O..?.t.:.t.....3
    3CC0: DB 0B DB 59 5A C3 56 51 E8 15 01 32 C9 8D 7C 08  // ...YZ.VQ...2..|.
    3CD0: 3B 5D 04 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33  // ;].t......:L.r.3
    3CE0: FF 0B FF 59 5E C3 56 51 E8 F5 00 32 C9 8D 7C 08  // ...Y^.VQ...2..|.
    3CF0: 3B 1D 74 0C 83 C7 10 FE C1 3A 4C 06 72 F2 33 FF  // ;.t......:L.r.3.
    3D00: 0B FF 59 5E C3 56 51 E8 D6 00 32 C9 8D 7C 08 3B  // ..Y^.VQ...2..|.;
    3D10: 45 0C 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF  // E.t......:L.r.3.
    3D20: 0B FF 59 5E C3 57 50 E8 DB FF 8A C3 8B 5D 02 E8  // ..Y^.WP......]..
    3D30: 6E FF 58 5F C3 53 32 C9 B3 01 E8 E8 FF 74 03 8A  // n.X_.S2......t..
    3D40: 4F 02 0A C9 5B C3 53 32 ED B3 02 E8 D7 FF 74 03  // O...[.S2......t.
    3D50: 8A 6F 02 0A ED 5B C3 50 57 8B DA E8 68 FF 75 04  // .o...[.PW...h.u.
    3D60: 33 DB EB 0D B0 14 8B 5D 08 E8 34 FF 74 F2 8B 5F  // 3......]..4.t.._
    3D70: 02 5F 58 C3 66 50 53 51 57 8D 1C 66 25 FF FF 00  // ._X.fPSQW..f%...
    3D80: 00 E8 6D 04 8B D8 E8 3B 00 23 C3 74 31 E8 75 FF  // ..m....;.#.t1.u.
    3D90: 0B FF 74 2A 66 50 66 8B 45 04 8D 5C 0C E8 51 04  // ..t*fPf.E..\..Q.
    3DA0: 66 33 C0 8B 05 8D 5C 04 E8 46 04 66 58 E8 85 FF  // f3....\..F.fX...
    3DB0: E8 93 FF 8D 5C 08 66 33 C0 8B C1 E8 33 04 5F 59  // ....\.f3....3._Y
    3DC0: 5B 66 58 C3 56 E8 18 00 8B 44 04 5E C3 56 E8 0F  // [fX.V....D.^.V..
    3DD0: 00 89 44 04 5E C3 C3 BF 68 03 8B 3D 8B 7D 0C C3  // ..D.^...h..=.}..
    3DE0: BE 68 03 8B 34 8B 74 30 C3 1E 0E 1F BF 68 03 8B  // .h..4.t0.....h..
    3DF0: 3D 8B 7D 0E 83 C7 04 1F C3 BE 68 03 8B 34 8B 74  // =.}.......h..4.t
    3E00: 10 C3 BF 68 03 8B 3D 8B 7D 26 83 C7 04 C3 BE 68  // ...h..=.}&.....h
    3E10: 03 8B 34 8B 74 1A C3 BE 68 03 8B 34 8B 74 3A C3  // ..4.t...h..4.t:.
    3E20: BF 68 03 8B 3D 8B 7D 0A 83 C7 04 B9 07 00 C3 E8  // .h..=.}.........
    3E30: 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6 46  // .........F.f3..F
    3E40: 04 00 89 46 02 06 52 8A D3 8B C5 E8 B1 16 5A 07  // ...F..R.......Z.
    3E50: 83 C4 06 C3 E8 80 FF 66 F7 45 10 01 00 00 00 C3  // .......f.E......
    3E60: 50 E8 73 FF B8 01 00 09 45 10 58 C3 E8 68 FF 88  // P.s.....E.X..h..
    3E70: 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00 66 89  // E..fS..H..f.^.f.
    3E80: 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3 FF  // N...f...........
    3E90: 83 C4 48 66 5B E8 49 01 E8 83 01 E8 0E 00 BB 04  // ..Hf[.I.........
    3EA0: 00 E8 8E FD 66 C1 E8 10 E8 C1 FF C3 83 EC 0C 8B  // ....f...........
    3EB0: EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 74 FF 66  // ...f.........t.f
    3EC0: BB 00 00 00 00 83 C4 0C E8 0C FF 66 8B C3 66 C1  // ...........f..f.
    3ED0: E8 08 66 89 45 28 66 8B C3 66 C1 E0 18 66 89 45  // ..f.E(f..f...f.E
    3EE0: 2C C3 E8 F2 FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8  // ,....f.].f.M..V.
    3EF0: 25 FF 66 8B 44 08 5E C3 B0 06 C3 B0 01 C3 B0 06  // %.f.D.^.........
    3F00: C3 B0 08 C3 53 66 50 66 33 C0 E8 E4 02 83 C3 04  // ....SfPf3.......
    3F10: E2 F8 66 58 5B C3 32 C0 C3 FC E8 74 03 66 C1 CB  // ..fX[.2....t.f..
    3F20: 10 E8 CD 02 66 C1 CB 10 66 81 C3 04 00 04 00 E2  // ....f...f.......
    3F30: E9 C3 FC 66 AD E8 B9 02 83 C3 04 E2 F6 C3 FC E8  // ...f............
    3F40: 4F 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 64 00 E8  // O.f.......fP.d..
    3F50: 10 00 66 58 C3 66 50 B8 50 C3 D1 E1 E8 03 00 66  // ..fX.fP.P......f
    3F60: 58 C3 52 F7 E1 8B CA E8 40 01 66 53 8B D9 66 C1  // X.R.....@.fS..f.
    3F70: E3 10 8B D8 66 B8 0C AC 05 00 B2 00 66 EF B2 04  // ....f.......f...
    3F80: 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00  // f.3.f..s.f.f....
    3F90: 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1  // .u.f.f;.s.f...;.
    3FA0: 72 04 8B C8 EB ED 66 5B 5A C3 66 52 E8 FB 00 66  // r.....f[Z.fR...f
    3FB0: B8 0C AC 05 00 B2 00 66 EF B2 04 66 ED 66 33 D2  // .......f...f.f3.
    3FC0: 66 BB 64 00 00 00 66 F7 F3 66 5A C3 66 50 53 BB  // f.d...f..fZ.fPS.
    3FD0: 07 00 E8 5D FC 25 00 02 35 00 02 0B C0 5B 66 58  // ...].%..5....[fX
    3FE0: C3 66 51 B3 01 E8 68 00 E8 23 FE 66 33 C9 8B 4C  // .fQ...h..#.f3..L
    3FF0: 08 66 C1 E0 0A 0B C9 75 03 B9 00 0C 66 2B C1 E8  // .f.....u....f+..
    4000: 0C FE 66 89 44 04 89 4C 08 66 59 C3 56 1E 0E 1F  // ..f.D..L.fY.V...
    4010: E8 FB FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 BE  // ...f.D.f....^...
    4020: 68 03 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 56 E8  // h..4.t........V.
    4030: C7 FD 8A 6C 33 5E C3 56 E8 BE FD 8A 44 24 80 FD  // ...l3^.V....D$..
    4040: 00 74 05 88 6C 33 0C 02 88 44 24 5E C3 32 C0 C3  // .t..l3...D$^.2..
    4050: 66 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66  // fS.......f.....f
    4060: 89 5E 00 BB 06 00 E8 CA FD 8B EC 66 8B 46 00 83  // .^.........f.F..
    4070: C4 04 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10  // ..f[........f...
    4080: 8B C4 BB 16 00 E8 AB FD 8B EC 66 8B 5E 00 66 8B  // ..........f.^.f.
    4090: 4E 00 66 8B 56 08 83 C4 0C C3 66 B8 C8 91 05 00  // N.f.V.....f.....
    40A0: C3 BF 68 03 8B 3D 8B 7D 12 C3 66 50 8C C8 3D 00  // ..h..=.}..fP..=.
    40B0: C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53  // .u.........t...S
    40C0: 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66  // ...... .....[2.f
    40D0: ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74  // .fX.........u.Kt
    40E0: 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7  // .C;.w.....+.....
    40F0: F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8  // .....+..;.r.u.;.
    4100: 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9  // w.+...+.+.....+.
    4110: 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9  // +.....UV+.......
    4120: 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6  // r.E;.r.w.;.v....
    4130: 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6  // Mx ....+....r...
    4140: 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03  // Mx.........s....
    4150: C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50  // .........3.^]..P
    4160: 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8  // ...t......t.....
    4170: 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0  // X.....RfP....f..
    4180: 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3  // .....$....f.fXZ.
    4190: 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3  // R...f.Z.R...f.Z.
    41A0: E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF  // .1............$.
    41B0: 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8  // ..........RfSfP.
    41C0: 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E  // ..fXf[Z.f...f...
    41D0: E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB  // .......fPf...f..
    41E0: 10 E8 28 FE 66 03 D8 66 81 CB 00 00 00 80 66 58  // ..(.f..f......fX
    41F0: C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE  // .RfS...f[Z.fP...
    4200: E8 D4 FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A  // ......fX.RQfSfP.
    4210: CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF  // ................
    4220: E8 59 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58  // .Y.f..XPf...g.fX
    4230: 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3  // f[YZ.fPQ....S.f.
    4240: C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51  // ...f.....YfX.fPQ
    4250: C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8  // ....;.f..Y..fX..
    4260: 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B  // _...D.f...f.....
    4270: 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53  // ...5.f.......RfS
    4280: E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00  // ...f[Z.. ..J....
    4290: C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3  // .QfR............
    42A0: FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8  // .......t.f......
    42B0: CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59  // .....f.f.....fZY
    42C0: C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1  // .RfS...f[Z.RfS..
    42D0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    42E0: 89 56 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58  // .V......f.f.F.fX
    42F0: 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // Z].fPURfP...V..V
    4300: 08 E8 A6 FD 2E A1 B9 03 B2 18 EF B2 00 66 ED 66  // .............f.f
    4310: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89  // .F.fXZ].fPUR....
    4320: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    4330: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50  // .F.f.F.Z]fXfX.fP
    4340: 52 E8 66 FD B2 18 66 ED 2E A3 B9 03 5A 66 58 C3  // R.f...f.....ZfX.
    4350: 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B  // fRfS.S.f........
    4360: 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB  // .f[fZ.fRfS.=.f..
    4370: 00 00 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF  // .......f[fZ.f...
    4380: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    4390: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    43A0: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    43B0: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    43C0: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    43D0: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    43E0: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    43F0: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    4400: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    4410: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    4420: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    4430: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    4440: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    4450: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    4460: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    4470: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    4480: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    4490: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    44A0: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    44B0: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    44C0: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    44D0: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    44E0: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    44F0: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    4500: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    4510: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    4520: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    4530: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    4540: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 7E A1  // L&;G.uF..k....~.
    4550: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    4560: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 7C A1 26 8B  // ...2.k......|.&.
    4570: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    4580: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    4590: 26 8A 04 32 E4 6B F0 03 8A 84 7E A1 26 01 47 26  // &..2.k....~.&.G&
    45A0: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    45B0: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    45C0: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    45D0: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    45E0: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    45F0: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    4600: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    4610: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    4620: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    4630: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    4640: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    4650: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    4660: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    4670: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    4680: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    4690: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    46A0: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    46B0: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    46C0: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    46D0: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    46E0: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    46F0: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    4700: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    4710: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    4720: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    4730: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    4740: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    4750: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    4760: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    4770: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    4780: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    4790: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    47A0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    47B0: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    47C0: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    47D0: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    47E0: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    47F0: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    4800: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    4810: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    4820: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    4830: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    4840: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    4850: 26 8B 57 02 5B C3 5C 48 51 48 67 48 B6 48 6D 48  // &.W.[.\HQHgH.HmH
    4860: 85 48 9F 48 AA 48 B0 48 53 51 56 8B D8 E8 B0 FE  // .H.H.H.HSQV.....
    4870: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    4880: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    4890: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    48A0: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    48B0: 77 6C 03 F6 2E FF A4 EE 47 26 8B 47 10 26 8B 57  // wl......G&.G.&.W
    48C0: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    48D0: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    48E0: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    48F0: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    4900: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    4910: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    4920: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    4930: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    4940: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    4950: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    4960: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    4970: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    4980: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    4990: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    49A0: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 0C  // ._.......2......
    49B0: A1 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    49C0: 03 F0 8B C3 FF 94 28 A1 26 89 47 08 26 89 57 0A  // ......(.&.G.&.W.
    49D0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 40 A1  // &.G-2.........@.
    49E0: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    49F0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 70 A1 E3 0A 26 D1  // &.O+2.....p...&.
    4A00: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    4A10: C1 E6 02 8B 8C 50 A1 8B B4 52 A1 26 21 4F 04 26  // .....P...R.&!O.&
    4A20: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 78 A1 E3  // !w.&.O*2.....x..
    4A30: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    4A40: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    4A50: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    4A60: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 78 A1 32 ED  // ....&.G*....x.2.
    4A70: 8B 84 50 A1 8B 94 52 A1 E3 06 D1 E0 D1 D2 E2 FA  // ..P...R.........
    4A80: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    4A90: 32 E4 8B F0 8A 8C 78 A1 32 ED E3 0A 26 D1 6F 0A  // 2.....x.2...&.o.
    4AA0: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4AB0: 84 50 A1 8B 94 52 A1 26 21 47 08 26 21 57 0A 26  // .P...R.&!G.&!W.&
    4AC0: 8A 47 2A 32 E4 8B F0 8A 8C 78 A1 32 ED E3 0A 26  // .G*2.....x.2...&
    4AD0: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    4AE0: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    4AF0: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 70 A1  // QV..&.O+2.....p.
    4B00: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    4B10: 32 ED 8B F1 C1 E6 02 8B 8C 50 A1 8B B4 52 A1 26  // 2........P...R.&
    4B20: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    4B30: 8C 78 A1 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .x...&.o.&._...&
    4B40: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 50 A1 8B B4  // .O+2........P...
    4B50: 52 A1 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // R.&!O.&!w....QRW
    4B60: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    4B70: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 28 A1 26 89 47  // ,2.........(.&.G
    4B80: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    4B90: F0 8B C3 FF 94 34 A1 26 8A 47 2D 32 E4 8B F0 03  // .....4.&.G-2....
    4BA0: F0 8B C3 FF 94 40 A1 26 89 47 04 26 89 57 06 8C  // .....@.&.G.&.W..
    4BB0: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    4BC0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 78 A1 32  // .....&.G*....x.2
    4BD0: ED 8B 84 50 A1 8B 94 52 A1 E3 06 D1 E0 D1 D2 E2  // ...P...R........
    4BE0: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    4BF0: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    4C00: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    4C10: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    4C20: FF 94 1C A1 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ...._ZY.SQRVW..&
    4C30: 8A 47 2A 32 E4 8B F0 8A 8C 78 A1 32 ED E3 0A 26  // .G*2.....x.2...&
    4C40: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    4C50: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    4C60: 78 A1 32 ED 8B 84 50 A1 8B 94 52 A1 E3 06 D1 E0  // x.2...P...R.....
    4C70: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    4C80: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    4C90: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    4CA0: E4 8B F0 03 F0 8B C3 FF 94 28 A1 26 89 47 08 26  // .........(.&.G.&
    4CB0: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    4CC0: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    4CD0: F1 8B C3 FF 94 40 A1 26 89 47 14 26 89 57 16 8B  // .....@.&.G.&.W..
    4CE0: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 70 A1 E3  // ..D..F.2.....p..
    4CF0: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    4D00: F6 8B F2 C1 E6 02 8B 84 50 A1 8B 94 52 A1 26 21  // ........P...R.&!
    4D10: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4D20: 78 A1 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // x.2...&.g.&.W...
    4D30: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    4D40: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1C A1  // &.G,2...........
    4D50: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    4D60: 2B 32 ED 8B F1 8A 8C 70 A1 E3 0A 26 D1 6F 06 26  // +2.....p...&.o.&
    4D70: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    4D80: 8B F1 03 F1 8B C3 FF 94 1C A1 59 C3 8B D8 E8 22  // ..........Y...."
    4D90: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    4DA0: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    4DB0: 8B C3 FF 94 1C A1 C3 53 56 8B D8 E8 F5 FB 8B C3  // .......SV.......
    4DC0: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    4DD0: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    4DE0: 94 1C A1 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // ...^[.SQV.......
    4DF0: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    4E00: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    4E10: 03 F1 8B C3 FF 94 1C A1 5E 59 5B C3 53 51 56 8B  // ........^Y[.SQV.
    4E20: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    4E30: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    4E40: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    4E50: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    4E60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 1C A1 5A C3 52  // ,2...........Z.R
    4E70: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    4E80: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    4E90: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    4EA0: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44  // T.&.\.&.L....&.D
    4EB0: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    4EC0: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    4ED0: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    4EE0: 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    4EF0: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    4F00: 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    4F10: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    4F20: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    4F30: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    4F40: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    4F50: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    4F60: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    4F70: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    4F80: F0 03 F0 8B C3 FF 94 28 A1 26 89 47 08 26 89 57  // .......(.&.G.&.W
    4F90: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    4FA0: 8B F8 8A 8D 70 A1 32 ED 8B 84 50 A1 8B 94 52 A1  // ....p.2...P...R.
    4FB0: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    4FC0: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    4FD0: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    4FE0: 8D 70 A1 32 ED 8B 84 50 A1 89 46 F4 8B 84 52 A1  // .p.2...P..F...R.
    4FF0: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    5000: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    5010: 8B C3 FF 94 28 A1 26 89 47 08 26 89 57 0A 8B C3  // ....(.&.G.&.W...
    5020: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    5030: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    5040: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    5050: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    5060: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    5070: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    5080: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    5090: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    50A0: F0 03 F0 8B C3 FF 94 1C A1 8D 66 FA 5F E9 A3 FC  // ..........f._...
    50B0: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    50C0: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    50D0: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    50E0: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 40  // V..&.O-2.......@
    50F0: A1 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    5100: F0 8A 8C 70 A1 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...p...&.o.&._..
    5110: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 50 A1 8B 94  // .&.G+.......P...
    5120: 52 A1 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // R.&!G.&!W....R..
    5130: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    5140: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    5150: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    5160: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    5170: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    5180: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    5190: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    51A0: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    51B0: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    51C0: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    51D0: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    51E0: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    51F0: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    5200: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    5210: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    5220: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    5230: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    5240: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    5250: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    5260: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    5270: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    5280: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    5290: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    52A0: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    52B0: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    52C0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    52D0: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    52E0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    52F0: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    5300: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    5310: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    5320: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    5330: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    5340: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    5350: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    5360: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    5370: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    5380: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    5390: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    53A0: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    53B0: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    53C0: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    53D0: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    53E0: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    53F0: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    5400: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    5410: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    5420: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    5430: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    5440: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    5450: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    5460: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    5470: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    5480: E6 02 8A 94 9D A1 26 01 55 02 26 8B 7F 28 8A 55  // ......&.U.&..(.U
    5490: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    54A0: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    54B0: C0 EA 06 26 88 57 2A 8A 94 9C A1 26 88 57 2C 8D  // ...&.W*....&.W,.
    54C0: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    54D0: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    54E0: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    54F0: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    5500: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    5510: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    5520: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    5530: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    5540: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    5550: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    5560: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    5570: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    5580: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    5590: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    55A0: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    55B0: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    55C0: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    55D0: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    55E0: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    55F0: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    5600: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    5610: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    5620: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    5630: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    5640: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    5650: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    5660: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    5670: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    5680: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    5690: E3 02 8D 46 B8 FF 97 9A A1 E9 72 FF 83 7E F6 00  // ...F......r..~..
    56A0: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    56B0: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    56C0: 4F 04 32 ED E8 83 E8 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    56D0: 4F 04 32 ED E8 7E E8 59 5B C3 53 8B D8 26 8A 47  // O.2..~.Y[.S..&.G
    56E0: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    56F0: ED E8 60 E3 59 5B C3 53 8B D8 66 50 66 52 66 51  // ..`.Y[.S..fPfRfQ
    5700: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    5710: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    5720: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    5730: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    5740: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    5750: 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B  // &._......f...._[
    5760: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    5770: D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53  // .f.............S
    5780: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    5790: 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52  // ...&._...._Z[.SR
    57A0: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    57B0: C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52  // .&._&._....Z[.SR
    57C0: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66  // V..&.\&._......f
    57D0: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    57E0: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    57F0: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    5800: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA  // ...f............
    5810: E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    5820: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    5830: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    5840: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    5850: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    5860: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    5870: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    5880: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    5890: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    58A0: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    58B0: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    58C0: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    58D0: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    58E0: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    58F0: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 23 26 8C  // ZfYfX...P....#&.
    5900: D8 A3 60 68 A3 70 68 A3 82 68 2E 8E 1E 1B 26 A3  // ..`h.ph..h....&.
    5910: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    5920: 00 03 8C 03 00 00 01 00 00 00 00 00 00 00 00 03  // ................
    5930: 01 14 91 02 00 00 1E 02 00 00 AE 58 00 00 B9 3F  // ...........X...?
    5940: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    5950: B4 58 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .X."......O..G..
    5960: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    5970: E8 BB DF B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    5980: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    5990: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    59A0: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    59B0: 00 84 D7 17 8E DB E8 B1 D8 66 0B C0 0F 84 E1 00  // .........f......
    59C0: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 6D 5C 66  // ..f.E(..f....m\f
    59D0: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    59E0: 53 8E DB BE 80 4C E8 67 DD 5B 06 1F 0F 84 B1 00  // S....L.g.[......
    59F0: 53 E8 E3 DF 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S...f.E..E....\.
    5A00: E8 8E E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80  // ...f.E.f.E6.\...
    5A10: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A  // .f.E#f.E:.\..r..
    5A20: C0 75 03 5B EB 7B E8 AE DF 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    5A30: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    5A40: 45 17 0E 2E A1 1D 26 89 45 08 8D 5C 04 E8 41 E8  // E.....&.E..\..A.
    5A50: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    5A60: 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03  // ....E..\..%.[=..
    5A70: 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    5A80: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8  // E..E5.E4..WS..L.
    5A90: 41 D8 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // A.[_..u....%.2..
    5AA0: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    5AB0: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    5AC0: 01 BE 20 4C E8 89 DC 74 55 E8 EA DE 0A C0 75 0E  // .. L...tU.....u.
    5AD0: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 66  // f............:.f
    5AE0: DA 74 06 E8 F5 D8 E8 EB D3 BE 20 4C E8 B8 D7 74  // .t........ L...t
    5AF0: 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 AD DE  // -....,.f. L.L...
    5B00: BE 00 4C E8 B0 DE 66 C1 E8 10 8B D8 32 C0 F6 C7  // ..L...f.....2...
    5B10: 80 74 02 B0 40 E8 E8 D7 B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    5B20: B4 03 C3 56 06 33 C0 8E C0 BE 20 4C E8 A8 DE 8B  // ...V.3.... L....
    5B30: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    5B40: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    5B50: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    5B60: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 3F 72 8C  // ..&.....&....?r.
    5B70: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    5B80: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    5B90: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    5BA0: EF B9 04 00 B4 01 BE 10 5B AC 86 E0 EF 8A E0 FE  // ........[.......
    5BB0: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    5BC0: 14 5B 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .[....B.J.......
    5BD0: EC B9 14 00 BA C0 03 32 E4 BE 1D 5B 8A C4 EE AC  // .......2...[....
    5BE0: EE FE C4 E2 F7 C3 BE 00 4C E8 CA DD 66 C1 E8 10  // ........L...f...
    5BF0: 8B D8 E8 9A DD 75 05 E8 86 DD 75 04 B8 4F 00 C3  // .....u....u..O..
    5C00: B8 4F 03 C3 E8 88 DD 74 53 BE 00 4C 80 FB 00 74  // .O.....tS..L...t
    5C10: 18 80 FB 01 75 05 E8 C6 DD EB 1D 80 FB 02 75 10  // ....u.........u.
    5C20: 8B C1 E8 79 DD D3 E8 8B C8 E8 7B D8 74 2E EB 08  // ...y......{.t...
    5C30: 80 FB 03 75 24 E8 1D DD E8 63 DD 8B D8 D3 E3 50  // ...u$....c.....P
    5C40: 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    5C50: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    5C60: C3 00 0A DB 75 07 8A EF E8 44 D9 EB 05 E8 29 D9  // ....u....D....).
    5C70: 8A F8 B0 4F 32 E4 C3 00 E8 14 DD 74 2C BE 00 4C  // ...O2......t,..L
    5C80: E8 33 DD 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // .3.f.....@u...u.
    5C90: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5  // ........u.......
    5CA0: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    5CB0: C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    5CC0: E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4  // ................
    5CD0: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    5CE0: 66 55 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27  // fUfVfW.........'
    5CF0: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    5D00: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 42 A0  // [fZfYfX.......B.
    5D10: 2E 8B 0E 40 A0 B8 4F 00 C3 00 0A DB 75 06 B7 04  // ...@..O.....u...
    5D20: B3 10 EB 26 80 FB 01 75 14 E8 1B D8 75 21 53 B1  // ...&...u....u!S.
    5D30: 01 0A FF 74 02 B1 00 E8 35 D7 5B EB 0D 80 FB 02  // ...t....5.[.....
    5D40: 75 0D E8 48 D8 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..H.......O2...
    5D50: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    5D60: E8 E4 D7 75 0E 33 C0 53 E8 75 CB 5B 74 05 B0 4F  // ...u.3.S.u.[t..O
    5D70: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    5D80: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5D90: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 5A 5D  // ..P.......X...Z]
    5DA0: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    5DB0: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 5A  // ...P.......X...Z
    5DC0: 5D C3 94 5D AA 96 C3 96 E0 96 87 5E E3 8D 15 8E  // ]..].......^....
    5DD0: 88 8E 0B 8F 99 90 9D 90 A6 93 77 94 FA 94 61 95  // ..........w...a.
    5DE0: FC 96 5E 97 07 9A A0 60 4E 9E 48 5D 48 5D 48 5D  // ..^....`N.H]H]H]
    5DF0: 48 5D 48 5D 48 5D 1E 9F 21 83 75 84 2E 8E 1E 1B  // H]H]H]..!.u.....
    5E00: 26 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // &.&...P........;
    5E10: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    5E20: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    5E30: A8 01 74 41 B5 0B 53 E8 70 41 0A FF 5B 75 0B 80  // ..tA..S.pA..[u..
    5E40: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    5E50: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    5E60: 04 08 00 C6 06 84 04 18 C7 06 0C 01 2C 6A 8C 0E  // ............,j..
    5E70: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    5E80: 50 0E 1F 33 C9 8A C8 E8 BD D6 74 06 E8 4C D5 E8  // P..3......t..L..
    5E90: 42 D0 B2 08 BE 40 4C E8 B6 D8 BE 40 4C E8 07 D4  // B....@L....@L...
    5EA0: 58 5B 0F 84 6E FF 2E 8E 1E 1B 26 0E 07 E8 19 29  // X[..n.....&....)
    5EB0: 0E 1F 53 66 BB 40 4C 00 4C E8 F1 DA BE 00 4C B0  // ..Sf.@L.L.....L.
    5EC0: 20 E8 3C D4 5B 2E 8E 1E 1B 26 0E 07 E8 22 2E E8  //  .<.[....&..."..
    5ED0: 24 00 E8 2E 3D E8 D1 01 E8 8E 01 E8 B4 3E 0E 1F  // $...=........>..
    5EE0: BE 00 4C B0 10 E8 18 D4 E8 FD 2D E8 F5 2D C3 8B  // ..L.......-..-..
    5EF0: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    5F00: 52 00 E8 62 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..b..S.....c...
    5F10: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    5F20: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    5F30: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    5F40: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    5F50: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    5F60: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    5F70: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    5F80: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    5F90: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    5FA0: 8A C4 EE 32 C0 EE 1E 06 E8 4F 2D 0B ED 74 09 1F  // ...2.....O-..t..
    5FB0: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    5FC0: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    5FD0: F7 5B C3 BB 5E 62 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[..^b......}...
    5FE0: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    5FF0: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    6000: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    6010: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    6020: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    6030: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF E0 5F BE  // u............._.
    6040: 01 60 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // .`3..N..........
    6050: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    6060: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    6070: 07 7F 10 32 FF D1 E3 2E 8B 87 1D 60 A2 65 04 88  // ...2.......`.e..
    6080: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    6090: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    60A0: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 1B 26  // ....;.u........&
    60B0: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    60C0: 04 B9 00 20 2E 8B 3E 21 26 26 F6 47 33 01 75 0E  // ... ..>!&&.G3.u.
    60D0: 26 F6 47 09 01 75 1B 2E 8B 3E 1F 26 EB 14 3C 06  // &.G..u...>.&..<.
    60E0: 7E 0B 2E 8B 3E 1D 26 26 8A 67 37 B5 40 66 33 C0  // ~...>.&&.g7.@f3.
    60F0: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    6100: 80 26 87 04 7F 07 1F C3 2E 8E 1E 1B 26 80 FB 10  // .&..........&...
    6110: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    6120: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    6130: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    6140: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    6150: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    6160: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    6170: 30 74 03 E9 96 00 50 E8 30 3E 8A EF BA CC 03 EC  // 0t....P.0>......
    6180: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    6190: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    61A0: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    61B0: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    61C0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    61D0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    61E0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    61F0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    6200: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    6210: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    6220: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    6230: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    6240: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    6250: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    6260: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    6270: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    6280: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    6290: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    62A0: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    62B0: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 0E 88  // .N..F...........
    62C0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    62D0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    62E0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    62F0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    6300: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    6310: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    6320: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    6330: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    6340: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    6350: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    6360: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    6370: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    6380: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    6390: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    63A0: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    63B0: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    63C0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    63D0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    63E0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    63F0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    6400: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    6410: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6420: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    6430: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    6440: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    6450: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    6460: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    6470: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    6480: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    6490: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    64A0: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    64B0: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    64C0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    64D0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    64E0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    64F0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    6500: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    6510: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    6520: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    6530: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    6540: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    6550: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    6560: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    6570: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    6580: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    6590: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    65A0: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    65B0: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    65C0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    65D0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    65E0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    65F0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    6600: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6610: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6620: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6630: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6640: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    6650: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6660: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    6670: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    6680: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    6690: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    66A0: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    66B0: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    66C0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    66D0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    66E0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    66F0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    6700: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    6710: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    6720: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6730: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    6740: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    6750: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    6760: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    6770: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    6780: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    6790: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    67A0: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    67B0: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    67C0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    67D0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    67E0: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    67F0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    6800: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6810: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6820: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    6830: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    6840: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6850: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6860: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    6870: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    6880: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    6890: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    68A0: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    68B0: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    68C0: 00 00 40 05 0F FF 5E 62 00 C0 00 00 00 00 00 00  // ..@...^b........
    68D0: 00 00 00 00 00 00 7E 68 00 C0 00 00 00 00 00 00  // ......~h........
    68E0: 00 00 00 00 00 00 1A 00 1C A0 00 C0 00 00 00 00  // ................
    68F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 1E E8 10 00 2E 8E 1E 1B 26 E8 FE 36 E8 D5 36 E8  // ........&..6..6.
    6910: 76 1A 1F C3 2E 8E 1E 1B 26 C7 06 87 04 60 F9 C6  // v.......&....`..
    6920: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    6930: E8 73 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .s.....&....... 
    6940: C7 06 63 04 D4 03 0E 1F E8 E7 C5 F7 C1 02 00 75  // ..c............u
    6950: 03 E8 80 C5 B8 03 00 E8 57 F4 C3 1E 2E 8E 1E 1B  // ........W.......
    6960: 26 0E 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53  // &...........t..S
    6970: BA C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4  // ............>c..
    6980: 75 2F BE E0 69 B9 40 00 33 DB 9C FA 8A C3 EE 8B  // u/..i.@.3.......
    6990: FB C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A  // ............B...
    69A0: 45 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85  // E....E....J.....
    69B0: 00 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF  // .&.G+.....t1....
    69C0: DE 63 3C 08 74 11 B9 40 00 BF 5E 65 3C 38 74 07  // .c<.t..@..^e<8t.
    69D0: 3C 3F 74 03 BF 9E 65 33 DB 9C FA 8A C3 EE 2E 8A  // <?t...e3........
    69E0: 01 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74  // .B.....J....I<.t
    69F0: 25 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8  // %<8t.<?t*...3.Q.
    6A00: E7 D3 B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67  // .........t.....g
    6A10: 00 59 E2 EA EB 20 E8 D0 D3 B9 10 00 33 DB E8 57  // .Y... ......3..W
    6A20: 00 EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 B7  // ....@.3.Q.(.....
    6A30: 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A  // /..Y..[..*.*.*.*
    6A40: 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.?.?.*.?.*.?
    6A50: 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 D0  // .*.?............
    6A60: 69 8B FB D1 EF 83 E7 0F 2E 8A AD D0 69 8B FB 83  // i...........i...
    6A70: E7 0F 2E 8A 8D D0 69 C3 9C 8A C3 FA EE 2E 8A 05  // ......i.........
    6A80: 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A  // B.G....G....G..J
    6A90: E2 E7 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81  // ............~...
    6AA0: BD 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE  // ...~|.....|.....
    6AB0: 7C 38 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE  // |8...8|.|8...8..
    6AC0: EE 10 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E  // ..8.8|..l.8...<~
    6AD0: 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66  // <.............<f
    6AE0: 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36  // f<.............6
    6AF0: 78 CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18  // x..x~..~.~......
    6B00: 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7  // .p.`>>66.f...<f.
    6B10: 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E  // f<.............>
    6B20: 1E 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66  // .....<~.~<..ffff
    6B30: 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C  // f.f...{;....<f8l
    6B40: 6C 38 CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18  // l8.x.........<~.
    6B50: 7E 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18  // ~<.~.<~.........
    6B60: 7E 3C 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE  // ~<...........0p.
    6B70: 70 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF  // p0...........$f.
    6B80: 66 24 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C  // f$....8||.....||
    6B90: 38 10 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18  // 8............<<.
    6BA0: 18 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C  // ....lll.....ll.l
    6BB0: FE 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18  // .ll..~.|........
    6BC0: 30 60 C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00  // 0`..8l8v..v...0.
    6BD0: 00 00 00 00 18 30 60 60 60 30 18 00 60 30 18 18  // .....0```0..`0..
    6BE0: 18 30 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E  // .0`...|.|......~
    6BF0: 18 18 00 00 00 00 00 00 18 18 30 00 00 00 00 FE  // ..........0.....
    6C00: 00 00 00 00 00 00 00 00 00 38 38 00 06 0C 18 30  // .........88....0
    6C10: 60 C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18  // `...|.....|..x..
    6C20: 18 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C  // ..~.|...0f..|..<
    6C30: 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06  // ..|...<l........
    6C40: 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C  // ..|.|.....|.....
    6C50: 18 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E  // ....|..|..|.|..~
    6C60: 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00  // ..|.............
    6C70: 00 18 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00  // ...0..0`0.......
    6C80: 00 FE 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C  // ....`0...0`.|...
    6C90: 18 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6  // ....|.....~.8l..
    6CA0: FE C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0  // .....ff|ff..<f..
    6CB0: C0 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8  // .f<..lfffl......
    6CC0: C0 C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0  // .....b`|``..|...
    6CD0: DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18  // ..|.........<...
    6CE0: 18 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0  // ..<.<.....p.....
    6CF0: D8 CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6  // .....````b......
    6D00: D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6  // ............|...
    6D10: C6 C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6  // ..|..ff|``..|...
    6D20: C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C  // ..|.........|..|
    6D30: 06 C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6  // ..|.~Z....<.....
    6D40: C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6  // ..|.....l8......
    6D50: FE EE C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C  // .....l888l..fff<
    6D60: 18 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60  // ..<.....0b..|```
    6D70: 60 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C  // ``|..`0.....|...
    6D80: 0C 0C 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00  // ..|..8l.........
    6D90: 00 00 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C  // ....00........x.
    6DA0: 7C CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6  // |.~..`|fff....|.
    6DB0: C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6  // ..|...|...~...|.
    6DC0: FE C0 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE  // ..|..60.00x...v.
    6DD0: C6 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18  // .~.|.`|fff....8.
    6DE0: 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C  // ..<........x.`fl
    6DF0: 78 6C E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE  // xl............l.
    6E00: D6 D6 C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6  // .......ffff...|.
    6E10: C6 C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC  // ..|....ff|`...v.
    6E20: CC 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0  // .|.....f``....|.
    6E30: 7C 06 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC  // |.|.00.006......
    6E40: CC CC 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6  // ..v.....l8......
    6E50: D6 FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6  // ..l....l8l......
    6E60: CE 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70  // .v.|....0d.....p
    6E70: 18 18 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E  // ............p...
    6E80: 18 18 70 00 76 DC 00 00 00 00 00 00 00 10 38 38  // ..p.v.........88
    6E90: 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6  // ll..<f.f<..x....
    6EA0: C6 CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C  // ..v...|...|.|.x.
    6EB0: 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C  // |.~...x.|.~...x.
    6EC0: 7C CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0  // |.~.88x.|.~...|.
    6ED0: 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6  // |.l8|.|...|...|.
    6EE0: FE C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18  // ..|...|...|.f.8.
    6EF0: 18 18 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18  // ..<.|.8...<...8.
    6F00: 18 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C  // ..<..8l.....88.|
    6F10: C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A  // ..............l.
    6F20: 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C  // ~.n.~.......|..|
    6F30: C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C  // ..|....|..|....|
    6F40: C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6  // ..|.|.....v.....
    6F50: C6 CE 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6  // ..v...<...<..8l.
    6F60: C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8  // .l8.......|...~.
    6F70: D8 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E  // .~..8l`.f.l..f<~
    6F80: 18 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C  // .<..>c8.c>...>a<
    6F90: 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18  // .|....x.|.~...8.
    6FA0: 18 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC  // ..<....|..|.....
    6FB0: CC DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6  // ..v.....ff......
    6FC0: F6 CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE  // ....>.>`gc=.>.v.
    6FD0: C6 7E 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C  // .~.|...0`f<....|
    6FE0: 60 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30  // ``.....|.......0
    6FF0: 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18  // |6.>...0l<~.....
    7000: 3C 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36  // <<...6l.l6....l6
    7010: 6C D8 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA  // l...".".".".U.U.
    7020: 55 AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18  // U.U..w.w.w.w....
    7030: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18  // ................
    7040: F8 18 18 18 36 36 36 36 F6 36 36 36 00 00 00 00  // ....6666.666....
    7050: FE 36 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06  // .666........66..
    7060: F6 36 36 36 36 36 36 36 36 36 36 36 00 00 FE 06  // .66666666666....
    7070: F6 36 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36  // .66666......6666
    7080: FE 00 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7090: F8 18 18 18 18 18 18 18 1F 00 00 00 18 18 18 18  // ................
    70A0: FF 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    70B0: 1F 18 18 18 00 00 00 00 FF 00 00 00 18 18 18 18  // ................
    70C0: FF 18 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36  // ............6666
    70D0: 37 36 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30  // 76666670?.....?0
    70E0: 37 36 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00  // 766666..........
    70F0: F7 36 36 36 36 36 37 30 37 36 36 36 00 00 FF 00  // .66666707666....
    7100: FF 00 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00  // ....66...666....
    7110: FF 00 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00  // ....6666........
    7120: FF 18 18 18 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    7130: 3F 00 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18  // ?...............
    7140: 1F 18 18 18 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    7150: FF 36 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18  // .666............
    7160: F8 00 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF  // ................
    7170: FF FF FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0  // ................
    7180: F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF  // ................
    7190: 00 00 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8  // ......f...f..x..
    71A0: CC C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C  // ......b```....ll
    71B0: 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC  // lll...`0`....~..
    71C0: CC D8 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18  // ..p..ffff|...v..
    71D0: 18 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE  // ..8..8l.l8..8l..
    71E0: C6 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66  // .l8.8l..ll..>`8f
    71F0: C6 CC 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6  // ..x...~..~...|..
    7200: E6 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6  // .|..8`...`8.|...
    7210: C6 C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18  // ..............~.
    7220: 18 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18  // ..~.0...0.~...0.
    7230: 0C 00 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18  // ..~.............
    7240: 18 78 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00  // .x0.....~....v..
    7250: 76 DC 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18  // v...|..|........
    7260: 18 00 00 00 00 00 00 00 18 00 00 00 1F 18 18 18  // ................
    7270: F8 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8  // .8...lll....p.0.
    7280: 00 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00  // ......||||......
    7290: 00 00 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    72A0: 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00  // ................
    72B0: 00 00 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99  // .........~......
    72C0: 81 81 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA  // ..~......|......
    72D0: C6 FE 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE  // ..|.......l.....
    72E0: 7C 38 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38  // |8.........8|.|8
    72F0: 10 00 00 00 00 00 00 00 00 00 10 38 38 10 6C EE  // ...........88.l.
    7300: 6C 10 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE  // l.8.......8||...
    7310: 6C 10 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C  // l.8..........<<<
    7320: 18 00 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3  // ................
    7330: E7 FF FF FF FF FF FF 00 00 00 00 18 3C 66 66 66  // ............<fff
    7340: 3C 18 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99  // <...............
    7350: C3 E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC  // ............6x..
    7360: CC CC 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E  // ..x......<fff<.~
    7370: 18 18 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18  // ................
    7380: 78 F8 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6  // x.p......>6>66v.
    7390: 66 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C  // f..........~<ff<
    73A0: 7E DB 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC  // ~...............
    73B0: F0 E0 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E  // ............>~.~
    73C0: 3E 0E 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18  // >.........<~....
    73D0: 7E 3C 18 00 00 00 00 00 00 66 66 66 66 66 66 66  // ~<.......fffffff
    73E0: 00 66 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B  // .ff...........{.
    73F0: 1B 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE  // .........|..`|..
    7400: 7C 0C C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE  // |...|...........
    7410: FE FE FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E  // ..........<~...~
    7420: 3C 18 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18  // <.~.......<~....
    7430: 18 18 18 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    7440: 7E 3C 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E  // ~<..............
    7450: 0C 00 00 00 00 00 00 00 00 00 00 00 30 70 FE 70  // ............0p.p
    7460: 30 00 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0  // 0...............
    7470: FE 00 00 00 00 00 00 00 00 00 00 00 24 66 FF 66  // ............$f.f
    7480: 24 00 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C  // $..........888||
    7490: FE FE 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38  // ............|||8
    74A0: 38 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 8...............
    74B0: 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18  // ..........<<<<..
    74C0: 00 18 18 00 00 00 00 00 36 36 36 36 14 00 00 00  // ........6666....
    74D0: 00 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE  // .........lll.ll.
    74E0: 6C 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C  // lll........|..x<
    74F0: 06 C6 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18  // ..|.........bf..
    7500: 30 66 C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC  // 0f.......8l80v~.
    7510: CC CC 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00  // ..v.............
    7520: 00 00 00 00 00 00 00 00 00 0C 18 30 30 30 30 30  // ...........00000
    7530: 30 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C  // 0........0......
    7540: 0C 18 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38  // ..0.........l8.8
    7550: 6C 00 00 00 00 00 00 00 00 00 00 00 18 18 7E 18  // l.............~.
    7560: 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7570: 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00  // ................
    7580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7590: 00 18 18 00 00 00 00 00 00 00 00 02 06 0C 18 30  // ...............0
    75A0: 60 C0 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6  // `........|......
    75B0: C6 C6 7C 00 00 00 00 00 00 18 78 18 18 18 18 18  // ..|.......x.....
    75C0: 18 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30  // ..~......|.....0
    75D0: 60 C6 FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06  // `........|...<..
    75E0: 06 C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE  // ..|........<l...
    75F0: 0C 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06  // ................
    7600: 06 C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6  // ..|......|......
    7610: C6 C6 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30  // ..|...........00
    7620: 30 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6  // 000......|...|..
    7630: C6 C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06  // ..|......|....~.
    7640: 06 C6 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00  // ..|.............
    7650: 0C 0C 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00  // ................
    7660: 0C 0C 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60  // ............0`.`
    7670: 30 18 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE  // 0...............
    7680: 00 00 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C  // ..........`0....
    7690: 18 30 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18  // .0`......|......
    76A0: 00 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE  // .........|......
    76B0: DC C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6  // ..~......8l.....
    76C0: C6 C6 C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66  // ..........fff|ff
    76D0: 66 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0  // ff.......<f.....
    76E0: C2 66 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66  // .f<.......lfffff
    76F0: 66 6C F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60  // fl........f`d|d`
    7700: 60 66 FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60  // `f........f`d|d`
    7710: 60 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE  // ``.......|......
    7720: C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6  // ..|.............
    7730: C6 C6 C6 00 00 00 00 00 00 3C 18 18 18 18 18 18  // .........<......
    7740: 18 18 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18  // ..<......<......
    7750: D8 D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8  // ..p.............
    7760: CC C6 C6 00 00 00 00 00 00 F0 60 60 60 60 60 60  // ..........``````
    7770: 62 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6  // bf..............
    7780: D6 C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE  // ................
    7790: CE C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // .........|......
    77A0: C6 C6 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60  // ..|.......ffff|`
    77B0: 60 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // ``.......|......
    77C0: D6 D6 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C  // ..|.......fff|xl
    77D0: 66 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06  // ff.......|...p..
    77E0: 06 C6 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18  // ..|......~Z.....
    77F0: 18 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6  // ..<.............
    7800: C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6  // ..|.............
    7810: 6C 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE  // l8..............
    7820: EE C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C  // ............l88l
    7830: C6 C6 C6 00 00 00 00 00 00 66 66 66 66 66 3C 18  // .........fffff<.
    7840: 18 18 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60  // ..<...........0`
    7850: C2 C6 FE 00 00 00 00 00 00 7C 60 60 60 60 60 60  // .........|``````
    7860: 60 60 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18  // ``|..........`0.
    7870: 0C 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C  // .........|......
    7880: 0C 0C 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00  // ..|......8l.....
    7890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    78A0: 00 00 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00  // ................
    78B0: 00 00 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC  // ............x.|.
    78C0: CC DC 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66  // ..v.......``|fff
    78D0: 66 66 FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0  // ff..........|...
    78E0: C0 C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC  // ..|.........|...
    78F0: CC CC 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE  // ..~.........|...
    7900: C0 C6 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30  // ..|.......600.00
    7910: 30 30 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6  // 00x.........v...
    7920: CE 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66  // .v..|.....``|fff
    7930: 66 66 E6 00 00 00 00 00 00 18 18 00 38 18 18 18  // ff..........8...
    7940: 18 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C  // ..<.............
    7950: 0C 0C CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78  // ....x.....``fflx
    7960: 6C 66 E6 00 00 00 00 00 00 18 18 18 18 18 18 18  // lf..............
    7970: 18 18 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6  // ............l...
    7980: C6 C6 C6 00 00 00 00 00 00 00 00 00 DC 66 66 66  // .............fff
    7990: 66 66 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6  // fff.........|...
    79A0: C6 C6 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66  // ..|..........fff
    79B0: 66 7C 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC  // f|``........v...
    79C0: CC 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60  // .|...........f``
    79D0: 60 60 F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C  // ``..........|..|
    79E0: 06 C6 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30  // ..|......000.000
    79F0: 30 36 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC  // 06..............
    7A00: CC CC 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6  // ..v.............
    7A10: 6C 38 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6  // l8..............
    7A20: D6 FE 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38  // ..l...........l8
    7A30: 6C C6 C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6  // l...............
    7A40: CE 76 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18  // .v..|...........
    7A50: 30 62 FE 00 00 00 00 00 00 0E 18 18 18 70 18 18  // 0b...........p..
    7A60: 18 18 0E 00 00 00 00 00 00 18 18 18 18 00 18 18  // ................
    7A70: 18 18 18 00 00 00 00 00 00 70 18 18 18 0E 18 18  // .........p......
    7A80: 18 18 70 00 00 00 00 00 00 76 DC 00 00 00 00 00  // ..p......v......
    7A90: 00 00 00 00 00 00 00 00 00 00 00 00 10 38 38 6C  // .............88l
    7AA0: 6C FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66  // l........<f....f
    7AB0: 3C 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6  // <...8...........
    7AC0: C6 CE 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE  // ..v.......0.|...
    7AD0: C0 C6 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC  // ..|.....0x..x.|.
    7AE0: CC DC 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC  // ..v.........x.|.
    7AF0: CC DC 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC  // ..v.....`0..x.|.
    7B00: CC DC 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC  // ..v.....8l8.x.|.
    7B10: CC DC 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6  // ..v........|....
    7B20: 7C 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE  // |..l8...0x..|...
    7B30: C0 C6 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE  // ..|.........|...
    7B40: C0 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE  // ..|.....0...|...
    7B50: C0 C6 7C 00 00 00 00 00 00 66 00 00 38 18 18 18  // ..|......f..8...
    7B60: 18 18 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18  // ..<......<f.8...
    7B70: 18 18 3C 00 00 00 00 00 00 00 00 00 38 18 18 18  // ..<.........8...
    7B80: 18 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE  // ..<.......8l....
    7B90: C6 C6 C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE  // .......8l8.8l...
    7BA0: C6 C6 C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60  // .........0..``|`
    7BB0: 60 60 FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8  // ``.........f....
    7BC0: D8 DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8  // ..v......~......
    7BD0: D8 D8 DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6  // ........0x..|...
    7BE0: C6 C6 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6  // ..|.........|...
    7BF0: C6 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6  // ..|.....0...|...
    7C00: C6 C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6  // ..|.....0x......
    7C10: C6 CE 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6  // ..v.....`0......
    7C20: C6 CE 76 00 00 00 00 00 18 00 3C 18 18 18 18 18  // ..v.......<.....
    7C30: 18 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6  // ..<.......|.....
    7C40: C6 C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6  // ..|.............
    7C50: C6 C6 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6  // ..|........|....
    7C60: 7C 18 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60  // |.......8l``.```
    7C70: 66 F6 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18  // f.l.....ffff<.~.
    7C80: 3C 18 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63  // <........>cc0..c
    7C90: 63 3E 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E  // c>..........>c8.
    7CA0: 63 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC  // c>........0.x.|.
    7CB0: CC DC 76 00 00 00 00 00 0C 18 30 00 38 18 18 18  // ..v.......0.8...
    7CC0: 18 18 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6  // ..<.......0.|...
    7CD0: C6 C6 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC  // ..|......0`.....
    7CE0: CC DC 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66  // ..v......v...fff
    7CF0: 66 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE  // ff......v.......
    7D00: CE C6 C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67  // ........!...3``g
    7D10: 63 33 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E  // c3......B<.;fff>
    7D20: 06 66 3C 00 00 00 00 00 00 30 30 00 30 30 30 60  // .f<......00.000`
    7D30: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60  // ..|...........~`
    7D40: 60 60 00 00 00 00 00 00 00 00 00 00 00 00 7E 06  // ``............~.
    7D50: 06 06 00 00 00 00 00 00 60 60 62 66 6C 18 30 60  // ........``bfl.0`
    7D60: DC 36 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E  // .6..>...``bfl.6n
    7D70: DE 36 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C  // .6~...........<<
    7D80: 3C 3C 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C  // <<..........6l.l
    7D90: 36 00 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C  // 6............l6l
    7DA0: D8 00 00 00 00 00 00 11 44 11 44 11 44 11 44 11  // ........D.D.D.D.
    7DB0: 44 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.D.U.U.U.U.
    7DC0: 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.U.w.w.w.w.
    7DD0: 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18  // w.w.w.w.........
    7DE0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // ................
    7DF0: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18  // ................
    7E00: 18 18 18 18 18 18 18 36 36 36 36 36 36 36 F6 36  // .......6666666.6
    7E10: 36 36 36 36 36 36 36 00 00 00 00 00 00 00 FE 36  // 6666666........6
    7E20: 36 36 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18  // 6666666.........
    7E30: 18 18 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36  // .......66666...6
    7E40: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7E50: 36 36 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36  // 6666666........6
    7E60: 36 36 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00  // 666666666666....
    7E70: 00 00 00 00 00 00 00 36 36 36 36 36 36 36 FE 00  // .......6666666..
    7E80: 00 00 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00  // ................
    7E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8 18  // ................
    7EA0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 00  // ................
    7EB0: 00 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 00  // ................
    7EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 18  // ................
    7ED0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18  // ................
    7EE0: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 00  // ................
    7EF0: 00 00 00 00 00 00 00 18 18 18 18 18 18 18 FF 18  // ................
    7F00: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18  // ................
    7F10: 18 18 18 18 18 18 18 36 36 36 36 36 36 36 37 36  // .......666666676
    7F20: 36 36 36 36 36 36 36 36 36 36 36 36 37 30 3F 00  // 66666666666670?.
    7F30: 00 00 00 00 00 00 00 00 00 00 00 00 3F 30 37 36  // ............?076
    7F40: 36 36 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00  // 666666666666....
    7F50: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36  // ...............6
    7F60: 36 36 36 36 36 36 36 36 36 36 36 36 37 30 37 36  // 6666666666667076
    7F70: 36 36 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00  // 6666666.........
    7F80: 00 00 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36  // .......66666...6
    7F90: 36 36 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00  // 6666666.........
    7FA0: 00 00 00 00 00 00 00 36 36 36 36 36 36 36 FF 00  // .......6666666..
    7FB0: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18  // ................
    7FC0: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 FF 36  // ...............6
    7FD0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 3F 00  // 66666666666666?.
    7FE0: 00 00 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00  // ................
    7FF0: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18  // ................
    8000: 18 18 18 18 18 18 18 00 00 00 00 00 00 00 3F 36  // ..............?6
    8010: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 FF 36  // 66666666666666.6
    8020: 36 36 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18  // 6666666.........
    8030: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 00  // ................
    8040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18  // ................
    8050: 18 18 18 18 18 18 18 FF FF FF FF FF FF FF FF FF  // ................
    8060: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 FF  // ................
    8070: FF FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8080: F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8090: 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00  // ................
    80A0: 00 00 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8  // ...........v....
    80B0: D8 DC 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6  // ..v......x......
    80C0: C6 C6 CC 00 00 00 00 00 00 FE 66 62 60 60 60 60  // ..........fb````
    80D0: 60 60 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C  // ```..........lll
    80E0: 6C 6C 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30  // lll........b0..0
    80F0: 62 C6 FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC  // b...........~...
    8100: CC D8 70 00 00 00 00 00 00 00 00 66 66 66 66 66  // ..p........fffff
    8110: 7C 60 C0 80 00 00 00 00 00 00 00 00 76 DC 18 18  // |`..........v...
    8120: 18 18 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C  // ..........88l..l
    8130: 38 38 FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6  // 88........8l....
    8140: C6 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C  // .l8......8l....l
    8150: 6C 6C EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6  // ll.......>``<f..
    8160: C6 CC 78 00 00 00 00 00 00 00 00 00 7E DB DB DB  // ..x.........~...
    8170: 7E 00 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6  // ~..........|....
    8180: 7C 60 C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60  // |`.........0``|`
    8190: 60 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6  // `0.......|......
    81A0: C6 C6 C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00  // ................
    81B0: 00 FE 00 00 00 00 00 00 00 00 00 18 18 7E 18 18  // .............~..
    81C0: 00 00 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30  // ..~......0.....0
    81D0: 00 00 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C  // ..~........0`0..
    81E0: 00 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18  // ..~.............
    81F0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    8200: 18 58 78 30 00 00 00 00 00 00 00 18 18 00 7E 00  // .Xx0..........~.
    8210: 18 18 00 00 00 00 00 00 00 00 00 00 00 76 DC 00  // .............v..
    8220: 76 DC 00 00 00 00 00 00 00 78 CC CC 78 00 00 00  // v........x..x...
    8230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18  // ................
    8240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    8250: 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8  // ................
    8260: D8 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00  // .x8.......lllll.
    8270: 00 00 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00  // .........p..0`..
    8280: 00 00 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E  // ............~~~~
    8290: 7E 7E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~~..............
    82A0: 00 00 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF  // .............$f.
    82B0: 66 24 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C  // f$....../.......
    82C0: 18 30 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3  // .0`......0..~...
    82D0: DB DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7  // .....~....M.....
    82E0: FF FF DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99  // ...........T....
    82F0: 18 18 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3  // .......<....V...
    8300: C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00  // ......f<.....W..
    8310: C3 C3 C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00  // .........f....X.
    8320: 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59  // ....f<<f.......Y
    8330: 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00  // ......f<...<....
    8340: 5C 00 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00  // \.....`0........
    8350: 00 6D 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00  // .m.....f........
    8360: 00 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00  // ..v.........f<..
    8370: 00 00 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66  // ...w...........f
    8380: 00 00 00 00 00 00 3F 72 C3 0B DB 74 03 E9 46 01  // ......?r...t..F.
    8390: 57 32 C0 B9 40 00 F3 AA 5F BB 0C A0 26 89 1D 26  // W2..@..._...&..&
    83A0: 8C 4D 02 2E 8E 1E 1B 26 57 BE 49 04 B9 1E 00 83  // .M.....&W.I.....
    83B0: C7 04 FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04  // .....&..FG.._...
    83C0: FE C0 26 88 45 22 A1 85 04 26 89 45 23 57 E8 D9  // ..&.E"...&.E#W..
    83D0: 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC  // ._&.]%&.}&..I...
    83E0: 05 74 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 E4  // .t......2.......
    83F0: 9F 32 E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 E5  // .2...t.@&.E'....
    8400: 9F 26 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2  // .&.E)...........
    8410: B2 00 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02  // ..=..~...=^.~...
    8420: 3D 90 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A  // =..~...=..~.&.U*
    8430: 8A 26 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4  // .&....$.........
    8440: 0A E0 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2  // ........$.......
    8450: C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26  // ..0.B.$........&
    8460: 88 45 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2  // .E-..&.E1.w...2.
    8470: C4 1E A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04  // ........;.t4&.w.
    8480: 8C D9 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B  // ....t....&.w....
    8490: F1 74 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03  // .t....&.w.....t.
    84A0: 80 CA 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01  // ...&.w.....t....
    84B0: 07 1F 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0  // ..&.U2..........
    84C0: C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03  // .............%..
    84D0: 0B C2 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74  // ..&.E+...F.....t
    84E0: 0F FE C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3  // ...t6..tV...F...
    84F0: B8 20 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03  // . ....t...`...t.
    8500: 83 C0 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8  // ..:...t......?..
    8510: 06 8B EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20  // ....F..F....... 
    8520: F6 C1 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00  // ...t.......t....
    8530: F6 C1 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6  // ...t.......F....
    8540: C1 01 74 06 E8 16 15 E8 25 01 F6 C1 02 74 03 E8  // ..t.....%....t..
    8550: 85 01 F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42  // .....t.........B
    8560: EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15  // ....J....k......
    8570: 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87  // .2.......B....J.
    8580: EA E2 F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47  // ....... ..&....G
    8590: 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0  // F...&.%.G.......
    85A0: 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51  // ...&..G........Q
    85B0: 57 8B C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88  // W..+.&........&.
    85C0: 44 01 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC  // D.&.TA...&.D....
    85D0: 26 88 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88  // &.D....&.D....&.
    85E0: 04 83 C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE  // ..........p.&...
    85F0: 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B  // .....&.TA2.....[
    8600: FF 26 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00  // .&.D..._...2....
    8610: E8 49 FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C  // .I.&.D.._Y..`...
    8620: FA 8B C7 2B C3 26 89 47 02 51 57 2E 8E 1E 1B 26  // ...+.&.G.QW....&
    8630: A0 10 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84  // ...$0..I........
    8640: 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1  // ................
    8650: 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3  // ....t......|....
    8660: A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C  // ........_Y..:...
    8670: FA 26 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4  // .&.?....Q.......
    8680: 03 B8 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2  // .............G..
    8690: 26 8A 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26  // &.D........&...&
    86A0: 8B 54 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A  // .TA......2....&.
    86B0: 44 01 EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4  // D.....&.D.....2.
    86C0: E8 DB FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26  // .... ...2......&
    86D0: 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06  // .D..Y....&......
    86E0: 51 2E 8E 1E 1B 26 26 8A 05 80 26 10 04 CF 08 06  // Q....&&...&.....
    86F0: 10 04 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1  // ..G.I...........
    8700: 07 E8 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1  // ..........~.....
    8710: 04 E8 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1  // ..v..t....n..|..
    8720: 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3  // ..f.......^.Y...
    8730: 9C FA 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0  // ....+.&.G.......
    8740: 34 EE 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50  // 4.B.&......&.E.P
    8750: 4A 4A EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0  // JJ.&.E.......B2.
    8760: EE 42 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B  // .BB....XJ.....&.
    8770: 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE  // w....l....4.&...
    8780: BA C6 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0  // ...&.D..VBB...2.
    8790: EE 42 B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26  // .B...&...F..^..&
    87A0: 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2  // .D........$.....
    87B0: EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4  // ................
    87C0: EE EB 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80  // ...... ..P......
    87D0: 26 87 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E  // &....&..$...<.~.
    87E0: 26 F6 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C  // &.G3.u.<#t.<2t.<
    87F0: 33 74 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26  // 3t...&.G..u....&
    8800: 49 04 BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74  // I.........&.G..t
    8810: 07 B2 D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04  // ....&.....c...N.
    8820: 00 00 C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E  // ....b......P....
    8830: 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A  // .3....&..2..J.&.
    8840: 47 01 A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03  // G....&.G....&.G.
    8850: A3 4C 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32  // .L.&.G....`.X.R2
    8860: E4 33 D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2  // .3.......)u.2.3.
    8870: B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E 1B 26 2E 83  // ....Z...`....&..
    8880: 0E 25 26 00 75 6E 80 3E 00 05 01 74 67 C6 06 00  // .%&.un.>...tg...
    8890: 05 01 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04  // ....b.2.......P.
    88A0: 8A 3E 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B  // .>b.P2.....2.AQ.
    88B0: 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89  // .J.2......)u=QR.
    88C0: 95 50 04 B4 08 E8 B0 D4 0A C0 75 02 B0 20 33 D2  // .P........u.. 3.
    88D0: 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE  // 2.....)u.Z..Y...
    88E0: C6 59 E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50  // .Y...w.2....X..P
    88F0: 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52  // ....a...ZYY....R
    8900: 2A F5 38 C6 7D 02 32 C0 2E 8E 06 1D 26 5A C3 A0  // *.8.}.2.....&Z..
    8910: 85 04 F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F  // ................
    8920: EF B4 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA  // ....m...2.......
    8930: 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E  // ....Ku.2..W..S..
    8940: 62 04 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8  // b...u...t..5.[..
    8950: 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B  // +.......2....2.+
    8960: EA 0A DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01  // ...t**..&....R..
    8970: E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B  // . .......Z......
    8980: CA F3 A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A  // .......Hu.......
    8990: D8 EB F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE  // .........B.$....
    89A0: 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E  // J....B...J......
    89B0: 1B 26 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E 1B  // .&..c...........
    89C0: 26 8B 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01  // &..c...P........
    89D0: 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E  // u...X...........
    89E0: 1E 1B 26 80 3E 49 04 03 74 13 80 3E 49 04 02 74  // ..&.>I..t..>I..t
    89F0: 0C 80 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50  // ..>I..t..>I....P
    8A00: 2E 8E 06 1F 26 A0 10 04 24 30 3C 30 74 05 2E 8E  // ....&...$0<0t...
    8A10: 06 21 26 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81  // .!&X..t......N..
    8A20: C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B  // ...+.2...J......
    8A30: C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E  // .........u...8.~
    8A40: 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16  // ..............:.
    8A50: 4A 04 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3  // J.t..........@..
    8A60: FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F  // ............+...
    8A70: E8 01 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B  // ....S..*.2.2.+.+
    8A80: EA E3 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75  // ...............u
    8A90: F4 58 B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53  // .X. ........u..S
    8AA0: 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6  // ..*.t.......X...
    8AB0: E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E 21  // ... ...........!
    8AC0: 26 8A C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7  // &..".....t.0....
    8AD0: 8A 34 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E  // .4".............
    8AE0: 1E 21 26 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2  // .!&...."...(....
    8AF0: 01 74 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C  // .t..............
    8B00: 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0  // ................
    8B10: F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 21 26  // ..............!&
    8B20: 8B C1 E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC  // .....u......$...
    8B30: 8A D8 2E 8E 06 21 26 8A C1 8A E6 E8 6D 00 75 02  // .....!&.....m.u.
    8B40: 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01  // ............+...
    8B50: 00 C3 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3  // ....*..,Q..VW...
    8B60: A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81  // .......+.+.... .
    8B70: C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03  // .. ........_^...
    8B80: FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13  // .Y........W.....
    8B90: C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13  // .....+.... .....
    8BA0: C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2  // ..._....u.......
    8BB0: 01 01 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2  // ..+.8.v.2.Q.....
    8BC0: E3 59 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2  // .Y2..P..>I..t...
    8BD0: D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52  // .........P.....R
    8BE0: 53 8A DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1  // S..2.....P....P.
    8BF0: EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0  // ..L...[..[Z.R...
    8C00: 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5  // J...2.....Z.....
    8C10: 0F 2E 8A A6 BC 8B 8B E8 C1 ED 04 83 E5 0F 2E 8A  // ................
    8C20: 86 BC 8B C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF  // ........03<?....
    8C30: F0 F3 FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74  // ....&..........t
    8C40: 02 0A D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B  // ........u..V.E..
    8C50: 16 63 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B  // .c............R.
    8C60: D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3  // ....&J....2...Z.
    8C70: 53 8A DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00  // S..2.....P......
    8C80: 5B C3 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26  // [.R..2.R...&...&
    8C90: 4A 04 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75  // J.Z....t...L...u
    8CA0: F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1  // .Z.R...J...2....
    8CB0: E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3  // ...N..........Z.
    8CC0: 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74  // ...&J..........t
    8CD0: 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80  // ...2..&L........
    8CE0: D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE  // .............. .
    8CF0: C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4  // ......2....>..&.
    8D00: 7D 04 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0  // }......S........
    8D10: 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E  // ............U...
    8D20: E8 7F FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04  // ...<.t....v.<Ut.
    8D30: 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01  // 2.[.............
    8D40: 0A C0 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25  // ..[....6......t%
    8D50: 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2  // ..*.....R2......
    8D60: D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4  // ..+.Q....+.+.Y..
    8D70: 5A E8 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A  // Z...............
    8D80: C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5  // ...2..........+.
    8D90: 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E 1B 26 89  // ....+.Nu......&.
    8DA0: 0E 60 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94  // .`...$`. t......
    8DB0: 00 F6 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74  // ...........>I..t
    8DC0: 06 E8 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42  // ....t.......t..B
    8DD0: C3 8A 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74  // ..6......8.~...t
    8DE0: 64 8A E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80  // d.......\8.tX...
    8DF0: FD 03 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E  // ..|........I...~
    8E00: 44 8A E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38  // D..*...u.8.t8..8
    8E10: CA 74 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12  // .t2....8.~....~.
    8E20: 80 FD 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1  // ........}.....8.
    8E30: 74 13 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F  // t.........*.....
    8E40: 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E 1B 26  // ...............&
    8E50: A2 62 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8  // .b.2....&L..N...
    8E60: E8 7A FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C  // .z.t..>I..w.....
    8E70: E8 DC FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E  // .......P..'.....
    8E80: 1B 26 8A 26 49 04 E8 F7 AA 74 07 C7 06 50 04 00  // .&.&I....t...P..
    8E90: 00 C3 E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77  // ...H.t....t.w..w
    8EA0: FC C3 E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E  // .........|.t...N
    8EB0: FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85  // ..........J.R.&.
    8EC0: 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A  // .......Z.....0..
    8ED0: D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5  // ....g....R..J...
    8EE0: 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3  // ..&........Z.U..
    8EF0: 2E 8E 1E 1B 26 8A 26 49 04 E8 E1 FA 74 0C 80 FC  // ....&.&I....t...
    8F00: 07 74 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E  // .t.w@......S....
    8F10: FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA  // ................
    8F20: 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04  // +>J....R.&...&J.
    8F30: C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7  // .....+.Z..J.....
    8F40: DD E8 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9  // ........|.t.....
    8F50: 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04  // ...........R..J.
    8F60: F7 26 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8  // .&....+...+.Z...
    8F70: E9 F9 C3 2E 8E 1E 1B 26 2E 8E 06 21 26 E8 5D FA  // .......&...!&.].
    8F80: 74 11 80 3E 49 04 07 7C 18 2E 8E 06 1F 26 74 03  // t..>I..|.....&t.
    8F90: E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A  // ....I...&.....F.
    8FA0: C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC  // ..P.........+...
    8FB0: 80 3E 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00  // .>I..u....&...F.
    8FC0: 45 26 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8  // E&... .F.E..P...
    8FD0: 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6  // ............V...
    8FE0: 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4  // . .O.........+..
    8FF0: 3E 0C 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75  // >..2....u.&.}..u
    9000: 02 B6 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56  // ............t.GV
    9010: 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01  // W.._^t#.......t.
    9020: 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E 1B 26 C4 3E  // G..u...t.....&.>
    9030: 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC  // |.......2.......
    9040: 89 46 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3  // .F...>I..|.u..Z.
    9050: 2E 8E 06 1D 26 E8 18 FC 8B F0 8B 1E 85 04 2B E3  // ....&.........+.
    9060: 8B EC B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F  // ............>I..
    9070: 72 1A F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75  // r.....`u.......u
    9080: 02 B4 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB  // .............Q..
    9090: 26 8A 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58  // &.....F.E.6J...X
    90A0: EF B8 00 01 32 D2 E9 44 FF 2E 8E 06 1D 26 A1 50  // ....2..D.....&.P
    90B0: 04 8B D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26  // ...2.R..2..&J..&
    90C0: 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53  // ..Z........+...S
    90D0: 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4  // .>J.O.........2.
    90E0: 26 8A 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88  // &......t....F...
    90F0: 66 00 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC  // f.E..Ku.[...2...
    9100: FE 33 ED EB 03 BD 01 00 2E 8E 1E 1B 26 2E 8E 06  // .3..........&...
    9110: 21 26 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 1F 26  // !&.&I....t.....&
    9120: 80 FC 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF  // ...t.|=.........
    9130: 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32  // 2.....P....J...2
    9140: F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04  // .........t....L.
    9150: 03 F8 FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA  // ....u.....u.....
    9160: 47 E2 FC C3 50 2E 8E 06 21 26 A1 50 04 E8 EE FA  // G...P...!&.P....
    9170: 8B F8 A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08  // ...P..&J...X..t.
    9180: 24 7F C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4  // $..6|....6....2.
    9190: C1 E0 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55  // ........ti.....U
    91A0: 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6  // ...........P....
    91B0: 80 75 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3  // .u'..U.#....N.#.
    91C0: 26 89 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81  // &......N..u.....
    91D0: EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3  // .>.X.r........#.
    91E0: 26 31 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7  // &1...%.#.&1.. ..
    91F0: 50 FE CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00  // P..u......>.X.I.
    9200: E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30  // .....P.....t..&0
    9210: 05 AC 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE  // ..&0.. ..P......
    9220: 08 81 EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26  // ...?.X. .......&
    9230: 88 85 FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF  // ......O.........
    9240: 3F 01 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32  // ?.X........8.r.2
    9250: C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6  // ..............2.
    9260: 8B EA 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04  // ..f...Q...f...J.
    9270: 83 FA 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00  // ..du..h...Zu..`.
    9280: 81 FA AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8  // ....u....R..f...
    9290: 66 0F B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66  // f...P.f..f.....f
    92A0: C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1  // .......f...Z..J.
    92B0: E2 03 A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 1D  // ...P.P..........
    92C0: 26 58 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A  // &XWQP.....;.....
    92D0: E0 8A C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD  // .....s...&..fG..
    92E0: 75 EF 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0  // u.f.....XY_.....
    92F0: 38 E0 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2  // 8.r.Q2...I......
    9300: F9 59 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7  // .Y+.....R3...f..
    9310: 10 8B C7 66 C1 C7 10 E8 66 A6 74 16 38 E0 74 12  // ...f....f.t.8.t.
    9320: 0F B6 D0 E8 8B C9 8A E0 66 C1 C7 10 8B F8 66 C1  // ........f.....f.
    9330: C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC  // ..Z.....|.......
    9340: 62 0F 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3  // b...........u...
    9350: 80 80 CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04  // ....PS..2.....P.
    9360: 5B 2E 8E 06 1D 26 E8 07 F9 8B F8 8B 2E 85 04 58  // [....&.........X
    9370: 32 F6 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01  // 2.R.6J.V.&...6..
    9380: 80 FC 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4  // ...u..|..u...F..
    9390: 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A  // .......um......Z
    93A0: 58 50 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03  // XPRJ..WQQW..2...
    93B0: FA E2 FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49  // ..._G..8.v.2...I
    93C0: 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A  // ..G..Y..Y_......
    93D0: E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB  // ..[KZQW...&.%...
    93E0: E2 F7 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49  // .._G+.B;.v.3...I
    93F0: 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2  // ..G..Y..........
    9400: C4 B8 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E  // ................
    9410: 1E 1B 26 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01  // ..&.>c..t.......
    9420: 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80  // u..B.......u....
    9430: E4 1F 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E  // ...&f...&f..-...
    9440: 66 04 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66  // f... .......t..f
    9450: 04 24 DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C  // .$....t.. .f.$..
    9460: 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F  // ....S...~..SP...
    9470: 8A FB D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4  // ...........`.t..
    9480: 00 8A C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8  // ....,...t.&.....
    9490: 0B 00 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E  // ....t.&.].X[....
    94A0: 2E 8E 1E 1B 26 80 3E 49 04 33 1F 7F 08 8A C4 B4  // ....&.>I.3......
    94B0: 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0  // ......0.........
    94C0: B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47  // .............t.G
    94D0: 26 88 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E  // &.......... ....
    94E0: 8E 1E 1B 26 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07  // ...&.&I....t....
    94F0: 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3  // w.t........|.tL.
    9500: 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E 1D 26  // ...............&
    9510: F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00  // ...u........%...
    9520: 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF  // ....%...%.......
    9530: C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF  // .............%..
    9540: 88 25 EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 1D  // .%.........P....
    9550: 26 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88  // &.J..........X&.
    9560: 05 C3 2E 8E 1E 1B 26 8A 26 49 04 E8 6F F4 74 0F  // ......&.&I..o.t.
    9570: 80 FC 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3  // ...w.t.._....F..
    9580: 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E  // ...|.t)..5......
    9590: 1D 26 BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22  // .&...2........."
    95A0: D9 74 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3  // .t......}....~..
    95B0: A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E 1D  // .J..............
    95C0: 26 8A 05 8B EC 88 46 1A C3 2E 8E 1E 1B 26 8A 3E  // &.....F......&.>
    95D0: 62 04 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A  // b.....2..P......
    95E0: 0E 49 04 3C 0D 76 4A 2E 8E 06 21 26 E8 EE F3 75  // .I.<.vJ...!&...u
    95F0: 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1  // 3..J............
    9600: E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38  // ...N........A..8
    9610: DA 73 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1  // .sY....c........
    9620: FE C0 EF C3 2E 8E 06 1F 26 80 F9 07 74 C3 E9 83  // ........&...t...
    9630: 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75  // .u.2...<.u.:6..u
    9640: 03 E9 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07  // ...........u....
    9650: 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04 E8 2B 92 C3  // .....L..<.u..+..
    9660: 3C 08 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2  // <.u...t.....2.2.
    9670: 2B CB 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14  // +.:6..t.........
    9680: 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB  // ..c...........+.
    9690: 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03  // +.&.e.P.>N......
    96A0: F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0  // ..............X.
    96B0: 20 F3 AB C3 B9 01 00 B4 0A E8 BC C6 FE C2 3A 16  //  .............:.
    96C0: 4A 04 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84  // J.t....2.2...:6.
    96D0: 04 74 2E FE C6 EB ED 89 14 2E 8E 06 21 26 E8 FC  // .t..........!&..
    96E0: F2 74 0E 2E 8E 06 1F 26 80 F9 07 74 04 32 FF EB  // .t.....&...t.2..
    96F0: 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB  // ..........O..J..
    9700: 91 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9  // .3..6....J......
    9710: 70 F7 2E 8E 1E 1B 26 F6 06 87 04 08 74 03 CD 42  // p.....&.....t..B
    9720: C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E 1B 26  // ..v....F.......&
    9730: 8A DF 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04  // ..2.....P...8.b.
    9740: 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 1B 26 8A DF 32  // u....\......&..2
    9750: FF D1 E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16  // .....P...`....N.
    9760: 89 56 12 C3 2E 8E 1E 1B 26 A0 87 04 24 80 0A 06  // .V......&...$...
    9770: 49 04 8A 26 4A 04 F6 06 87 04 08 75 2D E8 5D F2  // I..&J......u-.].
    9780: 74 07 80 3E 49 04 07 7F 21 51 8A CC 8A 2E 84 04  // t..>I...!Q......
    9790: BE 55 97 81 FE 5E 97 74 10 2E 3B 0C 74 05 83 C6  // .U...^.t..;.t...
    97A0: 03 EB F0 24 80 2E 0A 44 02 59 8A 3E 62 04 8B EC  // ...$...D.Y.>b...
    97B0: 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 84 18 23  // .F..^..N..V....#
    97C0: 84 2B 33 84 2A 32 2E 8E 1E 1B 26 3C 04 7F 1B 50  // .+3.*2....&<...P
    97D0: 52 BA CC 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4  // R......ZXt..>c..
    97E0: 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4  // t...>c..u.<.s.2.
    97F0: 8B E8 D1 E5 2E FF A6 91 97 C9 97 E9 97 FB 97 30  // ...............0
    9800: 98 7A 97 7A 97 7A 97 55 98 6D 98 71 98 7A 97 7A  // .z.z.z.U.m.q.z.z
    9810: 97 7A 97 7A 97 7A 97 7A 97 9F 98 7A 97 A3 98 BE  // .z.z.z.z...z....
    9820: 98 7A 97 FD 98 7A 97 0B 99 26 99 2D 99 39 99 5D  // .z...z...&.-.9.]
    9830: 99 80 3E 49 04 13 74 15 E8 BF F4 8B C3 86 E0 E8  // ..>I..t.........
    9840: 70 EF 0B ED 74 07 8A C7 32 FF 26 88 01 E8 93 F4  // p...t...2.&.....
    9850: C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D  // .......D...t.&.}
    9860: 11 EB EA 80 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B  // ....>I..t.......
    9870: ED 74 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32  // .t.............2
    9880: E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4  // ................
    9890: E2 F4 AC E8 07 FC EB B5 80 FB 01 77 B0 E8 43 F4  // ...........w..C.
    98A0: B2 C0 B0 30 E8 FB F0 24 F7 80 26 65 04 DF 80 FB  // ...0...$..&e....
    98B0: 00 74 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01  // .t.....e. ......
    98C0: 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B EC 88  // ........... ....
    98D0: 4E 0F E9 78 FF B3 11 EB E4 8B FA E8 05 F4 B9 10  // N..x............
    98E0: 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE  // .2........B.&...
    98F0: C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26  // .J..G.......B..&
    9900: 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3  // ......Z......Q..
    9910: 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7  // &.5&.m.&.M......
    9920: 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0  // .CY.....u.......
    9930: 30 E8 6E F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8  // 0.n.$....t....0.
    9940: 70 EE EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8  // p.....u.......0.
    9950: 50 F0 EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 51  // P....u.....4...Q
    9960: EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88  // .............N..
    9970: 76 13 C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88  // v....Q.....&.5&.
    9980: 6D 01 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6  // m.&.M....CY.....
    9990: 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E  // .........2....F.
    99A0: C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30  // ..?....4.......0
    99B0: E8 EF EF B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC  // .......u........
    99C0: 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3  // .^...Q...s..*...
    99D0: E8 52 00 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8  // .R.CY........t..
    99E0: 16 00 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8  // .....9.......t..
    99F0: 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B  // ........P....P.;
    9A00: F6 E5 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6  // ..P....Y..Y...d.
    9A10: F1 80 FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3  // ...2|.........X.
    9A20: 52 E8 39 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A  // R.9.ZS........B.
    9A30: C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C  // .........[....S.
    9A40: FA BA C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A  // .....BB.........
    9A50: E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8  // ...........[.PQ.
    9A60: 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E  // ........u...YX..
    9A70: 8E 1E 1B 26 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83  // ...&..$.........
    9A80: FF 06 7F 18 2E FF A5 21 9A 29 9A 3E 9A DC 9A 38  // .......!.).>...8
    9A90: 9B 3C 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03  // .<.t.<..........
    9AA0: B0 03 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16  // ......<.w.PSPR..
    9AB0: 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40  // c..............@
    9AC0: 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09  // t.........@.....
    9AD0: E8 CF EE A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0  // .....t..........
    9AE0: 3D F4 01 73 1B BA E0 01 3D C2 01 73 13 BA 90 01  // =..s....=..s....
    9AF0: 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00  // =|.s..^.=J.s....
    9B00: 89 16 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58  // ....ZX......].[X
    9B10: 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08  // ..2...t...<.t...
    9B20: 3C 02 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9  // <.t.............
    9B30: 08 7E 04 81 E9 01 01 87 1E 85 04 53 E8 5B F2 5B  // .~.........S.[.[
    9B40: E8 85 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74 38  // ......t...t...t8
    9B50: FE C8 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E  // ..t<..t@...|...~
    9B60: 00 C3 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A  // ..........t.2...
    9B70: 97 1C 9B 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C  // ................
    9B80: 06 0E 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6  // .......*........
    9B90: BD 2C 6A B9 08 00 EB CA BD 3F 72 B9 10 00 EB C2  // .,j......?r.....
    9BA0: 0A C0 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77  // ..u............w
    9BB0: 35 80 FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26  // 5...w...u...|..&
    9BC0: C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E  // ..... ...u......
    9BD0: 8B 2E 1E 83 EB 10 0E 07 8A DF 32 FF 80 EB 02 D1  // ..........2.....
    9BE0: E3 2E 8B AF 8F 9B 8B C5 8B EC 89 4E 16 89 56 12  // ...........N..V.
    9BF0: 89 46 0A 8C 46 1E C3 3F 72 2C 6A 2C 6E 2C 72 3F  // .F..F..?r,j,n,r?
    9C00: 72 3F 82 53 06 8A 26 49 04 E8 C7 C3 26 8A 47 02  // r?.S..&I....&.G.
    9C10: 26 8A 67 33 F6 C4 01 74 22 BD 3F 72 3C 10 7D 0E  // &.g3...t".?r<.}.
    9C20: E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD 2C 6A 8C 0E  // .q.....<.}..,j..
    9C30: 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D  // ..........-..<.}
    9C40: 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80  // ...<.t.....<.t..
    9C50: CC 80 EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4  // ....&.G..t......
    9C60: 32 DB E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA  // 2........[......
    9C70: CE 03 EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02  // ................
    9C80: 04 EF B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74  // ..........P$...t
    9C90: 22 0E 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD 3F  // "..3....<.u....?
    9CA0: 72 EB 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08  // r....u..........
    9CB0: BD 2C 6A E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02  // .,j.-.X..t......
    9CC0: 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02  // ..............u.
    9CD0: B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05  // ....P.X....2....
    9CE0: 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83  // ......u.....u.&.
    9CF0: 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 1D 26  // ~..u...........&
    9D00: 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3  // ......@S.....[..
    9D10: 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32  // .t.. .........(2
    9D20: C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4  // ...2.Q...t.F....
    9D30: 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80  // .. t.. .+...Y...
    9D40: 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57  // t.F..u....&I.P.W
    9D50: C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF  // .>..&.}.....t0..
    9D60: 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB  // ...&..<.t$8.t.G.
    9D70: F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3  // ...&.......&.E..
    9D80: 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07  // ..&.}..>......_.
    9D90: 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4  // X.&.G3.t......&.
    9DA0: 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF  // _.....t....&..<.
    9DB0: 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06  // t.G8.I.u.&..2...
    9DC0: 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04  // ..........c..&..
    9DD0: FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42  // ..........t....B
    9DE0: EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4  // .$....J...B.$...
    9DF0: EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04  // .............>..
    9E00: FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74  // .u.............t
    9E10: 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04  // ...H......c...J.
    9E20: 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04  // .&............L.
    9E30: C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08  // ..&I.P.W.>..&.}.
    9E40: 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF  // ....tJ.....&..<.
    9E50: 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A  // t>8.t.G....&.=&.
    9E60: 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF  // ].&.M.&.U.&.E.<.
    9E70: 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85  // t...P......&....
    9E80: 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD  // .X...&.}...2....
    9E90: 5F 07 58 C3 50 53 51 52 2E A1 25 26 0B C0 74 09  // _.X.PSQR..%&..t.
    9EA0: 2E 8B 2E 1E 83 0E 07 EB 08 B8 30 11 B7 02 E8 C7  // ..........0.....
    9EB0: BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E  // .ZY[X.<.|....S..
    9EC0: 1E 1B 26 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B  // ..&..2.......P..
    9ED0: 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D  // 5[..V..QS&.F.E<.
    9EE0: 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05  // ..u.2..@<.t2<.u.
    9EF0: E8 97 89 EB 62 3C 08 75 08 0A D2 74 5A FE CA EB  // ....b<.u...tZ...
    9F00: 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4  // '....t.&.^.E....
    9F10: 09 E8 64 BE FE C2 3A 16 4A 04 72 0C 32 D2 89 15  // ..d...:.J.r.2...
    9F20: 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8 AD EA  // :6..s......+P...
    9F30: 75 08 B8 00 08 E8 40 BE EB 09 80 3E 49 04 07 74  // u.....@....>I..t
    9F40: F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B  // .2..>b.S..U.%.][
    9F50: 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00  // .>b.X..[Y..Z....
    9F60: 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 34 ED C3  // u.....:>b.u..4..
    9F70: E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8  // .d.3..6....J....
    9F80: 01 06 E8 F3 BD C3 2E 8E 1E 1B 26 0A C0 75 0D E8  // ..........&..u..
    9F90: 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09  // .....^..F...<.u.
    9FA0: E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 1C A0  // .A....F.........
    9FB0: 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E  // .:.r.....2......
    9FC0: 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0  // .]...t...u......
    9FD0: 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3  // ..$0<0t....u....
    9FE0: 01 74 E9 C3 BF 1C A0 2E 8A 0D 32 C0 83 C7 04 2E  // .t........2.....
    9FF0: 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0  // ;.t....;.t......
    A000: 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89  // 8.~.............
    A010: 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB  // ..t..........t..
    A020: 08 00 BA B4 03 E8 DF EC 74 21 B7 01 E8 8C E9 80  // ........t!......
    A030: FA D4 74 17 86 FB C3 BA D4 03 E8 CA EC 74 0C B7  // ..t..........t..
    A040: 02 E8 77 E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08  // ..w....t........
    A050: 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01 01 01  // ................
    A060: 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01  // ................
    A070: 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E  // ................
    A080: 00 00 3F 00 10 01 08 00 00 00 00 01 00 02 02 01  // ..?.............
    A090: 00 04 04 01 00 05 02 05 00 06 01 06 05 06 00 08  // ................
    A0A0: 01 08 00 07 02 07 06 07 CA 00 34 00 90 00 96 00  // ..........4.....
    A0B0: 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF  // ......_W..PfR...
    A0C0: FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF  // ...........f....
    A0D0: 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8  // f....2.f..fZX.f.
    A0E0: 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF  // O.fRfVSWP..uD...
    A0F0: FF FF 66 33 F6 66 BB 53 00 E8 48 00 00 00 C1 E8  // ..f3.f.S..H.....
    A100: 10 F6 C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B  // ...@u+f....f..f.
    A110: C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 30 00  // .f@...f..f....0.
    A120: 00 00 66 BB 12 00 E8 27 00 00 00 66 58 32 E4 66  // ..f....'...fX2.f
    A130: 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 C3 90  // PX_[f^fZ..f.O...
    A140: 66 B8 4F 03 C3 90 66 52 E8 11 00 00 00 ED 66 5A  // f.O...fR......fZ
    A150: C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B  // ..fR......fZ..f.
    A160: D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83  // .P3.f..f......f.
    A170: C2 04 58 C3 24 49 17 49 17 49 17 49 02 49 02 49  // ..X.$I.I.I.I.I.I
    A180: 02 49 02 49 44 45 BB 45 E5 45 26 47 25 47 25 47  // .I.IDE.E.E&G%G%G
    A190: 6B 47 D0 47 00 48 BD 48 E6 48 E6 48 5D 47 50 47  // kG.G.H.H.H.H]GPG
    A1A0: 50 47 50 47 50 47 50 47 6B 47 D0 47 00 48 BD 48  // PGPGPGPGkG.G.H.H
    A1B0: EB 48 31 49 E6 48 E6 48 FF FF FF FF FF FF 00 00  // .H1I.H.H........
    A1C0: FF FF 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00  // ................
    A1D0: FF 00 00 00 FF 00 00 00 00 00 08 10 00 08 10 18  // ................
    A1E0: 00 08 10 18 48 43 01 48 43 02 56 57 03 36 57 03  // ....HC.HC.VW.6W.
    A1F0: 6D 44 03 21 44 03 49 43 04 62 43 04 72 43 04 48  // mD.!D.IC.bC.rC.H
    A200: 43 03 00 00 00 00 F5 4A 00 02 F5 4A 01 02 F5 4A  // C......J...J...J
    A210: 02 02 F5 4A 03 02 F5 4A 04 02 F5 4A 05 02 EF 4C  // ...J...J...J...L
    A220: 00 02 EF 4C 01 02 EF 4C 02 02 EF 4C 03 02 EF 4C  // ...L...L...L...L
    A230: 04 02 EF 4C 05 02 24 4D 00 02 24 4D 01 02 24 4D  // ...L..$M..$M..$M
    A240: 02 02 24 4D 03 02 24 4D 04 02 24 4D 05 02 5F 4F  // ..$M..$M..$M.._O
    A250: 00 02 5F 4F 01 02 5F 4F 02 02 5F 4F 03 02 5F 4F  // .._O.._O.._O.._O
    A260: 04 02 5F 4F 05 02 5F 4F 00 02 5F 4F 01 02 5F 4F  // .._O.._O.._O.._O
    A270: 02 02 5F 4F 03 02 5F 4F 04 02 5F 4F 05 02 26 4E  // .._O.._O.._O..&N
    A280: 00 02 26 4E 01 02 26 4E 02 02 26 4E 03 02 26 4E  // ..&N..&N..&N..&N
    A290: 04 02 26 4E 05 02 62 4E 00 02 62 4E 01 02 62 4E  // ..&N..bN..bN..bN
    A2A0: 02 02 62 4E 03 02 62 4E 04 02 62 4E 05 02 D3 4D  // ..bN..bN..bN...M
    A2B0: 00 02 D3 4D 01 02 D3 4D 02 02 D3 4D 03 02 D3 4D  // ...M...M...M...M
    A2C0: 04 02 D3 4D 05 02 07 4E 00 02 07 4E 01 02 07 4E  // ...M...N...N...N
    A2D0: 02 02 07 4E 03 02 07 4E 04 02 07 4E 05 02 B7 51  // ...N...N...N...Q
    A2E0: 00 00 EA 51 01 00 EA 51 02 00 D7 51 00 00 C5 50  // ...Q...Q...Q...P
    A2F0: 00 02 BE 4E 00 02 BE 4E 01 02 BE 4E 02 02 BE 4E  // ...N...N...N...N
    A300: 03 02 BE 4E 04 02 BE 4E 05 02 DD 50 00 02 32 53  // ...N...N...P..2S
    A310: 05 00 32 53 01 00 32 53 00 00 32 53 02 00 73 53  // ..2S..2S..2S..sS
    A320: 00 00 73 53 02 00 B8 53 00 00 48 50 00 02 48 50  // ..sS...S..HP..HP
    A330: 01 02 48 50 02 02 48 50 03 02 48 50 04 02 48 50  // ..HP..HP..HP..HP
    A340: 05 02 04 52 00 00 2C 52 00 00 AD 52 00 00 28 53  // ...R..,R...R..(S
    A350: 00 00 0C 4F 00 02 0C 4F 01 02 0C 4F 02 02 0C 4F  // ...O...O...O...O
    A360: 03 02 0C 4F 04 02 0C 4F 05 02 27 53 00 01 27 53  // ...O...O..'S..'S
    A370: 00 01 2B 4C 00 02 2B 4C 01 02 2B 4C 02 02 2B 4C  // ..+L..+L..+L..+L
    A380: 03 02 2B 4C 04 02 2B 4C 05 02 4C 52 00 00 28 53  // ..+L..+L..LR..(S
    A390: 00 00 28 53 00 00 28 53 00 00 5D 51 00 00 4F 4D  // ..(S..(S..]Q..OM
    A3A0: 00 02 4F 4D 01 02 4F 4D 02 02 4F 4D 03 02 4F 4D  // ..OM..OM..OM..OM
    A3B0: 04 02 4F 4D 05 02 7E 4D 00 02 7E 4D 01 02 7E 4D  // ..OM..~M..~M..~M
    A3C0: 02 02 7E 4D 03 02 7E 4D 04 02 7E 4D 05 02 B4 4D  // ..~M..~M..~M...M
    A3D0: 00 02 B4 4D 01 02 B4 4D 02 02 B4 4D 03 02 B4 4D  // ...M...M...M...M
    A3E0: 04 02 B4 4D 05 02 6F 52 00 00 92 52 00 00 50 4E  // ...M..oR...R..PN
    A3F0: 01 02 50 4E 02 02 AC 4E 01 02 AC 4E 02 02 A6 00  // ..PN...N...N....
    A400: 02 01 3C A4 00 00 00 00 00 00 00 00 00 00 A0 A4  // ..<.............
    A410: 00 00 00 00 00 00 00 00 00 00 00 00 26 AA 00 00  // ............&...
    A420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EC A4  // ................
    A430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A450: 00 00 00 00 44 AA 00 00 00 00 00 00 00 00 00 00  // ....D...........
    A460: 00 00 00 00 00 00 00 00 00 00 00 00 14 A5 00 00  // ................
    A470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A480: 00 00 00 00 00 00 04 A6 00 00 00 00 00 00 00 00  // ................
    A490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A4A0: 00 00 00 00 63 00 02 01 00 00 37 00 00 4B E5 00  // ....c.....7..K..
    A4B0: 04 49 37 00 56 00 40 01 05 00 00 61 60 01 00 3C  // .I7.V.@....a`..<
    A4C0: E5 01 00 80 44 37 00 51 14 2D 05 40 01 00 00 00  // ....D7.Q.-.@....
    A4D0: 3E 05 40 20 A1 07 00 45 13 00 5B 52 0D 03 00 41  // >.@ ...E..[R...A
    A4E0: E3 0D 3E 05 41 00 00 00 00 44 62 00 33 05 41 01  // ..>.A....Db.3.A.
    A4F0: 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25 1F 0E  // .....A.....A.%..
    A500: 03 0D 65 53 00 02 5B 00 4B 00 01 01 00 00 37 00  // ..eS..[.K.....7.
    A510: 00 42 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00  // .B!.c...c.9.c.?.
    A520: 63 02 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19  // c.E.ZZ[..@....-.
    A530: 40 00 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00  // @...@.....@.....
    A540: 5B 02 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00  // [.....[.....[...
    A550: E8 0D 5B 00 28 00 02 01 00 00 37 00 00 01 05 00  // ..[.(.....7.....
    A560: 00 6C A8 01 00 02 00 00 01 00 02 01 01 00 01 05  // .l..............
    A570: 00 00 6D A8 01 00 02 00 02 01 00 5B F0 00 03 03  // ..m........[....
    A580: 0C 00 37 00 00 66 04 03 04 46 28 00 3E 05 46 00  // ..7..f...F(.>.F.
    A590: 00 00 00 49 3C 00 03 01 00 00 03 01 01 01 03 01  // ...I<...........
    A5A0: 02 02 52 16 03 01 46 00 1B 05 46 08 02 02 00 00  // ..R...F...F.....
    A5B0: 02 02 01 01 02 02 02 02 3D 65 02 00 49 47 00 2C  // ........=e..IG.,
    A5C0: 22 02 46 3D E5 02 00 49 52 00 2C A2 02 46 3D 65  // ".F=...IR.,..F=e
    A5D0: 02 02 49 6D 00 01 05 00 00 E5 68 01 00 01 01 01  // ..Im......h.....
    A5E0: 00 00 02 05 00 98 A3 05 00 03 01 40 03 09 05 40  // ...........@...@
    A5F0: 00 00 00 FC 3E 05 40 00 00 00 D0 49 90 00 01 05  // ....>.@....I....
    A600: 63 C0 00 00 00 40 55 20 02 43 94 00 54 00 63 C0  // c....@U .C..T.c.
    A610: 01 01 64 C0 00 56 00 40 03 21 40 02 01 02 65 C0  // ..d..V.@.!@...e.
    A620: 40 01 01 66 C0 01 03 31 40 02 01 02 67 C0 40 01  // @..f...1@...g.@.
    A630: 01 E8 C0 03 3D 65 02 01 44 E7 00 3D E5 02 01 44  // ....=e..D..=...D
    A640: E7 00 51 02 56 00 40 4A E5 A0 21 80 44 EF 00 51  // ..Q.V.@J..!.D..Q
    A650: 14 2D 05 40 01 00 00 00 3E 05 40 A0 86 01 00 45  // .-.@....>.@....E
    A660: CB 00 5B 4A E5 A0 21 80 49 E7 00 5B 21 04 01 01  // ..[J..!.I..[!...
    A670: 04 00 37 00 00 3D 25 00 00 44 F5 00 4A 05 A3 36  // ..7..=%..D..J..6
    A680: 02 00 00 00 44 20 04 03 05 00 32 00 00 00 03 00  // ....D ....2.....
    A690: 40 97 36 03 05 46 00 31 00 00 04 02 04 40 03 03  // @.6..F.1.....@..
    A6A0: 41 05 3E 02 41 40 48 4C 00 33 02 40 41 03 03 41  // A.>.A@HL.3.@A..A
    A6B0: 06 33 02 41 40 43 50 00 33 02 41 40 3E 05 41 00  // .3.A@CP.3.A@>.A.
    A6C0: 00 00 00 44 70 00 33 05 00 01 00 00 00 3E 05 00  // ...Dp.3......>..
    A6D0: 00 00 00 00 44 20 04 51 14 43 22 00 03 03 40 05  // ....D .Q.C"...@.
    A6E0: 03 02 41 40 2D 05 40 00 00 00 00 03 02 46 40 04  // ..A@-.@......F@.
    A6F0: 01 00 00 04 01 01 01 04 01 02 02 04 01 03 03 04  // ................
    A700: 01 04 04 04 01 05 05 04 01 06 06 2D 05 41 40 00  // ...........-.A@.
    A710: 00 00 3E 05 41 00 20 00 00 45 B7 00 27 05 41 00  // ..>.A. ..E..'.A.
    A720: 20 00 00 03 05 46 00 31 00 00 04 02 05 41 01 02  //  ....F.1.....A..
    A730: 96 36 41 03 05 00 80 1A 06 00 03 00 41 97 36 03  // .6A.........A.6.
    A740: 00 40 96 36 3E 02 41 40 44 20 04 33 05 00 01 00  // .@.6>.A@D .3....
    A750: 00 00 3E 05 00 00 00 00 00 44 20 04 51 14 43 CE  // ..>......D .Q.C.
    A760: 00 3D 65 00 01 44 32 01 4A 05 B6 36 00 00 01 00  // .=e..D2.J..6....
    A770: 49 32 01 4A 05 B6 36 00 00 02 00 44 32 01 01 05  // I2.J..6....D2...
    A780: 00 00 61 60 01 00 01 05 01 00 00 00 00 08 01 05  // ..a`............
    A790: 00 00 61 60 01 00 3C E5 01 00 80 49 2A 01 4A 05  // ..a`..<....I*.J.
    A7A0: B6 36 00 00 02 00 49 D1 01 01 05 B8 36 00 00 02  // .6....I.....6...
    A7B0: 10 03 05 41 0A 00 00 00 33 05 41 01 00 00 00 3E  // ...A....3.A....>
    A7C0: 05 41 00 00 00 00 44 8F 01 51 0A 3C 05 B8 36 00  // .A....D..Q.<..6.
    A7D0: 00 02 00 49 4C 01 03 05 41 04 00 00 00 51 0A 33  // ...IL...A....Q.3
    A7E0: 05 41 01 00 00 00 3E 05 41 00 00 00 00 44 8F 01  // .A....>.A....D..
    A7F0: 3C 05 AA 36 AD DE AD DE 49 71 01 01 05 B8 36 00  // <..6....Iq....6.
    A800: 00 00 00 0D 05 B6 36 00 00 02 00 07 05 B6 36 FF  // ......6.......6.
    A810: FF FE FF 0D 05 01 38 00 01 00 00 51 0A 01 05 97  // ......8....Q....
    A820: 36 00 00 00 00 01 05 96 36 00 00 00 00 01 05 A3  // 6.......6.......
    A830: 36 00 00 00 00 07 05 01 38 FF FE FF FF 66 0B 03  // 6.......8....f..
    A840: 04 00 04 00 02 02 04 00 15 05 00 0A 1A 05 04 16  // ................
    A850: 02 05 00 00 00 00 00 02 02 01 00 2C 05 01 00 00  // ...........,....
    A860: 02 00 55 00 02 02 89 02 04 02 05 03 00 00 05 D0  // ..U.............
    A870: 52 35 02 05 00 00 00 00 00 02 02 01 00 2C 05 01  // R5...........,..
    A880: 00 00 00 00 55 00 02 02 89 02 04 02 05 03 00 20  // ....U.......... 
    A890: 00 D0 52 35 66 16 3E 0D 42 00 00 44 9B 02 56 00  // ..R5f.>.B..D..V.
    A8A0: 41 03 0C 41 00 00 2D 05 41 0F 00 00 00 09 05 41  // A..A..-.A......A
    A8B0: F0 FF 00 00 2D 0A 41 42 03 05 46 00 80 00 00 56  // ....-.AB..F....V
    A8C0: 08 42 04 04 00 00 00 2D 05 46 04 00 00 00 2D 05  // .B.....-.F....-.
    A8D0: 42 04 00 00 00 3E 02 42 41 45 56 02 02 05 00 00  // B....>.BAEV.....
    A8E0: 80 00 00 2C 02 00 00 02 02 01 00 2C 05 01 00 00  // ...,.......,....
    A8F0: 02 00 02 89 02 04 02 09 02 04 02 05 03 00 00 00  // ................
    A900: 40 02 0A 03 41 52 35 52 16 02 01 02 00 14 05 00  // @...AR5R........
    A910: 18 1A 05 02 08 03 02 41 00 2D 05 41 00 00 02 00  // .......A.-.A....
    A920: 2D 01 41 00 01 02 7B 36 41 03 01 40 04 2D 01 40  // -.A...{6A..@.-.@
    A930: 02 01 02 7C 36 40 01 05 68 36 00 00 00 03 01 05  // ...|6@..h6......
    A940: 70 36 FF FF 01 83 03 02 41 00 2D 05 41 00 00 04  // p6......A.-.A...
    A950: 00 2D 01 41 00 01 02 7D 36 41 03 01 40 04 2D 01  // .-.A...}6A..@.-.
    A960: 40 02 01 02 7E 36 40 01 05 69 36 00 00 00 04 01  // @...~6@..i6.....
    A970: 05 71 36 FF FF 00 84 03 02 41 00 2D 05 41 00 00  // .q6......A.-.A..
    A980: 05 00 2D 01 41 00 01 02 7F 36 41 03 01 40 04 2D  // ..-.A....6A..@.-
    A990: 01 40 02 01 02 80 36 40 01 05 6A 36 00 00 00 05  // .@....6@..j6....
    A9A0: 01 05 72 36 FF FF 00 85 03 02 41 00 2D 05 41 00  // ..r6......A.-.A.
    A9B0: 00 06 00 2D 01 41 00 01 02 81 36 41 03 01 40 04  // ...-.A....6A..@.
    A9C0: 2D 01 40 02 01 02 82 36 40 01 05 6B 36 00 00 00  // -.@....6@..k6...
    A9D0: 06 01 05 73 36 FF FF 00 86 03 05 46 00 31 00 00  // ...s6......F.1..
    A9E0: 03 02 41 00 2D 05 41 00 00 00 00 2D 01 41 00 03  // ..A.-.A....-.A..
    A9F0: 01 40 04 2D 01 40 02 04 02 00 41 04 02 01 40 04  // .@.-.@....A...@.
    AA00: 05 04 00 00 00 00 04 05 05 00 00 00 00 04 05 06  // ................
    AA10: 00 20 00 00 01 05 94 36 00 00 00 80 01 05 95 36  // . .....6.......6
    AA20: 00 20 00 00 01 02 56 36 41 01 02 57 36 40 01 05  // . ....V6A..W6@..
    AA30: 61 36 FF FF 00 80 01 05 97 36 00 00 00 00 01 05  // a6.......6......
    AA40: 96 36 00 00 00 00 03 00 41 96 36 01 05 B1 36 00  // .6......A.6...6.
    AA50: 00 00 00 5C 05 B6 36 00 FF FF FF C6 00 09 00 07  // ...\..6.........
    AA60: 05 B6 36 FF FF FD FF 03 05 41 50 C3 00 00 4A 05  // ..6......AP...J.
    AA70: A3 36 02 00 00 00 49 20 04 51 14 33 05 41 01 00  // .6....I .Q.3.A..
    AA80: 00 00 3E 05 41 00 00 00 00 49 02 04 5B 00 1E 00  // ..>.A....I..[...
    AA90: 02 01 00 04 37 00 00 66 16 03 0C 41 04 00 4C 0D  // ....7..f...A..L.
    AAA0: 41 02 00 44 1D 00 0D A5 4C 00 02 5B 15 00 03 01  // A..D....L..[....
    AAB0: 04 00 37 00 00 03 05 46 10 27 00 00 02 02 00 46  // ..7....F.'.....F
    AAC0: 5B FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // [...............
    AAD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AAE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AAF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AB90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ABF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AC60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    AC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC80: 00 00 00 00                                      // ....


WDRT
----
[000h 0000   4]                    Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004   4]                 Table Length : 00000047
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005


[024h 0036  12]             Control Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 00 [SystemMemory]
[025h 0037   1]                    Bit Width : 20
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 03 [DWord Access:32]
[028h 0040   8]                      Address : 00000000FEB00000

[030h 0048  12]               Count Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 20
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 03 [DWord Access:32]
[034h 0052   8]                      Address : 00000000FEB00004

[03Ch 0060   2]                PCI Device ID : FFFF
[03Eh 0062   2]                PCI Vendor ID : FFFF
[040h 0064   1]                      PCI Bus : 00
[041h 0065   1]                   PCI Device : 00
[042h 0066   1]                 PCI Function : 00
[043h 0067   1]                  PCI Segment : 00
[044h 0068   2]                    Max Count : 03FF
[046h 0070   1]                Counter Units : 00

Raw Table Data: Length 71 (0x47)

    0000: 57 44 52 54 47 00 00 00 01 E2 41 4C 41 53 4B 41  // WDRTG.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 00 20 00 03 00 00 B0 FE 00 00 00 00  // ..... ..........
    0030: 00 20 00 03 04 00 B0 FE 00 00 00 00 FF FF FF FF  // . ..............
    0040: 00 00 00 00 FF 03 00                             // .......


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


